(*schema.TreeNode)({
  Label: (string) "",
  Path: (string) "",
  Type: (schema.TreeNodeType) 0,
  Children: ([]*schema.TreeNode) (len=5) {
    (*schema.TreeNode)({
      Label: (string) (len=7) "version",
      Path: (string) (len=8) "/version",
      Type: (schema.TreeNodeType) 1,
      Children: ([]*schema.TreeNode) <nil>,
      SchemaElement: (*core.ScalarValue)({
        IntValue: (*int)(<nil>),
        BoolValue: (*bool)(<nil>),
        FloatValue: (*float64)(<nil>),
        StringValue: (*string)((len=10) "2021-12-18"),
        SourceMeta: (*source.Meta)({
          Line: (int) 1,
          Column: (int) 10
        })
      }),
      Range: (*source.Range)({
        Start: (*source.Meta)({
          Line: (int) 1,
          Column: (int) 10
        }),
        End: (*source.Meta)({
          Line: (int) 3,
          Column: (int) 5
        })
      })
    }),
    (*schema.TreeNode)({
      Label: (string) (len=9) "transform",
      Path: (string) (len=10) "/transform",
      Type: (schema.TreeNodeType) 0,
      Children: ([]*schema.TreeNode) (len=1) {
        (*schema.TreeNode)({
          Label: (string) (len=1) "0",
          Path: (string) (len=12) "/transform/0",
          Type: (schema.TreeNodeType) 1,
          Children: ([]*schema.TreeNode) <nil>,
          SchemaElement: (string) (len=19) "celerity-2022-01-22",
          Range: (*source.Range)({
            Start: (*source.Meta)({
              Line: (int) 3,
              Column: (int) 5
            }),
            End: (*source.Meta)({
              Line: (int) 5,
              Column: (int) 3
            })
          })
        })
      },
      SchemaElement: (*schema.TransformValueWrapper)({
        Values: ([]string) (len=1) {
          (string) (len=19) "celerity-2022-01-22"
        },
        SourceMeta: ([]*source.Meta) (len=1) {
          (*source.Meta)({
            Line: (int) 3,
            Column: (int) 5
          })
        }
      }),
      Range: (*source.Range)({
        Start: (*source.Meta)({
          Line: (int) 3,
          Column: (int) 5
        }),
        End: (*source.Meta)({
          Line: (int) 5,
          Column: (int) 3
        })
      })
    }),
    (*schema.TreeNode)({
      Label: (string) (len=9) "variables",
      Path: (string) (len=10) "/variables",
      Type: (schema.TreeNodeType) 0,
      Children: ([]*schema.TreeNode) (len=3) {
        (*schema.TreeNode)({
          Label: (string) (len=13) "dynamoDBTable",
          Path: (string) (len=14) "/dynamoDBTable",
          Type: (schema.TreeNodeType) 0,
          Children: ([]*schema.TreeNode) (len=2) {
            (*schema.TreeNode)({
              Label: (string) (len=4) "type",
              Path: (string) (len=19) "/dynamoDBTable/type",
              Type: (schema.TreeNodeType) 1,
              Children: ([]*schema.TreeNode) <nil>,
              SchemaElement: (*schema.VariableTypeWrapper)({
                Value: (schema.VariableType) (len=6) "string",
                SourceMeta: (*source.Meta)({
                  Line: (int) 6,
                  Column: (int) 11
                })
              }),
              Range: (*source.Range)({
                Start: (*source.Meta)({
                  Line: (int) 6,
                  Column: (int) 11
                }),
                End: (*source.Meta)({
                  Line: (int) 7,
                  Column: (int) 18
                })
              })
            }),
            (*schema.TreeNode)({
              Label: (string) (len=11) "description",
              Path: (string) (len=26) "/dynamoDBTable/description",
              Type: (schema.TreeNodeType) 1,
              Children: ([]*schema.TreeNode) <nil>,
              SchemaElement: (*core.ScalarValue)({
                IntValue: (*int)(<nil>),
                BoolValue: (*bool)(<nil>),
                FloatValue: (*float64)(<nil>),
                StringValue: (*string)((len=25) "The Orders DynamoDB Table"),
                SourceMeta: (*source.Meta)({
                  Line: (int) 7,
                  Column: (int) 18
                })
              }),
              Range: (*source.Range)({
                Start: (*source.Meta)({
                  Line: (int) 7,
                  Column: (int) 18
                }),
                End: (*source.Meta)({
                  Line: (int) 8,
                  Column: (int) 3
                })
              })
            })
          },
          SchemaElement: (*schema.Variable)({
            Type: (*schema.VariableTypeWrapper)({
              Value: (schema.VariableType) (len=6) "string",
              SourceMeta: (*source.Meta)({
                Line: (int) 6,
                Column: (int) 11
              })
            }),
            Description: (*core.ScalarValue)({
              IntValue: (*int)(<nil>),
              BoolValue: (*bool)(<nil>),
              FloatValue: (*float64)(<nil>),
              StringValue: (*string)((len=25) "The Orders DynamoDB Table"),
              SourceMeta: (*source.Meta)({
                Line: (int) 7,
                Column: (int) 18
              })
            }),
            Secret: (*core.ScalarValue)(<nil>),
            Default: (*core.ScalarValue)(<nil>),
            AllowedValues: ([]*core.ScalarValue) <nil>,
            SourceMeta: (*source.Meta)({
              Line: (int) 6,
              Column: (int) 5
            })
          }),
          Range: (*source.Range)({
            Start: (*source.Meta)({
              Line: (int) 5,
              Column: (int) 3
            }),
            End: (*source.Meta)({
              Line: (int) 8,
              Column: (int) 3
            })
          })
        }),
        (*schema.TreeNode)({
          Label: (string) (len=15) "ordersTopicName",
          Path: (string) (len=16) "/ordersTopicName",
          Type: (schema.TreeNodeType) 0,
          Children: ([]*schema.TreeNode) (len=2) {
            (*schema.TreeNode)({
              Label: (string) (len=4) "type",
              Path: (string) (len=21) "/ordersTopicName/type",
              Type: (schema.TreeNodeType) 1,
              Children: ([]*schema.TreeNode) <nil>,
              SchemaElement: (*schema.VariableTypeWrapper)({
                Value: (schema.VariableType) (len=6) "string",
                SourceMeta: (*source.Meta)({
                  Line: (int) 9,
                  Column: (int) 11
                })
              }),
              Range: (*source.Range)({
                Start: (*source.Meta)({
                  Line: (int) 9,
                  Column: (int) 11
                }),
                End: (*source.Meta)({
                  Line: (int) 10,
                  Column: (int) 18
                })
              })
            }),
            (*schema.TreeNode)({
              Label: (string) (len=11) "description",
              Path: (string) (len=28) "/ordersTopicName/description",
              Type: (schema.TreeNodeType) 1,
              Children: ([]*schema.TreeNode) <nil>,
              SchemaElement: (*core.ScalarValue)({
                IntValue: (*int)(<nil>),
                BoolValue: (*bool)(<nil>),
                FloatValue: (*float64)(<nil>),
                StringValue: (*string)((len=22) "The Orders Event Topic"),
                SourceMeta: (*source.Meta)({
                  Line: (int) 10,
                  Column: (int) 18
                })
              }),
              Range: (*source.Range)({
                Start: (*source.Meta)({
                  Line: (int) 10,
                  Column: (int) 18
                }),
                End: (*source.Meta)({
                  Line: (int) 11,
                  Column: (int) 3
                })
              })
            })
          },
          SchemaElement: (*schema.Variable)({
            Type: (*schema.VariableTypeWrapper)({
              Value: (schema.VariableType) (len=6) "string",
              SourceMeta: (*source.Meta)({
                Line: (int) 9,
                Column: (int) 11
              })
            }),
            Description: (*core.ScalarValue)({
              IntValue: (*int)(<nil>),
              BoolValue: (*bool)(<nil>),
              FloatValue: (*float64)(<nil>),
              StringValue: (*string)((len=22) "The Orders Event Topic"),
              SourceMeta: (*source.Meta)({
                Line: (int) 10,
                Column: (int) 18
              })
            }),
            Secret: (*core.ScalarValue)(<nil>),
            Default: (*core.ScalarValue)(<nil>),
            AllowedValues: ([]*core.ScalarValue) <nil>,
            SourceMeta: (*source.Meta)({
              Line: (int) 9,
              Column: (int) 5
            })
          }),
          Range: (*source.Range)({
            Start: (*source.Meta)({
              Line: (int) 8,
              Column: (int) 3
            }),
            End: (*source.Meta)({
              Line: (int) 11,
              Column: (int) 3
            })
          })
        }),
        (*schema.TreeNode)({
          Label: (string) (len=11) "environment",
          Path: (string) (len=12) "/environment",
          Type: (schema.TreeNodeType) 0,
          Children: ([]*schema.TreeNode) (len=1) {
            (*schema.TreeNode)({
              Label: (string) (len=4) "type",
              Path: (string) (len=17) "/environment/type",
              Type: (schema.TreeNodeType) 1,
              Children: ([]*schema.TreeNode) <nil>,
              SchemaElement: (*schema.VariableTypeWrapper)({
                Value: (schema.VariableType) (len=6) "string",
                SourceMeta: (*source.Meta)({
                  Line: (int) 12,
                  Column: (int) 11
                })
              }),
              Range: (*source.Range)({
                Start: (*source.Meta)({
                  Line: (int) 12,
                  Column: (int) 11
                }),
                End: (*source.Meta)({
                  Line: (int) 15,
                  Column: (int) 3
                })
              })
            })
          },
          SchemaElement: (*schema.Variable)({
            Type: (*schema.VariableTypeWrapper)({
              Value: (schema.VariableType) (len=6) "string",
              SourceMeta: (*source.Meta)({
                Line: (int) 12,
                Column: (int) 11
              })
            }),
            Description: (*core.ScalarValue)(<nil>),
            Secret: (*core.ScalarValue)(<nil>),
            Default: (*core.ScalarValue)(<nil>),
            AllowedValues: ([]*core.ScalarValue) <nil>,
            SourceMeta: (*source.Meta)({
              Line: (int) 12,
              Column: (int) 5
            })
          }),
          Range: (*source.Range)({
            Start: (*source.Meta)({
              Line: (int) 11,
              Column: (int) 3
            }),
            End: (*source.Meta)({
              Line: (int) 15,
              Column: (int) 3
            })
          })
        })
      },
      SchemaElement: (*schema.VariableMap)({
        Values: (map[string]*schema.Variable) (len=3) {
          (string) (len=13) "dynamoDBTable": (*schema.Variable)({
            Type: (*schema.VariableTypeWrapper)({
              Value: (schema.VariableType) (len=6) "string",
              SourceMeta: (*source.Meta)({
                Line: (int) 6,
                Column: (int) 11
              })
            }),
            Description: (*core.ScalarValue)({
              IntValue: (*int)(<nil>),
              BoolValue: (*bool)(<nil>),
              FloatValue: (*float64)(<nil>),
              StringValue: (*string)((len=25) "The Orders DynamoDB Table"),
              SourceMeta: (*source.Meta)({
                Line: (int) 7,
                Column: (int) 18
              })
            }),
            Secret: (*core.ScalarValue)(<nil>),
            Default: (*core.ScalarValue)(<nil>),
            AllowedValues: ([]*core.ScalarValue) <nil>,
            SourceMeta: (*source.Meta)({
              Line: (int) 6,
              Column: (int) 5
            })
          }),
          (string) (len=11) "environment": (*schema.Variable)({
            Type: (*schema.VariableTypeWrapper)({
              Value: (schema.VariableType) (len=6) "string",
              SourceMeta: (*source.Meta)({
                Line: (int) 12,
                Column: (int) 11
              })
            }),
            Description: (*core.ScalarValue)(<nil>),
            Secret: (*core.ScalarValue)(<nil>),
            Default: (*core.ScalarValue)(<nil>),
            AllowedValues: ([]*core.ScalarValue) <nil>,
            SourceMeta: (*source.Meta)({
              Line: (int) 12,
              Column: (int) 5
            })
          }),
          (string) (len=15) "ordersTopicName": (*schema.Variable)({
            Type: (*schema.VariableTypeWrapper)({
              Value: (schema.VariableType) (len=6) "string",
              SourceMeta: (*source.Meta)({
                Line: (int) 9,
                Column: (int) 11
              })
            }),
            Description: (*core.ScalarValue)({
              IntValue: (*int)(<nil>),
              BoolValue: (*bool)(<nil>),
              FloatValue: (*float64)(<nil>),
              StringValue: (*string)((len=22) "The Orders Event Topic"),
              SourceMeta: (*source.Meta)({
                Line: (int) 10,
                Column: (int) 18
              })
            }),
            Secret: (*core.ScalarValue)(<nil>),
            Default: (*core.ScalarValue)(<nil>),
            AllowedValues: ([]*core.ScalarValue) <nil>,
            SourceMeta: (*source.Meta)({
              Line: (int) 9,
              Column: (int) 5
            })
          })
        },
        SourceMeta: (map[string]*source.Meta) (len=3) {
          (string) (len=13) "dynamoDBTable": (*source.Meta)({
            Line: (int) 5,
            Column: (int) 3
          }),
          (string) (len=11) "environment": (*source.Meta)({
            Line: (int) 11,
            Column: (int) 3
          }),
          (string) (len=15) "ordersTopicName": (*source.Meta)({
            Line: (int) 8,
            Column: (int) 3
          })
        }
      }),
      Range: (*source.Range)({
        Start: (*source.Meta)({
          Line: (int) 5,
          Column: (int) 3
        }),
        End: (*source.Meta)({
          Line: (int) 15,
          Column: (int) 3
        })
      })
    }),
    (*schema.TreeNode)({
      Label: (string) (len=11) "datasources",
      Path: (string) (len=12) "/datasources",
      Type: (schema.TreeNodeType) 0,
      Children: ([]*schema.TreeNode) (len=1) {
        (*schema.TreeNode)({
          Label: (string) (len=7) "network",
          Path: (string) (len=8) "/network",
          Type: (schema.TreeNodeType) 0,
          Children: ([]*schema.TreeNode) (len=4) {
            (*schema.TreeNode)({
              Label: (string) (len=4) "type",
              Path: (string) (len=13) "/network/type",
              Type: (schema.TreeNodeType) 1,
              Children: ([]*schema.TreeNode) <nil>,
              SchemaElement: (*schema.DataSourceTypeWrapper)({
                Value: (string) (len=7) "aws/vpc",
                SourceMeta: (*source.Meta)({
                  Line: (int) 16,
                  Column: (int) 11
                })
              }),
              Range: (*source.Range)({
                Start: (*source.Meta)({
                  Line: (int) 16,
                  Column: (int) 11
                }),
                End: (*source.Meta)({
                  Line: (int) 18,
                  Column: (int) 7
                })
              })
            }),
            (*schema.TreeNode)({
              Label: (string) (len=8) "metadata",
              Path: (string) (len=17) "/network/metadata",
              Type: (schema.TreeNodeType) 0,
              Children: ([]*schema.TreeNode) (len=1) {
                (*schema.TreeNode)({
                  Label: (string) (len=11) "displayName",
                  Path: (string) (len=29) "/network/metadata/displayName",
                  Type: (schema.TreeNodeType) 0,
                  Children: ([]*schema.TreeNode) (len=1) {
                    (*schema.TreeNode)({
                      Label: (string) (len=6) "string",
                      Path: (string) (len=36) "/network/metadata/displayName/string",
                      Type: (schema.TreeNodeType) 1,
                      Children: ([]*schema.TreeNode) <nil>,
                      SchemaElement: (string) (len=14) "Network source",
                      Range: (*source.Range)({
                        Start: (*source.Meta)({
                          Line: (int) 18,
                          Column: (int) 20
                        }),
                        End: (*source.Meta)({
                          Line: (int) 20,
                          Column: (int) 7
                        })
                      })
                    })
                  },
                  SchemaElement: (*substitutions.StringOrSubstitutions)({
                    Values: ([]*substitutions.StringOrSubstitution) (len=1) {
                      (*substitutions.StringOrSubstitution)({
                        StringValue: (*string)((len=14) "Network source"),
                        SubstitutionValue: (*substitutions.Substitution)(<nil>),
                        SourceMeta: (*source.Meta)({
                          Line: (int) 18,
                          Column: (int) 20
                        })
                      })
                    },
                    SourceMeta: (*source.Meta)({
                      Line: (int) 18,
                      Column: (int) 20
                    })
                  }),
                  Range: (*source.Range)({
                    Start: (*source.Meta)({
                      Line: (int) 18,
                      Column: (int) 20
                    }),
                    End: (*source.Meta)({
                      Line: (int) 20,
                      Column: (int) 7
                    })
                  })
                })
              },
              SchemaElement: (*schema.DataSourceMetadata)({
                DisplayName: (*substitutions.StringOrSubstitutions)({
                  Values: ([]*substitutions.StringOrSubstitution) (len=1) {
                    (*substitutions.StringOrSubstitution)({
                      StringValue: (*string)((len=14) "Network source"),
                      SubstitutionValue: (*substitutions.Substitution)(<nil>),
                      SourceMeta: (*source.Meta)({
                        Line: (int) 18,
                        Column: (int) 20
                      })
                    })
                  },
                  SourceMeta: (*source.Meta)({
                    Line: (int) 18,
                    Column: (int) 20
                  })
                }),
                Annotations: (*schema.StringOrSubstitutionsMap)(<nil>),
                Custom: (*core.MappingNode)(<nil>),
                SourceMeta: (*source.Meta)({
                  Line: (int) 18,
                  Column: (int) 7
                })
              }),
              Range: (*source.Range)({
                Start: (*source.Meta)({
                  Line: (int) 18,
                  Column: (int) 7
                }),
                End: (*source.Meta)({
                  Line: (int) 20,
                  Column: (int) 7
                })
              })
            }),
            (*schema.TreeNode)({
              Label: (string) (len=6) "filter",
              Path: (string) (len=15) "/network/filter",
              Type: (schema.TreeNodeType) 0,
              Children: ([]*schema.TreeNode) (len=3) {
                (*schema.TreeNode)({
                  Label: (string) (len=5) "field",
                  Path: (string) (len=21) "/network/filter/field",
                  Type: (schema.TreeNodeType) 1,
                  Children: ([]*schema.TreeNode) <nil>,
                  SchemaElement: (*core.ScalarValue)({
                    IntValue: (*int)(<nil>),
                    BoolValue: (*bool)(<nil>),
                    FloatValue: (*float64)(<nil>),
                    StringValue: (*string)((len=4) "tags"),
                    SourceMeta: (*source.Meta)({
                      Line: (int) 20,
                      Column: (int) 14
                    })
                  }),
                  Range: (*source.Range)({
                    Start: (*source.Meta)({
                      Line: (int) 20,
                      Column: (int) 14
                    }),
                    End: (*source.Meta)({
                      Line: (int) 21,
                      Column: (int) 17
                    })
                  })
                }),
                (*schema.TreeNode)({
                  Label: (string) (len=8) "operator",
                  Path: (string) (len=24) "/network/filter/operator",
                  Type: (schema.TreeNodeType) 0,
                  Children: ([]*schema.TreeNode) (len=1) {
                    (*schema.TreeNode)({
                      Label: (string) (len=7) "has key",
                      Path: (string) (len=32) "/network/filter/operator/has key",
                      Type: (schema.TreeNodeType) 1,
                      Children: ([]*schema.TreeNode) <nil>,
                      SchemaElement: (schema.DataSourceFilterOperator) (len=7) "has key",
                      Range: (*source.Range)({
                        Start: (*source.Meta)({
                          Line: (int) 21,
                          Column: (int) 17
                        }),
                        End: (*source.Meta)({
                          Line: (int) 22,
                          Column: (int) 15
                        })
                      })
                    })
                  },
                  SchemaElement: (*schema.DataSourceFilterOperatorWrapper)({
                    Value: (schema.DataSourceFilterOperator) (len=7) "has key",
                    SourceMeta: (*source.Meta)({
                      Line: (int) 21,
                      Column: (int) 17
                    })
                  }),
                  Range: (*source.Range)({
                    Start: (*source.Meta)({
                      Line: (int) 21,
                      Column: (int) 17
                    }),
                    End: (*source.Meta)({
                      Line: (int) 22,
                      Column: (int) 15
                    })
                  })
                }),
                (*schema.TreeNode)({
                  Label: (string) (len=6) "search",
                  Path: (string) (len=22) "/network/filter/search",
                  Type: (schema.TreeNodeType) 0,
                  Children: ([]*schema.TreeNode) (len=1) {
                    (*schema.TreeNode)({
                      Label: (string) (len=1) "0",
                      Path: (string) (len=24) "/network/filter/search/0",
                      Type: (schema.TreeNodeType) 0,
                      Children: ([]*schema.TreeNode) (len=1) {
                        (*schema.TreeNode)({
                          Label: (string) (len=11) "environment",
                          Path: (string) (len=43) "/network/filter/search/0/varRef/environment",
                          Type: (schema.TreeNodeType) 1,
                          Children: ([]*schema.TreeNode) <nil>,
                          SchemaElement: (*substitutions.SubstitutionVariable)({
                            VariableName: (string) (len=11) "environment",
                            SourceMeta: (*source.Meta)({
                              Line: (int) 22,
                              Column: (int) 17
                            })
                          }),
                          Range: (*source.Range)({
                            Start: (*source.Meta)({
                              Line: (int) 22,
                              Column: (int) 17
                            }),
                            End: (*source.Meta)({
                              Line: (int) 24,
                              Column: (int) 7
                            })
                          })
                        })
                      },
                      SchemaElement: (*substitutions.StringOrSubstitutions)({
                        Values: ([]*substitutions.StringOrSubstitution) (len=1) {
                          (*substitutions.StringOrSubstitution)({
                            StringValue: (*string)(<nil>),
                            SubstitutionValue: (*substitutions.Substitution)({
                              Function: (*substitutions.SubstitutionFunctionExpr)(<nil>),
                              Variable: (*substitutions.SubstitutionVariable)({
                                VariableName: (string) (len=11) "environment",
                                SourceMeta: (*source.Meta)({
                                  Line: (int) 22,
                                  Column: (int) 17
                                })
                              }),
                              ValueReference: (*substitutions.SubstitutionValueReference)(<nil>),
                              ElemReference: (*substitutions.SubstitutionElemReference)(<nil>),
                              ElemIndexReference: (*substitutions.SubstitutionElemIndexReference)(<nil>),
                              DataSourceProperty: (*substitutions.SubstitutionDataSourceProperty)(<nil>),
                              ResourceProperty: (*substitutions.SubstitutionResourceProperty)(<nil>),
                              Child: (*substitutions.SubstitutionChild)(<nil>),
                              StringValue: (*string)(<nil>),
                              IntValue: (*int64)(<nil>),
                              FloatValue: (*float64)(<nil>),
                              BoolValue: (*bool)(<nil>),
                              SourceMeta: (*source.Meta)({
                                Line: (int) 22,
                                Column: (int) 17
                              })
                            }),
                            SourceMeta: (*source.Meta)({
                              Line: (int) 22,
                              Column: (int) 15
                            })
                          })
                        },
                        SourceMeta: (*source.Meta)({
                          Line: (int) 22,
                          Column: (int) 15
                        })
                      }),
                      Range: (*source.Range)({
                        Start: (*source.Meta)({
                          Line: (int) 22,
                          Column: (int) 15
                        }),
                        End: (*source.Meta)({
                          Line: (int) 24,
                          Column: (int) 7
                        })
                      })
                    })
                  },
                  SchemaElement: (*schema.DataSourceFilterSearch)({
                    Values: ([]*substitutions.StringOrSubstitutions) (len=1) {
                      (*substitutions.StringOrSubstitutions)({
                        Values: ([]*substitutions.StringOrSubstitution) (len=1) {
                          (*substitutions.StringOrSubstitution)({
                            StringValue: (*string)(<nil>),
                            SubstitutionValue: (*substitutions.Substitution)({
                              Function: (*substitutions.SubstitutionFunctionExpr)(<nil>),
                              Variable: (*substitutions.SubstitutionVariable)({
                                VariableName: (string) (len=11) "environment",
                                SourceMeta: (*source.Meta)({
                                  Line: (int) 22,
                                  Column: (int) 17
                                })
                              }),
                              ValueReference: (*substitutions.SubstitutionValueReference)(<nil>),
                              ElemReference: (*substitutions.SubstitutionElemReference)(<nil>),
                              ElemIndexReference: (*substitutions.SubstitutionElemIndexReference)(<nil>),
                              DataSourceProperty: (*substitutions.SubstitutionDataSourceProperty)(<nil>),
                              ResourceProperty: (*substitutions.SubstitutionResourceProperty)(<nil>),
                              Child: (*substitutions.SubstitutionChild)(<nil>),
                              StringValue: (*string)(<nil>),
                              IntValue: (*int64)(<nil>),
                              FloatValue: (*float64)(<nil>),
                              BoolValue: (*bool)(<nil>),
                              SourceMeta: (*source.Meta)({
                                Line: (int) 22,
                                Column: (int) 17
                              })
                            }),
                            SourceMeta: (*source.Meta)({
                              Line: (int) 22,
                              Column: (int) 15
                            })
                          })
                        },
                        SourceMeta: (*source.Meta)({
                          Line: (int) 22,
                          Column: (int) 15
                        })
                      })
                    },
                    SourceMeta: (*source.Meta)({
                      Line: (int) 22,
                      Column: (int) 15
                    })
                  }),
                  Range: (*source.Range)({
                    Start: (*source.Meta)({
                      Line: (int) 22,
                      Column: (int) 15
                    }),
                    End: (*source.Meta)({
                      Line: (int) 24,
                      Column: (int) 7
                    })
                  })
                })
              },
              SchemaElement: (*schema.DataSourceFilter)({
                Field: (*core.ScalarValue)({
                  IntValue: (*int)(<nil>),
                  BoolValue: (*bool)(<nil>),
                  FloatValue: (*float64)(<nil>),
                  StringValue: (*string)((len=4) "tags"),
                  SourceMeta: (*source.Meta)({
                    Line: (int) 20,
                    Column: (int) 14
                  })
                }),
                Operator: (*schema.DataSourceFilterOperatorWrapper)({
                  Value: (schema.DataSourceFilterOperator) (len=7) "has key",
                  SourceMeta: (*source.Meta)({
                    Line: (int) 21,
                    Column: (int) 17
                  })
                }),
                Search: (*schema.DataSourceFilterSearch)({
                  Values: ([]*substitutions.StringOrSubstitutions) (len=1) {
                    (*substitutions.StringOrSubstitutions)({
                      Values: ([]*substitutions.StringOrSubstitution) (len=1) {
                        (*substitutions.StringOrSubstitution)({
                          StringValue: (*string)(<nil>),
                          SubstitutionValue: (*substitutions.Substitution)({
                            Function: (*substitutions.SubstitutionFunctionExpr)(<nil>),
                            Variable: (*substitutions.SubstitutionVariable)({
                              VariableName: (string) (len=11) "environment",
                              SourceMeta: (*source.Meta)({
                                Line: (int) 22,
                                Column: (int) 17
                              })
                            }),
                            ValueReference: (*substitutions.SubstitutionValueReference)(<nil>),
                            ElemReference: (*substitutions.SubstitutionElemReference)(<nil>),
                            ElemIndexReference: (*substitutions.SubstitutionElemIndexReference)(<nil>),
                            DataSourceProperty: (*substitutions.SubstitutionDataSourceProperty)(<nil>),
                            ResourceProperty: (*substitutions.SubstitutionResourceProperty)(<nil>),
                            Child: (*substitutions.SubstitutionChild)(<nil>),
                            StringValue: (*string)(<nil>),
                            IntValue: (*int64)(<nil>),
                            FloatValue: (*float64)(<nil>),
                            BoolValue: (*bool)(<nil>),
                            SourceMeta: (*source.Meta)({
                              Line: (int) 22,
                              Column: (int) 17
                            })
                          }),
                          SourceMeta: (*source.Meta)({
                            Line: (int) 22,
                            Column: (int) 15
                          })
                        })
                      },
                      SourceMeta: (*source.Meta)({
                        Line: (int) 22,
                        Column: (int) 15
                      })
                    })
                  },
                  SourceMeta: (*source.Meta)({
                    Line: (int) 22,
                    Column: (int) 15
                  })
                }),
                SourceMeta: (*source.Meta)({
                  Line: (int) 20,
                  Column: (int) 7
                })
              }),
              Range: (*source.Range)({
                Start: (*source.Meta)({
                  Line: (int) 20,
                  Column: (int) 7
                }),
                End: (*source.Meta)({
                  Line: (int) 24,
                  Column: (int) 7
                })
              })
            }),
            (*schema.TreeNode)({
              Label: (string) (len=7) "exports",
              Path: (string) (len=16) "/network/exports",
              Type: (schema.TreeNodeType) 0,
              Children: ([]*schema.TreeNode) (len=3) {
                (*schema.TreeNode)({
                  Label: (string) (len=7) "subnets",
                  Path: (string) (len=16) "/network/subnets",
                  Type: (schema.TreeNodeType) 0,
                  Children: ([]*schema.TreeNode) (len=1) {
                    (*schema.TreeNode)({
                      Label: (string) (len=4) "type",
                      Path: (string) (len=21) "/network/subnets/type",
                      Type: (schema.TreeNodeType) 1,
                      Children: ([]*schema.TreeNode) <nil>,
                      SchemaElement: (*schema.DataSourceFieldTypeWrapper)({
                        Value: (schema.DataSourceFieldType) (len=5) "array",
                        SourceMeta: (*source.Meta)({
                          Line: (int) 25,
                          Column: (int) 15
                        })
                      }),
                      Range: (*source.Range)({
                        Start: (*source.Meta)({
                          Line: (int) 25,
                          Column: (int) 15
                        }),
                        End: (*source.Meta)({
                          Line: (int) 26,
                          Column: (int) 7
                        })
                      })
                    })
                  },
                  SchemaElement: (*schema.DataSourceFieldExport)({
                    Type: (*schema.DataSourceFieldTypeWrapper)({
                      Value: (schema.DataSourceFieldType) (len=5) "array",
                      SourceMeta: (*source.Meta)({
                        Line: (int) 25,
                        Column: (int) 15
                      })
                    }),
                    AliasFor: (*core.ScalarValue)(<nil>),
                    Description: (*substitutions.StringOrSubstitutions)(<nil>),
                    SourceMeta: (*source.Meta)({
                      Line: (int) 25,
                      Column: (int) 9
                    })
                  }),
                  Range: (*source.Range)({
                    Start: (*source.Meta)({
                      Line: (int) 24,
                      Column: (int) 7
                    }),
                    End: (*source.Meta)({
                      Line: (int) 26,
                      Column: (int) 7
                    })
                  })
                }),
                (*schema.TreeNode)({
                  Label: (string) (len=14) "securityGroups",
                  Path: (string) (len=23) "/network/securityGroups",
                  Type: (schema.TreeNodeType) 0,
                  Children: ([]*schema.TreeNode) (len=1) {
                    (*schema.TreeNode)({
                      Label: (string) (len=4) "type",
                      Path: (string) (len=28) "/network/securityGroups/type",
                      Type: (schema.TreeNodeType) 1,
                      Children: ([]*schema.TreeNode) <nil>,
                      SchemaElement: (*schema.DataSourceFieldTypeWrapper)({
                        Value: (schema.DataSourceFieldType) (len=5) "array",
                        SourceMeta: (*source.Meta)({
                          Line: (int) 27,
                          Column: (int) 15
                        })
                      }),
                      Range: (*source.Range)({
                        Start: (*source.Meta)({
                          Line: (int) 27,
                          Column: (int) 15
                        }),
                        End: (*source.Meta)({
                          Line: (int) 28,
                          Column: (int) 7
                        })
                      })
                    })
                  },
                  SchemaElement: (*schema.DataSourceFieldExport)({
                    Type: (*schema.DataSourceFieldTypeWrapper)({
                      Value: (schema.DataSourceFieldType) (len=5) "array",
                      SourceMeta: (*source.Meta)({
                        Line: (int) 27,
                        Column: (int) 15
                      })
                    }),
                    AliasFor: (*core.ScalarValue)(<nil>),
                    Description: (*substitutions.StringOrSubstitutions)(<nil>),
                    SourceMeta: (*source.Meta)({
                      Line: (int) 27,
                      Column: (int) 9
                    })
                  }),
                  Range: (*source.Range)({
                    Start: (*source.Meta)({
                      Line: (int) 26,
                      Column: (int) 7
                    }),
                    End: (*source.Meta)({
                      Line: (int) 28,
                      Column: (int) 7
                    })
                  })
                }),
                (*schema.TreeNode)({
                  Label: (string) (len=3) "vpc",
                  Path: (string) (len=12) "/network/vpc",
                  Type: (schema.TreeNodeType) 0,
                  Children: ([]*schema.TreeNode) (len=1) {
                    (*schema.TreeNode)({
                      Label: (string) (len=4) "type",
                      Path: (string) (len=17) "/network/vpc/type",
                      Type: (schema.TreeNodeType) 1,
                      Children: ([]*schema.TreeNode) <nil>,
                      SchemaElement: (*schema.DataSourceFieldTypeWrapper)({
                        Value: (schema.DataSourceFieldType) (len=6) "string",
                        SourceMeta: (*source.Meta)({
                          Line: (int) 29,
                          Column: (int) 15
                        })
                      }),
                      Range: (*source.Range)({
                        Start: (*source.Meta)({
                          Line: (int) 29,
                          Column: (int) 15
                        }),
                        End: (*source.Meta)({
                          Line: (int) 34,
                          Column: (int) 3
                        })
                      })
                    })
                  },
                  SchemaElement: (*schema.DataSourceFieldExport)({
                    Type: (*schema.DataSourceFieldTypeWrapper)({
                      Value: (schema.DataSourceFieldType) (len=6) "string",
                      SourceMeta: (*source.Meta)({
                        Line: (int) 29,
                        Column: (int) 15
                      })
                    }),
                    AliasFor: (*core.ScalarValue)(<nil>),
                    Description: (*substitutions.StringOrSubstitutions)(<nil>),
                    SourceMeta: (*source.Meta)({
                      Line: (int) 29,
                      Column: (int) 9
                    })
                  }),
                  Range: (*source.Range)({
                    Start: (*source.Meta)({
                      Line: (int) 28,
                      Column: (int) 7
                    }),
                    End: (*source.Meta)({
                      Line: (int) 34,
                      Column: (int) 3
                    })
                  })
                })
              },
              SchemaElement: (*schema.DataSourceFieldExportMap)({
                Values: (map[string]*schema.DataSourceFieldExport) (len=3) {
                  (string) (len=14) "securityGroups": (*schema.DataSourceFieldExport)({
                    Type: (*schema.DataSourceFieldTypeWrapper)({
                      Value: (schema.DataSourceFieldType) (len=5) "array",
                      SourceMeta: (*source.Meta)({
                        Line: (int) 27,
                        Column: (int) 15
                      })
                    }),
                    AliasFor: (*core.ScalarValue)(<nil>),
                    Description: (*substitutions.StringOrSubstitutions)(<nil>),
                    SourceMeta: (*source.Meta)({
                      Line: (int) 27,
                      Column: (int) 9
                    })
                  }),
                  (string) (len=7) "subnets": (*schema.DataSourceFieldExport)({
                    Type: (*schema.DataSourceFieldTypeWrapper)({
                      Value: (schema.DataSourceFieldType) (len=5) "array",
                      SourceMeta: (*source.Meta)({
                        Line: (int) 25,
                        Column: (int) 15
                      })
                    }),
                    AliasFor: (*core.ScalarValue)(<nil>),
                    Description: (*substitutions.StringOrSubstitutions)(<nil>),
                    SourceMeta: (*source.Meta)({
                      Line: (int) 25,
                      Column: (int) 9
                    })
                  }),
                  (string) (len=3) "vpc": (*schema.DataSourceFieldExport)({
                    Type: (*schema.DataSourceFieldTypeWrapper)({
                      Value: (schema.DataSourceFieldType) (len=6) "string",
                      SourceMeta: (*source.Meta)({
                        Line: (int) 29,
                        Column: (int) 15
                      })
                    }),
                    AliasFor: (*core.ScalarValue)(<nil>),
                    Description: (*substitutions.StringOrSubstitutions)(<nil>),
                    SourceMeta: (*source.Meta)({
                      Line: (int) 29,
                      Column: (int) 9
                    })
                  })
                },
                SourceMeta: (map[string]*source.Meta) (len=3) {
                  (string) (len=14) "securityGroups": (*source.Meta)({
                    Line: (int) 26,
                    Column: (int) 7
                  }),
                  (string) (len=7) "subnets": (*source.Meta)({
                    Line: (int) 24,
                    Column: (int) 7
                  }),
                  (string) (len=3) "vpc": (*source.Meta)({
                    Line: (int) 28,
                    Column: (int) 7
                  })
                }
              }),
              Range: (*source.Range)({
                Start: (*source.Meta)({
                  Line: (int) 24,
                  Column: (int) 7
                }),
                End: (*source.Meta)({
                  Line: (int) 34,
                  Column: (int) 3
                })
              })
            })
          },
          SchemaElement: (*schema.DataSource)({
            Type: (*schema.DataSourceTypeWrapper)({
              Value: (string) (len=7) "aws/vpc",
              SourceMeta: (*source.Meta)({
                Line: (int) 16,
                Column: (int) 11
              })
            }),
            DataSourceMetadata: (*schema.DataSourceMetadata)({
              DisplayName: (*substitutions.StringOrSubstitutions)({
                Values: ([]*substitutions.StringOrSubstitution) (len=1) {
                  (*substitutions.StringOrSubstitution)({
                    StringValue: (*string)((len=14) "Network source"),
                    SubstitutionValue: (*substitutions.Substitution)(<nil>),
                    SourceMeta: (*source.Meta)({
                      Line: (int) 18,
                      Column: (int) 20
                    })
                  })
                },
                SourceMeta: (*source.Meta)({
                  Line: (int) 18,
                  Column: (int) 20
                })
              }),
              Annotations: (*schema.StringOrSubstitutionsMap)(<nil>),
              Custom: (*core.MappingNode)(<nil>),
              SourceMeta: (*source.Meta)({
                Line: (int) 18,
                Column: (int) 7
              })
            }),
            Filter: (*schema.DataSourceFilter)({
              Field: (*core.ScalarValue)({
                IntValue: (*int)(<nil>),
                BoolValue: (*bool)(<nil>),
                FloatValue: (*float64)(<nil>),
                StringValue: (*string)((len=4) "tags"),
                SourceMeta: (*source.Meta)({
                  Line: (int) 20,
                  Column: (int) 14
                })
              }),
              Operator: (*schema.DataSourceFilterOperatorWrapper)({
                Value: (schema.DataSourceFilterOperator) (len=7) "has key",
                SourceMeta: (*source.Meta)({
                  Line: (int) 21,
                  Column: (int) 17
                })
              }),
              Search: (*schema.DataSourceFilterSearch)({
                Values: ([]*substitutions.StringOrSubstitutions) (len=1) {
                  (*substitutions.StringOrSubstitutions)({
                    Values: ([]*substitutions.StringOrSubstitution) (len=1) {
                      (*substitutions.StringOrSubstitution)({
                        StringValue: (*string)(<nil>),
                        SubstitutionValue: (*substitutions.Substitution)({
                          Function: (*substitutions.SubstitutionFunctionExpr)(<nil>),
                          Variable: (*substitutions.SubstitutionVariable)({
                            VariableName: (string) (len=11) "environment",
                            SourceMeta: (*source.Meta)({
                              Line: (int) 22,
                              Column: (int) 17
                            })
                          }),
                          ValueReference: (*substitutions.SubstitutionValueReference)(<nil>),
                          ElemReference: (*substitutions.SubstitutionElemReference)(<nil>),
                          ElemIndexReference: (*substitutions.SubstitutionElemIndexReference)(<nil>),
                          DataSourceProperty: (*substitutions.SubstitutionDataSourceProperty)(<nil>),
                          ResourceProperty: (*substitutions.SubstitutionResourceProperty)(<nil>),
                          Child: (*substitutions.SubstitutionChild)(<nil>),
                          StringValue: (*string)(<nil>),
                          IntValue: (*int64)(<nil>),
                          FloatValue: (*float64)(<nil>),
                          BoolValue: (*bool)(<nil>),
                          SourceMeta: (*source.Meta)({
                            Line: (int) 22,
                            Column: (int) 17
                          })
                        }),
                        SourceMeta: (*source.Meta)({
                          Line: (int) 22,
                          Column: (int) 15
                        })
                      })
                    },
                    SourceMeta: (*source.Meta)({
                      Line: (int) 22,
                      Column: (int) 15
                    })
                  })
                },
                SourceMeta: (*source.Meta)({
                  Line: (int) 22,
                  Column: (int) 15
                })
              }),
              SourceMeta: (*source.Meta)({
                Line: (int) 20,
                Column: (int) 7
              })
            }),
            Exports: (*schema.DataSourceFieldExportMap)({
              Values: (map[string]*schema.DataSourceFieldExport) (len=3) {
                (string) (len=14) "securityGroups": (*schema.DataSourceFieldExport)({
                  Type: (*schema.DataSourceFieldTypeWrapper)({
                    Value: (schema.DataSourceFieldType) (len=5) "array",
                    SourceMeta: (*source.Meta)({
                      Line: (int) 27,
                      Column: (int) 15
                    })
                  }),
                  AliasFor: (*core.ScalarValue)(<nil>),
                  Description: (*substitutions.StringOrSubstitutions)(<nil>),
                  SourceMeta: (*source.Meta)({
                    Line: (int) 27,
                    Column: (int) 9
                  })
                }),
                (string) (len=7) "subnets": (*schema.DataSourceFieldExport)({
                  Type: (*schema.DataSourceFieldTypeWrapper)({
                    Value: (schema.DataSourceFieldType) (len=5) "array",
                    SourceMeta: (*source.Meta)({
                      Line: (int) 25,
                      Column: (int) 15
                    })
                  }),
                  AliasFor: (*core.ScalarValue)(<nil>),
                  Description: (*substitutions.StringOrSubstitutions)(<nil>),
                  SourceMeta: (*source.Meta)({
                    Line: (int) 25,
                    Column: (int) 9
                  })
                }),
                (string) (len=3) "vpc": (*schema.DataSourceFieldExport)({
                  Type: (*schema.DataSourceFieldTypeWrapper)({
                    Value: (schema.DataSourceFieldType) (len=6) "string",
                    SourceMeta: (*source.Meta)({
                      Line: (int) 29,
                      Column: (int) 15
                    })
                  }),
                  AliasFor: (*core.ScalarValue)(<nil>),
                  Description: (*substitutions.StringOrSubstitutions)(<nil>),
                  SourceMeta: (*source.Meta)({
                    Line: (int) 29,
                    Column: (int) 9
                  })
                })
              },
              SourceMeta: (map[string]*source.Meta) (len=3) {
                (string) (len=14) "securityGroups": (*source.Meta)({
                  Line: (int) 26,
                  Column: (int) 7
                }),
                (string) (len=7) "subnets": (*source.Meta)({
                  Line: (int) 24,
                  Column: (int) 7
                }),
                (string) (len=3) "vpc": (*source.Meta)({
                  Line: (int) 28,
                  Column: (int) 7
                })
              }
            }),
            Description: (*substitutions.StringOrSubstitutions)(<nil>),
            SourceMeta: (*source.Meta)({
              Line: (int) 16,
              Column: (int) 5
            })
          }),
          Range: (*source.Range)({
            Start: (*source.Meta)({
              Line: (int) 15,
              Column: (int) 3
            }),
            End: (*source.Meta)({
              Line: (int) 34,
              Column: (int) 3
            })
          })
        })
      },
      SchemaElement: (*schema.DataSourceMap)({
        Values: (map[string]*schema.DataSource) (len=1) {
          (string) (len=7) "network": (*schema.DataSource)({
            Type: (*schema.DataSourceTypeWrapper)({
              Value: (string) (len=7) "aws/vpc",
              SourceMeta: (*source.Meta)({
                Line: (int) 16,
                Column: (int) 11
              })
            }),
            DataSourceMetadata: (*schema.DataSourceMetadata)({
              DisplayName: (*substitutions.StringOrSubstitutions)({
                Values: ([]*substitutions.StringOrSubstitution) (len=1) {
                  (*substitutions.StringOrSubstitution)({
                    StringValue: (*string)((len=14) "Network source"),
                    SubstitutionValue: (*substitutions.Substitution)(<nil>),
                    SourceMeta: (*source.Meta)({
                      Line: (int) 18,
                      Column: (int) 20
                    })
                  })
                },
                SourceMeta: (*source.Meta)({
                  Line: (int) 18,
                  Column: (int) 20
                })
              }),
              Annotations: (*schema.StringOrSubstitutionsMap)(<nil>),
              Custom: (*core.MappingNode)(<nil>),
              SourceMeta: (*source.Meta)({
                Line: (int) 18,
                Column: (int) 7
              })
            }),
            Filter: (*schema.DataSourceFilter)({
              Field: (*core.ScalarValue)({
                IntValue: (*int)(<nil>),
                BoolValue: (*bool)(<nil>),
                FloatValue: (*float64)(<nil>),
                StringValue: (*string)((len=4) "tags"),
                SourceMeta: (*source.Meta)({
                  Line: (int) 20,
                  Column: (int) 14
                })
              }),
              Operator: (*schema.DataSourceFilterOperatorWrapper)({
                Value: (schema.DataSourceFilterOperator) (len=7) "has key",
                SourceMeta: (*source.Meta)({
                  Line: (int) 21,
                  Column: (int) 17
                })
              }),
              Search: (*schema.DataSourceFilterSearch)({
                Values: ([]*substitutions.StringOrSubstitutions) (len=1) {
                  (*substitutions.StringOrSubstitutions)({
                    Values: ([]*substitutions.StringOrSubstitution) (len=1) {
                      (*substitutions.StringOrSubstitution)({
                        StringValue: (*string)(<nil>),
                        SubstitutionValue: (*substitutions.Substitution)({
                          Function: (*substitutions.SubstitutionFunctionExpr)(<nil>),
                          Variable: (*substitutions.SubstitutionVariable)({
                            VariableName: (string) (len=11) "environment",
                            SourceMeta: (*source.Meta)({
                              Line: (int) 22,
                              Column: (int) 17
                            })
                          }),
                          ValueReference: (*substitutions.SubstitutionValueReference)(<nil>),
                          ElemReference: (*substitutions.SubstitutionElemReference)(<nil>),
                          ElemIndexReference: (*substitutions.SubstitutionElemIndexReference)(<nil>),
                          DataSourceProperty: (*substitutions.SubstitutionDataSourceProperty)(<nil>),
                          ResourceProperty: (*substitutions.SubstitutionResourceProperty)(<nil>),
                          Child: (*substitutions.SubstitutionChild)(<nil>),
                          StringValue: (*string)(<nil>),
                          IntValue: (*int64)(<nil>),
                          FloatValue: (*float64)(<nil>),
                          BoolValue: (*bool)(<nil>),
                          SourceMeta: (*source.Meta)({
                            Line: (int) 22,
                            Column: (int) 17
                          })
                        }),
                        SourceMeta: (*source.Meta)({
                          Line: (int) 22,
                          Column: (int) 15
                        })
                      })
                    },
                    SourceMeta: (*source.Meta)({
                      Line: (int) 22,
                      Column: (int) 15
                    })
                  })
                },
                SourceMeta: (*source.Meta)({
                  Line: (int) 22,
                  Column: (int) 15
                })
              }),
              SourceMeta: (*source.Meta)({
                Line: (int) 20,
                Column: (int) 7
              })
            }),
            Exports: (*schema.DataSourceFieldExportMap)({
              Values: (map[string]*schema.DataSourceFieldExport) (len=3) {
                (string) (len=14) "securityGroups": (*schema.DataSourceFieldExport)({
                  Type: (*schema.DataSourceFieldTypeWrapper)({
                    Value: (schema.DataSourceFieldType) (len=5) "array",
                    SourceMeta: (*source.Meta)({
                      Line: (int) 27,
                      Column: (int) 15
                    })
                  }),
                  AliasFor: (*core.ScalarValue)(<nil>),
                  Description: (*substitutions.StringOrSubstitutions)(<nil>),
                  SourceMeta: (*source.Meta)({
                    Line: (int) 27,
                    Column: (int) 9
                  })
                }),
                (string) (len=7) "subnets": (*schema.DataSourceFieldExport)({
                  Type: (*schema.DataSourceFieldTypeWrapper)({
                    Value: (schema.DataSourceFieldType) (len=5) "array",
                    SourceMeta: (*source.Meta)({
                      Line: (int) 25,
                      Column: (int) 15
                    })
                  }),
                  AliasFor: (*core.ScalarValue)(<nil>),
                  Description: (*substitutions.StringOrSubstitutions)(<nil>),
                  SourceMeta: (*source.Meta)({
                    Line: (int) 25,
                    Column: (int) 9
                  })
                }),
                (string) (len=3) "vpc": (*schema.DataSourceFieldExport)({
                  Type: (*schema.DataSourceFieldTypeWrapper)({
                    Value: (schema.DataSourceFieldType) (len=6) "string",
                    SourceMeta: (*source.Meta)({
                      Line: (int) 29,
                      Column: (int) 15
                    })
                  }),
                  AliasFor: (*core.ScalarValue)(<nil>),
                  Description: (*substitutions.StringOrSubstitutions)(<nil>),
                  SourceMeta: (*source.Meta)({
                    Line: (int) 29,
                    Column: (int) 9
                  })
                })
              },
              SourceMeta: (map[string]*source.Meta) (len=3) {
                (string) (len=14) "securityGroups": (*source.Meta)({
                  Line: (int) 26,
                  Column: (int) 7
                }),
                (string) (len=7) "subnets": (*source.Meta)({
                  Line: (int) 24,
                  Column: (int) 7
                }),
                (string) (len=3) "vpc": (*source.Meta)({
                  Line: (int) 28,
                  Column: (int) 7
                })
              }
            }),
            Description: (*substitutions.StringOrSubstitutions)(<nil>),
            SourceMeta: (*source.Meta)({
              Line: (int) 16,
              Column: (int) 5
            })
          })
        },
        SourceMeta: (map[string]*source.Meta) (len=1) {
          (string) (len=7) "network": (*source.Meta)({
            Line: (int) 15,
            Column: (int) 3
          })
        }
      }),
      Range: (*source.Range)({
        Start: (*source.Meta)({
          Line: (int) 15,
          Column: (int) 3
        }),
        End: (*source.Meta)({
          Line: (int) 34,
          Column: (int) 3
        })
      })
    }),
    (*schema.TreeNode)({
      Label: (string) (len=9) "resources",
      Path: (string) (len=10) "/resources",
      Type: (schema.TreeNodeType) 0,
      Children: ([]*schema.TreeNode) (len=6) {
        (*schema.TreeNode)({
          Label: (string) (len=8) "orderApi",
          Path: (string) (len=9) "/orderApi",
          Type: (schema.TreeNodeType) 0,
          Children: ([]*schema.TreeNode) (len=4) {
            (*schema.TreeNode)({
              Label: (string) (len=4) "type",
              Path: (string) (len=14) "/orderApi/type",
              Type: (schema.TreeNodeType) 1,
              Children: ([]*schema.TreeNode) <nil>,
              SchemaElement: (*schema.ResourceTypeWrapper)({
                Value: (string) (len=12) "celerity/api",
                SourceMeta: (*source.Meta)({
                  Line: (int) 37,
                  Column: (int) 11
                })
              }),
              Range: (*source.Range)({
                Start: (*source.Meta)({
                  Line: (int) 37,
                  Column: (int) 11
                }),
                End: (*source.Meta)({
                  Line: (int) 39,
                  Column: (int) 7
                })
              })
            }),
            (*schema.TreeNode)({
              Label: (string) (len=8) "metadata",
              Path: (string) (len=18) "/orderApi/metadata",
              Type: (schema.TreeNodeType) 0,
              Children: ([]*schema.TreeNode) (len=3) {
                (*schema.TreeNode)({
                  Label: (string) (len=11) "displayName",
                  Path: (string) (len=30) "/orderApi/metadata/displayName",
                  Type: (schema.TreeNodeType) 0,
                  Children: ([]*schema.TreeNode) (len=1) {
                    (*schema.TreeNode)({
                      Label: (string) (len=6) "string",
                      Path: (string) (len=37) "/orderApi/metadata/displayName/string",
                      Type: (schema.TreeNodeType) 1,
                      Children: ([]*schema.TreeNode) <nil>,
                      SchemaElement: (string) (len=9) "Order API",
                      Range: (*source.Range)({
                        Start: (*source.Meta)({
                          Line: (int) 39,
                          Column: (int) 20
                        }),
                        End: (*source.Meta)({
                          Line: (int) 41,
                          Column: (int) 9
                        })
                      })
                    })
                  },
                  SchemaElement: (*substitutions.StringOrSubstitutions)({
                    Values: ([]*substitutions.StringOrSubstitution) (len=1) {
                      (*substitutions.StringOrSubstitution)({
                        StringValue: (*string)((len=9) "Order API"),
                        SubstitutionValue: (*substitutions.Substitution)(<nil>),
                        SourceMeta: (*source.Meta)({
                          Line: (int) 39,
                          Column: (int) 20
                        })
                      })
                    },
                    SourceMeta: (*source.Meta)({
                      Line: (int) 39,
                      Column: (int) 20
                    })
                  }),
                  Range: (*source.Range)({
                    Start: (*source.Meta)({
                      Line: (int) 39,
                      Column: (int) 20
                    }),
                    End: (*source.Meta)({
                      Line: (int) 41,
                      Column: (int) 9
                    })
                  })
                }),
                (*schema.TreeNode)({
                  Label: (string) (len=6) "labels",
                  Path: (string) (len=25) "/orderApi/metadata/labels",
                  Type: (schema.TreeNodeType) 0,
                  Children: ([]*schema.TreeNode) (len=1) {
                    (*schema.TreeNode)({
                      Label: (string) (len=6) "string",
                      Path: (string) (len=32) "/orderApi/metadata/labels/string",
                      Type: (schema.TreeNodeType) 1,
                      Children: ([]*schema.TreeNode) <nil>,
                      SchemaElement: (string) (len=8) "orderApi",
                      Range: (*source.Range)({
                        Start: (*source.Meta)({
                          Line: (int) 41,
                          Column: (int) 9
                        }),
                        End: (*source.Meta)({
                          Line: (int) 43,
                          Column: (int) 9
                        })
                      })
                    })
                  },
                  SchemaElement: (*schema.StringMap)({
                    Values: (map[string]string) (len=1) {
                      (string) (len=3) "app": (string) (len=8) "orderApi"
                    },
                    SourceMeta: (map[string]*source.Meta) (len=1) {
                      (string) (len=3) "app": (*source.Meta)({
                        Line: (int) 41,
                        Column: (int) 9
                      })
                    }
                  }),
                  Range: (*source.Range)({
                    Start: (*source.Meta)({
                      Line: (int) 41,
                      Column: (int) 9
                    }),
                    End: (*source.Meta)({
                      Line: (int) 43,
                      Column: (int) 9
                    })
                  })
                }),
                (*schema.TreeNode)({
                  Label: (string) (len=6) "custom",
                  Path: (string) (len=25) "/orderApi/metadata/custom",
                  Type: (schema.TreeNodeType) 0,
                  Children: ([]*schema.TreeNode) (len=1) {
                    (*schema.TreeNode)({
                      Label: (string) (len=6) "visual",
                      Path: (string) (len=32) "/orderApi/metadata/custom/visual",
                      Type: (schema.TreeNodeType) 0,
                      Children: ([]*schema.TreeNode) (len=4) {
                        (*schema.TreeNode)({
                          Label: (string) (len=5) "point",
                          Path: (string) (len=38) "/orderApi/metadata/custom/visual/point",
                          Type: (schema.TreeNodeType) 0,
                          Children: ([]*schema.TreeNode) (len=1) {
                            (*schema.TreeNode)({
                              Label: (string) (len=6) "scalar",
                              Path: (string) (len=45) "/orderApi/metadata/custom/visual/point/scalar",
                              Type: (schema.TreeNodeType) 1,
                              Children: ([]*schema.TreeNode) <nil>,
                              SchemaElement: (*core.ScalarValue)({
                                IntValue: (*int)(<nil>),
                                BoolValue: (*bool)(<nil>),
                                FloatValue: (*float64)(<nil>),
                                StringValue: (*string)((len=6) "20 100"),
                                SourceMeta: (*source.Meta)({
                                  Line: (int) 44,
                                  Column: (int) 18
                                })
                              }),
                              Range: (*source.Range)({
                                Start: (*source.Meta)({
                                  Line: (int) 44,
                                  Column: (int) 18
                                }),
                                End: (*source.Meta)({
                                  Line: (int) 45,
                                  Column: (int) 11
                                })
                              })
                            })
                          },
                          SchemaElement: (*core.MappingNode)({
                            Literal: (*core.ScalarValue)({
                              IntValue: (*int)(<nil>),
                              BoolValue: (*bool)(<nil>),
                              FloatValue: (*float64)(<nil>),
                              StringValue: (*string)((len=6) "20 100"),
                              SourceMeta: (*source.Meta)({
                                Line: (int) 44,
                                Column: (int) 18
                              })
                            }),
                            Fields: (map[string]*core.MappingNode) <nil>,
                            Items: ([]*core.MappingNode) <nil>,
                            StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                            SourceMeta: (*source.Meta)({
                              Line: (int) 44,
                              Column: (int) 18
                            }),
                            FieldsSourceMeta: (map[string]*source.Meta) <nil>
                          }),
                          Range: (*source.Range)({
                            Start: (*source.Meta)({
                              Line: (int) 44,
                              Column: (int) 11
                            }),
                            End: (*source.Meta)({
                              Line: (int) 45,
                              Column: (int) 11
                            })
                          })
                        }),
                        (*schema.TreeNode)({
                          Label: (string) (len=5) "width",
                          Path: (string) (len=38) "/orderApi/metadata/custom/visual/width",
                          Type: (schema.TreeNodeType) 0,
                          Children: ([]*schema.TreeNode) (len=1) {
                            (*schema.TreeNode)({
                              Label: (string) (len=6) "scalar",
                              Path: (string) (len=45) "/orderApi/metadata/custom/visual/width/scalar",
                              Type: (schema.TreeNodeType) 1,
                              Children: ([]*schema.TreeNode) <nil>,
                              SchemaElement: (*core.ScalarValue)({
                                IntValue: (*int)(50),
                                BoolValue: (*bool)(<nil>),
                                FloatValue: (*float64)(<nil>),
                                StringValue: (*string)(<nil>),
                                SourceMeta: (*source.Meta)({
                                  Line: (int) 45,
                                  Column: (int) 18
                                })
                              }),
                              Range: (*source.Range)({
                                Start: (*source.Meta)({
                                  Line: (int) 45,
                                  Column: (int) 18
                                }),
                                End: (*source.Meta)({
                                  Line: (int) 46,
                                  Column: (int) 11
                                })
                              })
                            })
                          },
                          SchemaElement: (*core.MappingNode)({
                            Literal: (*core.ScalarValue)({
                              IntValue: (*int)(50),
                              BoolValue: (*bool)(<nil>),
                              FloatValue: (*float64)(<nil>),
                              StringValue: (*string)(<nil>),
                              SourceMeta: (*source.Meta)({
                                Line: (int) 45,
                                Column: (int) 18
                              })
                            }),
                            Fields: (map[string]*core.MappingNode) <nil>,
                            Items: ([]*core.MappingNode) <nil>,
                            StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                            SourceMeta: (*source.Meta)({
                              Line: (int) 45,
                              Column: (int) 18
                            }),
                            FieldsSourceMeta: (map[string]*source.Meta) <nil>
                          }),
                          Range: (*source.Range)({
                            Start: (*source.Meta)({
                              Line: (int) 45,
                              Column: (int) 11
                            }),
                            End: (*source.Meta)({
                              Line: (int) 46,
                              Column: (int) 11
                            })
                          })
                        }),
                        (*schema.TreeNode)({
                          Label: (string) (len=6) "height",
                          Path: (string) (len=39) "/orderApi/metadata/custom/visual/height",
                          Type: (schema.TreeNodeType) 0,
                          Children: ([]*schema.TreeNode) (len=1) {
                            (*schema.TreeNode)({
                              Label: (string) (len=6) "scalar",
                              Path: (string) (len=46) "/orderApi/metadata/custom/visual/height/scalar",
                              Type: (schema.TreeNodeType) 1,
                              Children: ([]*schema.TreeNode) <nil>,
                              SchemaElement: (*core.ScalarValue)({
                                IntValue: (*int)(50),
                                BoolValue: (*bool)(<nil>),
                                FloatValue: (*float64)(<nil>),
                                StringValue: (*string)(<nil>),
                                SourceMeta: (*source.Meta)({
                                  Line: (int) 46,
                                  Column: (int) 19
                                })
                              }),
                              Range: (*source.Range)({
                                Start: (*source.Meta)({
                                  Line: (int) 46,
                                  Column: (int) 19
                                }),
                                End: (*source.Meta)({
                                  Line: (int) 47,
                                  Column: (int) 11
                                })
                              })
                            })
                          },
                          SchemaElement: (*core.MappingNode)({
                            Literal: (*core.ScalarValue)({
                              IntValue: (*int)(50),
                              BoolValue: (*bool)(<nil>),
                              FloatValue: (*float64)(<nil>),
                              StringValue: (*string)(<nil>),
                              SourceMeta: (*source.Meta)({
                                Line: (int) 46,
                                Column: (int) 19
                              })
                            }),
                            Fields: (map[string]*core.MappingNode) <nil>,
                            Items: ([]*core.MappingNode) <nil>,
                            StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                            SourceMeta: (*source.Meta)({
                              Line: (int) 46,
                              Column: (int) 19
                            }),
                            FieldsSourceMeta: (map[string]*source.Meta) <nil>
                          }),
                          Range: (*source.Range)({
                            Start: (*source.Meta)({
                              Line: (int) 46,
                              Column: (int) 11
                            }),
                            End: (*source.Meta)({
                              Line: (int) 47,
                              Column: (int) 11
                            })
                          })
                        }),
                        (*schema.TreeNode)({
                          Label: (string) (len=9) "linkPorts",
                          Path: (string) (len=42) "/orderApi/metadata/custom/visual/linkPorts",
                          Type: (schema.TreeNodeType) 0,
                          Children: ([]*schema.TreeNode) (len=1) {
                            (*schema.TreeNode)({
                              Label: (string) (len=1) "0",
                              Path: (string) (len=44) "/orderApi/metadata/custom/visual/linkPorts/0",
                              Type: (schema.TreeNodeType) 0,
                              Children: ([]*schema.TreeNode) (len=3) {
                                (*schema.TreeNode)({
                                  Label: (string) (len=6) "linkTo",
                                  Path: (string) (len=51) "/orderApi/metadata/custom/visual/linkPorts/0/linkTo",
                                  Type: (schema.TreeNodeType) 0,
                                  Children: ([]*schema.TreeNode) (len=1) {
                                    (*schema.TreeNode)({
                                      Label: (string) (len=6) "scalar",
                                      Path: (string) (len=58) "/orderApi/metadata/custom/visual/linkPorts/0/linkTo/scalar",
                                      Type: (schema.TreeNodeType) 1,
                                      Children: ([]*schema.TreeNode) <nil>,
                                      SchemaElement: (*core.ScalarValue)({
                                        IntValue: (*int)(<nil>),
                                        BoolValue: (*bool)(<nil>),
                                        FloatValue: (*float64)(<nil>),
                                        StringValue: (*string)((len=16) "getOrderEndpoint"),
                                        SourceMeta: (*source.Meta)({
                                          Line: (int) 48,
                                          Column: (int) 23
                                        })
                                      }),
                                      Range: (*source.Range)({
                                        Start: (*source.Meta)({
                                          Line: (int) 48,
                                          Column: (int) 23
                                        }),
                                        End: (*source.Meta)({
                                          Line: (int) 49,
                                          Column: (int) 15
                                        })
                                      })
                                    })
                                  },
                                  SchemaElement: (*core.MappingNode)({
                                    Literal: (*core.ScalarValue)({
                                      IntValue: (*int)(<nil>),
                                      BoolValue: (*bool)(<nil>),
                                      FloatValue: (*float64)(<nil>),
                                      StringValue: (*string)((len=16) "getOrderEndpoint"),
                                      SourceMeta: (*source.Meta)({
                                        Line: (int) 48,
                                        Column: (int) 23
                                      })
                                    }),
                                    Fields: (map[string]*core.MappingNode) <nil>,
                                    Items: ([]*core.MappingNode) <nil>,
                                    StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                                    SourceMeta: (*source.Meta)({
                                      Line: (int) 48,
                                      Column: (int) 23
                                    }),
                                    FieldsSourceMeta: (map[string]*source.Meta) <nil>
                                  }),
                                  Range: (*source.Range)({
                                    Start: (*source.Meta)({
                                      Line: (int) 48,
                                      Column: (int) 15
                                    }),
                                    End: (*source.Meta)({
                                      Line: (int) 49,
                                      Column: (int) 15
                                    })
                                  })
                                }),
                                (*schema.TreeNode)({
                                  Label: (string) (len=9) "connectAt",
                                  Path: (string) (len=54) "/orderApi/metadata/custom/visual/linkPorts/0/connectAt",
                                  Type: (schema.TreeNodeType) 0,
                                  Children: ([]*schema.TreeNode) (len=1) {
                                    (*schema.TreeNode)({
                                      Label: (string) (len=6) "scalar",
                                      Path: (string) (len=61) "/orderApi/metadata/custom/visual/linkPorts/0/connectAt/scalar",
                                      Type: (schema.TreeNodeType) 1,
                                      Children: ([]*schema.TreeNode) <nil>,
                                      SchemaElement: (*core.ScalarValue)({
                                        IntValue: (*int)(<nil>),
                                        BoolValue: (*bool)(<nil>),
                                        FloatValue: (*float64)(<nil>),
                                        StringValue: (*string)((len=6) "70 100"),
                                        SourceMeta: (*source.Meta)({
                                          Line: (int) 49,
                                          Column: (int) 26
                                        })
                                      }),
                                      Range: (*source.Range)({
                                        Start: (*source.Meta)({
                                          Line: (int) 49,
                                          Column: (int) 26
                                        }),
                                        End: (*source.Meta)({
                                          Line: (int) 50,
                                          Column: (int) 15
                                        })
                                      })
                                    })
                                  },
                                  SchemaElement: (*core.MappingNode)({
                                    Literal: (*core.ScalarValue)({
                                      IntValue: (*int)(<nil>),
                                      BoolValue: (*bool)(<nil>),
                                      FloatValue: (*float64)(<nil>),
                                      StringValue: (*string)((len=6) "70 100"),
                                      SourceMeta: (*source.Meta)({
                                        Line: (int) 49,
                                        Column: (int) 26
                                      })
                                    }),
                                    Fields: (map[string]*core.MappingNode) <nil>,
                                    Items: ([]*core.MappingNode) <nil>,
                                    StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                                    SourceMeta: (*source.Meta)({
                                      Line: (int) 49,
                                      Column: (int) 26
                                    }),
                                    FieldsSourceMeta: (map[string]*source.Meta) <nil>
                                  }),
                                  Range: (*source.Range)({
                                    Start: (*source.Meta)({
                                      Line: (int) 49,
                                      Column: (int) 15
                                    }),
                                    End: (*source.Meta)({
                                      Line: (int) 50,
                                      Column: (int) 15
                                    })
                                  })
                                }),
                                (*schema.TreeNode)({
                                  Label: (string) (len=10) "annotation",
                                  Path: (string) (len=55) "/orderApi/metadata/custom/visual/linkPorts/0/annotation",
                                  Type: (schema.TreeNodeType) 0,
                                  Children: ([]*schema.TreeNode) (len=1) {
                                    (*schema.TreeNode)({
                                      Label: (string) (len=6) "scalar",
                                      Path: (string) (len=62) "/orderApi/metadata/custom/visual/linkPorts/0/annotation/scalar",
                                      Type: (schema.TreeNodeType) 1,
                                      Children: ([]*schema.TreeNode) <nil>,
                                      SchemaElement: (*core.ScalarValue)({
                                        IntValue: (*int)(<nil>),
                                        BoolValue: (*bool)(<nil>),
                                        FloatValue: (*float64)(<nil>),
                                        StringValue: (*string)((len=10) "Orders API"),
                                        SourceMeta: (*source.Meta)({
                                          Line: (int) 50,
                                          Column: (int) 27
                                        })
                                      }),
                                      Range: (*source.Range)({
                                        Start: (*source.Meta)({
                                          Line: (int) 50,
                                          Column: (int) 27
                                        }),
                                        End: (*source.Meta)({
                                          Line: (int) 52,
                                          Column: (int) 7
                                        })
                                      })
                                    })
                                  },
                                  SchemaElement: (*core.MappingNode)({
                                    Literal: (*core.ScalarValue)({
                                      IntValue: (*int)(<nil>),
                                      BoolValue: (*bool)(<nil>),
                                      FloatValue: (*float64)(<nil>),
                                      StringValue: (*string)((len=10) "Orders API"),
                                      SourceMeta: (*source.Meta)({
                                        Line: (int) 50,
                                        Column: (int) 27
                                      })
                                    }),
                                    Fields: (map[string]*core.MappingNode) <nil>,
                                    Items: ([]*core.MappingNode) <nil>,
                                    StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                                    SourceMeta: (*source.Meta)({
                                      Line: (int) 50,
                                      Column: (int) 27
                                    }),
                                    FieldsSourceMeta: (map[string]*source.Meta) <nil>
                                  }),
                                  Range: (*source.Range)({
                                    Start: (*source.Meta)({
                                      Line: (int) 50,
                                      Column: (int) 15
                                    }),
                                    End: (*source.Meta)({
                                      Line: (int) 52,
                                      Column: (int) 7
                                    })
                                  })
                                })
                              },
                              SchemaElement: (*core.MappingNode)({
                                Literal: (*core.ScalarValue)(<nil>),
                                Fields: (map[string]*core.MappingNode) (len=3) {
                                  (string) (len=10) "annotation": (*core.MappingNode)({
                                    Literal: (*core.ScalarValue)({
                                      IntValue: (*int)(<nil>),
                                      BoolValue: (*bool)(<nil>),
                                      FloatValue: (*float64)(<nil>),
                                      StringValue: (*string)((len=10) "Orders API"),
                                      SourceMeta: (*source.Meta)({
                                        Line: (int) 50,
                                        Column: (int) 27
                                      })
                                    }),
                                    Fields: (map[string]*core.MappingNode) <nil>,
                                    Items: ([]*core.MappingNode) <nil>,
                                    StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                                    SourceMeta: (*source.Meta)({
                                      Line: (int) 50,
                                      Column: (int) 27
                                    }),
                                    FieldsSourceMeta: (map[string]*source.Meta) <nil>
                                  }),
                                  (string) (len=9) "connectAt": (*core.MappingNode)({
                                    Literal: (*core.ScalarValue)({
                                      IntValue: (*int)(<nil>),
                                      BoolValue: (*bool)(<nil>),
                                      FloatValue: (*float64)(<nil>),
                                      StringValue: (*string)((len=6) "70 100"),
                                      SourceMeta: (*source.Meta)({
                                        Line: (int) 49,
                                        Column: (int) 26
                                      })
                                    }),
                                    Fields: (map[string]*core.MappingNode) <nil>,
                                    Items: ([]*core.MappingNode) <nil>,
                                    StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                                    SourceMeta: (*source.Meta)({
                                      Line: (int) 49,
                                      Column: (int) 26
                                    }),
                                    FieldsSourceMeta: (map[string]*source.Meta) <nil>
                                  }),
                                  (string) (len=6) "linkTo": (*core.MappingNode)({
                                    Literal: (*core.ScalarValue)({
                                      IntValue: (*int)(<nil>),
                                      BoolValue: (*bool)(<nil>),
                                      FloatValue: (*float64)(<nil>),
                                      StringValue: (*string)((len=16) "getOrderEndpoint"),
                                      SourceMeta: (*source.Meta)({
                                        Line: (int) 48,
                                        Column: (int) 23
                                      })
                                    }),
                                    Fields: (map[string]*core.MappingNode) <nil>,
                                    Items: ([]*core.MappingNode) <nil>,
                                    StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                                    SourceMeta: (*source.Meta)({
                                      Line: (int) 48,
                                      Column: (int) 23
                                    }),
                                    FieldsSourceMeta: (map[string]*source.Meta) <nil>
                                  })
                                },
                                Items: ([]*core.MappingNode) <nil>,
                                StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                                SourceMeta: (*source.Meta)({
                                  Line: (int) 48,
                                  Column: (int) 15
                                }),
                                FieldsSourceMeta: (map[string]*source.Meta) (len=3) {
                                  (string) (len=10) "annotation": (*source.Meta)({
                                    Line: (int) 50,
                                    Column: (int) 15
                                  }),
                                  (string) (len=9) "connectAt": (*source.Meta)({
                                    Line: (int) 49,
                                    Column: (int) 15
                                  }),
                                  (string) (len=6) "linkTo": (*source.Meta)({
                                    Line: (int) 48,
                                    Column: (int) 15
                                  })
                                }
                              }),
                              Range: (*source.Range)({
                                Start: (*source.Meta)({
                                  Line: (int) 48,
                                  Column: (int) 15
                                }),
                                End: (*source.Meta)({
                                  Line: (int) 52,
                                  Column: (int) 7
                                })
                              })
                            })
                          },
                          SchemaElement: (*core.MappingNode)({
                            Literal: (*core.ScalarValue)(<nil>),
                            Fields: (map[string]*core.MappingNode) <nil>,
                            Items: ([]*core.MappingNode) (len=1) {
                              (*core.MappingNode)({
                                Literal: (*core.ScalarValue)(<nil>),
                                Fields: (map[string]*core.MappingNode) (len=3) {
                                  (string) (len=10) "annotation": (*core.MappingNode)({
                                    Literal: (*core.ScalarValue)({
                                      IntValue: (*int)(<nil>),
                                      BoolValue: (*bool)(<nil>),
                                      FloatValue: (*float64)(<nil>),
                                      StringValue: (*string)((len=10) "Orders API"),
                                      SourceMeta: (*source.Meta)({
                                        Line: (int) 50,
                                        Column: (int) 27
                                      })
                                    }),
                                    Fields: (map[string]*core.MappingNode) <nil>,
                                    Items: ([]*core.MappingNode) <nil>,
                                    StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                                    SourceMeta: (*source.Meta)({
                                      Line: (int) 50,
                                      Column: (int) 27
                                    }),
                                    FieldsSourceMeta: (map[string]*source.Meta) <nil>
                                  }),
                                  (string) (len=9) "connectAt": (*core.MappingNode)({
                                    Literal: (*core.ScalarValue)({
                                      IntValue: (*int)(<nil>),
                                      BoolValue: (*bool)(<nil>),
                                      FloatValue: (*float64)(<nil>),
                                      StringValue: (*string)((len=6) "70 100"),
                                      SourceMeta: (*source.Meta)({
                                        Line: (int) 49,
                                        Column: (int) 26
                                      })
                                    }),
                                    Fields: (map[string]*core.MappingNode) <nil>,
                                    Items: ([]*core.MappingNode) <nil>,
                                    StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                                    SourceMeta: (*source.Meta)({
                                      Line: (int) 49,
                                      Column: (int) 26
                                    }),
                                    FieldsSourceMeta: (map[string]*source.Meta) <nil>
                                  }),
                                  (string) (len=6) "linkTo": (*core.MappingNode)({
                                    Literal: (*core.ScalarValue)({
                                      IntValue: (*int)(<nil>),
                                      BoolValue: (*bool)(<nil>),
                                      FloatValue: (*float64)(<nil>),
                                      StringValue: (*string)((len=16) "getOrderEndpoint"),
                                      SourceMeta: (*source.Meta)({
                                        Line: (int) 48,
                                        Column: (int) 23
                                      })
                                    }),
                                    Fields: (map[string]*core.MappingNode) <nil>,
                                    Items: ([]*core.MappingNode) <nil>,
                                    StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                                    SourceMeta: (*source.Meta)({
                                      Line: (int) 48,
                                      Column: (int) 23
                                    }),
                                    FieldsSourceMeta: (map[string]*source.Meta) <nil>
                                  })
                                },
                                Items: ([]*core.MappingNode) <nil>,
                                StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                                SourceMeta: (*source.Meta)({
                                  Line: (int) 48,
                                  Column: (int) 15
                                }),
                                FieldsSourceMeta: (map[string]*source.Meta) (len=3) {
                                  (string) (len=10) "annotation": (*source.Meta)({
                                    Line: (int) 50,
                                    Column: (int) 15
                                  }),
                                  (string) (len=9) "connectAt": (*source.Meta)({
                                    Line: (int) 49,
                                    Column: (int) 15
                                  }),
                                  (string) (len=6) "linkTo": (*source.Meta)({
                                    Line: (int) 48,
                                    Column: (int) 15
                                  })
                                }
                              })
                            },
                            StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                            SourceMeta: (*source.Meta)({
                              Line: (int) 48,
                              Column: (int) 13
                            }),
                            FieldsSourceMeta: (map[string]*source.Meta) <nil>
                          }),
                          Range: (*source.Range)({
                            Start: (*source.Meta)({
                              Line: (int) 47,
                              Column: (int) 11
                            }),
                            End: (*source.Meta)({
                              Line: (int) 52,
                              Column: (int) 7
                            })
                          })
                        })
                      },
                      SchemaElement: (*core.MappingNode)({
                        Literal: (*core.ScalarValue)(<nil>),
                        Fields: (map[string]*core.MappingNode) (len=4) {
                          (string) (len=6) "height": (*core.MappingNode)({
                            Literal: (*core.ScalarValue)({
                              IntValue: (*int)(50),
                              BoolValue: (*bool)(<nil>),
                              FloatValue: (*float64)(<nil>),
                              StringValue: (*string)(<nil>),
                              SourceMeta: (*source.Meta)({
                                Line: (int) 46,
                                Column: (int) 19
                              })
                            }),
                            Fields: (map[string]*core.MappingNode) <nil>,
                            Items: ([]*core.MappingNode) <nil>,
                            StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                            SourceMeta: (*source.Meta)({
                              Line: (int) 46,
                              Column: (int) 19
                            }),
                            FieldsSourceMeta: (map[string]*source.Meta) <nil>
                          }),
                          (string) (len=9) "linkPorts": (*core.MappingNode)({
                            Literal: (*core.ScalarValue)(<nil>),
                            Fields: (map[string]*core.MappingNode) <nil>,
                            Items: ([]*core.MappingNode) (len=1) {
                              (*core.MappingNode)({
                                Literal: (*core.ScalarValue)(<nil>),
                                Fields: (map[string]*core.MappingNode) (len=3) {
                                  (string) (len=10) "annotation": (*core.MappingNode)({
                                    Literal: (*core.ScalarValue)({
                                      IntValue: (*int)(<nil>),
                                      BoolValue: (*bool)(<nil>),
                                      FloatValue: (*float64)(<nil>),
                                      StringValue: (*string)((len=10) "Orders API"),
                                      SourceMeta: (*source.Meta)({
                                        Line: (int) 50,
                                        Column: (int) 27
                                      })
                                    }),
                                    Fields: (map[string]*core.MappingNode) <nil>,
                                    Items: ([]*core.MappingNode) <nil>,
                                    StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                                    SourceMeta: (*source.Meta)({
                                      Line: (int) 50,
                                      Column: (int) 27
                                    }),
                                    FieldsSourceMeta: (map[string]*source.Meta) <nil>
                                  }),
                                  (string) (len=9) "connectAt": (*core.MappingNode)({
                                    Literal: (*core.ScalarValue)({
                                      IntValue: (*int)(<nil>),
                                      BoolValue: (*bool)(<nil>),
                                      FloatValue: (*float64)(<nil>),
                                      StringValue: (*string)((len=6) "70 100"),
                                      SourceMeta: (*source.Meta)({
                                        Line: (int) 49,
                                        Column: (int) 26
                                      })
                                    }),
                                    Fields: (map[string]*core.MappingNode) <nil>,
                                    Items: ([]*core.MappingNode) <nil>,
                                    StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                                    SourceMeta: (*source.Meta)({
                                      Line: (int) 49,
                                      Column: (int) 26
                                    }),
                                    FieldsSourceMeta: (map[string]*source.Meta) <nil>
                                  }),
                                  (string) (len=6) "linkTo": (*core.MappingNode)({
                                    Literal: (*core.ScalarValue)({
                                      IntValue: (*int)(<nil>),
                                      BoolValue: (*bool)(<nil>),
                                      FloatValue: (*float64)(<nil>),
                                      StringValue: (*string)((len=16) "getOrderEndpoint"),
                                      SourceMeta: (*source.Meta)({
                                        Line: (int) 48,
                                        Column: (int) 23
                                      })
                                    }),
                                    Fields: (map[string]*core.MappingNode) <nil>,
                                    Items: ([]*core.MappingNode) <nil>,
                                    StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                                    SourceMeta: (*source.Meta)({
                                      Line: (int) 48,
                                      Column: (int) 23
                                    }),
                                    FieldsSourceMeta: (map[string]*source.Meta) <nil>
                                  })
                                },
                                Items: ([]*core.MappingNode) <nil>,
                                StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                                SourceMeta: (*source.Meta)({
                                  Line: (int) 48,
                                  Column: (int) 15
                                }),
                                FieldsSourceMeta: (map[string]*source.Meta) (len=3) {
                                  (string) (len=10) "annotation": (*source.Meta)({
                                    Line: (int) 50,
                                    Column: (int) 15
                                  }),
                                  (string) (len=9) "connectAt": (*source.Meta)({
                                    Line: (int) 49,
                                    Column: (int) 15
                                  }),
                                  (string) (len=6) "linkTo": (*source.Meta)({
                                    Line: (int) 48,
                                    Column: (int) 15
                                  })
                                }
                              })
                            },
                            StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                            SourceMeta: (*source.Meta)({
                              Line: (int) 48,
                              Column: (int) 13
                            }),
                            FieldsSourceMeta: (map[string]*source.Meta) <nil>
                          }),
                          (string) (len=5) "point": (*core.MappingNode)({
                            Literal: (*core.ScalarValue)({
                              IntValue: (*int)(<nil>),
                              BoolValue: (*bool)(<nil>),
                              FloatValue: (*float64)(<nil>),
                              StringValue: (*string)((len=6) "20 100"),
                              SourceMeta: (*source.Meta)({
                                Line: (int) 44,
                                Column: (int) 18
                              })
                            }),
                            Fields: (map[string]*core.MappingNode) <nil>,
                            Items: ([]*core.MappingNode) <nil>,
                            StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                            SourceMeta: (*source.Meta)({
                              Line: (int) 44,
                              Column: (int) 18
                            }),
                            FieldsSourceMeta: (map[string]*source.Meta) <nil>
                          }),
                          (string) (len=5) "width": (*core.MappingNode)({
                            Literal: (*core.ScalarValue)({
                              IntValue: (*int)(50),
                              BoolValue: (*bool)(<nil>),
                              FloatValue: (*float64)(<nil>),
                              StringValue: (*string)(<nil>),
                              SourceMeta: (*source.Meta)({
                                Line: (int) 45,
                                Column: (int) 18
                              })
                            }),
                            Fields: (map[string]*core.MappingNode) <nil>,
                            Items: ([]*core.MappingNode) <nil>,
                            StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                            SourceMeta: (*source.Meta)({
                              Line: (int) 45,
                              Column: (int) 18
                            }),
                            FieldsSourceMeta: (map[string]*source.Meta) <nil>
                          })
                        },
                        Items: ([]*core.MappingNode) <nil>,
                        StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                        SourceMeta: (*source.Meta)({
                          Line: (int) 44,
                          Column: (int) 11
                        }),
                        FieldsSourceMeta: (map[string]*source.Meta) (len=4) {
                          (string) (len=6) "height": (*source.Meta)({
                            Line: (int) 46,
                            Column: (int) 11
                          }),
                          (string) (len=9) "linkPorts": (*source.Meta)({
                            Line: (int) 47,
                            Column: (int) 11
                          }),
                          (string) (len=5) "point": (*source.Meta)({
                            Line: (int) 44,
                            Column: (int) 11
                          }),
                          (string) (len=5) "width": (*source.Meta)({
                            Line: (int) 45,
                            Column: (int) 11
                          })
                        }
                      }),
                      Range: (*source.Range)({
                        Start: (*source.Meta)({
                          Line: (int) 43,
                          Column: (int) 9
                        }),
                        End: (*source.Meta)({
                          Line: (int) 52,
                          Column: (int) 7
                        })
                      })
                    })
                  },
                  SchemaElement: (*core.MappingNode)({
                    Literal: (*core.ScalarValue)(<nil>),
                    Fields: (map[string]*core.MappingNode) (len=1) {
                      (string) (len=6) "visual": (*core.MappingNode)({
                        Literal: (*core.ScalarValue)(<nil>),
                        Fields: (map[string]*core.MappingNode) (len=4) {
                          (string) (len=6) "height": (*core.MappingNode)({
                            Literal: (*core.ScalarValue)({
                              IntValue: (*int)(50),
                              BoolValue: (*bool)(<nil>),
                              FloatValue: (*float64)(<nil>),
                              StringValue: (*string)(<nil>),
                              SourceMeta: (*source.Meta)({
                                Line: (int) 46,
                                Column: (int) 19
                              })
                            }),
                            Fields: (map[string]*core.MappingNode) <nil>,
                            Items: ([]*core.MappingNode) <nil>,
                            StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                            SourceMeta: (*source.Meta)({
                              Line: (int) 46,
                              Column: (int) 19
                            }),
                            FieldsSourceMeta: (map[string]*source.Meta) <nil>
                          }),
                          (string) (len=9) "linkPorts": (*core.MappingNode)({
                            Literal: (*core.ScalarValue)(<nil>),
                            Fields: (map[string]*core.MappingNode) <nil>,
                            Items: ([]*core.MappingNode) (len=1) {
                              (*core.MappingNode)({
                                Literal: (*core.ScalarValue)(<nil>),
                                Fields: (map[string]*core.MappingNode) (len=3) {
                                  (string) (len=10) "annotation": (*core.MappingNode)({
                                    Literal: (*core.ScalarValue)({
                                      IntValue: (*int)(<nil>),
                                      BoolValue: (*bool)(<nil>),
                                      FloatValue: (*float64)(<nil>),
                                      StringValue: (*string)((len=10) "Orders API"),
                                      SourceMeta: (*source.Meta)({
                                        Line: (int) 50,
                                        Column: (int) 27
                                      })
                                    }),
                                    Fields: (map[string]*core.MappingNode) <nil>,
                                    Items: ([]*core.MappingNode) <nil>,
                                    StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                                    SourceMeta: (*source.Meta)({
                                      Line: (int) 50,
                                      Column: (int) 27
                                    }),
                                    FieldsSourceMeta: (map[string]*source.Meta) <nil>
                                  }),
                                  (string) (len=9) "connectAt": (*core.MappingNode)({
                                    Literal: (*core.ScalarValue)({
                                      IntValue: (*int)(<nil>),
                                      BoolValue: (*bool)(<nil>),
                                      FloatValue: (*float64)(<nil>),
                                      StringValue: (*string)((len=6) "70 100"),
                                      SourceMeta: (*source.Meta)({
                                        Line: (int) 49,
                                        Column: (int) 26
                                      })
                                    }),
                                    Fields: (map[string]*core.MappingNode) <nil>,
                                    Items: ([]*core.MappingNode) <nil>,
                                    StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                                    SourceMeta: (*source.Meta)({
                                      Line: (int) 49,
                                      Column: (int) 26
                                    }),
                                    FieldsSourceMeta: (map[string]*source.Meta) <nil>
                                  }),
                                  (string) (len=6) "linkTo": (*core.MappingNode)({
                                    Literal: (*core.ScalarValue)({
                                      IntValue: (*int)(<nil>),
                                      BoolValue: (*bool)(<nil>),
                                      FloatValue: (*float64)(<nil>),
                                      StringValue: (*string)((len=16) "getOrderEndpoint"),
                                      SourceMeta: (*source.Meta)({
                                        Line: (int) 48,
                                        Column: (int) 23
                                      })
                                    }),
                                    Fields: (map[string]*core.MappingNode) <nil>,
                                    Items: ([]*core.MappingNode) <nil>,
                                    StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                                    SourceMeta: (*source.Meta)({
                                      Line: (int) 48,
                                      Column: (int) 23
                                    }),
                                    FieldsSourceMeta: (map[string]*source.Meta) <nil>
                                  })
                                },
                                Items: ([]*core.MappingNode) <nil>,
                                StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                                SourceMeta: (*source.Meta)({
                                  Line: (int) 48,
                                  Column: (int) 15
                                }),
                                FieldsSourceMeta: (map[string]*source.Meta) (len=3) {
                                  (string) (len=10) "annotation": (*source.Meta)({
                                    Line: (int) 50,
                                    Column: (int) 15
                                  }),
                                  (string) (len=9) "connectAt": (*source.Meta)({
                                    Line: (int) 49,
                                    Column: (int) 15
                                  }),
                                  (string) (len=6) "linkTo": (*source.Meta)({
                                    Line: (int) 48,
                                    Column: (int) 15
                                  })
                                }
                              })
                            },
                            StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                            SourceMeta: (*source.Meta)({
                              Line: (int) 48,
                              Column: (int) 13
                            }),
                            FieldsSourceMeta: (map[string]*source.Meta) <nil>
                          }),
                          (string) (len=5) "point": (*core.MappingNode)({
                            Literal: (*core.ScalarValue)({
                              IntValue: (*int)(<nil>),
                              BoolValue: (*bool)(<nil>),
                              FloatValue: (*float64)(<nil>),
                              StringValue: (*string)((len=6) "20 100"),
                              SourceMeta: (*source.Meta)({
                                Line: (int) 44,
                                Column: (int) 18
                              })
                            }),
                            Fields: (map[string]*core.MappingNode) <nil>,
                            Items: ([]*core.MappingNode) <nil>,
                            StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                            SourceMeta: (*source.Meta)({
                              Line: (int) 44,
                              Column: (int) 18
                            }),
                            FieldsSourceMeta: (map[string]*source.Meta) <nil>
                          }),
                          (string) (len=5) "width": (*core.MappingNode)({
                            Literal: (*core.ScalarValue)({
                              IntValue: (*int)(50),
                              BoolValue: (*bool)(<nil>),
                              FloatValue: (*float64)(<nil>),
                              StringValue: (*string)(<nil>),
                              SourceMeta: (*source.Meta)({
                                Line: (int) 45,
                                Column: (int) 18
                              })
                            }),
                            Fields: (map[string]*core.MappingNode) <nil>,
                            Items: ([]*core.MappingNode) <nil>,
                            StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                            SourceMeta: (*source.Meta)({
                              Line: (int) 45,
                              Column: (int) 18
                            }),
                            FieldsSourceMeta: (map[string]*source.Meta) <nil>
                          })
                        },
                        Items: ([]*core.MappingNode) <nil>,
                        StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                        SourceMeta: (*source.Meta)({
                          Line: (int) 44,
                          Column: (int) 11
                        }),
                        FieldsSourceMeta: (map[string]*source.Meta) (len=4) {
                          (string) (len=6) "height": (*source.Meta)({
                            Line: (int) 46,
                            Column: (int) 11
                          }),
                          (string) (len=9) "linkPorts": (*source.Meta)({
                            Line: (int) 47,
                            Column: (int) 11
                          }),
                          (string) (len=5) "point": (*source.Meta)({
                            Line: (int) 44,
                            Column: (int) 11
                          }),
                          (string) (len=5) "width": (*source.Meta)({
                            Line: (int) 45,
                            Column: (int) 11
                          })
                        }
                      })
                    },
                    Items: ([]*core.MappingNode) <nil>,
                    StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                    SourceMeta: (*source.Meta)({
                      Line: (int) 43,
                      Column: (int) 9
                    }),
                    FieldsSourceMeta: (map[string]*source.Meta) (len=1) {
                      (string) (len=6) "visual": (*source.Meta)({
                        Line: (int) 43,
                        Column: (int) 9
                      })
                    }
                  }),
                  Range: (*source.Range)({
                    Start: (*source.Meta)({
                      Line: (int) 43,
                      Column: (int) 9
                    }),
                    End: (*source.Meta)({
                      Line: (int) 52,
                      Column: (int) 7
                    })
                  })
                })
              },
              SchemaElement: (*schema.Metadata)({
                DisplayName: (*substitutions.StringOrSubstitutions)({
                  Values: ([]*substitutions.StringOrSubstitution) (len=1) {
                    (*substitutions.StringOrSubstitution)({
                      StringValue: (*string)((len=9) "Order API"),
                      SubstitutionValue: (*substitutions.Substitution)(<nil>),
                      SourceMeta: (*source.Meta)({
                        Line: (int) 39,
                        Column: (int) 20
                      })
                    })
                  },
                  SourceMeta: (*source.Meta)({
                    Line: (int) 39,
                    Column: (int) 20
                  })
                }),
                Annotations: (*schema.StringOrSubstitutionsMap)(<nil>),
                Labels: (*schema.StringMap)({
                  Values: (map[string]string) (len=1) {
                    (string) (len=3) "app": (string) (len=8) "orderApi"
                  },
                  SourceMeta: (map[string]*source.Meta) (len=1) {
                    (string) (len=3) "app": (*source.Meta)({
                      Line: (int) 41,
                      Column: (int) 9
                    })
                  }
                }),
                Custom: (*core.MappingNode)({
                  Literal: (*core.ScalarValue)(<nil>),
                  Fields: (map[string]*core.MappingNode) (len=1) {
                    (string) (len=6) "visual": (*core.MappingNode)({
                      Literal: (*core.ScalarValue)(<nil>),
                      Fields: (map[string]*core.MappingNode) (len=4) {
                        (string) (len=6) "height": (*core.MappingNode)({
                          Literal: (*core.ScalarValue)({
                            IntValue: (*int)(50),
                            BoolValue: (*bool)(<nil>),
                            FloatValue: (*float64)(<nil>),
                            StringValue: (*string)(<nil>),
                            SourceMeta: (*source.Meta)({
                              Line: (int) 46,
                              Column: (int) 19
                            })
                          }),
                          Fields: (map[string]*core.MappingNode) <nil>,
                          Items: ([]*core.MappingNode) <nil>,
                          StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                          SourceMeta: (*source.Meta)({
                            Line: (int) 46,
                            Column: (int) 19
                          }),
                          FieldsSourceMeta: (map[string]*source.Meta) <nil>
                        }),
                        (string) (len=9) "linkPorts": (*core.MappingNode)({
                          Literal: (*core.ScalarValue)(<nil>),
                          Fields: (map[string]*core.MappingNode) <nil>,
                          Items: ([]*core.MappingNode) (len=1) {
                            (*core.MappingNode)({
                              Literal: (*core.ScalarValue)(<nil>),
                              Fields: (map[string]*core.MappingNode) (len=3) {
                                (string) (len=10) "annotation": (*core.MappingNode)({
                                  Literal: (*core.ScalarValue)({
                                    IntValue: (*int)(<nil>),
                                    BoolValue: (*bool)(<nil>),
                                    FloatValue: (*float64)(<nil>),
                                    StringValue: (*string)((len=10) "Orders API"),
                                    SourceMeta: (*source.Meta)({
                                      Line: (int) 50,
                                      Column: (int) 27
                                    })
                                  }),
                                  Fields: (map[string]*core.MappingNode) <nil>,
                                  Items: ([]*core.MappingNode) <nil>,
                                  StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                                  SourceMeta: (*source.Meta)({
                                    Line: (int) 50,
                                    Column: (int) 27
                                  }),
                                  FieldsSourceMeta: (map[string]*source.Meta) <nil>
                                }),
                                (string) (len=9) "connectAt": (*core.MappingNode)({
                                  Literal: (*core.ScalarValue)({
                                    IntValue: (*int)(<nil>),
                                    BoolValue: (*bool)(<nil>),
                                    FloatValue: (*float64)(<nil>),
                                    StringValue: (*string)((len=6) "70 100"),
                                    SourceMeta: (*source.Meta)({
                                      Line: (int) 49,
                                      Column: (int) 26
                                    })
                                  }),
                                  Fields: (map[string]*core.MappingNode) <nil>,
                                  Items: ([]*core.MappingNode) <nil>,
                                  StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                                  SourceMeta: (*source.Meta)({
                                    Line: (int) 49,
                                    Column: (int) 26
                                  }),
                                  FieldsSourceMeta: (map[string]*source.Meta) <nil>
                                }),
                                (string) (len=6) "linkTo": (*core.MappingNode)({
                                  Literal: (*core.ScalarValue)({
                                    IntValue: (*int)(<nil>),
                                    BoolValue: (*bool)(<nil>),
                                    FloatValue: (*float64)(<nil>),
                                    StringValue: (*string)((len=16) "getOrderEndpoint"),
                                    SourceMeta: (*source.Meta)({
                                      Line: (int) 48,
                                      Column: (int) 23
                                    })
                                  }),
                                  Fields: (map[string]*core.MappingNode) <nil>,
                                  Items: ([]*core.MappingNode) <nil>,
                                  StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                                  SourceMeta: (*source.Meta)({
                                    Line: (int) 48,
                                    Column: (int) 23
                                  }),
                                  FieldsSourceMeta: (map[string]*source.Meta) <nil>
                                })
                              },
                              Items: ([]*core.MappingNode) <nil>,
                              StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                              SourceMeta: (*source.Meta)({
                                Line: (int) 48,
                                Column: (int) 15
                              }),
                              FieldsSourceMeta: (map[string]*source.Meta) (len=3) {
                                (string) (len=10) "annotation": (*source.Meta)({
                                  Line: (int) 50,
                                  Column: (int) 15
                                }),
                                (string) (len=9) "connectAt": (*source.Meta)({
                                  Line: (int) 49,
                                  Column: (int) 15
                                }),
                                (string) (len=6) "linkTo": (*source.Meta)({
                                  Line: (int) 48,
                                  Column: (int) 15
                                })
                              }
                            })
                          },
                          StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                          SourceMeta: (*source.Meta)({
                            Line: (int) 48,
                            Column: (int) 13
                          }),
                          FieldsSourceMeta: (map[string]*source.Meta) <nil>
                        }),
                        (string) (len=5) "point": (*core.MappingNode)({
                          Literal: (*core.ScalarValue)({
                            IntValue: (*int)(<nil>),
                            BoolValue: (*bool)(<nil>),
                            FloatValue: (*float64)(<nil>),
                            StringValue: (*string)((len=6) "20 100"),
                            SourceMeta: (*source.Meta)({
                              Line: (int) 44,
                              Column: (int) 18
                            })
                          }),
                          Fields: (map[string]*core.MappingNode) <nil>,
                          Items: ([]*core.MappingNode) <nil>,
                          StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                          SourceMeta: (*source.Meta)({
                            Line: (int) 44,
                            Column: (int) 18
                          }),
                          FieldsSourceMeta: (map[string]*source.Meta) <nil>
                        }),
                        (string) (len=5) "width": (*core.MappingNode)({
                          Literal: (*core.ScalarValue)({
                            IntValue: (*int)(50),
                            BoolValue: (*bool)(<nil>),
                            FloatValue: (*float64)(<nil>),
                            StringValue: (*string)(<nil>),
                            SourceMeta: (*source.Meta)({
                              Line: (int) 45,
                              Column: (int) 18
                            })
                          }),
                          Fields: (map[string]*core.MappingNode) <nil>,
                          Items: ([]*core.MappingNode) <nil>,
                          StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                          SourceMeta: (*source.Meta)({
                            Line: (int) 45,
                            Column: (int) 18
                          }),
                          FieldsSourceMeta: (map[string]*source.Meta) <nil>
                        })
                      },
                      Items: ([]*core.MappingNode) <nil>,
                      StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                      SourceMeta: (*source.Meta)({
                        Line: (int) 44,
                        Column: (int) 11
                      }),
                      FieldsSourceMeta: (map[string]*source.Meta) (len=4) {
                        (string) (len=6) "height": (*source.Meta)({
                          Line: (int) 46,
                          Column: (int) 11
                        }),
                        (string) (len=9) "linkPorts": (*source.Meta)({
                          Line: (int) 47,
                          Column: (int) 11
                        }),
                        (string) (len=5) "point": (*source.Meta)({
                          Line: (int) 44,
                          Column: (int) 11
                        }),
                        (string) (len=5) "width": (*source.Meta)({
                          Line: (int) 45,
                          Column: (int) 11
                        })
                      }
                    })
                  },
                  Items: ([]*core.MappingNode) <nil>,
                  StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                  SourceMeta: (*source.Meta)({
                    Line: (int) 43,
                    Column: (int) 9
                  }),
                  FieldsSourceMeta: (map[string]*source.Meta) (len=1) {
                    (string) (len=6) "visual": (*source.Meta)({
                      Line: (int) 43,
                      Column: (int) 9
                    })
                  }
                }),
                SourceMeta: (*source.Meta)({
                  Line: (int) 39,
                  Column: (int) 7
                })
              }),
              Range: (*source.Range)({
                Start: (*source.Meta)({
                  Line: (int) 39,
                  Column: (int) 7
                }),
                End: (*source.Meta)({
                  Line: (int) 52,
                  Column: (int) 7
                })
              })
            }),
            (*schema.TreeNode)({
              Label: (string) (len=12) "linkSelector",
              Path: (string) (len=22) "/orderApi/linkSelector",
              Type: (schema.TreeNodeType) 0,
              Children: ([]*schema.TreeNode) (len=1) {
                (*schema.TreeNode)({
                  Label: (string) (len=7) "byLabel",
                  Path: (string) (len=30) "/orderApi/linkSelector/byLabel",
                  Type: (schema.TreeNodeType) 0,
                  Children: ([]*schema.TreeNode) (len=1) {
                    (*schema.TreeNode)({
                      Label: (string) (len=6) "string",
                      Path: (string) (len=37) "/orderApi/linkSelector/byLabel/string",
                      Type: (schema.TreeNodeType) 1,
                      Children: ([]*schema.TreeNode) <nil>,
                      SchemaElement: (string) (len=8) "orderApi",
                      Range: (*source.Range)({
                        Start: (*source.Meta)({
                          Line: (int) 53,
                          Column: (int) 9
                        }),
                        End: (*source.Meta)({
                          Line: (int) 64,
                          Column: (int) 7
                        })
                      })
                    })
                  },
                  SchemaElement: (*schema.StringMap)({
                    Values: (map[string]string) (len=1) {
                      (string) (len=3) "app": (string) (len=8) "orderApi"
                    },
                    SourceMeta: (map[string]*source.Meta) (len=1) {
                      (string) (len=3) "app": (*source.Meta)({
                        Line: (int) 53,
                        Column: (int) 9
                      })
                    }
                  }),
                  Range: (*source.Range)({
                    Start: (*source.Meta)({
                      Line: (int) 53,
                      Column: (int) 9
                    }),
                    End: (*source.Meta)({
                      Line: (int) 64,
                      Column: (int) 7
                    })
                  })
                })
              },
              SchemaElement: (*schema.LinkSelector)({
                ByLabel: (*schema.StringMap)({
                  Values: (map[string]string) (len=1) {
                    (string) (len=3) "app": (string) (len=8) "orderApi"
                  },
                  SourceMeta: (map[string]*source.Meta) (len=1) {
                    (string) (len=3) "app": (*source.Meta)({
                      Line: (int) 53,
                      Column: (int) 9
                    })
                  }
                }),
                SourceMeta: (*source.Meta)({
                  Line: (int) 52,
                  Column: (int) 7
                })
              }),
              Range: (*source.Range)({
                Start: (*source.Meta)({
                  Line: (int) 52,
                  Column: (int) 7
                }),
                End: (*source.Meta)({
                  Line: (int) 64,
                  Column: (int) 7
                })
              })
            }),
            (*schema.TreeNode)({
              Label: (string) (len=4) "spec",
              Path: (string) (len=14) "/orderApi/spec",
              Type: (schema.TreeNodeType) 0,
              Children: ([]*schema.TreeNode) (len=3) {
                (*schema.TreeNode)({
                  Label: (string) (len=11) "environment",
                  Path: (string) (len=26) "/orderApi/spec/environment",
                  Type: (schema.TreeNodeType) 0,
                  Children: ([]*schema.TreeNode) (len=1) {
                    (*schema.TreeNode)({
                      Label: (string) (len=9) "variables",
                      Path: (string) (len=36) "/orderApi/spec/environment/variables",
                      Type: (schema.TreeNodeType) 0,
                      Children: ([]*schema.TreeNode) (len=1) {
                        (*schema.TreeNode)({
                          Label: (string) (len=14) "DYNAMODB_TABLE",
                          Path: (string) (len=51) "/orderApi/spec/environment/variables/DYNAMODB_TABLE",
                          Type: (schema.TreeNodeType) 0,
                          Children: ([]*schema.TreeNode) (len=1) {
                            (*schema.TreeNode)({
                              Label: (string) (len=10) "stringSubs",
                              Path: (string) (len=62) "/orderApi/spec/environment/variables/DYNAMODB_TABLE/stringSubs",
                              Type: (schema.TreeNodeType) 0,
                              Children: ([]*schema.TreeNode) (len=1) {
                                (*schema.TreeNode)({
                                  Label: (string) (len=13) "dynamoDBTable",
                                  Path: (string) (len=83) "/orderApi/spec/environment/variables/DYNAMODB_TABLE/stringSubs/varRef/dynamoDBTable",
                                  Type: (schema.TreeNodeType) 1,
                                  Children: ([]*schema.TreeNode) <nil>,
                                  SchemaElement: (*substitutions.SubstitutionVariable)({
                                    VariableName: (string) (len=13) "dynamoDBTable",
                                    SourceMeta: (*source.Meta)({
                                      Line: (int) 66,
                                      Column: (int) 29
                                    })
                                  }),
                                  Range: (*source.Range)({
                                    Start: (*source.Meta)({
                                      Line: (int) 66,
                                      Column: (int) 29
                                    }),
                                    End: (*source.Meta)({
                                      Line: (int) 71,
                                      Column: (int) 7
                                    })
                                  })
                                })
                              },
                              SchemaElement: (*substitutions.StringOrSubstitutions)({
                                Values: ([]*substitutions.StringOrSubstitution) (len=1) {
                                  (*substitutions.StringOrSubstitution)({
                                    StringValue: (*string)(<nil>),
                                    SubstitutionValue: (*substitutions.Substitution)({
                                      Function: (*substitutions.SubstitutionFunctionExpr)(<nil>),
                                      Variable: (*substitutions.SubstitutionVariable)({
                                        VariableName: (string) (len=13) "dynamoDBTable",
                                        SourceMeta: (*source.Meta)({
                                          Line: (int) 66,
                                          Column: (int) 29
                                        })
                                      }),
                                      ValueReference: (*substitutions.SubstitutionValueReference)(<nil>),
                                      ElemReference: (*substitutions.SubstitutionElemReference)(<nil>),
                                      ElemIndexReference: (*substitutions.SubstitutionElemIndexReference)(<nil>),
                                      DataSourceProperty: (*substitutions.SubstitutionDataSourceProperty)(<nil>),
                                      ResourceProperty: (*substitutions.SubstitutionResourceProperty)(<nil>),
                                      Child: (*substitutions.SubstitutionChild)(<nil>),
                                      StringValue: (*string)(<nil>),
                                      IntValue: (*int64)(<nil>),
                                      FloatValue: (*float64)(<nil>),
                                      BoolValue: (*bool)(<nil>),
                                      SourceMeta: (*source.Meta)({
                                        Line: (int) 66,
                                        Column: (int) 29
                                      })
                                    }),
                                    SourceMeta: (*source.Meta)({
                                      Line: (int) 66,
                                      Column: (int) 27
                                    })
                                  })
                                },
                                SourceMeta: (*source.Meta)({
                                  Line: (int) 66,
                                  Column: (int) 27
                                })
                              }),
                              Range: (*source.Range)({
                                Start: (*source.Meta)({
                                  Line: (int) 66,
                                  Column: (int) 27
                                }),
                                End: (*source.Meta)({
                                  Line: (int) 71,
                                  Column: (int) 7
                                })
                              })
                            })
                          },
                          SchemaElement: (*core.MappingNode)({
                            Literal: (*core.ScalarValue)(<nil>),
                            Fields: (map[string]*core.MappingNode) <nil>,
                            Items: ([]*core.MappingNode) <nil>,
                            StringWithSubstitutions: (*substitutions.StringOrSubstitutions)({
                              Values: ([]*substitutions.StringOrSubstitution) (len=1) {
                                (*substitutions.StringOrSubstitution)({
                                  StringValue: (*string)(<nil>),
                                  SubstitutionValue: (*substitutions.Substitution)({
                                    Function: (*substitutions.SubstitutionFunctionExpr)(<nil>),
                                    Variable: (*substitutions.SubstitutionVariable)({
                                      VariableName: (string) (len=13) "dynamoDBTable",
                                      SourceMeta: (*source.Meta)({
                                        Line: (int) 66,
                                        Column: (int) 29
                                      })
                                    }),
                                    ValueReference: (*substitutions.SubstitutionValueReference)(<nil>),
                                    ElemReference: (*substitutions.SubstitutionElemReference)(<nil>),
                                    ElemIndexReference: (*substitutions.SubstitutionElemIndexReference)(<nil>),
                                    DataSourceProperty: (*substitutions.SubstitutionDataSourceProperty)(<nil>),
                                    ResourceProperty: (*substitutions.SubstitutionResourceProperty)(<nil>),
                                    Child: (*substitutions.SubstitutionChild)(<nil>),
                                    StringValue: (*string)(<nil>),
                                    IntValue: (*int64)(<nil>),
                                    FloatValue: (*float64)(<nil>),
                                    BoolValue: (*bool)(<nil>),
                                    SourceMeta: (*source.Meta)({
                                      Line: (int) 66,
                                      Column: (int) 29
                                    })
                                  }),
                                  SourceMeta: (*source.Meta)({
                                    Line: (int) 66,
                                    Column: (int) 27
                                  })
                                })
                              },
                              SourceMeta: (*source.Meta)({
                                Line: (int) 66,
                                Column: (int) 27
                              })
                            }),
                            SourceMeta: (*source.Meta)({
                              Line: (int) 66,
                              Column: (int) 27
                            }),
                            FieldsSourceMeta: (map[string]*source.Meta) <nil>
                          }),
                          Range: (*source.Range)({
                            Start: (*source.Meta)({
                              Line: (int) 66,
                              Column: (int) 11
                            }),
                            End: (*source.Meta)({
                              Line: (int) 71,
                              Column: (int) 7
                            })
                          })
                        })
                      },
                      SchemaElement: (*core.MappingNode)({
                        Literal: (*core.ScalarValue)(<nil>),
                        Fields: (map[string]*core.MappingNode) (len=1) {
                          (string) (len=14) "DYNAMODB_TABLE": (*core.MappingNode)({
                            Literal: (*core.ScalarValue)(<nil>),
                            Fields: (map[string]*core.MappingNode) <nil>,
                            Items: ([]*core.MappingNode) <nil>,
                            StringWithSubstitutions: (*substitutions.StringOrSubstitutions)({
                              Values: ([]*substitutions.StringOrSubstitution) (len=1) {
                                (*substitutions.StringOrSubstitution)({
                                  StringValue: (*string)(<nil>),
                                  SubstitutionValue: (*substitutions.Substitution)({
                                    Function: (*substitutions.SubstitutionFunctionExpr)(<nil>),
                                    Variable: (*substitutions.SubstitutionVariable)({
                                      VariableName: (string) (len=13) "dynamoDBTable",
                                      SourceMeta: (*source.Meta)({
                                        Line: (int) 66,
                                        Column: (int) 29
                                      })
                                    }),
                                    ValueReference: (*substitutions.SubstitutionValueReference)(<nil>),
                                    ElemReference: (*substitutions.SubstitutionElemReference)(<nil>),
                                    ElemIndexReference: (*substitutions.SubstitutionElemIndexReference)(<nil>),
                                    DataSourceProperty: (*substitutions.SubstitutionDataSourceProperty)(<nil>),
                                    ResourceProperty: (*substitutions.SubstitutionResourceProperty)(<nil>),
                                    Child: (*substitutions.SubstitutionChild)(<nil>),
                                    StringValue: (*string)(<nil>),
                                    IntValue: (*int64)(<nil>),
                                    FloatValue: (*float64)(<nil>),
                                    BoolValue: (*bool)(<nil>),
                                    SourceMeta: (*source.Meta)({
                                      Line: (int) 66,
                                      Column: (int) 29
                                    })
                                  }),
                                  SourceMeta: (*source.Meta)({
                                    Line: (int) 66,
                                    Column: (int) 27
                                  })
                                })
                              },
                              SourceMeta: (*source.Meta)({
                                Line: (int) 66,
                                Column: (int) 27
                              })
                            }),
                            SourceMeta: (*source.Meta)({
                              Line: (int) 66,
                              Column: (int) 27
                            }),
                            FieldsSourceMeta: (map[string]*source.Meta) <nil>
                          })
                        },
                        Items: ([]*core.MappingNode) <nil>,
                        StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                        SourceMeta: (*source.Meta)({
                          Line: (int) 66,
                          Column: (int) 11
                        }),
                        FieldsSourceMeta: (map[string]*source.Meta) (len=1) {
                          (string) (len=14) "DYNAMODB_TABLE": (*source.Meta)({
                            Line: (int) 66,
                            Column: (int) 11
                          })
                        }
                      }),
                      Range: (*source.Range)({
                        Start: (*source.Meta)({
                          Line: (int) 65,
                          Column: (int) 9
                        }),
                        End: (*source.Meta)({
                          Line: (int) 71,
                          Column: (int) 7
                        })
                      })
                    })
                  },
                  SchemaElement: (*core.MappingNode)({
                    Literal: (*core.ScalarValue)(<nil>),
                    Fields: (map[string]*core.MappingNode) (len=1) {
                      (string) (len=9) "variables": (*core.MappingNode)({
                        Literal: (*core.ScalarValue)(<nil>),
                        Fields: (map[string]*core.MappingNode) (len=1) {
                          (string) (len=14) "DYNAMODB_TABLE": (*core.MappingNode)({
                            Literal: (*core.ScalarValue)(<nil>),
                            Fields: (map[string]*core.MappingNode) <nil>,
                            Items: ([]*core.MappingNode) <nil>,
                            StringWithSubstitutions: (*substitutions.StringOrSubstitutions)({
                              Values: ([]*substitutions.StringOrSubstitution) (len=1) {
                                (*substitutions.StringOrSubstitution)({
                                  StringValue: (*string)(<nil>),
                                  SubstitutionValue: (*substitutions.Substitution)({
                                    Function: (*substitutions.SubstitutionFunctionExpr)(<nil>),
                                    Variable: (*substitutions.SubstitutionVariable)({
                                      VariableName: (string) (len=13) "dynamoDBTable",
                                      SourceMeta: (*source.Meta)({
                                        Line: (int) 66,
                                        Column: (int) 29
                                      })
                                    }),
                                    ValueReference: (*substitutions.SubstitutionValueReference)(<nil>),
                                    ElemReference: (*substitutions.SubstitutionElemReference)(<nil>),
                                    ElemIndexReference: (*substitutions.SubstitutionElemIndexReference)(<nil>),
                                    DataSourceProperty: (*substitutions.SubstitutionDataSourceProperty)(<nil>),
                                    ResourceProperty: (*substitutions.SubstitutionResourceProperty)(<nil>),
                                    Child: (*substitutions.SubstitutionChild)(<nil>),
                                    StringValue: (*string)(<nil>),
                                    IntValue: (*int64)(<nil>),
                                    FloatValue: (*float64)(<nil>),
                                    BoolValue: (*bool)(<nil>),
                                    SourceMeta: (*source.Meta)({
                                      Line: (int) 66,
                                      Column: (int) 29
                                    })
                                  }),
                                  SourceMeta: (*source.Meta)({
                                    Line: (int) 66,
                                    Column: (int) 27
                                  })
                                })
                              },
                              SourceMeta: (*source.Meta)({
                                Line: (int) 66,
                                Column: (int) 27
                              })
                            }),
                            SourceMeta: (*source.Meta)({
                              Line: (int) 66,
                              Column: (int) 27
                            }),
                            FieldsSourceMeta: (map[string]*source.Meta) <nil>
                          })
                        },
                        Items: ([]*core.MappingNode) <nil>,
                        StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                        SourceMeta: (*source.Meta)({
                          Line: (int) 66,
                          Column: (int) 11
                        }),
                        FieldsSourceMeta: (map[string]*source.Meta) (len=1) {
                          (string) (len=14) "DYNAMODB_TABLE": (*source.Meta)({
                            Line: (int) 66,
                            Column: (int) 11
                          })
                        }
                      })
                    },
                    Items: ([]*core.MappingNode) <nil>,
                    StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                    SourceMeta: (*source.Meta)({
                      Line: (int) 65,
                      Column: (int) 9
                    }),
                    FieldsSourceMeta: (map[string]*source.Meta) (len=1) {
                      (string) (len=9) "variables": (*source.Meta)({
                        Line: (int) 65,
                        Column: (int) 9
                      })
                    }
                  }),
                  Range: (*source.Range)({
                    Start: (*source.Meta)({
                      Line: (int) 64,
                      Column: (int) 7
                    }),
                    End: (*source.Meta)({
                      Line: (int) 71,
                      Column: (int) 7
                    })
                  })
                }),
                (*schema.TreeNode)({
                  Label: (string) (len=7) "runtime",
                  Path: (string) (len=22) "/orderApi/spec/runtime",
                  Type: (schema.TreeNodeType) 0,
                  Children: ([]*schema.TreeNode) (len=1) {
                    (*schema.TreeNode)({
                      Label: (string) (len=6) "scalar",
                      Path: (string) (len=29) "/orderApi/spec/runtime/scalar",
                      Type: (schema.TreeNodeType) 1,
                      Children: ([]*schema.TreeNode) <nil>,
                      SchemaElement: (*core.ScalarValue)({
                        IntValue: (*int)(<nil>),
                        BoolValue: (*bool)(<nil>),
                        FloatValue: (*float64)(<nil>),
                        StringValue: (*string)((len=5) "go1.x"),
                        SourceMeta: (*source.Meta)({
                          Line: (int) 71,
                          Column: (int) 16
                        })
                      }),
                      Range: (*source.Range)({
                        Start: (*source.Meta)({
                          Line: (int) 71,
                          Column: (int) 16
                        }),
                        End: (*source.Meta)({
                          Line: (int) 74,
                          Column: (int) 7
                        })
                      })
                    })
                  },
                  SchemaElement: (*core.MappingNode)({
                    Literal: (*core.ScalarValue)({
                      IntValue: (*int)(<nil>),
                      BoolValue: (*bool)(<nil>),
                      FloatValue: (*float64)(<nil>),
                      StringValue: (*string)((len=5) "go1.x"),
                      SourceMeta: (*source.Meta)({
                        Line: (int) 71,
                        Column: (int) 16
                      })
                    }),
                    Fields: (map[string]*core.MappingNode) <nil>,
                    Items: ([]*core.MappingNode) <nil>,
                    StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                    SourceMeta: (*source.Meta)({
                      Line: (int) 71,
                      Column: (int) 16
                    }),
                    FieldsSourceMeta: (map[string]*source.Meta) <nil>
                  }),
                  Range: (*source.Range)({
                    Start: (*source.Meta)({
                      Line: (int) 71,
                      Column: (int) 7
                    }),
                    End: (*source.Meta)({
                      Line: (int) 74,
                      Column: (int) 7
                    })
                  })
                }),
                (*schema.TreeNode)({
                  Label: (string) (len=14) "tracingEnabled",
                  Path: (string) (len=29) "/orderApi/spec/tracingEnabled",
                  Type: (schema.TreeNodeType) 0,
                  Children: ([]*schema.TreeNode) (len=1) {
                    (*schema.TreeNode)({
                      Label: (string) (len=6) "scalar",
                      Path: (string) (len=36) "/orderApi/spec/tracingEnabled/scalar",
                      Type: (schema.TreeNodeType) 1,
                      Children: ([]*schema.TreeNode) <nil>,
                      SchemaElement: (*core.ScalarValue)({
                        IntValue: (*int)(<nil>),
                        BoolValue: (*bool)(true),
                        FloatValue: (*float64)(<nil>),
                        StringValue: (*string)(<nil>),
                        SourceMeta: (*source.Meta)({
                          Line: (int) 74,
                          Column: (int) 23
                        })
                      }),
                      Range: (*source.Range)({
                        Start: (*source.Meta)({
                          Line: (int) 74,
                          Column: (int) 23
                        }),
                        End: (*source.Meta)({
                          Line: (int) 81,
                          Column: (int) 3
                        })
                      })
                    })
                  },
                  SchemaElement: (*core.MappingNode)({
                    Literal: (*core.ScalarValue)({
                      IntValue: (*int)(<nil>),
                      BoolValue: (*bool)(true),
                      FloatValue: (*float64)(<nil>),
                      StringValue: (*string)(<nil>),
                      SourceMeta: (*source.Meta)({
                        Line: (int) 74,
                        Column: (int) 23
                      })
                    }),
                    Fields: (map[string]*core.MappingNode) <nil>,
                    Items: ([]*core.MappingNode) <nil>,
                    StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                    SourceMeta: (*source.Meta)({
                      Line: (int) 74,
                      Column: (int) 23
                    }),
                    FieldsSourceMeta: (map[string]*source.Meta) <nil>
                  }),
                  Range: (*source.Range)({
                    Start: (*source.Meta)({
                      Line: (int) 74,
                      Column: (int) 7
                    }),
                    End: (*source.Meta)({
                      Line: (int) 81,
                      Column: (int) 3
                    })
                  })
                })
              },
              SchemaElement: (*core.MappingNode)({
                Literal: (*core.ScalarValue)(<nil>),
                Fields: (map[string]*core.MappingNode) (len=3) {
                  (string) (len=11) "environment": (*core.MappingNode)({
                    Literal: (*core.ScalarValue)(<nil>),
                    Fields: (map[string]*core.MappingNode) (len=1) {
                      (string) (len=9) "variables": (*core.MappingNode)({
                        Literal: (*core.ScalarValue)(<nil>),
                        Fields: (map[string]*core.MappingNode) (len=1) {
                          (string) (len=14) "DYNAMODB_TABLE": (*core.MappingNode)({
                            Literal: (*core.ScalarValue)(<nil>),
                            Fields: (map[string]*core.MappingNode) <nil>,
                            Items: ([]*core.MappingNode) <nil>,
                            StringWithSubstitutions: (*substitutions.StringOrSubstitutions)({
                              Values: ([]*substitutions.StringOrSubstitution) (len=1) {
                                (*substitutions.StringOrSubstitution)({
                                  StringValue: (*string)(<nil>),
                                  SubstitutionValue: (*substitutions.Substitution)({
                                    Function: (*substitutions.SubstitutionFunctionExpr)(<nil>),
                                    Variable: (*substitutions.SubstitutionVariable)({
                                      VariableName: (string) (len=13) "dynamoDBTable",
                                      SourceMeta: (*source.Meta)({
                                        Line: (int) 66,
                                        Column: (int) 29
                                      })
                                    }),
                                    ValueReference: (*substitutions.SubstitutionValueReference)(<nil>),
                                    ElemReference: (*substitutions.SubstitutionElemReference)(<nil>),
                                    ElemIndexReference: (*substitutions.SubstitutionElemIndexReference)(<nil>),
                                    DataSourceProperty: (*substitutions.SubstitutionDataSourceProperty)(<nil>),
                                    ResourceProperty: (*substitutions.SubstitutionResourceProperty)(<nil>),
                                    Child: (*substitutions.SubstitutionChild)(<nil>),
                                    StringValue: (*string)(<nil>),
                                    IntValue: (*int64)(<nil>),
                                    FloatValue: (*float64)(<nil>),
                                    BoolValue: (*bool)(<nil>),
                                    SourceMeta: (*source.Meta)({
                                      Line: (int) 66,
                                      Column: (int) 29
                                    })
                                  }),
                                  SourceMeta: (*source.Meta)({
                                    Line: (int) 66,
                                    Column: (int) 27
                                  })
                                })
                              },
                              SourceMeta: (*source.Meta)({
                                Line: (int) 66,
                                Column: (int) 27
                              })
                            }),
                            SourceMeta: (*source.Meta)({
                              Line: (int) 66,
                              Column: (int) 27
                            }),
                            FieldsSourceMeta: (map[string]*source.Meta) <nil>
                          })
                        },
                        Items: ([]*core.MappingNode) <nil>,
                        StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                        SourceMeta: (*source.Meta)({
                          Line: (int) 66,
                          Column: (int) 11
                        }),
                        FieldsSourceMeta: (map[string]*source.Meta) (len=1) {
                          (string) (len=14) "DYNAMODB_TABLE": (*source.Meta)({
                            Line: (int) 66,
                            Column: (int) 11
                          })
                        }
                      })
                    },
                    Items: ([]*core.MappingNode) <nil>,
                    StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                    SourceMeta: (*source.Meta)({
                      Line: (int) 65,
                      Column: (int) 9
                    }),
                    FieldsSourceMeta: (map[string]*source.Meta) (len=1) {
                      (string) (len=9) "variables": (*source.Meta)({
                        Line: (int) 65,
                        Column: (int) 9
                      })
                    }
                  }),
                  (string) (len=7) "runtime": (*core.MappingNode)({
                    Literal: (*core.ScalarValue)({
                      IntValue: (*int)(<nil>),
                      BoolValue: (*bool)(<nil>),
                      FloatValue: (*float64)(<nil>),
                      StringValue: (*string)((len=5) "go1.x"),
                      SourceMeta: (*source.Meta)({
                        Line: (int) 71,
                        Column: (int) 16
                      })
                    }),
                    Fields: (map[string]*core.MappingNode) <nil>,
                    Items: ([]*core.MappingNode) <nil>,
                    StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                    SourceMeta: (*source.Meta)({
                      Line: (int) 71,
                      Column: (int) 16
                    }),
                    FieldsSourceMeta: (map[string]*source.Meta) <nil>
                  }),
                  (string) (len=14) "tracingEnabled": (*core.MappingNode)({
                    Literal: (*core.ScalarValue)({
                      IntValue: (*int)(<nil>),
                      BoolValue: (*bool)(true),
                      FloatValue: (*float64)(<nil>),
                      StringValue: (*string)(<nil>),
                      SourceMeta: (*source.Meta)({
                        Line: (int) 74,
                        Column: (int) 23
                      })
                    }),
                    Fields: (map[string]*core.MappingNode) <nil>,
                    Items: ([]*core.MappingNode) <nil>,
                    StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                    SourceMeta: (*source.Meta)({
                      Line: (int) 74,
                      Column: (int) 23
                    }),
                    FieldsSourceMeta: (map[string]*source.Meta) <nil>
                  })
                },
                Items: ([]*core.MappingNode) <nil>,
                StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                SourceMeta: (*source.Meta)({
                  Line: (int) 64,
                  Column: (int) 7
                }),
                FieldsSourceMeta: (map[string]*source.Meta) (len=3) {
                  (string) (len=11) "environment": (*source.Meta)({
                    Line: (int) 64,
                    Column: (int) 7
                  }),
                  (string) (len=7) "runtime": (*source.Meta)({
                    Line: (int) 71,
                    Column: (int) 7
                  }),
                  (string) (len=14) "tracingEnabled": (*source.Meta)({
                    Line: (int) 74,
                    Column: (int) 7
                  })
                }
              }),
              Range: (*source.Range)({
                Start: (*source.Meta)({
                  Line: (int) 64,
                  Column: (int) 7
                }),
                End: (*source.Meta)({
                  Line: (int) 81,
                  Column: (int) 3
                })
              })
            })
          },
          SchemaElement: (*schema.Resource)({
            Type: (*schema.ResourceTypeWrapper)({
              Value: (string) (len=12) "celerity/api",
              SourceMeta: (*source.Meta)({
                Line: (int) 37,
                Column: (int) 11
              })
            }),
            Description: (*substitutions.StringOrSubstitutions)(<nil>),
            Metadata: (*schema.Metadata)({
              DisplayName: (*substitutions.StringOrSubstitutions)({
                Values: ([]*substitutions.StringOrSubstitution) (len=1) {
                  (*substitutions.StringOrSubstitution)({
                    StringValue: (*string)((len=9) "Order API"),
                    SubstitutionValue: (*substitutions.Substitution)(<nil>),
                    SourceMeta: (*source.Meta)({
                      Line: (int) 39,
                      Column: (int) 20
                    })
                  })
                },
                SourceMeta: (*source.Meta)({
                  Line: (int) 39,
                  Column: (int) 20
                })
              }),
              Annotations: (*schema.StringOrSubstitutionsMap)(<nil>),
              Labels: (*schema.StringMap)({
                Values: (map[string]string) (len=1) {
                  (string) (len=3) "app": (string) (len=8) "orderApi"
                },
                SourceMeta: (map[string]*source.Meta) (len=1) {
                  (string) (len=3) "app": (*source.Meta)({
                    Line: (int) 41,
                    Column: (int) 9
                  })
                }
              }),
              Custom: (*core.MappingNode)({
                Literal: (*core.ScalarValue)(<nil>),
                Fields: (map[string]*core.MappingNode) (len=1) {
                  (string) (len=6) "visual": (*core.MappingNode)({
                    Literal: (*core.ScalarValue)(<nil>),
                    Fields: (map[string]*core.MappingNode) (len=4) {
                      (string) (len=6) "height": (*core.MappingNode)({
                        Literal: (*core.ScalarValue)({
                          IntValue: (*int)(50),
                          BoolValue: (*bool)(<nil>),
                          FloatValue: (*float64)(<nil>),
                          StringValue: (*string)(<nil>),
                          SourceMeta: (*source.Meta)({
                            Line: (int) 46,
                            Column: (int) 19
                          })
                        }),
                        Fields: (map[string]*core.MappingNode) <nil>,
                        Items: ([]*core.MappingNode) <nil>,
                        StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                        SourceMeta: (*source.Meta)({
                          Line: (int) 46,
                          Column: (int) 19
                        }),
                        FieldsSourceMeta: (map[string]*source.Meta) <nil>
                      }),
                      (string) (len=9) "linkPorts": (*core.MappingNode)({
                        Literal: (*core.ScalarValue)(<nil>),
                        Fields: (map[string]*core.MappingNode) <nil>,
                        Items: ([]*core.MappingNode) (len=1) {
                          (*core.MappingNode)({
                            Literal: (*core.ScalarValue)(<nil>),
                            Fields: (map[string]*core.MappingNode) (len=3) {
                              (string) (len=10) "annotation": (*core.MappingNode)({
                                Literal: (*core.ScalarValue)({
                                  IntValue: (*int)(<nil>),
                                  BoolValue: (*bool)(<nil>),
                                  FloatValue: (*float64)(<nil>),
                                  StringValue: (*string)((len=10) "Orders API"),
                                  SourceMeta: (*source.Meta)({
                                    Line: (int) 50,
                                    Column: (int) 27
                                  })
                                }),
                                Fields: (map[string]*core.MappingNode) <nil>,
                                Items: ([]*core.MappingNode) <nil>,
                                StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                                SourceMeta: (*source.Meta)({
                                  Line: (int) 50,
                                  Column: (int) 27
                                }),
                                FieldsSourceMeta: (map[string]*source.Meta) <nil>
                              }),
                              (string) (len=9) "connectAt": (*core.MappingNode)({
                                Literal: (*core.ScalarValue)({
                                  IntValue: (*int)(<nil>),
                                  BoolValue: (*bool)(<nil>),
                                  FloatValue: (*float64)(<nil>),
                                  StringValue: (*string)((len=6) "70 100"),
                                  SourceMeta: (*source.Meta)({
                                    Line: (int) 49,
                                    Column: (int) 26
                                  })
                                }),
                                Fields: (map[string]*core.MappingNode) <nil>,
                                Items: ([]*core.MappingNode) <nil>,
                                StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                                SourceMeta: (*source.Meta)({
                                  Line: (int) 49,
                                  Column: (int) 26
                                }),
                                FieldsSourceMeta: (map[string]*source.Meta) <nil>
                              }),
                              (string) (len=6) "linkTo": (*core.MappingNode)({
                                Literal: (*core.ScalarValue)({
                                  IntValue: (*int)(<nil>),
                                  BoolValue: (*bool)(<nil>),
                                  FloatValue: (*float64)(<nil>),
                                  StringValue: (*string)((len=16) "getOrderEndpoint"),
                                  SourceMeta: (*source.Meta)({
                                    Line: (int) 48,
                                    Column: (int) 23
                                  })
                                }),
                                Fields: (map[string]*core.MappingNode) <nil>,
                                Items: ([]*core.MappingNode) <nil>,
                                StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                                SourceMeta: (*source.Meta)({
                                  Line: (int) 48,
                                  Column: (int) 23
                                }),
                                FieldsSourceMeta: (map[string]*source.Meta) <nil>
                              })
                            },
                            Items: ([]*core.MappingNode) <nil>,
                            StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                            SourceMeta: (*source.Meta)({
                              Line: (int) 48,
                              Column: (int) 15
                            }),
                            FieldsSourceMeta: (map[string]*source.Meta) (len=3) {
                              (string) (len=10) "annotation": (*source.Meta)({
                                Line: (int) 50,
                                Column: (int) 15
                              }),
                              (string) (len=9) "connectAt": (*source.Meta)({
                                Line: (int) 49,
                                Column: (int) 15
                              }),
                              (string) (len=6) "linkTo": (*source.Meta)({
                                Line: (int) 48,
                                Column: (int) 15
                              })
                            }
                          })
                        },
                        StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                        SourceMeta: (*source.Meta)({
                          Line: (int) 48,
                          Column: (int) 13
                        }),
                        FieldsSourceMeta: (map[string]*source.Meta) <nil>
                      }),
                      (string) (len=5) "point": (*core.MappingNode)({
                        Literal: (*core.ScalarValue)({
                          IntValue: (*int)(<nil>),
                          BoolValue: (*bool)(<nil>),
                          FloatValue: (*float64)(<nil>),
                          StringValue: (*string)((len=6) "20 100"),
                          SourceMeta: (*source.Meta)({
                            Line: (int) 44,
                            Column: (int) 18
                          })
                        }),
                        Fields: (map[string]*core.MappingNode) <nil>,
                        Items: ([]*core.MappingNode) <nil>,
                        StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                        SourceMeta: (*source.Meta)({
                          Line: (int) 44,
                          Column: (int) 18
                        }),
                        FieldsSourceMeta: (map[string]*source.Meta) <nil>
                      }),
                      (string) (len=5) "width": (*core.MappingNode)({
                        Literal: (*core.ScalarValue)({
                          IntValue: (*int)(50),
                          BoolValue: (*bool)(<nil>),
                          FloatValue: (*float64)(<nil>),
                          StringValue: (*string)(<nil>),
                          SourceMeta: (*source.Meta)({
                            Line: (int) 45,
                            Column: (int) 18
                          })
                        }),
                        Fields: (map[string]*core.MappingNode) <nil>,
                        Items: ([]*core.MappingNode) <nil>,
                        StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                        SourceMeta: (*source.Meta)({
                          Line: (int) 45,
                          Column: (int) 18
                        }),
                        FieldsSourceMeta: (map[string]*source.Meta) <nil>
                      })
                    },
                    Items: ([]*core.MappingNode) <nil>,
                    StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                    SourceMeta: (*source.Meta)({
                      Line: (int) 44,
                      Column: (int) 11
                    }),
                    FieldsSourceMeta: (map[string]*source.Meta) (len=4) {
                      (string) (len=6) "height": (*source.Meta)({
                        Line: (int) 46,
                        Column: (int) 11
                      }),
                      (string) (len=9) "linkPorts": (*source.Meta)({
                        Line: (int) 47,
                        Column: (int) 11
                      }),
                      (string) (len=5) "point": (*source.Meta)({
                        Line: (int) 44,
                        Column: (int) 11
                      }),
                      (string) (len=5) "width": (*source.Meta)({
                        Line: (int) 45,
                        Column: (int) 11
                      })
                    }
                  })
                },
                Items: ([]*core.MappingNode) <nil>,
                StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                SourceMeta: (*source.Meta)({
                  Line: (int) 43,
                  Column: (int) 9
                }),
                FieldsSourceMeta: (map[string]*source.Meta) (len=1) {
                  (string) (len=6) "visual": (*source.Meta)({
                    Line: (int) 43,
                    Column: (int) 9
                  })
                }
              }),
              SourceMeta: (*source.Meta)({
                Line: (int) 39,
                Column: (int) 7
              })
            }),
            Condition: (*schema.Condition)(<nil>),
            Each: (*substitutions.StringOrSubstitutions)(<nil>),
            LinkSelector: (*schema.LinkSelector)({
              ByLabel: (*schema.StringMap)({
                Values: (map[string]string) (len=1) {
                  (string) (len=3) "app": (string) (len=8) "orderApi"
                },
                SourceMeta: (map[string]*source.Meta) (len=1) {
                  (string) (len=3) "app": (*source.Meta)({
                    Line: (int) 53,
                    Column: (int) 9
                  })
                }
              }),
              SourceMeta: (*source.Meta)({
                Line: (int) 52,
                Column: (int) 7
              })
            }),
            Spec: (*core.MappingNode)({
              Literal: (*core.ScalarValue)(<nil>),
              Fields: (map[string]*core.MappingNode) (len=3) {
                (string) (len=11) "environment": (*core.MappingNode)({
                  Literal: (*core.ScalarValue)(<nil>),
                  Fields: (map[string]*core.MappingNode) (len=1) {
                    (string) (len=9) "variables": (*core.MappingNode)({
                      Literal: (*core.ScalarValue)(<nil>),
                      Fields: (map[string]*core.MappingNode) (len=1) {
                        (string) (len=14) "DYNAMODB_TABLE": (*core.MappingNode)({
                          Literal: (*core.ScalarValue)(<nil>),
                          Fields: (map[string]*core.MappingNode) <nil>,
                          Items: ([]*core.MappingNode) <nil>,
                          StringWithSubstitutions: (*substitutions.StringOrSubstitutions)({
                            Values: ([]*substitutions.StringOrSubstitution) (len=1) {
                              (*substitutions.StringOrSubstitution)({
                                StringValue: (*string)(<nil>),
                                SubstitutionValue: (*substitutions.Substitution)({
                                  Function: (*substitutions.SubstitutionFunctionExpr)(<nil>),
                                  Variable: (*substitutions.SubstitutionVariable)({
                                    VariableName: (string) (len=13) "dynamoDBTable",
                                    SourceMeta: (*source.Meta)({
                                      Line: (int) 66,
                                      Column: (int) 29
                                    })
                                  }),
                                  ValueReference: (*substitutions.SubstitutionValueReference)(<nil>),
                                  ElemReference: (*substitutions.SubstitutionElemReference)(<nil>),
                                  ElemIndexReference: (*substitutions.SubstitutionElemIndexReference)(<nil>),
                                  DataSourceProperty: (*substitutions.SubstitutionDataSourceProperty)(<nil>),
                                  ResourceProperty: (*substitutions.SubstitutionResourceProperty)(<nil>),
                                  Child: (*substitutions.SubstitutionChild)(<nil>),
                                  StringValue: (*string)(<nil>),
                                  IntValue: (*int64)(<nil>),
                                  FloatValue: (*float64)(<nil>),
                                  BoolValue: (*bool)(<nil>),
                                  SourceMeta: (*source.Meta)({
                                    Line: (int) 66,
                                    Column: (int) 29
                                  })
                                }),
                                SourceMeta: (*source.Meta)({
                                  Line: (int) 66,
                                  Column: (int) 27
                                })
                              })
                            },
                            SourceMeta: (*source.Meta)({
                              Line: (int) 66,
                              Column: (int) 27
                            })
                          }),
                          SourceMeta: (*source.Meta)({
                            Line: (int) 66,
                            Column: (int) 27
                          }),
                          FieldsSourceMeta: (map[string]*source.Meta) <nil>
                        })
                      },
                      Items: ([]*core.MappingNode) <nil>,
                      StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                      SourceMeta: (*source.Meta)({
                        Line: (int) 66,
                        Column: (int) 11
                      }),
                      FieldsSourceMeta: (map[string]*source.Meta) (len=1) {
                        (string) (len=14) "DYNAMODB_TABLE": (*source.Meta)({
                          Line: (int) 66,
                          Column: (int) 11
                        })
                      }
                    })
                  },
                  Items: ([]*core.MappingNode) <nil>,
                  StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                  SourceMeta: (*source.Meta)({
                    Line: (int) 65,
                    Column: (int) 9
                  }),
                  FieldsSourceMeta: (map[string]*source.Meta) (len=1) {
                    (string) (len=9) "variables": (*source.Meta)({
                      Line: (int) 65,
                      Column: (int) 9
                    })
                  }
                }),
                (string) (len=7) "runtime": (*core.MappingNode)({
                  Literal: (*core.ScalarValue)({
                    IntValue: (*int)(<nil>),
                    BoolValue: (*bool)(<nil>),
                    FloatValue: (*float64)(<nil>),
                    StringValue: (*string)((len=5) "go1.x"),
                    SourceMeta: (*source.Meta)({
                      Line: (int) 71,
                      Column: (int) 16
                    })
                  }),
                  Fields: (map[string]*core.MappingNode) <nil>,
                  Items: ([]*core.MappingNode) <nil>,
                  StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                  SourceMeta: (*source.Meta)({
                    Line: (int) 71,
                    Column: (int) 16
                  }),
                  FieldsSourceMeta: (map[string]*source.Meta) <nil>
                }),
                (string) (len=14) "tracingEnabled": (*core.MappingNode)({
                  Literal: (*core.ScalarValue)({
                    IntValue: (*int)(<nil>),
                    BoolValue: (*bool)(true),
                    FloatValue: (*float64)(<nil>),
                    StringValue: (*string)(<nil>),
                    SourceMeta: (*source.Meta)({
                      Line: (int) 74,
                      Column: (int) 23
                    })
                  }),
                  Fields: (map[string]*core.MappingNode) <nil>,
                  Items: ([]*core.MappingNode) <nil>,
                  StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                  SourceMeta: (*source.Meta)({
                    Line: (int) 74,
                    Column: (int) 23
                  }),
                  FieldsSourceMeta: (map[string]*source.Meta) <nil>
                })
              },
              Items: ([]*core.MappingNode) <nil>,
              StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
              SourceMeta: (*source.Meta)({
                Line: (int) 64,
                Column: (int) 7
              }),
              FieldsSourceMeta: (map[string]*source.Meta) (len=3) {
                (string) (len=11) "environment": (*source.Meta)({
                  Line: (int) 64,
                  Column: (int) 7
                }),
                (string) (len=7) "runtime": (*source.Meta)({
                  Line: (int) 71,
                  Column: (int) 7
                }),
                (string) (len=14) "tracingEnabled": (*source.Meta)({
                  Line: (int) 74,
                  Column: (int) 7
                })
              }
            }),
            SourceMeta: (*source.Meta)({
              Line: (int) 37,
              Column: (int) 5
            })
          }),
          Range: (*source.Range)({
            Start: (*source.Meta)({
              Line: (int) 34,
              Column: (int) 3
            }),
            End: (*source.Meta)({
              Line: (int) 81,
              Column: (int) 3
            })
          })
        }),
        (*schema.TreeNode)({
          Label: (string) (len=10) "authoriser",
          Path: (string) (len=11) "/authoriser",
          Type: (schema.TreeNodeType) 0,
          Children: ([]*schema.TreeNode) (len=3) {
            (*schema.TreeNode)({
              Label: (string) (len=4) "type",
              Path: (string) (len=16) "/authoriser/type",
              Type: (schema.TreeNodeType) 1,
              Children: ([]*schema.TreeNode) <nil>,
              SchemaElement: (*schema.ResourceTypeWrapper)({
                Value: (string) (len=16) "celerity/handler",
                SourceMeta: (*source.Meta)({
                  Line: (int) 82,
                  Column: (int) 11
                })
              }),
              Range: (*source.Range)({
                Start: (*source.Meta)({
                  Line: (int) 82,
                  Column: (int) 11
                }),
                End: (*source.Meta)({
                  Line: (int) 84,
                  Column: (int) 7
                })
              })
            }),
            (*schema.TreeNode)({
              Label: (string) (len=8) "metadata",
              Path: (string) (len=20) "/authoriser/metadata",
              Type: (schema.TreeNodeType) 0,
              Children: ([]*schema.TreeNode) (len=3) {
                (*schema.TreeNode)({
                  Label: (string) (len=11) "displayName",
                  Path: (string) (len=32) "/authoriser/metadata/displayName",
                  Type: (schema.TreeNodeType) 0,
                  Children: ([]*schema.TreeNode) (len=1) {
                    (*schema.TreeNode)({
                      Label: (string) (len=6) "string",
                      Path: (string) (len=39) "/authoriser/metadata/displayName/string",
                      Type: (schema.TreeNodeType) 1,
                      Children: ([]*schema.TreeNode) <nil>,
                      SchemaElement: (string) (len=10) "Authoriser",
                      Range: (*source.Range)({
                        Start: (*source.Meta)({
                          Line: (int) 84,
                          Column: (int) 20
                        }),
                        End: (*source.Meta)({
                          Line: (int) 89,
                          Column: (int) 9
                        })
                      })
                    })
                  },
                  SchemaElement: (*substitutions.StringOrSubstitutions)({
                    Values: ([]*substitutions.StringOrSubstitution) (len=1) {
                      (*substitutions.StringOrSubstitution)({
                        StringValue: (*string)((len=10) "Authoriser"),
                        SubstitutionValue: (*substitutions.Substitution)(<nil>),
                        SourceMeta: (*source.Meta)({
                          Line: (int) 84,
                          Column: (int) 20
                        })
                      })
                    },
                    SourceMeta: (*source.Meta)({
                      Line: (int) 84,
                      Column: (int) 20
                    })
                  }),
                  Range: (*source.Range)({
                    Start: (*source.Meta)({
                      Line: (int) 84,
                      Column: (int) 20
                    }),
                    End: (*source.Meta)({
                      Line: (int) 89,
                      Column: (int) 9
                    })
                  })
                }),
                (*schema.TreeNode)({
                  Label: (string) (len=11) "annotations",
                  Path: (string) (len=32) "/authoriser/metadata/annotations",
                  Type: (schema.TreeNodeType) 0,
                  Children: ([]*schema.TreeNode) (len=4) {
                    (*schema.TreeNode)({
                      Label: (string) (len=10) "authoriser",
                      Path: (string) (len=43) "/authoriser/metadata/annotations/authoriser",
                      Type: (schema.TreeNodeType) 0,
                      Children: ([]*schema.TreeNode) (len=1) {
                        (*schema.TreeNode)({
                          Label: (string) (len=6) "string",
                          Path: (string) (len=50) "/authoriser/metadata/annotations/authoriser/string",
                          Type: (schema.TreeNodeType) 1,
                          Children: ([]*schema.TreeNode) <nil>,
                          SchemaElement: (string) (len=4) "true",
                          Range: (*source.Range)({
                            Start: (*source.Meta)({
                              Line: (int) 89,
                              Column: (int) 21
                            }),
                            End: (*source.Meta)({
                              Line: (int) 93,
                              Column: (int) 37
                            })
                          })
                        })
                      },
                      SchemaElement: (*substitutions.StringOrSubstitutions)({
                        Values: ([]*substitutions.StringOrSubstitution) (len=1) {
                          (*substitutions.StringOrSubstitution)({
                            StringValue: (*string)((len=4) "true"),
                            SubstitutionValue: (*substitutions.Substitution)(<nil>),
                            SourceMeta: (*source.Meta)({
                              Line: (int) 89,
                              Column: (int) 21
                            })
                          })
                        },
                        SourceMeta: (*source.Meta)({
                          Line: (int) 89,
                          Column: (int) 21
                        })
                      }),
                      Range: (*source.Range)({
                        Start: (*source.Meta)({
                          Line: (int) 89,
                          Column: (int) 21
                        }),
                        End: (*source.Meta)({
                          Line: (int) 93,
                          Column: (int) 37
                        })
                      })
                    }),
                    (*schema.TreeNode)({
                      Label: (string) (len=26) "authoriser.identity.header",
                      Path: (string) (len=59) "/authoriser/metadata/annotations/authoriser.identity.header",
                      Type: (schema.TreeNodeType) 0,
                      Children: ([]*schema.TreeNode) (len=1) {
                        (*schema.TreeNode)({
                          Label: (string) (len=6) "string",
                          Path: (string) (len=66) "/authoriser/metadata/annotations/authoriser.identity.header/string",
                          Type: (schema.TreeNodeType) 1,
                          Children: ([]*schema.TreeNode) <nil>,
                          SchemaElement: (string) (len=18) "MyCustomAuthHeader",
                          Range: (*source.Range)({
                            Start: (*source.Meta)({
                              Line: (int) 93,
                              Column: (int) 37
                            }),
                            End: (*source.Meta)({
                              Line: (int) 94,
                              Column: (int) 51
                            })
                          })
                        })
                      },
                      SchemaElement: (*substitutions.StringOrSubstitutions)({
                        Values: ([]*substitutions.StringOrSubstitution) (len=1) {
                          (*substitutions.StringOrSubstitution)({
                            StringValue: (*string)((len=18) "MyCustomAuthHeader"),
                            SubstitutionValue: (*substitutions.Substitution)(<nil>),
                            SourceMeta: (*source.Meta)({
                              Line: (int) 93,
                              Column: (int) 37
                            })
                          })
                        },
                        SourceMeta: (*source.Meta)({
                          Line: (int) 93,
                          Column: (int) 37
                        })
                      }),
                      Range: (*source.Range)({
                        Start: (*source.Meta)({
                          Line: (int) 93,
                          Column: (int) 37
                        }),
                        End: (*source.Meta)({
                          Line: (int) 94,
                          Column: (int) 51
                        })
                      })
                    }),
                    (*schema.TreeNode)({
                      Label: (string) (len=40) "authoriser.identity.validationExpression",
                      Path: (string) (len=73) "/authoriser/metadata/annotations/authoriser.identity.validationExpression",
                      Type: (schema.TreeNodeType) 0,
                      Children: ([]*schema.TreeNode) (len=1) {
                        (*schema.TreeNode)({
                          Label: (string) (len=6) "string",
                          Path: (string) (len=80) "/authoriser/metadata/annotations/authoriser.identity.validationExpression/string",
                          Type: (schema.TreeNodeType) 1,
                          Children: ([]*schema.TreeNode) <nil>,
                          SchemaElement: (string) (len=9) "Bearer .*",
                          Range: (*source.Range)({
                            Start: (*source.Meta)({
                              Line: (int) 94,
                              Column: (int) 51
                            }),
                            End: (*source.Meta)({
                              Line: (int) 95,
                              Column: (int) 47
                            })
                          })
                        })
                      },
                      SchemaElement: (*substitutions.StringOrSubstitutions)({
                        Values: ([]*substitutions.StringOrSubstitution) (len=1) {
                          (*substitutions.StringOrSubstitution)({
                            StringValue: (*string)((len=9) "Bearer .*"),
                            SubstitutionValue: (*substitutions.Substitution)(<nil>),
                            SourceMeta: (*source.Meta)({
                              Line: (int) 94,
                              Column: (int) 51
                            })
                          })
                        },
                        SourceMeta: (*source.Meta)({
                          Line: (int) 94,
                          Column: (int) 51
                        })
                      }),
                      Range: (*source.Range)({
                        Start: (*source.Meta)({
                          Line: (int) 94,
                          Column: (int) 51
                        }),
                        End: (*source.Meta)({
                          Line: (int) 95,
                          Column: (int) 47
                        })
                      })
                    }),
                    (*schema.TreeNode)({
                      Label: (string) (len=36) "authoriser.identity.reauthoriseEvery",
                      Path: (string) (len=69) "/authoriser/metadata/annotations/authoriser.identity.reauthoriseEvery",
                      Type: (schema.TreeNodeType) 0,
                      Children: ([]*schema.TreeNode) (len=1) {
                        (*schema.TreeNode)({
                          Label: (string) (len=6) "string",
                          Path: (string) (len=76) "/authoriser/metadata/annotations/authoriser.identity.reauthoriseEvery/string",
                          Type: (schema.TreeNodeType) 1,
                          Children: ([]*schema.TreeNode) <nil>,
                          SchemaElement: (string) (len=2) "20",
                          Range: (*source.Range)({
                            Start: (*source.Meta)({
                              Line: (int) 95,
                              Column: (int) 47
                            }),
                            End: (*source.Meta)({
                              Line: (int) 97,
                              Column: (int) 9
                            })
                          })
                        })
                      },
                      SchemaElement: (*substitutions.StringOrSubstitutions)({
                        Values: ([]*substitutions.StringOrSubstitution) (len=1) {
                          (*substitutions.StringOrSubstitution)({
                            StringValue: (*string)((len=2) "20"),
                            SubstitutionValue: (*substitutions.Substitution)(<nil>),
                            SourceMeta: (*source.Meta)({
                              Line: (int) 95,
                              Column: (int) 47
                            })
                          })
                        },
                        SourceMeta: (*source.Meta)({
                          Line: (int) 95,
                          Column: (int) 47
                        })
                      }),
                      Range: (*source.Range)({
                        Start: (*source.Meta)({
                          Line: (int) 95,
                          Column: (int) 47
                        }),
                        End: (*source.Meta)({
                          Line: (int) 97,
                          Column: (int) 9
                        })
                      })
                    })
                  },
                  SchemaElement: (*schema.StringOrSubstitutionsMap)({
                    Values: (map[string]*substitutions.StringOrSubstitutions) (len=4) {
                      (string) (len=10) "authoriser": (*substitutions.StringOrSubstitutions)({
                        Values: ([]*substitutions.StringOrSubstitution) (len=1) {
                          (*substitutions.StringOrSubstitution)({
                            StringValue: (*string)((len=4) "true"),
                            SubstitutionValue: (*substitutions.Substitution)(<nil>),
                            SourceMeta: (*source.Meta)({
                              Line: (int) 89,
                              Column: (int) 21
                            })
                          })
                        },
                        SourceMeta: (*source.Meta)({
                          Line: (int) 89,
                          Column: (int) 21
                        })
                      }),
                      (string) (len=26) "authoriser.identity.header": (*substitutions.StringOrSubstitutions)({
                        Values: ([]*substitutions.StringOrSubstitution) (len=1) {
                          (*substitutions.StringOrSubstitution)({
                            StringValue: (*string)((len=18) "MyCustomAuthHeader"),
                            SubstitutionValue: (*substitutions.Substitution)(<nil>),
                            SourceMeta: (*source.Meta)({
                              Line: (int) 93,
                              Column: (int) 37
                            })
                          })
                        },
                        SourceMeta: (*source.Meta)({
                          Line: (int) 93,
                          Column: (int) 37
                        })
                      }),
                      (string) (len=36) "authoriser.identity.reauthoriseEvery": (*substitutions.StringOrSubstitutions)({
                        Values: ([]*substitutions.StringOrSubstitution) (len=1) {
                          (*substitutions.StringOrSubstitution)({
                            StringValue: (*string)((len=2) "20"),
                            SubstitutionValue: (*substitutions.Substitution)(<nil>),
                            SourceMeta: (*source.Meta)({
                              Line: (int) 95,
                              Column: (int) 47
                            })
                          })
                        },
                        SourceMeta: (*source.Meta)({
                          Line: (int) 95,
                          Column: (int) 47
                        })
                      }),
                      (string) (len=40) "authoriser.identity.validationExpression": (*substitutions.StringOrSubstitutions)({
                        Values: ([]*substitutions.StringOrSubstitution) (len=1) {
                          (*substitutions.StringOrSubstitution)({
                            StringValue: (*string)((len=9) "Bearer .*"),
                            SubstitutionValue: (*substitutions.Substitution)(<nil>),
                            SourceMeta: (*source.Meta)({
                              Line: (int) 94,
                              Column: (int) 51
                            })
                          })
                        },
                        SourceMeta: (*source.Meta)({
                          Line: (int) 94,
                          Column: (int) 51
                        })
                      })
                    },
                    SourceMeta: (map[string]*source.Meta) (len=4) {
                      (string) (len=10) "authoriser": (*source.Meta)({
                        Line: (int) 89,
                        Column: (int) 9
                      }),
                      (string) (len=26) "authoriser.identity.header": (*source.Meta)({
                        Line: (int) 93,
                        Column: (int) 9
                      }),
                      (string) (len=36) "authoriser.identity.reauthoriseEvery": (*source.Meta)({
                        Line: (int) 95,
                        Column: (int) 9
                      }),
                      (string) (len=40) "authoriser.identity.validationExpression": (*source.Meta)({
                        Line: (int) 94,
                        Column: (int) 9
                      })
                    }
                  }),
                  Range: (*source.Range)({
                    Start: (*source.Meta)({
                      Line: (int) 89,
                      Column: (int) 9
                    }),
                    End: (*source.Meta)({
                      Line: (int) 97,
                      Column: (int) 9
                    })
                  })
                }),
                (*schema.TreeNode)({
                  Label: (string) (len=6) "labels",
                  Path: (string) (len=27) "/authoriser/metadata/labels",
                  Type: (schema.TreeNodeType) 0,
                  Children: ([]*schema.TreeNode) (len=1) {
                    (*schema.TreeNode)({
                      Label: (string) (len=6) "string",
                      Path: (string) (len=34) "/authoriser/metadata/labels/string",
                      Type: (schema.TreeNodeType) 1,
                      Children: ([]*schema.TreeNode) <nil>,
                      SchemaElement: (string) (len=8) "orderApi",
                      Range: (*source.Range)({
                        Start: (*source.Meta)({
                          Line: (int) 97,
                          Column: (int) 9
                        }),
                        End: (*source.Meta)({
                          Line: (int) 99,
                          Column: (int) 7
                        })
                      })
                    })
                  },
                  SchemaElement: (*schema.StringMap)({
                    Values: (map[string]string) (len=1) {
                      (string) (len=3) "app": (string) (len=8) "orderApi"
                    },
                    SourceMeta: (map[string]*source.Meta) (len=1) {
                      (string) (len=3) "app": (*source.Meta)({
                        Line: (int) 97,
                        Column: (int) 9
                      })
                    }
                  }),
                  Range: (*source.Range)({
                    Start: (*source.Meta)({
                      Line: (int) 97,
                      Column: (int) 9
                    }),
                    End: (*source.Meta)({
                      Line: (int) 99,
                      Column: (int) 7
                    })
                  })
                })
              },
              SchemaElement: (*schema.Metadata)({
                DisplayName: (*substitutions.StringOrSubstitutions)({
                  Values: ([]*substitutions.StringOrSubstitution) (len=1) {
                    (*substitutions.StringOrSubstitution)({
                      StringValue: (*string)((len=10) "Authoriser"),
                      SubstitutionValue: (*substitutions.Substitution)(<nil>),
                      SourceMeta: (*source.Meta)({
                        Line: (int) 84,
                        Column: (int) 20
                      })
                    })
                  },
                  SourceMeta: (*source.Meta)({
                    Line: (int) 84,
                    Column: (int) 20
                  })
                }),
                Annotations: (*schema.StringOrSubstitutionsMap)({
                  Values: (map[string]*substitutions.StringOrSubstitutions) (len=4) {
                    (string) (len=10) "authoriser": (*substitutions.StringOrSubstitutions)({
                      Values: ([]*substitutions.StringOrSubstitution) (len=1) {
                        (*substitutions.StringOrSubstitution)({
                          StringValue: (*string)((len=4) "true"),
                          SubstitutionValue: (*substitutions.Substitution)(<nil>),
                          SourceMeta: (*source.Meta)({
                            Line: (int) 89,
                            Column: (int) 21
                          })
                        })
                      },
                      SourceMeta: (*source.Meta)({
                        Line: (int) 89,
                        Column: (int) 21
                      })
                    }),
                    (string) (len=26) "authoriser.identity.header": (*substitutions.StringOrSubstitutions)({
                      Values: ([]*substitutions.StringOrSubstitution) (len=1) {
                        (*substitutions.StringOrSubstitution)({
                          StringValue: (*string)((len=18) "MyCustomAuthHeader"),
                          SubstitutionValue: (*substitutions.Substitution)(<nil>),
                          SourceMeta: (*source.Meta)({
                            Line: (int) 93,
                            Column: (int) 37
                          })
                        })
                      },
                      SourceMeta: (*source.Meta)({
                        Line: (int) 93,
                        Column: (int) 37
                      })
                    }),
                    (string) (len=36) "authoriser.identity.reauthoriseEvery": (*substitutions.StringOrSubstitutions)({
                      Values: ([]*substitutions.StringOrSubstitution) (len=1) {
                        (*substitutions.StringOrSubstitution)({
                          StringValue: (*string)((len=2) "20"),
                          SubstitutionValue: (*substitutions.Substitution)(<nil>),
                          SourceMeta: (*source.Meta)({
                            Line: (int) 95,
                            Column: (int) 47
                          })
                        })
                      },
                      SourceMeta: (*source.Meta)({
                        Line: (int) 95,
                        Column: (int) 47
                      })
                    }),
                    (string) (len=40) "authoriser.identity.validationExpression": (*substitutions.StringOrSubstitutions)({
                      Values: ([]*substitutions.StringOrSubstitution) (len=1) {
                        (*substitutions.StringOrSubstitution)({
                          StringValue: (*string)((len=9) "Bearer .*"),
                          SubstitutionValue: (*substitutions.Substitution)(<nil>),
                          SourceMeta: (*source.Meta)({
                            Line: (int) 94,
                            Column: (int) 51
                          })
                        })
                      },
                      SourceMeta: (*source.Meta)({
                        Line: (int) 94,
                        Column: (int) 51
                      })
                    })
                  },
                  SourceMeta: (map[string]*source.Meta) (len=4) {
                    (string) (len=10) "authoriser": (*source.Meta)({
                      Line: (int) 89,
                      Column: (int) 9
                    }),
                    (string) (len=26) "authoriser.identity.header": (*source.Meta)({
                      Line: (int) 93,
                      Column: (int) 9
                    }),
                    (string) (len=36) "authoriser.identity.reauthoriseEvery": (*source.Meta)({
                      Line: (int) 95,
                      Column: (int) 9
                    }),
                    (string) (len=40) "authoriser.identity.validationExpression": (*source.Meta)({
                      Line: (int) 94,
                      Column: (int) 9
                    })
                  }
                }),
                Labels: (*schema.StringMap)({
                  Values: (map[string]string) (len=1) {
                    (string) (len=3) "app": (string) (len=8) "orderApi"
                  },
                  SourceMeta: (map[string]*source.Meta) (len=1) {
                    (string) (len=3) "app": (*source.Meta)({
                      Line: (int) 97,
                      Column: (int) 9
                    })
                  }
                }),
                Custom: (*core.MappingNode)(<nil>),
                SourceMeta: (*source.Meta)({
                  Line: (int) 84,
                  Column: (int) 7
                })
              }),
              Range: (*source.Range)({
                Start: (*source.Meta)({
                  Line: (int) 84,
                  Column: (int) 7
                }),
                End: (*source.Meta)({
                  Line: (int) 99,
                  Column: (int) 7
                })
              })
            }),
            (*schema.TreeNode)({
              Label: (string) (len=4) "spec",
              Path: (string) (len=16) "/authoriser/spec",
              Type: (schema.TreeNodeType) 0,
              Children: ([]*schema.TreeNode) (len=2) {
                (*schema.TreeNode)({
                  Label: (string) (len=7) "handler",
                  Path: (string) (len=24) "/authoriser/spec/handler",
                  Type: (schema.TreeNodeType) 0,
                  Children: ([]*schema.TreeNode) (len=1) {
                    (*schema.TreeNode)({
                      Label: (string) (len=6) "scalar",
                      Path: (string) (len=31) "/authoriser/spec/handler/scalar",
                      Type: (schema.TreeNodeType) 1,
                      Children: ([]*schema.TreeNode) <nil>,
                      SchemaElement: (*core.ScalarValue)({
                        IntValue: (*int)(<nil>),
                        BoolValue: (*bool)(<nil>),
                        FloatValue: (*float64)(<nil>),
                        StringValue: (*string)((len=19) "handlers.Authoriser"),
                        SourceMeta: (*source.Meta)({
                          Line: (int) 99,
                          Column: (int) 16
                        })
                      }),
                      Range: (*source.Range)({
                        Start: (*source.Meta)({
                          Line: (int) 99,
                          Column: (int) 16
                        }),
                        End: (*source.Meta)({
                          Line: (int) 100,
                          Column: (int) 7
                        })
                      })
                    })
                  },
                  SchemaElement: (*core.MappingNode)({
                    Literal: (*core.ScalarValue)({
                      IntValue: (*int)(<nil>),
                      BoolValue: (*bool)(<nil>),
                      FloatValue: (*float64)(<nil>),
                      StringValue: (*string)((len=19) "handlers.Authoriser"),
                      SourceMeta: (*source.Meta)({
                        Line: (int) 99,
                        Column: (int) 16
                      })
                    }),
                    Fields: (map[string]*core.MappingNode) <nil>,
                    Items: ([]*core.MappingNode) <nil>,
                    StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                    SourceMeta: (*source.Meta)({
                      Line: (int) 99,
                      Column: (int) 16
                    }),
                    FieldsSourceMeta: (map[string]*source.Meta) <nil>
                  }),
                  Range: (*source.Range)({
                    Start: (*source.Meta)({
                      Line: (int) 99,
                      Column: (int) 7
                    }),
                    End: (*source.Meta)({
                      Line: (int) 100,
                      Column: (int) 7
                    })
                  })
                }),
                (*schema.TreeNode)({
                  Label: (string) (len=7) "timeout",
                  Path: (string) (len=24) "/authoriser/spec/timeout",
                  Type: (schema.TreeNodeType) 0,
                  Children: ([]*schema.TreeNode) (len=1) {
                    (*schema.TreeNode)({
                      Label: (string) (len=6) "scalar",
                      Path: (string) (len=31) "/authoriser/spec/timeout/scalar",
                      Type: (schema.TreeNodeType) 1,
                      Children: ([]*schema.TreeNode) <nil>,
                      SchemaElement: (*core.ScalarValue)({
                        IntValue: (*int)(120),
                        BoolValue: (*bool)(<nil>),
                        FloatValue: (*float64)(<nil>),
                        StringValue: (*string)(<nil>),
                        SourceMeta: (*source.Meta)({
                          Line: (int) 100,
                          Column: (int) 16
                        })
                      }),
                      Range: (*source.Range)({
                        Start: (*source.Meta)({
                          Line: (int) 100,
                          Column: (int) 16
                        }),
                        End: (*source.Meta)({
                          Line: (int) 102,
                          Column: (int) 3
                        })
                      })
                    })
                  },
                  SchemaElement: (*core.MappingNode)({
                    Literal: (*core.ScalarValue)({
                      IntValue: (*int)(120),
                      BoolValue: (*bool)(<nil>),
                      FloatValue: (*float64)(<nil>),
                      StringValue: (*string)(<nil>),
                      SourceMeta: (*source.Meta)({
                        Line: (int) 100,
                        Column: (int) 16
                      })
                    }),
                    Fields: (map[string]*core.MappingNode) <nil>,
                    Items: ([]*core.MappingNode) <nil>,
                    StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                    SourceMeta: (*source.Meta)({
                      Line: (int) 100,
                      Column: (int) 16
                    }),
                    FieldsSourceMeta: (map[string]*source.Meta) <nil>
                  }),
                  Range: (*source.Range)({
                    Start: (*source.Meta)({
                      Line: (int) 100,
                      Column: (int) 7
                    }),
                    End: (*source.Meta)({
                      Line: (int) 102,
                      Column: (int) 3
                    })
                  })
                })
              },
              SchemaElement: (*core.MappingNode)({
                Literal: (*core.ScalarValue)(<nil>),
                Fields: (map[string]*core.MappingNode) (len=2) {
                  (string) (len=7) "handler": (*core.MappingNode)({
                    Literal: (*core.ScalarValue)({
                      IntValue: (*int)(<nil>),
                      BoolValue: (*bool)(<nil>),
                      FloatValue: (*float64)(<nil>),
                      StringValue: (*string)((len=19) "handlers.Authoriser"),
                      SourceMeta: (*source.Meta)({
                        Line: (int) 99,
                        Column: (int) 16
                      })
                    }),
                    Fields: (map[string]*core.MappingNode) <nil>,
                    Items: ([]*core.MappingNode) <nil>,
                    StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                    SourceMeta: (*source.Meta)({
                      Line: (int) 99,
                      Column: (int) 16
                    }),
                    FieldsSourceMeta: (map[string]*source.Meta) <nil>
                  }),
                  (string) (len=7) "timeout": (*core.MappingNode)({
                    Literal: (*core.ScalarValue)({
                      IntValue: (*int)(120),
                      BoolValue: (*bool)(<nil>),
                      FloatValue: (*float64)(<nil>),
                      StringValue: (*string)(<nil>),
                      SourceMeta: (*source.Meta)({
                        Line: (int) 100,
                        Column: (int) 16
                      })
                    }),
                    Fields: (map[string]*core.MappingNode) <nil>,
                    Items: ([]*core.MappingNode) <nil>,
                    StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                    SourceMeta: (*source.Meta)({
                      Line: (int) 100,
                      Column: (int) 16
                    }),
                    FieldsSourceMeta: (map[string]*source.Meta) <nil>
                  })
                },
                Items: ([]*core.MappingNode) <nil>,
                StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                SourceMeta: (*source.Meta)({
                  Line: (int) 99,
                  Column: (int) 7
                }),
                FieldsSourceMeta: (map[string]*source.Meta) (len=2) {
                  (string) (len=7) "handler": (*source.Meta)({
                    Line: (int) 99,
                    Column: (int) 7
                  }),
                  (string) (len=7) "timeout": (*source.Meta)({
                    Line: (int) 100,
                    Column: (int) 7
                  })
                }
              }),
              Range: (*source.Range)({
                Start: (*source.Meta)({
                  Line: (int) 99,
                  Column: (int) 7
                }),
                End: (*source.Meta)({
                  Line: (int) 102,
                  Column: (int) 3
                })
              })
            })
          },
          SchemaElement: (*schema.Resource)({
            Type: (*schema.ResourceTypeWrapper)({
              Value: (string) (len=16) "celerity/handler",
              SourceMeta: (*source.Meta)({
                Line: (int) 82,
                Column: (int) 11
              })
            }),
            Description: (*substitutions.StringOrSubstitutions)(<nil>),
            Metadata: (*schema.Metadata)({
              DisplayName: (*substitutions.StringOrSubstitutions)({
                Values: ([]*substitutions.StringOrSubstitution) (len=1) {
                  (*substitutions.StringOrSubstitution)({
                    StringValue: (*string)((len=10) "Authoriser"),
                    SubstitutionValue: (*substitutions.Substitution)(<nil>),
                    SourceMeta: (*source.Meta)({
                      Line: (int) 84,
                      Column: (int) 20
                    })
                  })
                },
                SourceMeta: (*source.Meta)({
                  Line: (int) 84,
                  Column: (int) 20
                })
              }),
              Annotations: (*schema.StringOrSubstitutionsMap)({
                Values: (map[string]*substitutions.StringOrSubstitutions) (len=4) {
                  (string) (len=10) "authoriser": (*substitutions.StringOrSubstitutions)({
                    Values: ([]*substitutions.StringOrSubstitution) (len=1) {
                      (*substitutions.StringOrSubstitution)({
                        StringValue: (*string)((len=4) "true"),
                        SubstitutionValue: (*substitutions.Substitution)(<nil>),
                        SourceMeta: (*source.Meta)({
                          Line: (int) 89,
                          Column: (int) 21
                        })
                      })
                    },
                    SourceMeta: (*source.Meta)({
                      Line: (int) 89,
                      Column: (int) 21
                    })
                  }),
                  (string) (len=26) "authoriser.identity.header": (*substitutions.StringOrSubstitutions)({
                    Values: ([]*substitutions.StringOrSubstitution) (len=1) {
                      (*substitutions.StringOrSubstitution)({
                        StringValue: (*string)((len=18) "MyCustomAuthHeader"),
                        SubstitutionValue: (*substitutions.Substitution)(<nil>),
                        SourceMeta: (*source.Meta)({
                          Line: (int) 93,
                          Column: (int) 37
                        })
                      })
                    },
                    SourceMeta: (*source.Meta)({
                      Line: (int) 93,
                      Column: (int) 37
                    })
                  }),
                  (string) (len=36) "authoriser.identity.reauthoriseEvery": (*substitutions.StringOrSubstitutions)({
                    Values: ([]*substitutions.StringOrSubstitution) (len=1) {
                      (*substitutions.StringOrSubstitution)({
                        StringValue: (*string)((len=2) "20"),
                        SubstitutionValue: (*substitutions.Substitution)(<nil>),
                        SourceMeta: (*source.Meta)({
                          Line: (int) 95,
                          Column: (int) 47
                        })
                      })
                    },
                    SourceMeta: (*source.Meta)({
                      Line: (int) 95,
                      Column: (int) 47
                    })
                  }),
                  (string) (len=40) "authoriser.identity.validationExpression": (*substitutions.StringOrSubstitutions)({
                    Values: ([]*substitutions.StringOrSubstitution) (len=1) {
                      (*substitutions.StringOrSubstitution)({
                        StringValue: (*string)((len=9) "Bearer .*"),
                        SubstitutionValue: (*substitutions.Substitution)(<nil>),
                        SourceMeta: (*source.Meta)({
                          Line: (int) 94,
                          Column: (int) 51
                        })
                      })
                    },
                    SourceMeta: (*source.Meta)({
                      Line: (int) 94,
                      Column: (int) 51
                    })
                  })
                },
                SourceMeta: (map[string]*source.Meta) (len=4) {
                  (string) (len=10) "authoriser": (*source.Meta)({
                    Line: (int) 89,
                    Column: (int) 9
                  }),
                  (string) (len=26) "authoriser.identity.header": (*source.Meta)({
                    Line: (int) 93,
                    Column: (int) 9
                  }),
                  (string) (len=36) "authoriser.identity.reauthoriseEvery": (*source.Meta)({
                    Line: (int) 95,
                    Column: (int) 9
                  }),
                  (string) (len=40) "authoriser.identity.validationExpression": (*source.Meta)({
                    Line: (int) 94,
                    Column: (int) 9
                  })
                }
              }),
              Labels: (*schema.StringMap)({
                Values: (map[string]string) (len=1) {
                  (string) (len=3) "app": (string) (len=8) "orderApi"
                },
                SourceMeta: (map[string]*source.Meta) (len=1) {
                  (string) (len=3) "app": (*source.Meta)({
                    Line: (int) 97,
                    Column: (int) 9
                  })
                }
              }),
              Custom: (*core.MappingNode)(<nil>),
              SourceMeta: (*source.Meta)({
                Line: (int) 84,
                Column: (int) 7
              })
            }),
            Condition: (*schema.Condition)(<nil>),
            Each: (*substitutions.StringOrSubstitutions)(<nil>),
            LinkSelector: (*schema.LinkSelector)(<nil>),
            Spec: (*core.MappingNode)({
              Literal: (*core.ScalarValue)(<nil>),
              Fields: (map[string]*core.MappingNode) (len=2) {
                (string) (len=7) "handler": (*core.MappingNode)({
                  Literal: (*core.ScalarValue)({
                    IntValue: (*int)(<nil>),
                    BoolValue: (*bool)(<nil>),
                    FloatValue: (*float64)(<nil>),
                    StringValue: (*string)((len=19) "handlers.Authoriser"),
                    SourceMeta: (*source.Meta)({
                      Line: (int) 99,
                      Column: (int) 16
                    })
                  }),
                  Fields: (map[string]*core.MappingNode) <nil>,
                  Items: ([]*core.MappingNode) <nil>,
                  StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                  SourceMeta: (*source.Meta)({
                    Line: (int) 99,
                    Column: (int) 16
                  }),
                  FieldsSourceMeta: (map[string]*source.Meta) <nil>
                }),
                (string) (len=7) "timeout": (*core.MappingNode)({
                  Literal: (*core.ScalarValue)({
                    IntValue: (*int)(120),
                    BoolValue: (*bool)(<nil>),
                    FloatValue: (*float64)(<nil>),
                    StringValue: (*string)(<nil>),
                    SourceMeta: (*source.Meta)({
                      Line: (int) 100,
                      Column: (int) 16
                    })
                  }),
                  Fields: (map[string]*core.MappingNode) <nil>,
                  Items: ([]*core.MappingNode) <nil>,
                  StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                  SourceMeta: (*source.Meta)({
                    Line: (int) 100,
                    Column: (int) 16
                  }),
                  FieldsSourceMeta: (map[string]*source.Meta) <nil>
                })
              },
              Items: ([]*core.MappingNode) <nil>,
              StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
              SourceMeta: (*source.Meta)({
                Line: (int) 99,
                Column: (int) 7
              }),
              FieldsSourceMeta: (map[string]*source.Meta) (len=2) {
                (string) (len=7) "handler": (*source.Meta)({
                  Line: (int) 99,
                  Column: (int) 7
                }),
                (string) (len=7) "timeout": (*source.Meta)({
                  Line: (int) 100,
                  Column: (int) 7
                })
              }
            }),
            SourceMeta: (*source.Meta)({
              Line: (int) 82,
              Column: (int) 5
            })
          }),
          Range: (*source.Range)({
            Start: (*source.Meta)({
              Line: (int) 81,
              Column: (int) 3
            }),
            End: (*source.Meta)({
              Line: (int) 102,
              Column: (int) 3
            })
          })
        }),
        (*schema.TreeNode)({
          Label: (string) (len=16) "getOrdersHandler",
          Path: (string) (len=17) "/getOrdersHandler",
          Type: (schema.TreeNodeType) 0,
          Children: ([]*schema.TreeNode) (len=3) {
            (*schema.TreeNode)({
              Label: (string) (len=4) "type",
              Path: (string) (len=22) "/getOrdersHandler/type",
              Type: (schema.TreeNodeType) 1,
              Children: ([]*schema.TreeNode) <nil>,
              SchemaElement: (*schema.ResourceTypeWrapper)({
                Value: (string) (len=16) "celerity/handler",
                SourceMeta: (*source.Meta)({
                  Line: (int) 103,
                  Column: (int) 11
                })
              }),
              Range: (*source.Range)({
                Start: (*source.Meta)({
                  Line: (int) 103,
                  Column: (int) 11
                }),
                End: (*source.Meta)({
                  Line: (int) 105,
                  Column: (int) 7
                })
              })
            }),
            (*schema.TreeNode)({
              Label: (string) (len=8) "metadata",
              Path: (string) (len=26) "/getOrdersHandler/metadata",
              Type: (schema.TreeNodeType) 0,
              Children: ([]*schema.TreeNode) (len=2) {
                (*schema.TreeNode)({
                  Label: (string) (len=11) "displayName",
                  Path: (string) (len=38) "/getOrdersHandler/metadata/displayName",
                  Type: (schema.TreeNodeType) 0,
                  Children: ([]*schema.TreeNode) (len=1) {
                    (*schema.TreeNode)({
                      Label: (string) (len=6) "string",
                      Path: (string) (len=45) "/getOrdersHandler/metadata/displayName/string",
                      Type: (schema.TreeNodeType) 1,
                      Children: ([]*schema.TreeNode) <nil>,
                      SchemaElement: (string) (len=18) "Get Orders Handler",
                      Range: (*source.Range)({
                        Start: (*source.Meta)({
                          Line: (int) 105,
                          Column: (int) 20
                        }),
                        End: (*source.Meta)({
                          Line: (int) 107,
                          Column: (int) 9
                        })
                      })
                    })
                  },
                  SchemaElement: (*substitutions.StringOrSubstitutions)({
                    Values: ([]*substitutions.StringOrSubstitution) (len=1) {
                      (*substitutions.StringOrSubstitution)({
                        StringValue: (*string)((len=18) "Get Orders Handler"),
                        SubstitutionValue: (*substitutions.Substitution)(<nil>),
                        SourceMeta: (*source.Meta)({
                          Line: (int) 105,
                          Column: (int) 20
                        })
                      })
                    },
                    SourceMeta: (*source.Meta)({
                      Line: (int) 105,
                      Column: (int) 20
                    })
                  }),
                  Range: (*source.Range)({
                    Start: (*source.Meta)({
                      Line: (int) 105,
                      Column: (int) 20
                    }),
                    End: (*source.Meta)({
                      Line: (int) 107,
                      Column: (int) 9
                    })
                  })
                }),
                (*schema.TreeNode)({
                  Label: (string) (len=6) "labels",
                  Path: (string) (len=33) "/getOrdersHandler/metadata/labels",
                  Type: (schema.TreeNodeType) 0,
                  Children: ([]*schema.TreeNode) (len=1) {
                    (*schema.TreeNode)({
                      Label: (string) (len=6) "string",
                      Path: (string) (len=40) "/getOrdersHandler/metadata/labels/string",
                      Type: (schema.TreeNodeType) 1,
                      Children: ([]*schema.TreeNode) <nil>,
                      SchemaElement: (string) (len=8) "orderApi",
                      Range: (*source.Range)({
                        Start: (*source.Meta)({
                          Line: (int) 107,
                          Column: (int) 9
                        }),
                        End: (*source.Meta)({
                          Line: (int) 109,
                          Column: (int) 7
                        })
                      })
                    })
                  },
                  SchemaElement: (*schema.StringMap)({
                    Values: (map[string]string) (len=1) {
                      (string) (len=3) "app": (string) (len=8) "orderApi"
                    },
                    SourceMeta: (map[string]*source.Meta) (len=1) {
                      (string) (len=3) "app": (*source.Meta)({
                        Line: (int) 107,
                        Column: (int) 9
                      })
                    }
                  }),
                  Range: (*source.Range)({
                    Start: (*source.Meta)({
                      Line: (int) 107,
                      Column: (int) 9
                    }),
                    End: (*source.Meta)({
                      Line: (int) 109,
                      Column: (int) 7
                    })
                  })
                })
              },
              SchemaElement: (*schema.Metadata)({
                DisplayName: (*substitutions.StringOrSubstitutions)({
                  Values: ([]*substitutions.StringOrSubstitution) (len=1) {
                    (*substitutions.StringOrSubstitution)({
                      StringValue: (*string)((len=18) "Get Orders Handler"),
                      SubstitutionValue: (*substitutions.Substitution)(<nil>),
                      SourceMeta: (*source.Meta)({
                        Line: (int) 105,
                        Column: (int) 20
                      })
                    })
                  },
                  SourceMeta: (*source.Meta)({
                    Line: (int) 105,
                    Column: (int) 20
                  })
                }),
                Annotations: (*schema.StringOrSubstitutionsMap)(<nil>),
                Labels: (*schema.StringMap)({
                  Values: (map[string]string) (len=1) {
                    (string) (len=3) "app": (string) (len=8) "orderApi"
                  },
                  SourceMeta: (map[string]*source.Meta) (len=1) {
                    (string) (len=3) "app": (*source.Meta)({
                      Line: (int) 107,
                      Column: (int) 9
                    })
                  }
                }),
                Custom: (*core.MappingNode)(<nil>),
                SourceMeta: (*source.Meta)({
                  Line: (int) 105,
                  Column: (int) 7
                })
              }),
              Range: (*source.Range)({
                Start: (*source.Meta)({
                  Line: (int) 105,
                  Column: (int) 7
                }),
                End: (*source.Meta)({
                  Line: (int) 109,
                  Column: (int) 7
                })
              })
            }),
            (*schema.TreeNode)({
              Label: (string) (len=4) "spec",
              Path: (string) (len=22) "/getOrdersHandler/spec",
              Type: (schema.TreeNodeType) 0,
              Children: ([]*schema.TreeNode) (len=3) {
                (*schema.TreeNode)({
                  Label: (string) (len=7) "handler",
                  Path: (string) (len=30) "/getOrdersHandler/spec/handler",
                  Type: (schema.TreeNodeType) 0,
                  Children: ([]*schema.TreeNode) (len=1) {
                    (*schema.TreeNode)({
                      Label: (string) (len=6) "scalar",
                      Path: (string) (len=37) "/getOrdersHandler/spec/handler/scalar",
                      Type: (schema.TreeNodeType) 1,
                      Children: ([]*schema.TreeNode) <nil>,
                      SchemaElement: (*core.ScalarValue)({
                        IntValue: (*int)(<nil>),
                        BoolValue: (*bool)(<nil>),
                        FloatValue: (*float64)(<nil>),
                        StringValue: (*string)((len=18) "handlers.GetOrders"),
                        SourceMeta: (*source.Meta)({
                          Line: (int) 109,
                          Column: (int) 16
                        })
                      }),
                      Range: (*source.Range)({
                        Start: (*source.Meta)({
                          Line: (int) 109,
                          Column: (int) 16
                        }),
                        End: (*source.Meta)({
                          Line: (int) 110,
                          Column: (int) 7
                        })
                      })
                    })
                  },
                  SchemaElement: (*core.MappingNode)({
                    Literal: (*core.ScalarValue)({
                      IntValue: (*int)(<nil>),
                      BoolValue: (*bool)(<nil>),
                      FloatValue: (*float64)(<nil>),
                      StringValue: (*string)((len=18) "handlers.GetOrders"),
                      SourceMeta: (*source.Meta)({
                        Line: (int) 109,
                        Column: (int) 16
                      })
                    }),
                    Fields: (map[string]*core.MappingNode) <nil>,
                    Items: ([]*core.MappingNode) <nil>,
                    StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                    SourceMeta: (*source.Meta)({
                      Line: (int) 109,
                      Column: (int) 16
                    }),
                    FieldsSourceMeta: (map[string]*source.Meta) <nil>
                  }),
                  Range: (*source.Range)({
                    Start: (*source.Meta)({
                      Line: (int) 109,
                      Column: (int) 7
                    }),
                    End: (*source.Meta)({
                      Line: (int) 110,
                      Column: (int) 7
                    })
                  })
                }),
                (*schema.TreeNode)({
                  Label: (string) (len=7) "timeout",
                  Path: (string) (len=30) "/getOrdersHandler/spec/timeout",
                  Type: (schema.TreeNodeType) 0,
                  Children: ([]*schema.TreeNode) (len=1) {
                    (*schema.TreeNode)({
                      Label: (string) (len=6) "scalar",
                      Path: (string) (len=37) "/getOrdersHandler/spec/timeout/scalar",
                      Type: (schema.TreeNodeType) 1,
                      Children: ([]*schema.TreeNode) <nil>,
                      SchemaElement: (*core.ScalarValue)({
                        IntValue: (*int)(120),
                        BoolValue: (*bool)(<nil>),
                        FloatValue: (*float64)(<nil>),
                        StringValue: (*string)(<nil>),
                        SourceMeta: (*source.Meta)({
                          Line: (int) 110,
                          Column: (int) 16
                        })
                      }),
                      Range: (*source.Range)({
                        Start: (*source.Meta)({
                          Line: (int) 110,
                          Column: (int) 16
                        }),
                        End: (*source.Meta)({
                          Line: (int) 111,
                          Column: (int) 7
                        })
                      })
                    })
                  },
                  SchemaElement: (*core.MappingNode)({
                    Literal: (*core.ScalarValue)({
                      IntValue: (*int)(120),
                      BoolValue: (*bool)(<nil>),
                      FloatValue: (*float64)(<nil>),
                      StringValue: (*string)(<nil>),
                      SourceMeta: (*source.Meta)({
                        Line: (int) 110,
                        Column: (int) 16
                      })
                    }),
                    Fields: (map[string]*core.MappingNode) <nil>,
                    Items: ([]*core.MappingNode) <nil>,
                    StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                    SourceMeta: (*source.Meta)({
                      Line: (int) 110,
                      Column: (int) 16
                    }),
                    FieldsSourceMeta: (map[string]*source.Meta) <nil>
                  }),
                  Range: (*source.Range)({
                    Start: (*source.Meta)({
                      Line: (int) 110,
                      Column: (int) 7
                    }),
                    End: (*source.Meta)({
                      Line: (int) 111,
                      Column: (int) 7
                    })
                  })
                }),
                (*schema.TreeNode)({
                  Label: (string) (len=8) "endpoint",
                  Path: (string) (len=31) "/getOrdersHandler/spec/endpoint",
                  Type: (schema.TreeNodeType) 0,
                  Children: ([]*schema.TreeNode) (len=3) {
                    (*schema.TreeNode)({
                      Label: (string) (len=6) "method",
                      Path: (string) (len=38) "/getOrdersHandler/spec/endpoint/method",
                      Type: (schema.TreeNodeType) 0,
                      Children: ([]*schema.TreeNode) (len=1) {
                        (*schema.TreeNode)({
                          Label: (string) (len=6) "scalar",
                          Path: (string) (len=45) "/getOrdersHandler/spec/endpoint/method/scalar",
                          Type: (schema.TreeNodeType) 1,
                          Children: ([]*schema.TreeNode) <nil>,
                          SchemaElement: (*core.ScalarValue)({
                            IntValue: (*int)(<nil>),
                            BoolValue: (*bool)(<nil>),
                            FloatValue: (*float64)(<nil>),
                            StringValue: (*string)((len=3) "get"),
                            SourceMeta: (*source.Meta)({
                              Line: (int) 112,
                              Column: (int) 17
                            })
                          }),
                          Range: (*source.Range)({
                            Start: (*source.Meta)({
                              Line: (int) 112,
                              Column: (int) 17
                            }),
                            End: (*source.Meta)({
                              Line: (int) 113,
                              Column: (int) 9
                            })
                          })
                        })
                      },
                      SchemaElement: (*core.MappingNode)({
                        Literal: (*core.ScalarValue)({
                          IntValue: (*int)(<nil>),
                          BoolValue: (*bool)(<nil>),
                          FloatValue: (*float64)(<nil>),
                          StringValue: (*string)((len=3) "get"),
                          SourceMeta: (*source.Meta)({
                            Line: (int) 112,
                            Column: (int) 17
                          })
                        }),
                        Fields: (map[string]*core.MappingNode) <nil>,
                        Items: ([]*core.MappingNode) <nil>,
                        StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                        SourceMeta: (*source.Meta)({
                          Line: (int) 112,
                          Column: (int) 17
                        }),
                        FieldsSourceMeta: (map[string]*source.Meta) <nil>
                      }),
                      Range: (*source.Range)({
                        Start: (*source.Meta)({
                          Line: (int) 112,
                          Column: (int) 9
                        }),
                        End: (*source.Meta)({
                          Line: (int) 113,
                          Column: (int) 9
                        })
                      })
                    }),
                    (*schema.TreeNode)({
                      Label: (string) (len=4) "path",
                      Path: (string) (len=36) "/getOrdersHandler/spec/endpoint/path",
                      Type: (schema.TreeNodeType) 0,
                      Children: ([]*schema.TreeNode) (len=1) {
                        (*schema.TreeNode)({
                          Label: (string) (len=6) "scalar",
                          Path: (string) (len=43) "/getOrdersHandler/spec/endpoint/path/scalar",
                          Type: (schema.TreeNodeType) 1,
                          Children: ([]*schema.TreeNode) <nil>,
                          SchemaElement: (*core.ScalarValue)({
                            IntValue: (*int)(<nil>),
                            BoolValue: (*bool)(<nil>),
                            FloatValue: (*float64)(<nil>),
                            StringValue: (*string)((len=7) "/orders"),
                            SourceMeta: (*source.Meta)({
                              Line: (int) 113,
                              Column: (int) 15
                            })
                          }),
                          Range: (*source.Range)({
                            Start: (*source.Meta)({
                              Line: (int) 113,
                              Column: (int) 15
                            }),
                            End: (*source.Meta)({
                              Line: (int) 114,
                              Column: (int) 9
                            })
                          })
                        })
                      },
                      SchemaElement: (*core.MappingNode)({
                        Literal: (*core.ScalarValue)({
                          IntValue: (*int)(<nil>),
                          BoolValue: (*bool)(<nil>),
                          FloatValue: (*float64)(<nil>),
                          StringValue: (*string)((len=7) "/orders"),
                          SourceMeta: (*source.Meta)({
                            Line: (int) 113,
                            Column: (int) 15
                          })
                        }),
                        Fields: (map[string]*core.MappingNode) <nil>,
                        Items: ([]*core.MappingNode) <nil>,
                        StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                        SourceMeta: (*source.Meta)({
                          Line: (int) 113,
                          Column: (int) 15
                        }),
                        FieldsSourceMeta: (map[string]*source.Meta) <nil>
                      }),
                      Range: (*source.Range)({
                        Start: (*source.Meta)({
                          Line: (int) 113,
                          Column: (int) 9
                        }),
                        End: (*source.Meta)({
                          Line: (int) 114,
                          Column: (int) 9
                        })
                      })
                    }),
                    (*schema.TreeNode)({
                      Label: (string) (len=10) "authoriser",
                      Path: (string) (len=42) "/getOrdersHandler/spec/endpoint/authoriser",
                      Type: (schema.TreeNodeType) 0,
                      Children: ([]*schema.TreeNode) (len=1) {
                        (*schema.TreeNode)({
                          Label: (string) (len=10) "stringSubs",
                          Path: (string) (len=53) "/getOrdersHandler/spec/endpoint/authoriser/stringSubs",
                          Type: (schema.TreeNodeType) 0,
                          Children: ([]*schema.TreeNode) (len=1) {
                            (*schema.TreeNode)({
                              Label: (string) (len=10) "authoriser",
                              Path: (string) (len=76) "/getOrdersHandler/spec/endpoint/authoriser/stringSubs/resourceRef/authoriser",
                              Type: (schema.TreeNodeType) 1,
                              Children: ([]*schema.TreeNode) <nil>,
                              SchemaElement: (*substitutions.SubstitutionResourceProperty)({
                                ResourceName: (string) (len=10) "authoriser",
                                ResourceEachTemplateIndex: (*int64)(<nil>),
                                Path: ([]*substitutions.SubstitutionPathItem) {
                                },
                                SourceMeta: (*source.Meta)({
                                  Line: (int) 114,
                                  Column: (int) 23
                                })
                              }),
                              Range: (*source.Range)({
                                Start: (*source.Meta)({
                                  Line: (int) 114,
                                  Column: (int) 23
                                }),
                                End: (*source.Meta)({
                                  Line: (int) 117,
                                  Column: (int) 3
                                })
                              })
                            })
                          },
                          SchemaElement: (*substitutions.StringOrSubstitutions)({
                            Values: ([]*substitutions.StringOrSubstitution) (len=1) {
                              (*substitutions.StringOrSubstitution)({
                                StringValue: (*string)(<nil>),
                                SubstitutionValue: (*substitutions.Substitution)({
                                  Function: (*substitutions.SubstitutionFunctionExpr)(<nil>),
                                  Variable: (*substitutions.SubstitutionVariable)(<nil>),
                                  ValueReference: (*substitutions.SubstitutionValueReference)(<nil>),
                                  ElemReference: (*substitutions.SubstitutionElemReference)(<nil>),
                                  ElemIndexReference: (*substitutions.SubstitutionElemIndexReference)(<nil>),
                                  DataSourceProperty: (*substitutions.SubstitutionDataSourceProperty)(<nil>),
                                  ResourceProperty: (*substitutions.SubstitutionResourceProperty)({
                                    ResourceName: (string) (len=10) "authoriser",
                                    ResourceEachTemplateIndex: (*int64)(<nil>),
                                    Path: ([]*substitutions.SubstitutionPathItem) {
                                    },
                                    SourceMeta: (*source.Meta)({
                                      Line: (int) 114,
                                      Column: (int) 23
                                    })
                                  }),
                                  Child: (*substitutions.SubstitutionChild)(<nil>),
                                  StringValue: (*string)(<nil>),
                                  IntValue: (*int64)(<nil>),
                                  FloatValue: (*float64)(<nil>),
                                  BoolValue: (*bool)(<nil>),
                                  SourceMeta: (*source.Meta)({
                                    Line: (int) 114,
                                    Column: (int) 23
                                  })
                                }),
                                SourceMeta: (*source.Meta)({
                                  Line: (int) 114,
                                  Column: (int) 21
                                })
                              })
                            },
                            SourceMeta: (*source.Meta)({
                              Line: (int) 114,
                              Column: (int) 21
                            })
                          }),
                          Range: (*source.Range)({
                            Start: (*source.Meta)({
                              Line: (int) 114,
                              Column: (int) 21
                            }),
                            End: (*source.Meta)({
                              Line: (int) 117,
                              Column: (int) 3
                            })
                          })
                        })
                      },
                      SchemaElement: (*core.MappingNode)({
                        Literal: (*core.ScalarValue)(<nil>),
                        Fields: (map[string]*core.MappingNode) <nil>,
                        Items: ([]*core.MappingNode) <nil>,
                        StringWithSubstitutions: (*substitutions.StringOrSubstitutions)({
                          Values: ([]*substitutions.StringOrSubstitution) (len=1) {
                            (*substitutions.StringOrSubstitution)({
                              StringValue: (*string)(<nil>),
                              SubstitutionValue: (*substitutions.Substitution)({
                                Function: (*substitutions.SubstitutionFunctionExpr)(<nil>),
                                Variable: (*substitutions.SubstitutionVariable)(<nil>),
                                ValueReference: (*substitutions.SubstitutionValueReference)(<nil>),
                                ElemReference: (*substitutions.SubstitutionElemReference)(<nil>),
                                ElemIndexReference: (*substitutions.SubstitutionElemIndexReference)(<nil>),
                                DataSourceProperty: (*substitutions.SubstitutionDataSourceProperty)(<nil>),
                                ResourceProperty: (*substitutions.SubstitutionResourceProperty)({
                                  ResourceName: (string) (len=10) "authoriser",
                                  ResourceEachTemplateIndex: (*int64)(<nil>),
                                  Path: ([]*substitutions.SubstitutionPathItem) {
                                  },
                                  SourceMeta: (*source.Meta)({
                                    Line: (int) 114,
                                    Column: (int) 23
                                  })
                                }),
                                Child: (*substitutions.SubstitutionChild)(<nil>),
                                StringValue: (*string)(<nil>),
                                IntValue: (*int64)(<nil>),
                                FloatValue: (*float64)(<nil>),
                                BoolValue: (*bool)(<nil>),
                                SourceMeta: (*source.Meta)({
                                  Line: (int) 114,
                                  Column: (int) 23
                                })
                              }),
                              SourceMeta: (*source.Meta)({
                                Line: (int) 114,
                                Column: (int) 21
                              })
                            })
                          },
                          SourceMeta: (*source.Meta)({
                            Line: (int) 114,
                            Column: (int) 21
                          })
                        }),
                        SourceMeta: (*source.Meta)({
                          Line: (int) 114,
                          Column: (int) 21
                        }),
                        FieldsSourceMeta: (map[string]*source.Meta) <nil>
                      }),
                      Range: (*source.Range)({
                        Start: (*source.Meta)({
                          Line: (int) 114,
                          Column: (int) 9
                        }),
                        End: (*source.Meta)({
                          Line: (int) 117,
                          Column: (int) 3
                        })
                      })
                    })
                  },
                  SchemaElement: (*core.MappingNode)({
                    Literal: (*core.ScalarValue)(<nil>),
                    Fields: (map[string]*core.MappingNode) (len=3) {
                      (string) (len=10) "authoriser": (*core.MappingNode)({
                        Literal: (*core.ScalarValue)(<nil>),
                        Fields: (map[string]*core.MappingNode) <nil>,
                        Items: ([]*core.MappingNode) <nil>,
                        StringWithSubstitutions: (*substitutions.StringOrSubstitutions)({
                          Values: ([]*substitutions.StringOrSubstitution) (len=1) {
                            (*substitutions.StringOrSubstitution)({
                              StringValue: (*string)(<nil>),
                              SubstitutionValue: (*substitutions.Substitution)({
                                Function: (*substitutions.SubstitutionFunctionExpr)(<nil>),
                                Variable: (*substitutions.SubstitutionVariable)(<nil>),
                                ValueReference: (*substitutions.SubstitutionValueReference)(<nil>),
                                ElemReference: (*substitutions.SubstitutionElemReference)(<nil>),
                                ElemIndexReference: (*substitutions.SubstitutionElemIndexReference)(<nil>),
                                DataSourceProperty: (*substitutions.SubstitutionDataSourceProperty)(<nil>),
                                ResourceProperty: (*substitutions.SubstitutionResourceProperty)({
                                  ResourceName: (string) (len=10) "authoriser",
                                  ResourceEachTemplateIndex: (*int64)(<nil>),
                                  Path: ([]*substitutions.SubstitutionPathItem) {
                                  },
                                  SourceMeta: (*source.Meta)({
                                    Line: (int) 114,
                                    Column: (int) 23
                                  })
                                }),
                                Child: (*substitutions.SubstitutionChild)(<nil>),
                                StringValue: (*string)(<nil>),
                                IntValue: (*int64)(<nil>),
                                FloatValue: (*float64)(<nil>),
                                BoolValue: (*bool)(<nil>),
                                SourceMeta: (*source.Meta)({
                                  Line: (int) 114,
                                  Column: (int) 23
                                })
                              }),
                              SourceMeta: (*source.Meta)({
                                Line: (int) 114,
                                Column: (int) 21
                              })
                            })
                          },
                          SourceMeta: (*source.Meta)({
                            Line: (int) 114,
                            Column: (int) 21
                          })
                        }),
                        SourceMeta: (*source.Meta)({
                          Line: (int) 114,
                          Column: (int) 21
                        }),
                        FieldsSourceMeta: (map[string]*source.Meta) <nil>
                      }),
                      (string) (len=6) "method": (*core.MappingNode)({
                        Literal: (*core.ScalarValue)({
                          IntValue: (*int)(<nil>),
                          BoolValue: (*bool)(<nil>),
                          FloatValue: (*float64)(<nil>),
                          StringValue: (*string)((len=3) "get"),
                          SourceMeta: (*source.Meta)({
                            Line: (int) 112,
                            Column: (int) 17
                          })
                        }),
                        Fields: (map[string]*core.MappingNode) <nil>,
                        Items: ([]*core.MappingNode) <nil>,
                        StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                        SourceMeta: (*source.Meta)({
                          Line: (int) 112,
                          Column: (int) 17
                        }),
                        FieldsSourceMeta: (map[string]*source.Meta) <nil>
                      }),
                      (string) (len=4) "path": (*core.MappingNode)({
                        Literal: (*core.ScalarValue)({
                          IntValue: (*int)(<nil>),
                          BoolValue: (*bool)(<nil>),
                          FloatValue: (*float64)(<nil>),
                          StringValue: (*string)((len=7) "/orders"),
                          SourceMeta: (*source.Meta)({
                            Line: (int) 113,
                            Column: (int) 15
                          })
                        }),
                        Fields: (map[string]*core.MappingNode) <nil>,
                        Items: ([]*core.MappingNode) <nil>,
                        StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                        SourceMeta: (*source.Meta)({
                          Line: (int) 113,
                          Column: (int) 15
                        }),
                        FieldsSourceMeta: (map[string]*source.Meta) <nil>
                      })
                    },
                    Items: ([]*core.MappingNode) <nil>,
                    StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                    SourceMeta: (*source.Meta)({
                      Line: (int) 112,
                      Column: (int) 9
                    }),
                    FieldsSourceMeta: (map[string]*source.Meta) (len=3) {
                      (string) (len=10) "authoriser": (*source.Meta)({
                        Line: (int) 114,
                        Column: (int) 9
                      }),
                      (string) (len=6) "method": (*source.Meta)({
                        Line: (int) 112,
                        Column: (int) 9
                      }),
                      (string) (len=4) "path": (*source.Meta)({
                        Line: (int) 113,
                        Column: (int) 9
                      })
                    }
                  }),
                  Range: (*source.Range)({
                    Start: (*source.Meta)({
                      Line: (int) 111,
                      Column: (int) 7
                    }),
                    End: (*source.Meta)({
                      Line: (int) 117,
                      Column: (int) 3
                    })
                  })
                })
              },
              SchemaElement: (*core.MappingNode)({
                Literal: (*core.ScalarValue)(<nil>),
                Fields: (map[string]*core.MappingNode) (len=3) {
                  (string) (len=8) "endpoint": (*core.MappingNode)({
                    Literal: (*core.ScalarValue)(<nil>),
                    Fields: (map[string]*core.MappingNode) (len=3) {
                      (string) (len=10) "authoriser": (*core.MappingNode)({
                        Literal: (*core.ScalarValue)(<nil>),
                        Fields: (map[string]*core.MappingNode) <nil>,
                        Items: ([]*core.MappingNode) <nil>,
                        StringWithSubstitutions: (*substitutions.StringOrSubstitutions)({
                          Values: ([]*substitutions.StringOrSubstitution) (len=1) {
                            (*substitutions.StringOrSubstitution)({
                              StringValue: (*string)(<nil>),
                              SubstitutionValue: (*substitutions.Substitution)({
                                Function: (*substitutions.SubstitutionFunctionExpr)(<nil>),
                                Variable: (*substitutions.SubstitutionVariable)(<nil>),
                                ValueReference: (*substitutions.SubstitutionValueReference)(<nil>),
                                ElemReference: (*substitutions.SubstitutionElemReference)(<nil>),
                                ElemIndexReference: (*substitutions.SubstitutionElemIndexReference)(<nil>),
                                DataSourceProperty: (*substitutions.SubstitutionDataSourceProperty)(<nil>),
                                ResourceProperty: (*substitutions.SubstitutionResourceProperty)({
                                  ResourceName: (string) (len=10) "authoriser",
                                  ResourceEachTemplateIndex: (*int64)(<nil>),
                                  Path: ([]*substitutions.SubstitutionPathItem) {
                                  },
                                  SourceMeta: (*source.Meta)({
                                    Line: (int) 114,
                                    Column: (int) 23
                                  })
                                }),
                                Child: (*substitutions.SubstitutionChild)(<nil>),
                                StringValue: (*string)(<nil>),
                                IntValue: (*int64)(<nil>),
                                FloatValue: (*float64)(<nil>),
                                BoolValue: (*bool)(<nil>),
                                SourceMeta: (*source.Meta)({
                                  Line: (int) 114,
                                  Column: (int) 23
                                })
                              }),
                              SourceMeta: (*source.Meta)({
                                Line: (int) 114,
                                Column: (int) 21
                              })
                            })
                          },
                          SourceMeta: (*source.Meta)({
                            Line: (int) 114,
                            Column: (int) 21
                          })
                        }),
                        SourceMeta: (*source.Meta)({
                          Line: (int) 114,
                          Column: (int) 21
                        }),
                        FieldsSourceMeta: (map[string]*source.Meta) <nil>
                      }),
                      (string) (len=6) "method": (*core.MappingNode)({
                        Literal: (*core.ScalarValue)({
                          IntValue: (*int)(<nil>),
                          BoolValue: (*bool)(<nil>),
                          FloatValue: (*float64)(<nil>),
                          StringValue: (*string)((len=3) "get"),
                          SourceMeta: (*source.Meta)({
                            Line: (int) 112,
                            Column: (int) 17
                          })
                        }),
                        Fields: (map[string]*core.MappingNode) <nil>,
                        Items: ([]*core.MappingNode) <nil>,
                        StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                        SourceMeta: (*source.Meta)({
                          Line: (int) 112,
                          Column: (int) 17
                        }),
                        FieldsSourceMeta: (map[string]*source.Meta) <nil>
                      }),
                      (string) (len=4) "path": (*core.MappingNode)({
                        Literal: (*core.ScalarValue)({
                          IntValue: (*int)(<nil>),
                          BoolValue: (*bool)(<nil>),
                          FloatValue: (*float64)(<nil>),
                          StringValue: (*string)((len=7) "/orders"),
                          SourceMeta: (*source.Meta)({
                            Line: (int) 113,
                            Column: (int) 15
                          })
                        }),
                        Fields: (map[string]*core.MappingNode) <nil>,
                        Items: ([]*core.MappingNode) <nil>,
                        StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                        SourceMeta: (*source.Meta)({
                          Line: (int) 113,
                          Column: (int) 15
                        }),
                        FieldsSourceMeta: (map[string]*source.Meta) <nil>
                      })
                    },
                    Items: ([]*core.MappingNode) <nil>,
                    StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                    SourceMeta: (*source.Meta)({
                      Line: (int) 112,
                      Column: (int) 9
                    }),
                    FieldsSourceMeta: (map[string]*source.Meta) (len=3) {
                      (string) (len=10) "authoriser": (*source.Meta)({
                        Line: (int) 114,
                        Column: (int) 9
                      }),
                      (string) (len=6) "method": (*source.Meta)({
                        Line: (int) 112,
                        Column: (int) 9
                      }),
                      (string) (len=4) "path": (*source.Meta)({
                        Line: (int) 113,
                        Column: (int) 9
                      })
                    }
                  }),
                  (string) (len=7) "handler": (*core.MappingNode)({
                    Literal: (*core.ScalarValue)({
                      IntValue: (*int)(<nil>),
                      BoolValue: (*bool)(<nil>),
                      FloatValue: (*float64)(<nil>),
                      StringValue: (*string)((len=18) "handlers.GetOrders"),
                      SourceMeta: (*source.Meta)({
                        Line: (int) 109,
                        Column: (int) 16
                      })
                    }),
                    Fields: (map[string]*core.MappingNode) <nil>,
                    Items: ([]*core.MappingNode) <nil>,
                    StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                    SourceMeta: (*source.Meta)({
                      Line: (int) 109,
                      Column: (int) 16
                    }),
                    FieldsSourceMeta: (map[string]*source.Meta) <nil>
                  }),
                  (string) (len=7) "timeout": (*core.MappingNode)({
                    Literal: (*core.ScalarValue)({
                      IntValue: (*int)(120),
                      BoolValue: (*bool)(<nil>),
                      FloatValue: (*float64)(<nil>),
                      StringValue: (*string)(<nil>),
                      SourceMeta: (*source.Meta)({
                        Line: (int) 110,
                        Column: (int) 16
                      })
                    }),
                    Fields: (map[string]*core.MappingNode) <nil>,
                    Items: ([]*core.MappingNode) <nil>,
                    StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                    SourceMeta: (*source.Meta)({
                      Line: (int) 110,
                      Column: (int) 16
                    }),
                    FieldsSourceMeta: (map[string]*source.Meta) <nil>
                  })
                },
                Items: ([]*core.MappingNode) <nil>,
                StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                SourceMeta: (*source.Meta)({
                  Line: (int) 109,
                  Column: (int) 7
                }),
                FieldsSourceMeta: (map[string]*source.Meta) (len=3) {
                  (string) (len=8) "endpoint": (*source.Meta)({
                    Line: (int) 111,
                    Column: (int) 7
                  }),
                  (string) (len=7) "handler": (*source.Meta)({
                    Line: (int) 109,
                    Column: (int) 7
                  }),
                  (string) (len=7) "timeout": (*source.Meta)({
                    Line: (int) 110,
                    Column: (int) 7
                  })
                }
              }),
              Range: (*source.Range)({
                Start: (*source.Meta)({
                  Line: (int) 109,
                  Column: (int) 7
                }),
                End: (*source.Meta)({
                  Line: (int) 117,
                  Column: (int) 3
                })
              })
            })
          },
          SchemaElement: (*schema.Resource)({
            Type: (*schema.ResourceTypeWrapper)({
              Value: (string) (len=16) "celerity/handler",
              SourceMeta: (*source.Meta)({
                Line: (int) 103,
                Column: (int) 11
              })
            }),
            Description: (*substitutions.StringOrSubstitutions)(<nil>),
            Metadata: (*schema.Metadata)({
              DisplayName: (*substitutions.StringOrSubstitutions)({
                Values: ([]*substitutions.StringOrSubstitution) (len=1) {
                  (*substitutions.StringOrSubstitution)({
                    StringValue: (*string)((len=18) "Get Orders Handler"),
                    SubstitutionValue: (*substitutions.Substitution)(<nil>),
                    SourceMeta: (*source.Meta)({
                      Line: (int) 105,
                      Column: (int) 20
                    })
                  })
                },
                SourceMeta: (*source.Meta)({
                  Line: (int) 105,
                  Column: (int) 20
                })
              }),
              Annotations: (*schema.StringOrSubstitutionsMap)(<nil>),
              Labels: (*schema.StringMap)({
                Values: (map[string]string) (len=1) {
                  (string) (len=3) "app": (string) (len=8) "orderApi"
                },
                SourceMeta: (map[string]*source.Meta) (len=1) {
                  (string) (len=3) "app": (*source.Meta)({
                    Line: (int) 107,
                    Column: (int) 9
                  })
                }
              }),
              Custom: (*core.MappingNode)(<nil>),
              SourceMeta: (*source.Meta)({
                Line: (int) 105,
                Column: (int) 7
              })
            }),
            Condition: (*schema.Condition)(<nil>),
            Each: (*substitutions.StringOrSubstitutions)(<nil>),
            LinkSelector: (*schema.LinkSelector)(<nil>),
            Spec: (*core.MappingNode)({
              Literal: (*core.ScalarValue)(<nil>),
              Fields: (map[string]*core.MappingNode) (len=3) {
                (string) (len=8) "endpoint": (*core.MappingNode)({
                  Literal: (*core.ScalarValue)(<nil>),
                  Fields: (map[string]*core.MappingNode) (len=3) {
                    (string) (len=10) "authoriser": (*core.MappingNode)({
                      Literal: (*core.ScalarValue)(<nil>),
                      Fields: (map[string]*core.MappingNode) <nil>,
                      Items: ([]*core.MappingNode) <nil>,
                      StringWithSubstitutions: (*substitutions.StringOrSubstitutions)({
                        Values: ([]*substitutions.StringOrSubstitution) (len=1) {
                          (*substitutions.StringOrSubstitution)({
                            StringValue: (*string)(<nil>),
                            SubstitutionValue: (*substitutions.Substitution)({
                              Function: (*substitutions.SubstitutionFunctionExpr)(<nil>),
                              Variable: (*substitutions.SubstitutionVariable)(<nil>),
                              ValueReference: (*substitutions.SubstitutionValueReference)(<nil>),
                              ElemReference: (*substitutions.SubstitutionElemReference)(<nil>),
                              ElemIndexReference: (*substitutions.SubstitutionElemIndexReference)(<nil>),
                              DataSourceProperty: (*substitutions.SubstitutionDataSourceProperty)(<nil>),
                              ResourceProperty: (*substitutions.SubstitutionResourceProperty)({
                                ResourceName: (string) (len=10) "authoriser",
                                ResourceEachTemplateIndex: (*int64)(<nil>),
                                Path: ([]*substitutions.SubstitutionPathItem) {
                                },
                                SourceMeta: (*source.Meta)({
                                  Line: (int) 114,
                                  Column: (int) 23
                                })
                              }),
                              Child: (*substitutions.SubstitutionChild)(<nil>),
                              StringValue: (*string)(<nil>),
                              IntValue: (*int64)(<nil>),
                              FloatValue: (*float64)(<nil>),
                              BoolValue: (*bool)(<nil>),
                              SourceMeta: (*source.Meta)({
                                Line: (int) 114,
                                Column: (int) 23
                              })
                            }),
                            SourceMeta: (*source.Meta)({
                              Line: (int) 114,
                              Column: (int) 21
                            })
                          })
                        },
                        SourceMeta: (*source.Meta)({
                          Line: (int) 114,
                          Column: (int) 21
                        })
                      }),
                      SourceMeta: (*source.Meta)({
                        Line: (int) 114,
                        Column: (int) 21
                      }),
                      FieldsSourceMeta: (map[string]*source.Meta) <nil>
                    }),
                    (string) (len=6) "method": (*core.MappingNode)({
                      Literal: (*core.ScalarValue)({
                        IntValue: (*int)(<nil>),
                        BoolValue: (*bool)(<nil>),
                        FloatValue: (*float64)(<nil>),
                        StringValue: (*string)((len=3) "get"),
                        SourceMeta: (*source.Meta)({
                          Line: (int) 112,
                          Column: (int) 17
                        })
                      }),
                      Fields: (map[string]*core.MappingNode) <nil>,
                      Items: ([]*core.MappingNode) <nil>,
                      StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                      SourceMeta: (*source.Meta)({
                        Line: (int) 112,
                        Column: (int) 17
                      }),
                      FieldsSourceMeta: (map[string]*source.Meta) <nil>
                    }),
                    (string) (len=4) "path": (*core.MappingNode)({
                      Literal: (*core.ScalarValue)({
                        IntValue: (*int)(<nil>),
                        BoolValue: (*bool)(<nil>),
                        FloatValue: (*float64)(<nil>),
                        StringValue: (*string)((len=7) "/orders"),
                        SourceMeta: (*source.Meta)({
                          Line: (int) 113,
                          Column: (int) 15
                        })
                      }),
                      Fields: (map[string]*core.MappingNode) <nil>,
                      Items: ([]*core.MappingNode) <nil>,
                      StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                      SourceMeta: (*source.Meta)({
                        Line: (int) 113,
                        Column: (int) 15
                      }),
                      FieldsSourceMeta: (map[string]*source.Meta) <nil>
                    })
                  },
                  Items: ([]*core.MappingNode) <nil>,
                  StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                  SourceMeta: (*source.Meta)({
                    Line: (int) 112,
                    Column: (int) 9
                  }),
                  FieldsSourceMeta: (map[string]*source.Meta) (len=3) {
                    (string) (len=10) "authoriser": (*source.Meta)({
                      Line: (int) 114,
                      Column: (int) 9
                    }),
                    (string) (len=6) "method": (*source.Meta)({
                      Line: (int) 112,
                      Column: (int) 9
                    }),
                    (string) (len=4) "path": (*source.Meta)({
                      Line: (int) 113,
                      Column: (int) 9
                    })
                  }
                }),
                (string) (len=7) "handler": (*core.MappingNode)({
                  Literal: (*core.ScalarValue)({
                    IntValue: (*int)(<nil>),
                    BoolValue: (*bool)(<nil>),
                    FloatValue: (*float64)(<nil>),
                    StringValue: (*string)((len=18) "handlers.GetOrders"),
                    SourceMeta: (*source.Meta)({
                      Line: (int) 109,
                      Column: (int) 16
                    })
                  }),
                  Fields: (map[string]*core.MappingNode) <nil>,
                  Items: ([]*core.MappingNode) <nil>,
                  StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                  SourceMeta: (*source.Meta)({
                    Line: (int) 109,
                    Column: (int) 16
                  }),
                  FieldsSourceMeta: (map[string]*source.Meta) <nil>
                }),
                (string) (len=7) "timeout": (*core.MappingNode)({
                  Literal: (*core.ScalarValue)({
                    IntValue: (*int)(120),
                    BoolValue: (*bool)(<nil>),
                    FloatValue: (*float64)(<nil>),
                    StringValue: (*string)(<nil>),
                    SourceMeta: (*source.Meta)({
                      Line: (int) 110,
                      Column: (int) 16
                    })
                  }),
                  Fields: (map[string]*core.MappingNode) <nil>,
                  Items: ([]*core.MappingNode) <nil>,
                  StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                  SourceMeta: (*source.Meta)({
                    Line: (int) 110,
                    Column: (int) 16
                  }),
                  FieldsSourceMeta: (map[string]*source.Meta) <nil>
                })
              },
              Items: ([]*core.MappingNode) <nil>,
              StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
              SourceMeta: (*source.Meta)({
                Line: (int) 109,
                Column: (int) 7
              }),
              FieldsSourceMeta: (map[string]*source.Meta) (len=3) {
                (string) (len=8) "endpoint": (*source.Meta)({
                  Line: (int) 111,
                  Column: (int) 7
                }),
                (string) (len=7) "handler": (*source.Meta)({
                  Line: (int) 109,
                  Column: (int) 7
                }),
                (string) (len=7) "timeout": (*source.Meta)({
                  Line: (int) 110,
                  Column: (int) 7
                })
              }
            }),
            SourceMeta: (*source.Meta)({
              Line: (int) 103,
              Column: (int) 5
            })
          }),
          Range: (*source.Range)({
            Start: (*source.Meta)({
              Line: (int) 102,
              Column: (int) 3
            }),
            End: (*source.Meta)({
              Line: (int) 117,
              Column: (int) 3
            })
          })
        }),
        (*schema.TreeNode)({
          Label: (string) (len=19) "updateOrderFunction",
          Path: (string) (len=20) "/updateOrderFunction",
          Type: (schema.TreeNodeType) 0,
          Children: ([]*schema.TreeNode) (len=3) {
            (*schema.TreeNode)({
              Label: (string) (len=4) "type",
              Path: (string) (len=25) "/updateOrderFunction/type",
              Type: (schema.TreeNodeType) 1,
              Children: ([]*schema.TreeNode) <nil>,
              SchemaElement: (*schema.ResourceTypeWrapper)({
                Value: (string) (len=16) "celerity/handler",
                SourceMeta: (*source.Meta)({
                  Line: (int) 118,
                  Column: (int) 11
                })
              }),
              Range: (*source.Range)({
                Start: (*source.Meta)({
                  Line: (int) 118,
                  Column: (int) 11
                }),
                End: (*source.Meta)({
                  Line: (int) 120,
                  Column: (int) 7
                })
              })
            }),
            (*schema.TreeNode)({
              Label: (string) (len=8) "metadata",
              Path: (string) (len=29) "/updateOrderFunction/metadata",
              Type: (schema.TreeNodeType) 0,
              Children: ([]*schema.TreeNode) (len=2) {
                (*schema.TreeNode)({
                  Label: (string) (len=11) "displayName",
                  Path: (string) (len=41) "/updateOrderFunction/metadata/displayName",
                  Type: (schema.TreeNodeType) 0,
                  Children: ([]*schema.TreeNode) (len=1) {
                    (*schema.TreeNode)({
                      Label: (string) (len=6) "string",
                      Path: (string) (len=48) "/updateOrderFunction/metadata/displayName/string",
                      Type: (schema.TreeNodeType) 1,
                      Children: ([]*schema.TreeNode) <nil>,
                      SchemaElement: (string) (len=21) "Update Order Function",
                      Range: (*source.Range)({
                        Start: (*source.Meta)({
                          Line: (int) 120,
                          Column: (int) 20
                        }),
                        End: (*source.Meta)({
                          Line: (int) 122,
                          Column: (int) 9
                        })
                      })
                    })
                  },
                  SchemaElement: (*substitutions.StringOrSubstitutions)({
                    Values: ([]*substitutions.StringOrSubstitution) (len=1) {
                      (*substitutions.StringOrSubstitution)({
                        StringValue: (*string)((len=21) "Update Order Function"),
                        SubstitutionValue: (*substitutions.Substitution)(<nil>),
                        SourceMeta: (*source.Meta)({
                          Line: (int) 120,
                          Column: (int) 20
                        })
                      })
                    },
                    SourceMeta: (*source.Meta)({
                      Line: (int) 120,
                      Column: (int) 20
                    })
                  }),
                  Range: (*source.Range)({
                    Start: (*source.Meta)({
                      Line: (int) 120,
                      Column: (int) 20
                    }),
                    End: (*source.Meta)({
                      Line: (int) 122,
                      Column: (int) 9
                    })
                  })
                }),
                (*schema.TreeNode)({
                  Label: (string) (len=6) "labels",
                  Path: (string) (len=36) "/updateOrderFunction/metadata/labels",
                  Type: (schema.TreeNodeType) 0,
                  Children: ([]*schema.TreeNode) (len=2) {
                    (*schema.TreeNode)({
                      Label: (string) (len=6) "string",
                      Path: (string) (len=43) "/updateOrderFunction/metadata/labels/string",
                      Type: (schema.TreeNodeType) 1,
                      Children: ([]*schema.TreeNode) <nil>,
                      SchemaElement: (string) (len=11) "orderPubSub",
                      Range: (*source.Range)({
                        Start: (*source.Meta)({
                          Line: (int) 122,
                          Column: (int) 9
                        }),
                        End: (*source.Meta)({
                          Line: (int) 127,
                          Column: (int) 9
                        })
                      })
                    }),
                    (*schema.TreeNode)({
                      Label: (string) (len=6) "string",
                      Path: (string) (len=43) "/updateOrderFunction/metadata/labels/string",
                      Type: (schema.TreeNodeType) 1,
                      Children: ([]*schema.TreeNode) <nil>,
                      SchemaElement: (string) (len=8) "consumer",
                      Range: (*source.Range)({
                        Start: (*source.Meta)({
                          Line: (int) 127,
                          Column: (int) 9
                        }),
                        End: (*source.Meta)({
                          Line: (int) 129,
                          Column: (int) 7
                        })
                      })
                    })
                  },
                  SchemaElement: (*schema.StringMap)({
                    Values: (map[string]string) (len=2) {
                      (string) (len=10) "pubsubType": (string) (len=8) "consumer",
                      (string) (len=8) "workflow": (string) (len=11) "orderPubSub"
                    },
                    SourceMeta: (map[string]*source.Meta) (len=2) {
                      (string) (len=10) "pubsubType": (*source.Meta)({
                        Line: (int) 127,
                        Column: (int) 9
                      }),
                      (string) (len=8) "workflow": (*source.Meta)({
                        Line: (int) 122,
                        Column: (int) 9
                      })
                    }
                  }),
                  Range: (*source.Range)({
                    Start: (*source.Meta)({
                      Line: (int) 122,
                      Column: (int) 9
                    }),
                    End: (*source.Meta)({
                      Line: (int) 129,
                      Column: (int) 7
                    })
                  })
                })
              },
              SchemaElement: (*schema.Metadata)({
                DisplayName: (*substitutions.StringOrSubstitutions)({
                  Values: ([]*substitutions.StringOrSubstitution) (len=1) {
                    (*substitutions.StringOrSubstitution)({
                      StringValue: (*string)((len=21) "Update Order Function"),
                      SubstitutionValue: (*substitutions.Substitution)(<nil>),
                      SourceMeta: (*source.Meta)({
                        Line: (int) 120,
                        Column: (int) 20
                      })
                    })
                  },
                  SourceMeta: (*source.Meta)({
                    Line: (int) 120,
                    Column: (int) 20
                  })
                }),
                Annotations: (*schema.StringOrSubstitutionsMap)(<nil>),
                Labels: (*schema.StringMap)({
                  Values: (map[string]string) (len=2) {
                    (string) (len=10) "pubsubType": (string) (len=8) "consumer",
                    (string) (len=8) "workflow": (string) (len=11) "orderPubSub"
                  },
                  SourceMeta: (map[string]*source.Meta) (len=2) {
                    (string) (len=10) "pubsubType": (*source.Meta)({
                      Line: (int) 127,
                      Column: (int) 9
                    }),
                    (string) (len=8) "workflow": (*source.Meta)({
                      Line: (int) 122,
                      Column: (int) 9
                    })
                  }
                }),
                Custom: (*core.MappingNode)(<nil>),
                SourceMeta: (*source.Meta)({
                  Line: (int) 120,
                  Column: (int) 7
                })
              }),
              Range: (*source.Range)({
                Start: (*source.Meta)({
                  Line: (int) 120,
                  Column: (int) 7
                }),
                End: (*source.Meta)({
                  Line: (int) 129,
                  Column: (int) 7
                })
              })
            }),
            (*schema.TreeNode)({
              Label: (string) (len=4) "spec",
              Path: (string) (len=25) "/updateOrderFunction/spec",
              Type: (schema.TreeNodeType) 0,
              Children: ([]*schema.TreeNode) (len=3) {
                (*schema.TreeNode)({
                  Label: (string) (len=7) "handler",
                  Path: (string) (len=33) "/updateOrderFunction/spec/handler",
                  Type: (schema.TreeNodeType) 0,
                  Children: ([]*schema.TreeNode) (len=1) {
                    (*schema.TreeNode)({
                      Label: (string) (len=6) "scalar",
                      Path: (string) (len=40) "/updateOrderFunction/spec/handler/scalar",
                      Type: (schema.TreeNodeType) 1,
                      Children: ([]*schema.TreeNode) <nil>,
                      SchemaElement: (*core.ScalarValue)({
                        IntValue: (*int)(<nil>),
                        BoolValue: (*bool)(<nil>),
                        FloatValue: (*float64)(<nil>),
                        StringValue: (*string)((len=20) "handlers.UpdateOrder"),
                        SourceMeta: (*source.Meta)({
                          Line: (int) 129,
                          Column: (int) 16
                        })
                      }),
                      Range: (*source.Range)({
                        Start: (*source.Meta)({
                          Line: (int) 129,
                          Column: (int) 16
                        }),
                        End: (*source.Meta)({
                          Line: (int) 130,
                          Column: (int) 7
                        })
                      })
                    })
                  },
                  SchemaElement: (*core.MappingNode)({
                    Literal: (*core.ScalarValue)({
                      IntValue: (*int)(<nil>),
                      BoolValue: (*bool)(<nil>),
                      FloatValue: (*float64)(<nil>),
                      StringValue: (*string)((len=20) "handlers.UpdateOrder"),
                      SourceMeta: (*source.Meta)({
                        Line: (int) 129,
                        Column: (int) 16
                      })
                    }),
                    Fields: (map[string]*core.MappingNode) <nil>,
                    Items: ([]*core.MappingNode) <nil>,
                    StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                    SourceMeta: (*source.Meta)({
                      Line: (int) 129,
                      Column: (int) 16
                    }),
                    FieldsSourceMeta: (map[string]*source.Meta) <nil>
                  }),
                  Range: (*source.Range)({
                    Start: (*source.Meta)({
                      Line: (int) 129,
                      Column: (int) 7
                    }),
                    End: (*source.Meta)({
                      Line: (int) 130,
                      Column: (int) 7
                    })
                  })
                }),
                (*schema.TreeNode)({
                  Label: (string) (len=7) "timeout",
                  Path: (string) (len=33) "/updateOrderFunction/spec/timeout",
                  Type: (schema.TreeNodeType) 0,
                  Children: ([]*schema.TreeNode) (len=1) {
                    (*schema.TreeNode)({
                      Label: (string) (len=6) "scalar",
                      Path: (string) (len=40) "/updateOrderFunction/spec/timeout/scalar",
                      Type: (schema.TreeNodeType) 1,
                      Children: ([]*schema.TreeNode) <nil>,
                      SchemaElement: (*core.ScalarValue)({
                        IntValue: (*int)(120),
                        BoolValue: (*bool)(<nil>),
                        FloatValue: (*float64)(<nil>),
                        StringValue: (*string)(<nil>),
                        SourceMeta: (*source.Meta)({
                          Line: (int) 130,
                          Column: (int) 16
                        })
                      }),
                      Range: (*source.Range)({
                        Start: (*source.Meta)({
                          Line: (int) 130,
                          Column: (int) 16
                        }),
                        End: (*source.Meta)({
                          Line: (int) 131,
                          Column: (int) 7
                        })
                      })
                    })
                  },
                  SchemaElement: (*core.MappingNode)({
                    Literal: (*core.ScalarValue)({
                      IntValue: (*int)(120),
                      BoolValue: (*bool)(<nil>),
                      FloatValue: (*float64)(<nil>),
                      StringValue: (*string)(<nil>),
                      SourceMeta: (*source.Meta)({
                        Line: (int) 130,
                        Column: (int) 16
                      })
                    }),
                    Fields: (map[string]*core.MappingNode) <nil>,
                    Items: ([]*core.MappingNode) <nil>,
                    StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                    SourceMeta: (*source.Meta)({
                      Line: (int) 130,
                      Column: (int) 16
                    }),
                    FieldsSourceMeta: (map[string]*source.Meta) <nil>
                  }),
                  Range: (*source.Range)({
                    Start: (*source.Meta)({
                      Line: (int) 130,
                      Column: (int) 7
                    }),
                    End: (*source.Meta)({
                      Line: (int) 131,
                      Column: (int) 7
                    })
                  })
                }),
                (*schema.TreeNode)({
                  Label: (string) (len=6) "events",
                  Path: (string) (len=32) "/updateOrderFunction/spec/events",
                  Type: (schema.TreeNodeType) 0,
                  Children: ([]*schema.TreeNode) (len=1) {
                    (*schema.TreeNode)({
                      Label: (string) (len=10) "orderEvent",
                      Path: (string) (len=43) "/updateOrderFunction/spec/events/orderEvent",
                      Type: (schema.TreeNodeType) 0,
                      Children: ([]*schema.TreeNode) (len=2) {
                        (*schema.TreeNode)({
                          Label: (string) (len=4) "type",
                          Path: (string) (len=48) "/updateOrderFunction/spec/events/orderEvent/type",
                          Type: (schema.TreeNodeType) 0,
                          Children: ([]*schema.TreeNode) (len=1) {
                            (*schema.TreeNode)({
                              Label: (string) (len=6) "scalar",
                              Path: (string) (len=55) "/updateOrderFunction/spec/events/orderEvent/type/scalar",
                              Type: (schema.TreeNodeType) 1,
                              Children: ([]*schema.TreeNode) <nil>,
                              SchemaElement: (*core.ScalarValue)({
                                IntValue: (*int)(<nil>),
                                BoolValue: (*bool)(<nil>),
                                FloatValue: (*float64)(<nil>),
                                StringValue: (*string)((len=6) "pubsub"),
                                SourceMeta: (*source.Meta)({
                                  Line: (int) 133,
                                  Column: (int) 17
                                })
                              }),
                              Range: (*source.Range)({
                                Start: (*source.Meta)({
                                  Line: (int) 133,
                                  Column: (int) 17
                                }),
                                End: (*source.Meta)({
                                  Line: (int) 136,
                                  Column: (int) 11
                                })
                              })
                            })
                          },
                          SchemaElement: (*core.MappingNode)({
                            Literal: (*core.ScalarValue)({
                              IntValue: (*int)(<nil>),
                              BoolValue: (*bool)(<nil>),
                              FloatValue: (*float64)(<nil>),
                              StringValue: (*string)((len=6) "pubsub"),
                              SourceMeta: (*source.Meta)({
                                Line: (int) 133,
                                Column: (int) 17
                              })
                            }),
                            Fields: (map[string]*core.MappingNode) <nil>,
                            Items: ([]*core.MappingNode) <nil>,
                            StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                            SourceMeta: (*source.Meta)({
                              Line: (int) 133,
                              Column: (int) 17
                            }),
                            FieldsSourceMeta: (map[string]*source.Meta) <nil>
                          }),
                          Range: (*source.Range)({
                            Start: (*source.Meta)({
                              Line: (int) 133,
                              Column: (int) 11
                            }),
                            End: (*source.Meta)({
                              Line: (int) 136,
                              Column: (int) 11
                            })
                          })
                        }),
                        (*schema.TreeNode)({
                          Label: (string) (len=9) "batchSize",
                          Path: (string) (len=53) "/updateOrderFunction/spec/events/orderEvent/batchSize",
                          Type: (schema.TreeNodeType) 0,
                          Children: ([]*schema.TreeNode) (len=1) {
                            (*schema.TreeNode)({
                              Label: (string) (len=6) "scalar",
                              Path: (string) (len=60) "/updateOrderFunction/spec/events/orderEvent/batchSize/scalar",
                              Type: (schema.TreeNodeType) 1,
                              Children: ([]*schema.TreeNode) <nil>,
                              SchemaElement: (*core.ScalarValue)({
                                IntValue: (*int)(10),
                                BoolValue: (*bool)(<nil>),
                                FloatValue: (*float64)(<nil>),
                                StringValue: (*string)(<nil>),
                                SourceMeta: (*source.Meta)({
                                  Line: (int) 136,
                                  Column: (int) 22
                                })
                              }),
                              Range: (*source.Range)({
                                Start: (*source.Meta)({
                                  Line: (int) 136,
                                  Column: (int) 22
                                }),
                                End: (*source.Meta)({
                                  Line: (int) 138,
                                  Column: (int) 3
                                })
                              })
                            })
                          },
                          SchemaElement: (*core.MappingNode)({
                            Literal: (*core.ScalarValue)({
                              IntValue: (*int)(10),
                              BoolValue: (*bool)(<nil>),
                              FloatValue: (*float64)(<nil>),
                              StringValue: (*string)(<nil>),
                              SourceMeta: (*source.Meta)({
                                Line: (int) 136,
                                Column: (int) 22
                              })
                            }),
                            Fields: (map[string]*core.MappingNode) <nil>,
                            Items: ([]*core.MappingNode) <nil>,
                            StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                            SourceMeta: (*source.Meta)({
                              Line: (int) 136,
                              Column: (int) 22
                            }),
                            FieldsSourceMeta: (map[string]*source.Meta) <nil>
                          }),
                          Range: (*source.Range)({
                            Start: (*source.Meta)({
                              Line: (int) 136,
                              Column: (int) 11
                            }),
                            End: (*source.Meta)({
                              Line: (int) 138,
                              Column: (int) 3
                            })
                          })
                        })
                      },
                      SchemaElement: (*core.MappingNode)({
                        Literal: (*core.ScalarValue)(<nil>),
                        Fields: (map[string]*core.MappingNode) (len=2) {
                          (string) (len=9) "batchSize": (*core.MappingNode)({
                            Literal: (*core.ScalarValue)({
                              IntValue: (*int)(10),
                              BoolValue: (*bool)(<nil>),
                              FloatValue: (*float64)(<nil>),
                              StringValue: (*string)(<nil>),
                              SourceMeta: (*source.Meta)({
                                Line: (int) 136,
                                Column: (int) 22
                              })
                            }),
                            Fields: (map[string]*core.MappingNode) <nil>,
                            Items: ([]*core.MappingNode) <nil>,
                            StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                            SourceMeta: (*source.Meta)({
                              Line: (int) 136,
                              Column: (int) 22
                            }),
                            FieldsSourceMeta: (map[string]*source.Meta) <nil>
                          }),
                          (string) (len=4) "type": (*core.MappingNode)({
                            Literal: (*core.ScalarValue)({
                              IntValue: (*int)(<nil>),
                              BoolValue: (*bool)(<nil>),
                              FloatValue: (*float64)(<nil>),
                              StringValue: (*string)((len=6) "pubsub"),
                              SourceMeta: (*source.Meta)({
                                Line: (int) 133,
                                Column: (int) 17
                              })
                            }),
                            Fields: (map[string]*core.MappingNode) <nil>,
                            Items: ([]*core.MappingNode) <nil>,
                            StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                            SourceMeta: (*source.Meta)({
                              Line: (int) 133,
                              Column: (int) 17
                            }),
                            FieldsSourceMeta: (map[string]*source.Meta) <nil>
                          })
                        },
                        Items: ([]*core.MappingNode) <nil>,
                        StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                        SourceMeta: (*source.Meta)({
                          Line: (int) 133,
                          Column: (int) 11
                        }),
                        FieldsSourceMeta: (map[string]*source.Meta) (len=2) {
                          (string) (len=9) "batchSize": (*source.Meta)({
                            Line: (int) 136,
                            Column: (int) 11
                          }),
                          (string) (len=4) "type": (*source.Meta)({
                            Line: (int) 133,
                            Column: (int) 11
                          })
                        }
                      }),
                      Range: (*source.Range)({
                        Start: (*source.Meta)({
                          Line: (int) 132,
                          Column: (int) 9
                        }),
                        End: (*source.Meta)({
                          Line: (int) 138,
                          Column: (int) 3
                        })
                      })
                    })
                  },
                  SchemaElement: (*core.MappingNode)({
                    Literal: (*core.ScalarValue)(<nil>),
                    Fields: (map[string]*core.MappingNode) (len=1) {
                      (string) (len=10) "orderEvent": (*core.MappingNode)({
                        Literal: (*core.ScalarValue)(<nil>),
                        Fields: (map[string]*core.MappingNode) (len=2) {
                          (string) (len=9) "batchSize": (*core.MappingNode)({
                            Literal: (*core.ScalarValue)({
                              IntValue: (*int)(10),
                              BoolValue: (*bool)(<nil>),
                              FloatValue: (*float64)(<nil>),
                              StringValue: (*string)(<nil>),
                              SourceMeta: (*source.Meta)({
                                Line: (int) 136,
                                Column: (int) 22
                              })
                            }),
                            Fields: (map[string]*core.MappingNode) <nil>,
                            Items: ([]*core.MappingNode) <nil>,
                            StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                            SourceMeta: (*source.Meta)({
                              Line: (int) 136,
                              Column: (int) 22
                            }),
                            FieldsSourceMeta: (map[string]*source.Meta) <nil>
                          }),
                          (string) (len=4) "type": (*core.MappingNode)({
                            Literal: (*core.ScalarValue)({
                              IntValue: (*int)(<nil>),
                              BoolValue: (*bool)(<nil>),
                              FloatValue: (*float64)(<nil>),
                              StringValue: (*string)((len=6) "pubsub"),
                              SourceMeta: (*source.Meta)({
                                Line: (int) 133,
                                Column: (int) 17
                              })
                            }),
                            Fields: (map[string]*core.MappingNode) <nil>,
                            Items: ([]*core.MappingNode) <nil>,
                            StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                            SourceMeta: (*source.Meta)({
                              Line: (int) 133,
                              Column: (int) 17
                            }),
                            FieldsSourceMeta: (map[string]*source.Meta) <nil>
                          })
                        },
                        Items: ([]*core.MappingNode) <nil>,
                        StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                        SourceMeta: (*source.Meta)({
                          Line: (int) 133,
                          Column: (int) 11
                        }),
                        FieldsSourceMeta: (map[string]*source.Meta) (len=2) {
                          (string) (len=9) "batchSize": (*source.Meta)({
                            Line: (int) 136,
                            Column: (int) 11
                          }),
                          (string) (len=4) "type": (*source.Meta)({
                            Line: (int) 133,
                            Column: (int) 11
                          })
                        }
                      })
                    },
                    Items: ([]*core.MappingNode) <nil>,
                    StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                    SourceMeta: (*source.Meta)({
                      Line: (int) 132,
                      Column: (int) 9
                    }),
                    FieldsSourceMeta: (map[string]*source.Meta) (len=1) {
                      (string) (len=10) "orderEvent": (*source.Meta)({
                        Line: (int) 132,
                        Column: (int) 9
                      })
                    }
                  }),
                  Range: (*source.Range)({
                    Start: (*source.Meta)({
                      Line: (int) 131,
                      Column: (int) 7
                    }),
                    End: (*source.Meta)({
                      Line: (int) 138,
                      Column: (int) 3
                    })
                  })
                })
              },
              SchemaElement: (*core.MappingNode)({
                Literal: (*core.ScalarValue)(<nil>),
                Fields: (map[string]*core.MappingNode) (len=3) {
                  (string) (len=6) "events": (*core.MappingNode)({
                    Literal: (*core.ScalarValue)(<nil>),
                    Fields: (map[string]*core.MappingNode) (len=1) {
                      (string) (len=10) "orderEvent": (*core.MappingNode)({
                        Literal: (*core.ScalarValue)(<nil>),
                        Fields: (map[string]*core.MappingNode) (len=2) {
                          (string) (len=9) "batchSize": (*core.MappingNode)({
                            Literal: (*core.ScalarValue)({
                              IntValue: (*int)(10),
                              BoolValue: (*bool)(<nil>),
                              FloatValue: (*float64)(<nil>),
                              StringValue: (*string)(<nil>),
                              SourceMeta: (*source.Meta)({
                                Line: (int) 136,
                                Column: (int) 22
                              })
                            }),
                            Fields: (map[string]*core.MappingNode) <nil>,
                            Items: ([]*core.MappingNode) <nil>,
                            StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                            SourceMeta: (*source.Meta)({
                              Line: (int) 136,
                              Column: (int) 22
                            }),
                            FieldsSourceMeta: (map[string]*source.Meta) <nil>
                          }),
                          (string) (len=4) "type": (*core.MappingNode)({
                            Literal: (*core.ScalarValue)({
                              IntValue: (*int)(<nil>),
                              BoolValue: (*bool)(<nil>),
                              FloatValue: (*float64)(<nil>),
                              StringValue: (*string)((len=6) "pubsub"),
                              SourceMeta: (*source.Meta)({
                                Line: (int) 133,
                                Column: (int) 17
                              })
                            }),
                            Fields: (map[string]*core.MappingNode) <nil>,
                            Items: ([]*core.MappingNode) <nil>,
                            StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                            SourceMeta: (*source.Meta)({
                              Line: (int) 133,
                              Column: (int) 17
                            }),
                            FieldsSourceMeta: (map[string]*source.Meta) <nil>
                          })
                        },
                        Items: ([]*core.MappingNode) <nil>,
                        StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                        SourceMeta: (*source.Meta)({
                          Line: (int) 133,
                          Column: (int) 11
                        }),
                        FieldsSourceMeta: (map[string]*source.Meta) (len=2) {
                          (string) (len=9) "batchSize": (*source.Meta)({
                            Line: (int) 136,
                            Column: (int) 11
                          }),
                          (string) (len=4) "type": (*source.Meta)({
                            Line: (int) 133,
                            Column: (int) 11
                          })
                        }
                      })
                    },
                    Items: ([]*core.MappingNode) <nil>,
                    StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                    SourceMeta: (*source.Meta)({
                      Line: (int) 132,
                      Column: (int) 9
                    }),
                    FieldsSourceMeta: (map[string]*source.Meta) (len=1) {
                      (string) (len=10) "orderEvent": (*source.Meta)({
                        Line: (int) 132,
                        Column: (int) 9
                      })
                    }
                  }),
                  (string) (len=7) "handler": (*core.MappingNode)({
                    Literal: (*core.ScalarValue)({
                      IntValue: (*int)(<nil>),
                      BoolValue: (*bool)(<nil>),
                      FloatValue: (*float64)(<nil>),
                      StringValue: (*string)((len=20) "handlers.UpdateOrder"),
                      SourceMeta: (*source.Meta)({
                        Line: (int) 129,
                        Column: (int) 16
                      })
                    }),
                    Fields: (map[string]*core.MappingNode) <nil>,
                    Items: ([]*core.MappingNode) <nil>,
                    StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                    SourceMeta: (*source.Meta)({
                      Line: (int) 129,
                      Column: (int) 16
                    }),
                    FieldsSourceMeta: (map[string]*source.Meta) <nil>
                  }),
                  (string) (len=7) "timeout": (*core.MappingNode)({
                    Literal: (*core.ScalarValue)({
                      IntValue: (*int)(120),
                      BoolValue: (*bool)(<nil>),
                      FloatValue: (*float64)(<nil>),
                      StringValue: (*string)(<nil>),
                      SourceMeta: (*source.Meta)({
                        Line: (int) 130,
                        Column: (int) 16
                      })
                    }),
                    Fields: (map[string]*core.MappingNode) <nil>,
                    Items: ([]*core.MappingNode) <nil>,
                    StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                    SourceMeta: (*source.Meta)({
                      Line: (int) 130,
                      Column: (int) 16
                    }),
                    FieldsSourceMeta: (map[string]*source.Meta) <nil>
                  })
                },
                Items: ([]*core.MappingNode) <nil>,
                StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                SourceMeta: (*source.Meta)({
                  Line: (int) 129,
                  Column: (int) 7
                }),
                FieldsSourceMeta: (map[string]*source.Meta) (len=3) {
                  (string) (len=6) "events": (*source.Meta)({
                    Line: (int) 131,
                    Column: (int) 7
                  }),
                  (string) (len=7) "handler": (*source.Meta)({
                    Line: (int) 129,
                    Column: (int) 7
                  }),
                  (string) (len=7) "timeout": (*source.Meta)({
                    Line: (int) 130,
                    Column: (int) 7
                  })
                }
              }),
              Range: (*source.Range)({
                Start: (*source.Meta)({
                  Line: (int) 129,
                  Column: (int) 7
                }),
                End: (*source.Meta)({
                  Line: (int) 138,
                  Column: (int) 3
                })
              })
            })
          },
          SchemaElement: (*schema.Resource)({
            Type: (*schema.ResourceTypeWrapper)({
              Value: (string) (len=16) "celerity/handler",
              SourceMeta: (*source.Meta)({
                Line: (int) 118,
                Column: (int) 11
              })
            }),
            Description: (*substitutions.StringOrSubstitutions)(<nil>),
            Metadata: (*schema.Metadata)({
              DisplayName: (*substitutions.StringOrSubstitutions)({
                Values: ([]*substitutions.StringOrSubstitution) (len=1) {
                  (*substitutions.StringOrSubstitution)({
                    StringValue: (*string)((len=21) "Update Order Function"),
                    SubstitutionValue: (*substitutions.Substitution)(<nil>),
                    SourceMeta: (*source.Meta)({
                      Line: (int) 120,
                      Column: (int) 20
                    })
                  })
                },
                SourceMeta: (*source.Meta)({
                  Line: (int) 120,
                  Column: (int) 20
                })
              }),
              Annotations: (*schema.StringOrSubstitutionsMap)(<nil>),
              Labels: (*schema.StringMap)({
                Values: (map[string]string) (len=2) {
                  (string) (len=10) "pubsubType": (string) (len=8) "consumer",
                  (string) (len=8) "workflow": (string) (len=11) "orderPubSub"
                },
                SourceMeta: (map[string]*source.Meta) (len=2) {
                  (string) (len=10) "pubsubType": (*source.Meta)({
                    Line: (int) 127,
                    Column: (int) 9
                  }),
                  (string) (len=8) "workflow": (*source.Meta)({
                    Line: (int) 122,
                    Column: (int) 9
                  })
                }
              }),
              Custom: (*core.MappingNode)(<nil>),
              SourceMeta: (*source.Meta)({
                Line: (int) 120,
                Column: (int) 7
              })
            }),
            Condition: (*schema.Condition)(<nil>),
            Each: (*substitutions.StringOrSubstitutions)(<nil>),
            LinkSelector: (*schema.LinkSelector)(<nil>),
            Spec: (*core.MappingNode)({
              Literal: (*core.ScalarValue)(<nil>),
              Fields: (map[string]*core.MappingNode) (len=3) {
                (string) (len=6) "events": (*core.MappingNode)({
                  Literal: (*core.ScalarValue)(<nil>),
                  Fields: (map[string]*core.MappingNode) (len=1) {
                    (string) (len=10) "orderEvent": (*core.MappingNode)({
                      Literal: (*core.ScalarValue)(<nil>),
                      Fields: (map[string]*core.MappingNode) (len=2) {
                        (string) (len=9) "batchSize": (*core.MappingNode)({
                          Literal: (*core.ScalarValue)({
                            IntValue: (*int)(10),
                            BoolValue: (*bool)(<nil>),
                            FloatValue: (*float64)(<nil>),
                            StringValue: (*string)(<nil>),
                            SourceMeta: (*source.Meta)({
                              Line: (int) 136,
                              Column: (int) 22
                            })
                          }),
                          Fields: (map[string]*core.MappingNode) <nil>,
                          Items: ([]*core.MappingNode) <nil>,
                          StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                          SourceMeta: (*source.Meta)({
                            Line: (int) 136,
                            Column: (int) 22
                          }),
                          FieldsSourceMeta: (map[string]*source.Meta) <nil>
                        }),
                        (string) (len=4) "type": (*core.MappingNode)({
                          Literal: (*core.ScalarValue)({
                            IntValue: (*int)(<nil>),
                            BoolValue: (*bool)(<nil>),
                            FloatValue: (*float64)(<nil>),
                            StringValue: (*string)((len=6) "pubsub"),
                            SourceMeta: (*source.Meta)({
                              Line: (int) 133,
                              Column: (int) 17
                            })
                          }),
                          Fields: (map[string]*core.MappingNode) <nil>,
                          Items: ([]*core.MappingNode) <nil>,
                          StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                          SourceMeta: (*source.Meta)({
                            Line: (int) 133,
                            Column: (int) 17
                          }),
                          FieldsSourceMeta: (map[string]*source.Meta) <nil>
                        })
                      },
                      Items: ([]*core.MappingNode) <nil>,
                      StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                      SourceMeta: (*source.Meta)({
                        Line: (int) 133,
                        Column: (int) 11
                      }),
                      FieldsSourceMeta: (map[string]*source.Meta) (len=2) {
                        (string) (len=9) "batchSize": (*source.Meta)({
                          Line: (int) 136,
                          Column: (int) 11
                        }),
                        (string) (len=4) "type": (*source.Meta)({
                          Line: (int) 133,
                          Column: (int) 11
                        })
                      }
                    })
                  },
                  Items: ([]*core.MappingNode) <nil>,
                  StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                  SourceMeta: (*source.Meta)({
                    Line: (int) 132,
                    Column: (int) 9
                  }),
                  FieldsSourceMeta: (map[string]*source.Meta) (len=1) {
                    (string) (len=10) "orderEvent": (*source.Meta)({
                      Line: (int) 132,
                      Column: (int) 9
                    })
                  }
                }),
                (string) (len=7) "handler": (*core.MappingNode)({
                  Literal: (*core.ScalarValue)({
                    IntValue: (*int)(<nil>),
                    BoolValue: (*bool)(<nil>),
                    FloatValue: (*float64)(<nil>),
                    StringValue: (*string)((len=20) "handlers.UpdateOrder"),
                    SourceMeta: (*source.Meta)({
                      Line: (int) 129,
                      Column: (int) 16
                    })
                  }),
                  Fields: (map[string]*core.MappingNode) <nil>,
                  Items: ([]*core.MappingNode) <nil>,
                  StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                  SourceMeta: (*source.Meta)({
                    Line: (int) 129,
                    Column: (int) 16
                  }),
                  FieldsSourceMeta: (map[string]*source.Meta) <nil>
                }),
                (string) (len=7) "timeout": (*core.MappingNode)({
                  Literal: (*core.ScalarValue)({
                    IntValue: (*int)(120),
                    BoolValue: (*bool)(<nil>),
                    FloatValue: (*float64)(<nil>),
                    StringValue: (*string)(<nil>),
                    SourceMeta: (*source.Meta)({
                      Line: (int) 130,
                      Column: (int) 16
                    })
                  }),
                  Fields: (map[string]*core.MappingNode) <nil>,
                  Items: ([]*core.MappingNode) <nil>,
                  StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                  SourceMeta: (*source.Meta)({
                    Line: (int) 130,
                    Column: (int) 16
                  }),
                  FieldsSourceMeta: (map[string]*source.Meta) <nil>
                })
              },
              Items: ([]*core.MappingNode) <nil>,
              StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
              SourceMeta: (*source.Meta)({
                Line: (int) 129,
                Column: (int) 7
              }),
              FieldsSourceMeta: (map[string]*source.Meta) (len=3) {
                (string) (len=6) "events": (*source.Meta)({
                  Line: (int) 131,
                  Column: (int) 7
                }),
                (string) (len=7) "handler": (*source.Meta)({
                  Line: (int) 129,
                  Column: (int) 7
                }),
                (string) (len=7) "timeout": (*source.Meta)({
                  Line: (int) 130,
                  Column: (int) 7
                })
              }
            }),
            SourceMeta: (*source.Meta)({
              Line: (int) 118,
              Column: (int) 5
            })
          }),
          Range: (*source.Range)({
            Start: (*source.Meta)({
              Line: (int) 117,
              Column: (int) 3
            }),
            End: (*source.Meta)({
              Line: (int) 138,
              Column: (int) 3
            })
          })
        }),
        (*schema.TreeNode)({
          Label: (string) (len=19) "sharedPackagesLayer",
          Path: (string) (len=20) "/sharedPackagesLayer",
          Type: (schema.TreeNodeType) 0,
          Children: ([]*schema.TreeNode) (len=3) {
            (*schema.TreeNode)({
              Label: (string) (len=4) "type",
              Path: (string) (len=25) "/sharedPackagesLayer/type",
              Type: (schema.TreeNodeType) 1,
              Children: ([]*schema.TreeNode) <nil>,
              SchemaElement: (*schema.ResourceTypeWrapper)({
                Value: (string) (len=21) "celerity/layerVersion",
                SourceMeta: (*source.Meta)({
                  Line: (int) 145,
                  Column: (int) 11
                })
              }),
              Range: (*source.Range)({
                Start: (*source.Meta)({
                  Line: (int) 145,
                  Column: (int) 11
                }),
                End: (*source.Meta)({
                  Line: (int) 147,
                  Column: (int) 7
                })
              })
            }),
            (*schema.TreeNode)({
              Label: (string) (len=8) "metadata",
              Path: (string) (len=29) "/sharedPackagesLayer/metadata",
              Type: (schema.TreeNodeType) 0,
              Children: ([]*schema.TreeNode) (len=2) {
                (*schema.TreeNode)({
                  Label: (string) (len=11) "displayName",
                  Path: (string) (len=41) "/sharedPackagesLayer/metadata/displayName",
                  Type: (schema.TreeNodeType) 0,
                  Children: ([]*schema.TreeNode) (len=1) {
                    (*schema.TreeNode)({
                      Label: (string) (len=6) "string",
                      Path: (string) (len=48) "/sharedPackagesLayer/metadata/displayName/string",
                      Type: (schema.TreeNodeType) 1,
                      Children: ([]*schema.TreeNode) <nil>,
                      SchemaElement: (string) (len=21) "Shared Packages Layer",
                      Range: (*source.Range)({
                        Start: (*source.Meta)({
                          Line: (int) 147,
                          Column: (int) 20
                        }),
                        End: (*source.Meta)({
                          Line: (int) 149,
                          Column: (int) 9
                        })
                      })
                    })
                  },
                  SchemaElement: (*substitutions.StringOrSubstitutions)({
                    Values: ([]*substitutions.StringOrSubstitution) (len=1) {
                      (*substitutions.StringOrSubstitution)({
                        StringValue: (*string)((len=21) "Shared Packages Layer"),
                        SubstitutionValue: (*substitutions.Substitution)(<nil>),
                        SourceMeta: (*source.Meta)({
                          Line: (int) 147,
                          Column: (int) 20
                        })
                      })
                    },
                    SourceMeta: (*source.Meta)({
                      Line: (int) 147,
                      Column: (int) 20
                    })
                  }),
                  Range: (*source.Range)({
                    Start: (*source.Meta)({
                      Line: (int) 147,
                      Column: (int) 20
                    }),
                    End: (*source.Meta)({
                      Line: (int) 149,
                      Column: (int) 9
                    })
                  })
                }),
                (*schema.TreeNode)({
                  Label: (string) (len=6) "labels",
                  Path: (string) (len=36) "/sharedPackagesLayer/metadata/labels",
                  Type: (schema.TreeNodeType) 0,
                  Children: ([]*schema.TreeNode) (len=2) {
                    (*schema.TreeNode)({
                      Label: (string) (len=6) "string",
                      Path: (string) (len=43) "/sharedPackagesLayer/metadata/labels/string",
                      Type: (schema.TreeNodeType) 1,
                      Children: ([]*schema.TreeNode) <nil>,
                      SchemaElement: (string) (len=11) "orderPubSub",
                      Range: (*source.Range)({
                        Start: (*source.Meta)({
                          Line: (int) 149,
                          Column: (int) 9
                        }),
                        End: (*source.Meta)({
                          Line: (int) 150,
                          Column: (int) 9
                        })
                      })
                    }),
                    (*schema.TreeNode)({
                      Label: (string) (len=6) "string",
                      Path: (string) (len=43) "/sharedPackagesLayer/metadata/labels/string",
                      Type: (schema.TreeNodeType) 1,
                      Children: ([]*schema.TreeNode) <nil>,
                      SchemaElement: (string) (len=8) "orderApi",
                      Range: (*source.Range)({
                        Start: (*source.Meta)({
                          Line: (int) 150,
                          Column: (int) 9
                        }),
                        End: (*source.Meta)({
                          Line: (int) 152,
                          Column: (int) 7
                        })
                      })
                    })
                  },
                  SchemaElement: (*schema.StringMap)({
                    Values: (map[string]string) (len=2) {
                      (string) (len=3) "app": (string) (len=8) "orderApi",
                      (string) (len=8) "workflow": (string) (len=11) "orderPubSub"
                    },
                    SourceMeta: (map[string]*source.Meta) (len=2) {
                      (string) (len=3) "app": (*source.Meta)({
                        Line: (int) 150,
                        Column: (int) 9
                      }),
                      (string) (len=8) "workflow": (*source.Meta)({
                        Line: (int) 149,
                        Column: (int) 9
                      })
                    }
                  }),
                  Range: (*source.Range)({
                    Start: (*source.Meta)({
                      Line: (int) 149,
                      Column: (int) 9
                    }),
                    End: (*source.Meta)({
                      Line: (int) 152,
                      Column: (int) 7
                    })
                  })
                })
              },
              SchemaElement: (*schema.Metadata)({
                DisplayName: (*substitutions.StringOrSubstitutions)({
                  Values: ([]*substitutions.StringOrSubstitution) (len=1) {
                    (*substitutions.StringOrSubstitution)({
                      StringValue: (*string)((len=21) "Shared Packages Layer"),
                      SubstitutionValue: (*substitutions.Substitution)(<nil>),
                      SourceMeta: (*source.Meta)({
                        Line: (int) 147,
                        Column: (int) 20
                      })
                    })
                  },
                  SourceMeta: (*source.Meta)({
                    Line: (int) 147,
                    Column: (int) 20
                  })
                }),
                Annotations: (*schema.StringOrSubstitutionsMap)(<nil>),
                Labels: (*schema.StringMap)({
                  Values: (map[string]string) (len=2) {
                    (string) (len=3) "app": (string) (len=8) "orderApi",
                    (string) (len=8) "workflow": (string) (len=11) "orderPubSub"
                  },
                  SourceMeta: (map[string]*source.Meta) (len=2) {
                    (string) (len=3) "app": (*source.Meta)({
                      Line: (int) 150,
                      Column: (int) 9
                    }),
                    (string) (len=8) "workflow": (*source.Meta)({
                      Line: (int) 149,
                      Column: (int) 9
                    })
                  }
                }),
                Custom: (*core.MappingNode)(<nil>),
                SourceMeta: (*source.Meta)({
                  Line: (int) 147,
                  Column: (int) 7
                })
              }),
              Range: (*source.Range)({
                Start: (*source.Meta)({
                  Line: (int) 147,
                  Column: (int) 7
                }),
                End: (*source.Meta)({
                  Line: (int) 152,
                  Column: (int) 7
                })
              })
            }),
            (*schema.TreeNode)({
              Label: (string) (len=4) "spec",
              Path: (string) (len=25) "/sharedPackagesLayer/spec",
              Type: (schema.TreeNodeType) 0,
              Children: ([]*schema.TreeNode) (len=3) {
                (*schema.TreeNode)({
                  Label: (string) (len=18) "compatibleRuntimes",
                  Path: (string) (len=44) "/sharedPackagesLayer/spec/compatibleRuntimes",
                  Type: (schema.TreeNodeType) 0,
                  Children: ([]*schema.TreeNode) (len=1) {
                    (*schema.TreeNode)({
                      Label: (string) (len=1) "0",
                      Path: (string) (len=46) "/sharedPackagesLayer/spec/compatibleRuntimes/0",
                      Type: (schema.TreeNodeType) 0,
                      Children: ([]*schema.TreeNode) (len=1) {
                        (*schema.TreeNode)({
                          Label: (string) (len=6) "scalar",
                          Path: (string) (len=53) "/sharedPackagesLayer/spec/compatibleRuntimes/0/scalar",
                          Type: (schema.TreeNodeType) 1,
                          Children: ([]*schema.TreeNode) <nil>,
                          SchemaElement: (*core.ScalarValue)({
                            IntValue: (*int)(<nil>),
                            BoolValue: (*bool)(<nil>),
                            FloatValue: (*float64)(<nil>),
                            StringValue: (*string)((len=5) "go1.x"),
                            SourceMeta: (*source.Meta)({
                              Line: (int) 152,
                              Column: (int) 28
                            })
                          }),
                          Range: (*source.Range)({
                            Start: (*source.Meta)({
                              Line: (int) 152,
                              Column: (int) 28
                            }),
                            End: (*source.Meta)({
                              Line: (int) 155,
                              Column: (int) 7
                            })
                          })
                        })
                      },
                      SchemaElement: (*core.MappingNode)({
                        Literal: (*core.ScalarValue)({
                          IntValue: (*int)(<nil>),
                          BoolValue: (*bool)(<nil>),
                          FloatValue: (*float64)(<nil>),
                          StringValue: (*string)((len=5) "go1.x"),
                          SourceMeta: (*source.Meta)({
                            Line: (int) 152,
                            Column: (int) 28
                          })
                        }),
                        Fields: (map[string]*core.MappingNode) <nil>,
                        Items: ([]*core.MappingNode) <nil>,
                        StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                        SourceMeta: (*source.Meta)({
                          Line: (int) 152,
                          Column: (int) 28
                        }),
                        FieldsSourceMeta: (map[string]*source.Meta) <nil>
                      }),
                      Range: (*source.Range)({
                        Start: (*source.Meta)({
                          Line: (int) 152,
                          Column: (int) 28
                        }),
                        End: (*source.Meta)({
                          Line: (int) 155,
                          Column: (int) 7
                        })
                      })
                    })
                  },
                  SchemaElement: (*core.MappingNode)({
                    Literal: (*core.ScalarValue)(<nil>),
                    Fields: (map[string]*core.MappingNode) <nil>,
                    Items: ([]*core.MappingNode) (len=1) {
                      (*core.MappingNode)({
                        Literal: (*core.ScalarValue)({
                          IntValue: (*int)(<nil>),
                          BoolValue: (*bool)(<nil>),
                          FloatValue: (*float64)(<nil>),
                          StringValue: (*string)((len=5) "go1.x"),
                          SourceMeta: (*source.Meta)({
                            Line: (int) 152,
                            Column: (int) 28
                          })
                        }),
                        Fields: (map[string]*core.MappingNode) <nil>,
                        Items: ([]*core.MappingNode) <nil>,
                        StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                        SourceMeta: (*source.Meta)({
                          Line: (int) 152,
                          Column: (int) 28
                        }),
                        FieldsSourceMeta: (map[string]*source.Meta) <nil>
                      })
                    },
                    StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                    SourceMeta: (*source.Meta)({
                      Line: (int) 152,
                      Column: (int) 27
                    }),
                    FieldsSourceMeta: (map[string]*source.Meta) <nil>
                  }),
                  Range: (*source.Range)({
                    Start: (*source.Meta)({
                      Line: (int) 152,
                      Column: (int) 7
                    }),
                    End: (*source.Meta)({
                      Line: (int) 155,
                      Column: (int) 7
                    })
                  })
                }),
                (*schema.TreeNode)({
                  Label: (string) (len=7) "content",
                  Path: (string) (len=33) "/sharedPackagesLayer/spec/content",
                  Type: (schema.TreeNodeType) 0,
                  Children: ([]*schema.TreeNode) (len=1) {
                    (*schema.TreeNode)({
                      Label: (string) (len=6) "scalar",
                      Path: (string) (len=40) "/sharedPackagesLayer/spec/content/scalar",
                      Type: (schema.TreeNodeType) 1,
                      Children: ([]*schema.TreeNode) <nil>,
                      SchemaElement: (*core.ScalarValue)({
                        IntValue: (*int)(<nil>),
                        BoolValue: (*bool)(<nil>),
                        FloatValue: (*float64)(<nil>),
                        StringValue: (*string)((len=27) "build/shared-packages-layer"),
                        SourceMeta: (*source.Meta)({
                          Line: (int) 155,
                          Column: (int) 16
                        })
                      }),
                      Range: (*source.Range)({
                        Start: (*source.Meta)({
                          Line: (int) 155,
                          Column: (int) 16
                        }),
                        End: (*source.Meta)({
                          Line: (int) 156,
                          Column: (int) 7
                        })
                      })
                    })
                  },
                  SchemaElement: (*core.MappingNode)({
                    Literal: (*core.ScalarValue)({
                      IntValue: (*int)(<nil>),
                      BoolValue: (*bool)(<nil>),
                      FloatValue: (*float64)(<nil>),
                      StringValue: (*string)((len=27) "build/shared-packages-layer"),
                      SourceMeta: (*source.Meta)({
                        Line: (int) 155,
                        Column: (int) 16
                      })
                    }),
                    Fields: (map[string]*core.MappingNode) <nil>,
                    Items: ([]*core.MappingNode) <nil>,
                    StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                    SourceMeta: (*source.Meta)({
                      Line: (int) 155,
                      Column: (int) 16
                    }),
                    FieldsSourceMeta: (map[string]*source.Meta) <nil>
                  }),
                  Range: (*source.Range)({
                    Start: (*source.Meta)({
                      Line: (int) 155,
                      Column: (int) 7
                    }),
                    End: (*source.Meta)({
                      Line: (int) 156,
                      Column: (int) 7
                    })
                  })
                }),
                (*schema.TreeNode)({
                  Label: (string) (len=9) "layerName",
                  Path: (string) (len=35) "/sharedPackagesLayer/spec/layerName",
                  Type: (schema.TreeNodeType) 0,
                  Children: ([]*schema.TreeNode) (len=1) {
                    (*schema.TreeNode)({
                      Label: (string) (len=6) "scalar",
                      Path: (string) (len=42) "/sharedPackagesLayer/spec/layerName/scalar",
                      Type: (schema.TreeNodeType) 1,
                      Children: ([]*schema.TreeNode) <nil>,
                      SchemaElement: (*core.ScalarValue)({
                        IntValue: (*int)(<nil>),
                        BoolValue: (*bool)(<nil>),
                        FloatValue: (*float64)(<nil>),
                        StringValue: (*string)((len=19) "sharedPackagesLayer"),
                        SourceMeta: (*source.Meta)({
                          Line: (int) 156,
                          Column: (int) 18
                        })
                      }),
                      Range: (*source.Range)({
                        Start: (*source.Meta)({
                          Line: (int) 156,
                          Column: (int) 18
                        }),
                        End: (*source.Meta)({
                          Line: (int) 157,
                          Column: (int) 3
                        })
                      })
                    })
                  },
                  SchemaElement: (*core.MappingNode)({
                    Literal: (*core.ScalarValue)({
                      IntValue: (*int)(<nil>),
                      BoolValue: (*bool)(<nil>),
                      FloatValue: (*float64)(<nil>),
                      StringValue: (*string)((len=19) "sharedPackagesLayer"),
                      SourceMeta: (*source.Meta)({
                        Line: (int) 156,
                        Column: (int) 18
                      })
                    }),
                    Fields: (map[string]*core.MappingNode) <nil>,
                    Items: ([]*core.MappingNode) <nil>,
                    StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                    SourceMeta: (*source.Meta)({
                      Line: (int) 156,
                      Column: (int) 18
                    }),
                    FieldsSourceMeta: (map[string]*source.Meta) <nil>
                  }),
                  Range: (*source.Range)({
                    Start: (*source.Meta)({
                      Line: (int) 156,
                      Column: (int) 7
                    }),
                    End: (*source.Meta)({
                      Line: (int) 157,
                      Column: (int) 3
                    })
                  })
                })
              },
              SchemaElement: (*core.MappingNode)({
                Literal: (*core.ScalarValue)(<nil>),
                Fields: (map[string]*core.MappingNode) (len=3) {
                  (string) (len=18) "compatibleRuntimes": (*core.MappingNode)({
                    Literal: (*core.ScalarValue)(<nil>),
                    Fields: (map[string]*core.MappingNode) <nil>,
                    Items: ([]*core.MappingNode) (len=1) {
                      (*core.MappingNode)({
                        Literal: (*core.ScalarValue)({
                          IntValue: (*int)(<nil>),
                          BoolValue: (*bool)(<nil>),
                          FloatValue: (*float64)(<nil>),
                          StringValue: (*string)((len=5) "go1.x"),
                          SourceMeta: (*source.Meta)({
                            Line: (int) 152,
                            Column: (int) 28
                          })
                        }),
                        Fields: (map[string]*core.MappingNode) <nil>,
                        Items: ([]*core.MappingNode) <nil>,
                        StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                        SourceMeta: (*source.Meta)({
                          Line: (int) 152,
                          Column: (int) 28
                        }),
                        FieldsSourceMeta: (map[string]*source.Meta) <nil>
                      })
                    },
                    StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                    SourceMeta: (*source.Meta)({
                      Line: (int) 152,
                      Column: (int) 27
                    }),
                    FieldsSourceMeta: (map[string]*source.Meta) <nil>
                  }),
                  (string) (len=7) "content": (*core.MappingNode)({
                    Literal: (*core.ScalarValue)({
                      IntValue: (*int)(<nil>),
                      BoolValue: (*bool)(<nil>),
                      FloatValue: (*float64)(<nil>),
                      StringValue: (*string)((len=27) "build/shared-packages-layer"),
                      SourceMeta: (*source.Meta)({
                        Line: (int) 155,
                        Column: (int) 16
                      })
                    }),
                    Fields: (map[string]*core.MappingNode) <nil>,
                    Items: ([]*core.MappingNode) <nil>,
                    StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                    SourceMeta: (*source.Meta)({
                      Line: (int) 155,
                      Column: (int) 16
                    }),
                    FieldsSourceMeta: (map[string]*source.Meta) <nil>
                  }),
                  (string) (len=9) "layerName": (*core.MappingNode)({
                    Literal: (*core.ScalarValue)({
                      IntValue: (*int)(<nil>),
                      BoolValue: (*bool)(<nil>),
                      FloatValue: (*float64)(<nil>),
                      StringValue: (*string)((len=19) "sharedPackagesLayer"),
                      SourceMeta: (*source.Meta)({
                        Line: (int) 156,
                        Column: (int) 18
                      })
                    }),
                    Fields: (map[string]*core.MappingNode) <nil>,
                    Items: ([]*core.MappingNode) <nil>,
                    StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                    SourceMeta: (*source.Meta)({
                      Line: (int) 156,
                      Column: (int) 18
                    }),
                    FieldsSourceMeta: (map[string]*source.Meta) <nil>
                  })
                },
                Items: ([]*core.MappingNode) <nil>,
                StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                SourceMeta: (*source.Meta)({
                  Line: (int) 152,
                  Column: (int) 7
                }),
                FieldsSourceMeta: (map[string]*source.Meta) (len=3) {
                  (string) (len=18) "compatibleRuntimes": (*source.Meta)({
                    Line: (int) 152,
                    Column: (int) 7
                  }),
                  (string) (len=7) "content": (*source.Meta)({
                    Line: (int) 155,
                    Column: (int) 7
                  }),
                  (string) (len=9) "layerName": (*source.Meta)({
                    Line: (int) 156,
                    Column: (int) 7
                  })
                }
              }),
              Range: (*source.Range)({
                Start: (*source.Meta)({
                  Line: (int) 152,
                  Column: (int) 7
                }),
                End: (*source.Meta)({
                  Line: (int) 157,
                  Column: (int) 3
                })
              })
            })
          },
          SchemaElement: (*schema.Resource)({
            Type: (*schema.ResourceTypeWrapper)({
              Value: (string) (len=21) "celerity/layerVersion",
              SourceMeta: (*source.Meta)({
                Line: (int) 145,
                Column: (int) 11
              })
            }),
            Description: (*substitutions.StringOrSubstitutions)(<nil>),
            Metadata: (*schema.Metadata)({
              DisplayName: (*substitutions.StringOrSubstitutions)({
                Values: ([]*substitutions.StringOrSubstitution) (len=1) {
                  (*substitutions.StringOrSubstitution)({
                    StringValue: (*string)((len=21) "Shared Packages Layer"),
                    SubstitutionValue: (*substitutions.Substitution)(<nil>),
                    SourceMeta: (*source.Meta)({
                      Line: (int) 147,
                      Column: (int) 20
                    })
                  })
                },
                SourceMeta: (*source.Meta)({
                  Line: (int) 147,
                  Column: (int) 20
                })
              }),
              Annotations: (*schema.StringOrSubstitutionsMap)(<nil>),
              Labels: (*schema.StringMap)({
                Values: (map[string]string) (len=2) {
                  (string) (len=3) "app": (string) (len=8) "orderApi",
                  (string) (len=8) "workflow": (string) (len=11) "orderPubSub"
                },
                SourceMeta: (map[string]*source.Meta) (len=2) {
                  (string) (len=3) "app": (*source.Meta)({
                    Line: (int) 150,
                    Column: (int) 9
                  }),
                  (string) (len=8) "workflow": (*source.Meta)({
                    Line: (int) 149,
                    Column: (int) 9
                  })
                }
              }),
              Custom: (*core.MappingNode)(<nil>),
              SourceMeta: (*source.Meta)({
                Line: (int) 147,
                Column: (int) 7
              })
            }),
            Condition: (*schema.Condition)(<nil>),
            Each: (*substitutions.StringOrSubstitutions)(<nil>),
            LinkSelector: (*schema.LinkSelector)(<nil>),
            Spec: (*core.MappingNode)({
              Literal: (*core.ScalarValue)(<nil>),
              Fields: (map[string]*core.MappingNode) (len=3) {
                (string) (len=18) "compatibleRuntimes": (*core.MappingNode)({
                  Literal: (*core.ScalarValue)(<nil>),
                  Fields: (map[string]*core.MappingNode) <nil>,
                  Items: ([]*core.MappingNode) (len=1) {
                    (*core.MappingNode)({
                      Literal: (*core.ScalarValue)({
                        IntValue: (*int)(<nil>),
                        BoolValue: (*bool)(<nil>),
                        FloatValue: (*float64)(<nil>),
                        StringValue: (*string)((len=5) "go1.x"),
                        SourceMeta: (*source.Meta)({
                          Line: (int) 152,
                          Column: (int) 28
                        })
                      }),
                      Fields: (map[string]*core.MappingNode) <nil>,
                      Items: ([]*core.MappingNode) <nil>,
                      StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                      SourceMeta: (*source.Meta)({
                        Line: (int) 152,
                        Column: (int) 28
                      }),
                      FieldsSourceMeta: (map[string]*source.Meta) <nil>
                    })
                  },
                  StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                  SourceMeta: (*source.Meta)({
                    Line: (int) 152,
                    Column: (int) 27
                  }),
                  FieldsSourceMeta: (map[string]*source.Meta) <nil>
                }),
                (string) (len=7) "content": (*core.MappingNode)({
                  Literal: (*core.ScalarValue)({
                    IntValue: (*int)(<nil>),
                    BoolValue: (*bool)(<nil>),
                    FloatValue: (*float64)(<nil>),
                    StringValue: (*string)((len=27) "build/shared-packages-layer"),
                    SourceMeta: (*source.Meta)({
                      Line: (int) 155,
                      Column: (int) 16
                    })
                  }),
                  Fields: (map[string]*core.MappingNode) <nil>,
                  Items: ([]*core.MappingNode) <nil>,
                  StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                  SourceMeta: (*source.Meta)({
                    Line: (int) 155,
                    Column: (int) 16
                  }),
                  FieldsSourceMeta: (map[string]*source.Meta) <nil>
                }),
                (string) (len=9) "layerName": (*core.MappingNode)({
                  Literal: (*core.ScalarValue)({
                    IntValue: (*int)(<nil>),
                    BoolValue: (*bool)(<nil>),
                    FloatValue: (*float64)(<nil>),
                    StringValue: (*string)((len=19) "sharedPackagesLayer"),
                    SourceMeta: (*source.Meta)({
                      Line: (int) 156,
                      Column: (int) 18
                    })
                  }),
                  Fields: (map[string]*core.MappingNode) <nil>,
                  Items: ([]*core.MappingNode) <nil>,
                  StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                  SourceMeta: (*source.Meta)({
                    Line: (int) 156,
                    Column: (int) 18
                  }),
                  FieldsSourceMeta: (map[string]*source.Meta) <nil>
                })
              },
              Items: ([]*core.MappingNode) <nil>,
              StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
              SourceMeta: (*source.Meta)({
                Line: (int) 152,
                Column: (int) 7
              }),
              FieldsSourceMeta: (map[string]*source.Meta) (len=3) {
                (string) (len=18) "compatibleRuntimes": (*source.Meta)({
                  Line: (int) 152,
                  Column: (int) 7
                }),
                (string) (len=7) "content": (*source.Meta)({
                  Line: (int) 155,
                  Column: (int) 7
                }),
                (string) (len=9) "layerName": (*source.Meta)({
                  Line: (int) 156,
                  Column: (int) 7
                })
              }
            }),
            SourceMeta: (*source.Meta)({
              Line: (int) 145,
              Column: (int) 5
            })
          }),
          Range: (*source.Range)({
            Start: (*source.Meta)({
              Line: (int) 138,
              Column: (int) 3
            }),
            End: (*source.Meta)({
              Line: (int) 157,
              Column: (int) 3
            })
          })
        }),
        (*schema.TreeNode)({
          Label: (string) (len=11) "orderPubSub",
          Path: (string) (len=12) "/orderPubSub",
          Type: (schema.TreeNodeType) 0,
          Children: ([]*schema.TreeNode) (len=4) {
            (*schema.TreeNode)({
              Label: (string) (len=4) "type",
              Path: (string) (len=17) "/orderPubSub/type",
              Type: (schema.TreeNodeType) 1,
              Children: ([]*schema.TreeNode) <nil>,
              SchemaElement: (*schema.ResourceTypeWrapper)({
                Value: (string) (len=15) "celerity/pubsub",
                SourceMeta: (*source.Meta)({
                  Line: (int) 161,
                  Column: (int) 11
                })
              }),
              Range: (*source.Range)({
                Start: (*source.Meta)({
                  Line: (int) 161,
                  Column: (int) 11
                }),
                End: (*source.Meta)({
                  Line: (int) 163,
                  Column: (int) 7
                })
              })
            }),
            (*schema.TreeNode)({
              Label: (string) (len=8) "metadata",
              Path: (string) (len=21) "/orderPubSub/metadata",
              Type: (schema.TreeNodeType) 0,
              Children: ([]*schema.TreeNode) (len=2) {
                (*schema.TreeNode)({
                  Label: (string) (len=11) "displayName",
                  Path: (string) (len=33) "/orderPubSub/metadata/displayName",
                  Type: (schema.TreeNodeType) 0,
                  Children: ([]*schema.TreeNode) (len=1) {
                    (*schema.TreeNode)({
                      Label: (string) (len=6) "string",
                      Path: (string) (len=40) "/orderPubSub/metadata/displayName/string",
                      Type: (schema.TreeNodeType) 1,
                      Children: ([]*schema.TreeNode) <nil>,
                      SchemaElement: (string) (len=13) "Order Pub/Sub",
                      Range: (*source.Range)({
                        Start: (*source.Meta)({
                          Line: (int) 163,
                          Column: (int) 20
                        }),
                        End: (*source.Meta)({
                          Line: (int) 165,
                          Column: (int) 9
                        })
                      })
                    })
                  },
                  SchemaElement: (*substitutions.StringOrSubstitutions)({
                    Values: ([]*substitutions.StringOrSubstitution) (len=1) {
                      (*substitutions.StringOrSubstitution)({
                        StringValue: (*string)((len=13) "Order Pub/Sub"),
                        SubstitutionValue: (*substitutions.Substitution)(<nil>),
                        SourceMeta: (*source.Meta)({
                          Line: (int) 163,
                          Column: (int) 20
                        })
                      })
                    },
                    SourceMeta: (*source.Meta)({
                      Line: (int) 163,
                      Column: (int) 20
                    })
                  }),
                  Range: (*source.Range)({
                    Start: (*source.Meta)({
                      Line: (int) 163,
                      Column: (int) 20
                    }),
                    End: (*source.Meta)({
                      Line: (int) 165,
                      Column: (int) 9
                    })
                  })
                }),
                (*schema.TreeNode)({
                  Label: (string) (len=6) "labels",
                  Path: (string) (len=28) "/orderPubSub/metadata/labels",
                  Type: (schema.TreeNodeType) 0,
                  Children: ([]*schema.TreeNode) (len=1) {
                    (*schema.TreeNode)({
                      Label: (string) (len=6) "string",
                      Path: (string) (len=35) "/orderPubSub/metadata/labels/string",
                      Type: (schema.TreeNodeType) 1,
                      Children: ([]*schema.TreeNode) <nil>,
                      SchemaElement: (string) (len=11) "orderPubSub",
                      Range: (*source.Range)({
                        Start: (*source.Meta)({
                          Line: (int) 165,
                          Column: (int) 9
                        }),
                        End: (*source.Meta)({
                          Line: (int) 167,
                          Column: (int) 7
                        })
                      })
                    })
                  },
                  SchemaElement: (*schema.StringMap)({
                    Values: (map[string]string) (len=1) {
                      (string) (len=8) "workflow": (string) (len=11) "orderPubSub"
                    },
                    SourceMeta: (map[string]*source.Meta) (len=1) {
                      (string) (len=8) "workflow": (*source.Meta)({
                        Line: (int) 165,
                        Column: (int) 9
                      })
                    }
                  }),
                  Range: (*source.Range)({
                    Start: (*source.Meta)({
                      Line: (int) 165,
                      Column: (int) 9
                    }),
                    End: (*source.Meta)({
                      Line: (int) 167,
                      Column: (int) 7
                    })
                  })
                })
              },
              SchemaElement: (*schema.Metadata)({
                DisplayName: (*substitutions.StringOrSubstitutions)({
                  Values: ([]*substitutions.StringOrSubstitution) (len=1) {
                    (*substitutions.StringOrSubstitution)({
                      StringValue: (*string)((len=13) "Order Pub/Sub"),
                      SubstitutionValue: (*substitutions.Substitution)(<nil>),
                      SourceMeta: (*source.Meta)({
                        Line: (int) 163,
                        Column: (int) 20
                      })
                    })
                  },
                  SourceMeta: (*source.Meta)({
                    Line: (int) 163,
                    Column: (int) 20
                  })
                }),
                Annotations: (*schema.StringOrSubstitutionsMap)(<nil>),
                Labels: (*schema.StringMap)({
                  Values: (map[string]string) (len=1) {
                    (string) (len=8) "workflow": (string) (len=11) "orderPubSub"
                  },
                  SourceMeta: (map[string]*source.Meta) (len=1) {
                    (string) (len=8) "workflow": (*source.Meta)({
                      Line: (int) 165,
                      Column: (int) 9
                    })
                  }
                }),
                Custom: (*core.MappingNode)(<nil>),
                SourceMeta: (*source.Meta)({
                  Line: (int) 163,
                  Column: (int) 7
                })
              }),
              Range: (*source.Range)({
                Start: (*source.Meta)({
                  Line: (int) 163,
                  Column: (int) 7
                }),
                End: (*source.Meta)({
                  Line: (int) 167,
                  Column: (int) 7
                })
              })
            }),
            (*schema.TreeNode)({
              Label: (string) (len=12) "linkSelector",
              Path: (string) (len=25) "/orderPubSub/linkSelector",
              Type: (schema.TreeNodeType) 0,
              Children: ([]*schema.TreeNode) (len=1) {
                (*schema.TreeNode)({
                  Label: (string) (len=7) "byLabel",
                  Path: (string) (len=33) "/orderPubSub/linkSelector/byLabel",
                  Type: (schema.TreeNodeType) 0,
                  Children: ([]*schema.TreeNode) (len=1) {
                    (*schema.TreeNode)({
                      Label: (string) (len=6) "string",
                      Path: (string) (len=40) "/orderPubSub/linkSelector/byLabel/string",
                      Type: (schema.TreeNodeType) 1,
                      Children: ([]*schema.TreeNode) <nil>,
                      SchemaElement: (string) (len=11) "orderPubSub",
                      Range: (*source.Range)({
                        Start: (*source.Meta)({
                          Line: (int) 168,
                          Column: (int) 9
                        }),
                        End: (*source.Meta)({
                          Line: (int) 170,
                          Column: (int) 7
                        })
                      })
                    })
                  },
                  SchemaElement: (*schema.StringMap)({
                    Values: (map[string]string) (len=1) {
                      (string) (len=8) "workflow": (string) (len=11) "orderPubSub"
                    },
                    SourceMeta: (map[string]*source.Meta) (len=1) {
                      (string) (len=8) "workflow": (*source.Meta)({
                        Line: (int) 168,
                        Column: (int) 9
                      })
                    }
                  }),
                  Range: (*source.Range)({
                    Start: (*source.Meta)({
                      Line: (int) 168,
                      Column: (int) 9
                    }),
                    End: (*source.Meta)({
                      Line: (int) 170,
                      Column: (int) 7
                    })
                  })
                })
              },
              SchemaElement: (*schema.LinkSelector)({
                ByLabel: (*schema.StringMap)({
                  Values: (map[string]string) (len=1) {
                    (string) (len=8) "workflow": (string) (len=11) "orderPubSub"
                  },
                  SourceMeta: (map[string]*source.Meta) (len=1) {
                    (string) (len=8) "workflow": (*source.Meta)({
                      Line: (int) 168,
                      Column: (int) 9
                    })
                  }
                }),
                SourceMeta: (*source.Meta)({
                  Line: (int) 167,
                  Column: (int) 7
                })
              }),
              Range: (*source.Range)({
                Start: (*source.Meta)({
                  Line: (int) 167,
                  Column: (int) 7
                }),
                End: (*source.Meta)({
                  Line: (int) 170,
                  Column: (int) 7
                })
              })
            }),
            (*schema.TreeNode)({
              Label: (string) (len=4) "spec",
              Path: (string) (len=17) "/orderPubSub/spec",
              Type: (schema.TreeNodeType) 0,
              Children: ([]*schema.TreeNode) (len=1) {
                (*schema.TreeNode)({
                  Label: (string) (len=9) "topicName",
                  Path: (string) (len=27) "/orderPubSub/spec/topicName",
                  Type: (schema.TreeNodeType) 0,
                  Children: ([]*schema.TreeNode) (len=1) {
                    (*schema.TreeNode)({
                      Label: (string) (len=10) "stringSubs",
                      Path: (string) (len=38) "/orderPubSub/spec/topicName/stringSubs",
                      Type: (schema.TreeNodeType) 0,
                      Children: ([]*schema.TreeNode) (len=1) {
                        (*schema.TreeNode)({
                          Label: (string) (len=15) "ordersTopicName",
                          Path: (string) (len=61) "/orderPubSub/spec/topicName/stringSubs/varRef/ordersTopicName",
                          Type: (schema.TreeNodeType) 1,
                          Children: ([]*schema.TreeNode) <nil>,
                          SchemaElement: (*substitutions.SubstitutionVariable)({
                            VariableName: (string) (len=15) "ordersTopicName",
                            SourceMeta: (*source.Meta)({
                              Line: (int) 170,
                              Column: (int) 20
                            })
                          }),
                          Range: (*source.Range)({
                            Start: (*source.Meta)({
                              Line: (int) 170,
                              Column: (int) 20
                            }),
                            End: (*source.Meta)(<nil>)
                          })
                        })
                      },
                      SchemaElement: (*substitutions.StringOrSubstitutions)({
                        Values: ([]*substitutions.StringOrSubstitution) (len=1) {
                          (*substitutions.StringOrSubstitution)({
                            StringValue: (*string)(<nil>),
                            SubstitutionValue: (*substitutions.Substitution)({
                              Function: (*substitutions.SubstitutionFunctionExpr)(<nil>),
                              Variable: (*substitutions.SubstitutionVariable)({
                                VariableName: (string) (len=15) "ordersTopicName",
                                SourceMeta: (*source.Meta)({
                                  Line: (int) 170,
                                  Column: (int) 20
                                })
                              }),
                              ValueReference: (*substitutions.SubstitutionValueReference)(<nil>),
                              ElemReference: (*substitutions.SubstitutionElemReference)(<nil>),
                              ElemIndexReference: (*substitutions.SubstitutionElemIndexReference)(<nil>),
                              DataSourceProperty: (*substitutions.SubstitutionDataSourceProperty)(<nil>),
                              ResourceProperty: (*substitutions.SubstitutionResourceProperty)(<nil>),
                              Child: (*substitutions.SubstitutionChild)(<nil>),
                              StringValue: (*string)(<nil>),
                              IntValue: (*int64)(<nil>),
                              FloatValue: (*float64)(<nil>),
                              BoolValue: (*bool)(<nil>),
                              SourceMeta: (*source.Meta)({
                                Line: (int) 170,
                                Column: (int) 20
                              })
                            }),
                            SourceMeta: (*source.Meta)({
                              Line: (int) 170,
                              Column: (int) 18
                            })
                          })
                        },
                        SourceMeta: (*source.Meta)({
                          Line: (int) 170,
                          Column: (int) 18
                        })
                      }),
                      Range: (*source.Range)({
                        Start: (*source.Meta)({
                          Line: (int) 170,
                          Column: (int) 18
                        }),
                        End: (*source.Meta)(<nil>)
                      })
                    })
                  },
                  SchemaElement: (*core.MappingNode)({
                    Literal: (*core.ScalarValue)(<nil>),
                    Fields: (map[string]*core.MappingNode) <nil>,
                    Items: ([]*core.MappingNode) <nil>,
                    StringWithSubstitutions: (*substitutions.StringOrSubstitutions)({
                      Values: ([]*substitutions.StringOrSubstitution) (len=1) {
                        (*substitutions.StringOrSubstitution)({
                          StringValue: (*string)(<nil>),
                          SubstitutionValue: (*substitutions.Substitution)({
                            Function: (*substitutions.SubstitutionFunctionExpr)(<nil>),
                            Variable: (*substitutions.SubstitutionVariable)({
                              VariableName: (string) (len=15) "ordersTopicName",
                              SourceMeta: (*source.Meta)({
                                Line: (int) 170,
                                Column: (int) 20
                              })
                            }),
                            ValueReference: (*substitutions.SubstitutionValueReference)(<nil>),
                            ElemReference: (*substitutions.SubstitutionElemReference)(<nil>),
                            ElemIndexReference: (*substitutions.SubstitutionElemIndexReference)(<nil>),
                            DataSourceProperty: (*substitutions.SubstitutionDataSourceProperty)(<nil>),
                            ResourceProperty: (*substitutions.SubstitutionResourceProperty)(<nil>),
                            Child: (*substitutions.SubstitutionChild)(<nil>),
                            StringValue: (*string)(<nil>),
                            IntValue: (*int64)(<nil>),
                            FloatValue: (*float64)(<nil>),
                            BoolValue: (*bool)(<nil>),
                            SourceMeta: (*source.Meta)({
                              Line: (int) 170,
                              Column: (int) 20
                            })
                          }),
                          SourceMeta: (*source.Meta)({
                            Line: (int) 170,
                            Column: (int) 18
                          })
                        })
                      },
                      SourceMeta: (*source.Meta)({
                        Line: (int) 170,
                        Column: (int) 18
                      })
                    }),
                    SourceMeta: (*source.Meta)({
                      Line: (int) 170,
                      Column: (int) 18
                    }),
                    FieldsSourceMeta: (map[string]*source.Meta) <nil>
                  }),
                  Range: (*source.Range)({
                    Start: (*source.Meta)({
                      Line: (int) 170,
                      Column: (int) 7
                    }),
                    End: (*source.Meta)(<nil>)
                  })
                })
              },
              SchemaElement: (*core.MappingNode)({
                Literal: (*core.ScalarValue)(<nil>),
                Fields: (map[string]*core.MappingNode) (len=1) {
                  (string) (len=9) "topicName": (*core.MappingNode)({
                    Literal: (*core.ScalarValue)(<nil>),
                    Fields: (map[string]*core.MappingNode) <nil>,
                    Items: ([]*core.MappingNode) <nil>,
                    StringWithSubstitutions: (*substitutions.StringOrSubstitutions)({
                      Values: ([]*substitutions.StringOrSubstitution) (len=1) {
                        (*substitutions.StringOrSubstitution)({
                          StringValue: (*string)(<nil>),
                          SubstitutionValue: (*substitutions.Substitution)({
                            Function: (*substitutions.SubstitutionFunctionExpr)(<nil>),
                            Variable: (*substitutions.SubstitutionVariable)({
                              VariableName: (string) (len=15) "ordersTopicName",
                              SourceMeta: (*source.Meta)({
                                Line: (int) 170,
                                Column: (int) 20
                              })
                            }),
                            ValueReference: (*substitutions.SubstitutionValueReference)(<nil>),
                            ElemReference: (*substitutions.SubstitutionElemReference)(<nil>),
                            ElemIndexReference: (*substitutions.SubstitutionElemIndexReference)(<nil>),
                            DataSourceProperty: (*substitutions.SubstitutionDataSourceProperty)(<nil>),
                            ResourceProperty: (*substitutions.SubstitutionResourceProperty)(<nil>),
                            Child: (*substitutions.SubstitutionChild)(<nil>),
                            StringValue: (*string)(<nil>),
                            IntValue: (*int64)(<nil>),
                            FloatValue: (*float64)(<nil>),
                            BoolValue: (*bool)(<nil>),
                            SourceMeta: (*source.Meta)({
                              Line: (int) 170,
                              Column: (int) 20
                            })
                          }),
                          SourceMeta: (*source.Meta)({
                            Line: (int) 170,
                            Column: (int) 18
                          })
                        })
                      },
                      SourceMeta: (*source.Meta)({
                        Line: (int) 170,
                        Column: (int) 18
                      })
                    }),
                    SourceMeta: (*source.Meta)({
                      Line: (int) 170,
                      Column: (int) 18
                    }),
                    FieldsSourceMeta: (map[string]*source.Meta) <nil>
                  })
                },
                Items: ([]*core.MappingNode) <nil>,
                StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                SourceMeta: (*source.Meta)({
                  Line: (int) 170,
                  Column: (int) 7
                }),
                FieldsSourceMeta: (map[string]*source.Meta) (len=1) {
                  (string) (len=9) "topicName": (*source.Meta)({
                    Line: (int) 170,
                    Column: (int) 7
                  })
                }
              }),
              Range: (*source.Range)({
                Start: (*source.Meta)({
                  Line: (int) 170,
                  Column: (int) 7
                }),
                End: (*source.Meta)(<nil>)
              })
            })
          },
          SchemaElement: (*schema.Resource)({
            Type: (*schema.ResourceTypeWrapper)({
              Value: (string) (len=15) "celerity/pubsub",
              SourceMeta: (*source.Meta)({
                Line: (int) 161,
                Column: (int) 11
              })
            }),
            Description: (*substitutions.StringOrSubstitutions)(<nil>),
            Metadata: (*schema.Metadata)({
              DisplayName: (*substitutions.StringOrSubstitutions)({
                Values: ([]*substitutions.StringOrSubstitution) (len=1) {
                  (*substitutions.StringOrSubstitution)({
                    StringValue: (*string)((len=13) "Order Pub/Sub"),
                    SubstitutionValue: (*substitutions.Substitution)(<nil>),
                    SourceMeta: (*source.Meta)({
                      Line: (int) 163,
                      Column: (int) 20
                    })
                  })
                },
                SourceMeta: (*source.Meta)({
                  Line: (int) 163,
                  Column: (int) 20
                })
              }),
              Annotations: (*schema.StringOrSubstitutionsMap)(<nil>),
              Labels: (*schema.StringMap)({
                Values: (map[string]string) (len=1) {
                  (string) (len=8) "workflow": (string) (len=11) "orderPubSub"
                },
                SourceMeta: (map[string]*source.Meta) (len=1) {
                  (string) (len=8) "workflow": (*source.Meta)({
                    Line: (int) 165,
                    Column: (int) 9
                  })
                }
              }),
              Custom: (*core.MappingNode)(<nil>),
              SourceMeta: (*source.Meta)({
                Line: (int) 163,
                Column: (int) 7
              })
            }),
            Condition: (*schema.Condition)(<nil>),
            Each: (*substitutions.StringOrSubstitutions)(<nil>),
            LinkSelector: (*schema.LinkSelector)({
              ByLabel: (*schema.StringMap)({
                Values: (map[string]string) (len=1) {
                  (string) (len=8) "workflow": (string) (len=11) "orderPubSub"
                },
                SourceMeta: (map[string]*source.Meta) (len=1) {
                  (string) (len=8) "workflow": (*source.Meta)({
                    Line: (int) 168,
                    Column: (int) 9
                  })
                }
              }),
              SourceMeta: (*source.Meta)({
                Line: (int) 167,
                Column: (int) 7
              })
            }),
            Spec: (*core.MappingNode)({
              Literal: (*core.ScalarValue)(<nil>),
              Fields: (map[string]*core.MappingNode) (len=1) {
                (string) (len=9) "topicName": (*core.MappingNode)({
                  Literal: (*core.ScalarValue)(<nil>),
                  Fields: (map[string]*core.MappingNode) <nil>,
                  Items: ([]*core.MappingNode) <nil>,
                  StringWithSubstitutions: (*substitutions.StringOrSubstitutions)({
                    Values: ([]*substitutions.StringOrSubstitution) (len=1) {
                      (*substitutions.StringOrSubstitution)({
                        StringValue: (*string)(<nil>),
                        SubstitutionValue: (*substitutions.Substitution)({
                          Function: (*substitutions.SubstitutionFunctionExpr)(<nil>),
                          Variable: (*substitutions.SubstitutionVariable)({
                            VariableName: (string) (len=15) "ordersTopicName",
                            SourceMeta: (*source.Meta)({
                              Line: (int) 170,
                              Column: (int) 20
                            })
                          }),
                          ValueReference: (*substitutions.SubstitutionValueReference)(<nil>),
                          ElemReference: (*substitutions.SubstitutionElemReference)(<nil>),
                          ElemIndexReference: (*substitutions.SubstitutionElemIndexReference)(<nil>),
                          DataSourceProperty: (*substitutions.SubstitutionDataSourceProperty)(<nil>),
                          ResourceProperty: (*substitutions.SubstitutionResourceProperty)(<nil>),
                          Child: (*substitutions.SubstitutionChild)(<nil>),
                          StringValue: (*string)(<nil>),
                          IntValue: (*int64)(<nil>),
                          FloatValue: (*float64)(<nil>),
                          BoolValue: (*bool)(<nil>),
                          SourceMeta: (*source.Meta)({
                            Line: (int) 170,
                            Column: (int) 20
                          })
                        }),
                        SourceMeta: (*source.Meta)({
                          Line: (int) 170,
                          Column: (int) 18
                        })
                      })
                    },
                    SourceMeta: (*source.Meta)({
                      Line: (int) 170,
                      Column: (int) 18
                    })
                  }),
                  SourceMeta: (*source.Meta)({
                    Line: (int) 170,
                    Column: (int) 18
                  }),
                  FieldsSourceMeta: (map[string]*source.Meta) <nil>
                })
              },
              Items: ([]*core.MappingNode) <nil>,
              StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
              SourceMeta: (*source.Meta)({
                Line: (int) 170,
                Column: (int) 7
              }),
              FieldsSourceMeta: (map[string]*source.Meta) (len=1) {
                (string) (len=9) "topicName": (*source.Meta)({
                  Line: (int) 170,
                  Column: (int) 7
                })
              }
            }),
            SourceMeta: (*source.Meta)({
              Line: (int) 161,
              Column: (int) 5
            })
          }),
          Range: (*source.Range)({
            Start: (*source.Meta)({
              Line: (int) 157,
              Column: (int) 3
            }),
            End: (*source.Meta)(<nil>)
          })
        })
      },
      SchemaElement: (*schema.ResourceMap)({
        Values: (map[string]*schema.Resource) (len=6) {
          (string) (len=10) "authoriser": (*schema.Resource)({
            Type: (*schema.ResourceTypeWrapper)({
              Value: (string) (len=16) "celerity/handler",
              SourceMeta: (*source.Meta)({
                Line: (int) 82,
                Column: (int) 11
              })
            }),
            Description: (*substitutions.StringOrSubstitutions)(<nil>),
            Metadata: (*schema.Metadata)({
              DisplayName: (*substitutions.StringOrSubstitutions)({
                Values: ([]*substitutions.StringOrSubstitution) (len=1) {
                  (*substitutions.StringOrSubstitution)({
                    StringValue: (*string)((len=10) "Authoriser"),
                    SubstitutionValue: (*substitutions.Substitution)(<nil>),
                    SourceMeta: (*source.Meta)({
                      Line: (int) 84,
                      Column: (int) 20
                    })
                  })
                },
                SourceMeta: (*source.Meta)({
                  Line: (int) 84,
                  Column: (int) 20
                })
              }),
              Annotations: (*schema.StringOrSubstitutionsMap)({
                Values: (map[string]*substitutions.StringOrSubstitutions) (len=4) {
                  (string) (len=10) "authoriser": (*substitutions.StringOrSubstitutions)({
                    Values: ([]*substitutions.StringOrSubstitution) (len=1) {
                      (*substitutions.StringOrSubstitution)({
                        StringValue: (*string)((len=4) "true"),
                        SubstitutionValue: (*substitutions.Substitution)(<nil>),
                        SourceMeta: (*source.Meta)({
                          Line: (int) 89,
                          Column: (int) 21
                        })
                      })
                    },
                    SourceMeta: (*source.Meta)({
                      Line: (int) 89,
                      Column: (int) 21
                    })
                  }),
                  (string) (len=26) "authoriser.identity.header": (*substitutions.StringOrSubstitutions)({
                    Values: ([]*substitutions.StringOrSubstitution) (len=1) {
                      (*substitutions.StringOrSubstitution)({
                        StringValue: (*string)((len=18) "MyCustomAuthHeader"),
                        SubstitutionValue: (*substitutions.Substitution)(<nil>),
                        SourceMeta: (*source.Meta)({
                          Line: (int) 93,
                          Column: (int) 37
                        })
                      })
                    },
                    SourceMeta: (*source.Meta)({
                      Line: (int) 93,
                      Column: (int) 37
                    })
                  }),
                  (string) (len=36) "authoriser.identity.reauthoriseEvery": (*substitutions.StringOrSubstitutions)({
                    Values: ([]*substitutions.StringOrSubstitution) (len=1) {
                      (*substitutions.StringOrSubstitution)({
                        StringValue: (*string)((len=2) "20"),
                        SubstitutionValue: (*substitutions.Substitution)(<nil>),
                        SourceMeta: (*source.Meta)({
                          Line: (int) 95,
                          Column: (int) 47
                        })
                      })
                    },
                    SourceMeta: (*source.Meta)({
                      Line: (int) 95,
                      Column: (int) 47
                    })
                  }),
                  (string) (len=40) "authoriser.identity.validationExpression": (*substitutions.StringOrSubstitutions)({
                    Values: ([]*substitutions.StringOrSubstitution) (len=1) {
                      (*substitutions.StringOrSubstitution)({
                        StringValue: (*string)((len=9) "Bearer .*"),
                        SubstitutionValue: (*substitutions.Substitution)(<nil>),
                        SourceMeta: (*source.Meta)({
                          Line: (int) 94,
                          Column: (int) 51
                        })
                      })
                    },
                    SourceMeta: (*source.Meta)({
                      Line: (int) 94,
                      Column: (int) 51
                    })
                  })
                },
                SourceMeta: (map[string]*source.Meta) (len=4) {
                  (string) (len=10) "authoriser": (*source.Meta)({
                    Line: (int) 89,
                    Column: (int) 9
                  }),
                  (string) (len=26) "authoriser.identity.header": (*source.Meta)({
                    Line: (int) 93,
                    Column: (int) 9
                  }),
                  (string) (len=36) "authoriser.identity.reauthoriseEvery": (*source.Meta)({
                    Line: (int) 95,
                    Column: (int) 9
                  }),
                  (string) (len=40) "authoriser.identity.validationExpression": (*source.Meta)({
                    Line: (int) 94,
                    Column: (int) 9
                  })
                }
              }),
              Labels: (*schema.StringMap)({
                Values: (map[string]string) (len=1) {
                  (string) (len=3) "app": (string) (len=8) "orderApi"
                },
                SourceMeta: (map[string]*source.Meta) (len=1) {
                  (string) (len=3) "app": (*source.Meta)({
                    Line: (int) 97,
                    Column: (int) 9
                  })
                }
              }),
              Custom: (*core.MappingNode)(<nil>),
              SourceMeta: (*source.Meta)({
                Line: (int) 84,
                Column: (int) 7
              })
            }),
            Condition: (*schema.Condition)(<nil>),
            Each: (*substitutions.StringOrSubstitutions)(<nil>),
            LinkSelector: (*schema.LinkSelector)(<nil>),
            Spec: (*core.MappingNode)({
              Literal: (*core.ScalarValue)(<nil>),
              Fields: (map[string]*core.MappingNode) (len=2) {
                (string) (len=7) "handler": (*core.MappingNode)({
                  Literal: (*core.ScalarValue)({
                    IntValue: (*int)(<nil>),
                    BoolValue: (*bool)(<nil>),
                    FloatValue: (*float64)(<nil>),
                    StringValue: (*string)((len=19) "handlers.Authoriser"),
                    SourceMeta: (*source.Meta)({
                      Line: (int) 99,
                      Column: (int) 16
                    })
                  }),
                  Fields: (map[string]*core.MappingNode) <nil>,
                  Items: ([]*core.MappingNode) <nil>,
                  StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                  SourceMeta: (*source.Meta)({
                    Line: (int) 99,
                    Column: (int) 16
                  }),
                  FieldsSourceMeta: (map[string]*source.Meta) <nil>
                }),
                (string) (len=7) "timeout": (*core.MappingNode)({
                  Literal: (*core.ScalarValue)({
                    IntValue: (*int)(120),
                    BoolValue: (*bool)(<nil>),
                    FloatValue: (*float64)(<nil>),
                    StringValue: (*string)(<nil>),
                    SourceMeta: (*source.Meta)({
                      Line: (int) 100,
                      Column: (int) 16
                    })
                  }),
                  Fields: (map[string]*core.MappingNode) <nil>,
                  Items: ([]*core.MappingNode) <nil>,
                  StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                  SourceMeta: (*source.Meta)({
                    Line: (int) 100,
                    Column: (int) 16
                  }),
                  FieldsSourceMeta: (map[string]*source.Meta) <nil>
                })
              },
              Items: ([]*core.MappingNode) <nil>,
              StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
              SourceMeta: (*source.Meta)({
                Line: (int) 99,
                Column: (int) 7
              }),
              FieldsSourceMeta: (map[string]*source.Meta) (len=2) {
                (string) (len=7) "handler": (*source.Meta)({
                  Line: (int) 99,
                  Column: (int) 7
                }),
                (string) (len=7) "timeout": (*source.Meta)({
                  Line: (int) 100,
                  Column: (int) 7
                })
              }
            }),
            SourceMeta: (*source.Meta)({
              Line: (int) 82,
              Column: (int) 5
            })
          }),
          (string) (len=16) "getOrdersHandler": (*schema.Resource)({
            Type: (*schema.ResourceTypeWrapper)({
              Value: (string) (len=16) "celerity/handler",
              SourceMeta: (*source.Meta)({
                Line: (int) 103,
                Column: (int) 11
              })
            }),
            Description: (*substitutions.StringOrSubstitutions)(<nil>),
            Metadata: (*schema.Metadata)({
              DisplayName: (*substitutions.StringOrSubstitutions)({
                Values: ([]*substitutions.StringOrSubstitution) (len=1) {
                  (*substitutions.StringOrSubstitution)({
                    StringValue: (*string)((len=18) "Get Orders Handler"),
                    SubstitutionValue: (*substitutions.Substitution)(<nil>),
                    SourceMeta: (*source.Meta)({
                      Line: (int) 105,
                      Column: (int) 20
                    })
                  })
                },
                SourceMeta: (*source.Meta)({
                  Line: (int) 105,
                  Column: (int) 20
                })
              }),
              Annotations: (*schema.StringOrSubstitutionsMap)(<nil>),
              Labels: (*schema.StringMap)({
                Values: (map[string]string) (len=1) {
                  (string) (len=3) "app": (string) (len=8) "orderApi"
                },
                SourceMeta: (map[string]*source.Meta) (len=1) {
                  (string) (len=3) "app": (*source.Meta)({
                    Line: (int) 107,
                    Column: (int) 9
                  })
                }
              }),
              Custom: (*core.MappingNode)(<nil>),
              SourceMeta: (*source.Meta)({
                Line: (int) 105,
                Column: (int) 7
              })
            }),
            Condition: (*schema.Condition)(<nil>),
            Each: (*substitutions.StringOrSubstitutions)(<nil>),
            LinkSelector: (*schema.LinkSelector)(<nil>),
            Spec: (*core.MappingNode)({
              Literal: (*core.ScalarValue)(<nil>),
              Fields: (map[string]*core.MappingNode) (len=3) {
                (string) (len=8) "endpoint": (*core.MappingNode)({
                  Literal: (*core.ScalarValue)(<nil>),
                  Fields: (map[string]*core.MappingNode) (len=3) {
                    (string) (len=10) "authoriser": (*core.MappingNode)({
                      Literal: (*core.ScalarValue)(<nil>),
                      Fields: (map[string]*core.MappingNode) <nil>,
                      Items: ([]*core.MappingNode) <nil>,
                      StringWithSubstitutions: (*substitutions.StringOrSubstitutions)({
                        Values: ([]*substitutions.StringOrSubstitution) (len=1) {
                          (*substitutions.StringOrSubstitution)({
                            StringValue: (*string)(<nil>),
                            SubstitutionValue: (*substitutions.Substitution)({
                              Function: (*substitutions.SubstitutionFunctionExpr)(<nil>),
                              Variable: (*substitutions.SubstitutionVariable)(<nil>),
                              ValueReference: (*substitutions.SubstitutionValueReference)(<nil>),
                              ElemReference: (*substitutions.SubstitutionElemReference)(<nil>),
                              ElemIndexReference: (*substitutions.SubstitutionElemIndexReference)(<nil>),
                              DataSourceProperty: (*substitutions.SubstitutionDataSourceProperty)(<nil>),
                              ResourceProperty: (*substitutions.SubstitutionResourceProperty)({
                                ResourceName: (string) (len=10) "authoriser",
                                ResourceEachTemplateIndex: (*int64)(<nil>),
                                Path: ([]*substitutions.SubstitutionPathItem) {
                                },
                                SourceMeta: (*source.Meta)({
                                  Line: (int) 114,
                                  Column: (int) 23
                                })
                              }),
                              Child: (*substitutions.SubstitutionChild)(<nil>),
                              StringValue: (*string)(<nil>),
                              IntValue: (*int64)(<nil>),
                              FloatValue: (*float64)(<nil>),
                              BoolValue: (*bool)(<nil>),
                              SourceMeta: (*source.Meta)({
                                Line: (int) 114,
                                Column: (int) 23
                              })
                            }),
                            SourceMeta: (*source.Meta)({
                              Line: (int) 114,
                              Column: (int) 21
                            })
                          })
                        },
                        SourceMeta: (*source.Meta)({
                          Line: (int) 114,
                          Column: (int) 21
                        })
                      }),
                      SourceMeta: (*source.Meta)({
                        Line: (int) 114,
                        Column: (int) 21
                      }),
                      FieldsSourceMeta: (map[string]*source.Meta) <nil>
                    }),
                    (string) (len=6) "method": (*core.MappingNode)({
                      Literal: (*core.ScalarValue)({
                        IntValue: (*int)(<nil>),
                        BoolValue: (*bool)(<nil>),
                        FloatValue: (*float64)(<nil>),
                        StringValue: (*string)((len=3) "get"),
                        SourceMeta: (*source.Meta)({
                          Line: (int) 112,
                          Column: (int) 17
                        })
                      }),
                      Fields: (map[string]*core.MappingNode) <nil>,
                      Items: ([]*core.MappingNode) <nil>,
                      StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                      SourceMeta: (*source.Meta)({
                        Line: (int) 112,
                        Column: (int) 17
                      }),
                      FieldsSourceMeta: (map[string]*source.Meta) <nil>
                    }),
                    (string) (len=4) "path": (*core.MappingNode)({
                      Literal: (*core.ScalarValue)({
                        IntValue: (*int)(<nil>),
                        BoolValue: (*bool)(<nil>),
                        FloatValue: (*float64)(<nil>),
                        StringValue: (*string)((len=7) "/orders"),
                        SourceMeta: (*source.Meta)({
                          Line: (int) 113,
                          Column: (int) 15
                        })
                      }),
                      Fields: (map[string]*core.MappingNode) <nil>,
                      Items: ([]*core.MappingNode) <nil>,
                      StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                      SourceMeta: (*source.Meta)({
                        Line: (int) 113,
                        Column: (int) 15
                      }),
                      FieldsSourceMeta: (map[string]*source.Meta) <nil>
                    })
                  },
                  Items: ([]*core.MappingNode) <nil>,
                  StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                  SourceMeta: (*source.Meta)({
                    Line: (int) 112,
                    Column: (int) 9
                  }),
                  FieldsSourceMeta: (map[string]*source.Meta) (len=3) {
                    (string) (len=10) "authoriser": (*source.Meta)({
                      Line: (int) 114,
                      Column: (int) 9
                    }),
                    (string) (len=6) "method": (*source.Meta)({
                      Line: (int) 112,
                      Column: (int) 9
                    }),
                    (string) (len=4) "path": (*source.Meta)({
                      Line: (int) 113,
                      Column: (int) 9
                    })
                  }
                }),
                (string) (len=7) "handler": (*core.MappingNode)({
                  Literal: (*core.ScalarValue)({
                    IntValue: (*int)(<nil>),
                    BoolValue: (*bool)(<nil>),
                    FloatValue: (*float64)(<nil>),
                    StringValue: (*string)((len=18) "handlers.GetOrders"),
                    SourceMeta: (*source.Meta)({
                      Line: (int) 109,
                      Column: (int) 16
                    })
                  }),
                  Fields: (map[string]*core.MappingNode) <nil>,
                  Items: ([]*core.MappingNode) <nil>,
                  StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                  SourceMeta: (*source.Meta)({
                    Line: (int) 109,
                    Column: (int) 16
                  }),
                  FieldsSourceMeta: (map[string]*source.Meta) <nil>
                }),
                (string) (len=7) "timeout": (*core.MappingNode)({
                  Literal: (*core.ScalarValue)({
                    IntValue: (*int)(120),
                    BoolValue: (*bool)(<nil>),
                    FloatValue: (*float64)(<nil>),
                    StringValue: (*string)(<nil>),
                    SourceMeta: (*source.Meta)({
                      Line: (int) 110,
                      Column: (int) 16
                    })
                  }),
                  Fields: (map[string]*core.MappingNode) <nil>,
                  Items: ([]*core.MappingNode) <nil>,
                  StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                  SourceMeta: (*source.Meta)({
                    Line: (int) 110,
                    Column: (int) 16
                  }),
                  FieldsSourceMeta: (map[string]*source.Meta) <nil>
                })
              },
              Items: ([]*core.MappingNode) <nil>,
              StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
              SourceMeta: (*source.Meta)({
                Line: (int) 109,
                Column: (int) 7
              }),
              FieldsSourceMeta: (map[string]*source.Meta) (len=3) {
                (string) (len=8) "endpoint": (*source.Meta)({
                  Line: (int) 111,
                  Column: (int) 7
                }),
                (string) (len=7) "handler": (*source.Meta)({
                  Line: (int) 109,
                  Column: (int) 7
                }),
                (string) (len=7) "timeout": (*source.Meta)({
                  Line: (int) 110,
                  Column: (int) 7
                })
              }
            }),
            SourceMeta: (*source.Meta)({
              Line: (int) 103,
              Column: (int) 5
            })
          }),
          (string) (len=8) "orderApi": (*schema.Resource)({
            Type: (*schema.ResourceTypeWrapper)({
              Value: (string) (len=12) "celerity/api",
              SourceMeta: (*source.Meta)({
                Line: (int) 37,
                Column: (int) 11
              })
            }),
            Description: (*substitutions.StringOrSubstitutions)(<nil>),
            Metadata: (*schema.Metadata)({
              DisplayName: (*substitutions.StringOrSubstitutions)({
                Values: ([]*substitutions.StringOrSubstitution) (len=1) {
                  (*substitutions.StringOrSubstitution)({
                    StringValue: (*string)((len=9) "Order API"),
                    SubstitutionValue: (*substitutions.Substitution)(<nil>),
                    SourceMeta: (*source.Meta)({
                      Line: (int) 39,
                      Column: (int) 20
                    })
                  })
                },
                SourceMeta: (*source.Meta)({
                  Line: (int) 39,
                  Column: (int) 20
                })
              }),
              Annotations: (*schema.StringOrSubstitutionsMap)(<nil>),
              Labels: (*schema.StringMap)({
                Values: (map[string]string) (len=1) {
                  (string) (len=3) "app": (string) (len=8) "orderApi"
                },
                SourceMeta: (map[string]*source.Meta) (len=1) {
                  (string) (len=3) "app": (*source.Meta)({
                    Line: (int) 41,
                    Column: (int) 9
                  })
                }
              }),
              Custom: (*core.MappingNode)({
                Literal: (*core.ScalarValue)(<nil>),
                Fields: (map[string]*core.MappingNode) (len=1) {
                  (string) (len=6) "visual": (*core.MappingNode)({
                    Literal: (*core.ScalarValue)(<nil>),
                    Fields: (map[string]*core.MappingNode) (len=4) {
                      (string) (len=6) "height": (*core.MappingNode)({
                        Literal: (*core.ScalarValue)({
                          IntValue: (*int)(50),
                          BoolValue: (*bool)(<nil>),
                          FloatValue: (*float64)(<nil>),
                          StringValue: (*string)(<nil>),
                          SourceMeta: (*source.Meta)({
                            Line: (int) 46,
                            Column: (int) 19
                          })
                        }),
                        Fields: (map[string]*core.MappingNode) <nil>,
                        Items: ([]*core.MappingNode) <nil>,
                        StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                        SourceMeta: (*source.Meta)({
                          Line: (int) 46,
                          Column: (int) 19
                        }),
                        FieldsSourceMeta: (map[string]*source.Meta) <nil>
                      }),
                      (string) (len=9) "linkPorts": (*core.MappingNode)({
                        Literal: (*core.ScalarValue)(<nil>),
                        Fields: (map[string]*core.MappingNode) <nil>,
                        Items: ([]*core.MappingNode) (len=1) {
                          (*core.MappingNode)({
                            Literal: (*core.ScalarValue)(<nil>),
                            Fields: (map[string]*core.MappingNode) (len=3) {
                              (string) (len=10) "annotation": (*core.MappingNode)({
                                Literal: (*core.ScalarValue)({
                                  IntValue: (*int)(<nil>),
                                  BoolValue: (*bool)(<nil>),
                                  FloatValue: (*float64)(<nil>),
                                  StringValue: (*string)((len=10) "Orders API"),
                                  SourceMeta: (*source.Meta)({
                                    Line: (int) 50,
                                    Column: (int) 27
                                  })
                                }),
                                Fields: (map[string]*core.MappingNode) <nil>,
                                Items: ([]*core.MappingNode) <nil>,
                                StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                                SourceMeta: (*source.Meta)({
                                  Line: (int) 50,
                                  Column: (int) 27
                                }),
                                FieldsSourceMeta: (map[string]*source.Meta) <nil>
                              }),
                              (string) (len=9) "connectAt": (*core.MappingNode)({
                                Literal: (*core.ScalarValue)({
                                  IntValue: (*int)(<nil>),
                                  BoolValue: (*bool)(<nil>),
                                  FloatValue: (*float64)(<nil>),
                                  StringValue: (*string)((len=6) "70 100"),
                                  SourceMeta: (*source.Meta)({
                                    Line: (int) 49,
                                    Column: (int) 26
                                  })
                                }),
                                Fields: (map[string]*core.MappingNode) <nil>,
                                Items: ([]*core.MappingNode) <nil>,
                                StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                                SourceMeta: (*source.Meta)({
                                  Line: (int) 49,
                                  Column: (int) 26
                                }),
                                FieldsSourceMeta: (map[string]*source.Meta) <nil>
                              }),
                              (string) (len=6) "linkTo": (*core.MappingNode)({
                                Literal: (*core.ScalarValue)({
                                  IntValue: (*int)(<nil>),
                                  BoolValue: (*bool)(<nil>),
                                  FloatValue: (*float64)(<nil>),
                                  StringValue: (*string)((len=16) "getOrderEndpoint"),
                                  SourceMeta: (*source.Meta)({
                                    Line: (int) 48,
                                    Column: (int) 23
                                  })
                                }),
                                Fields: (map[string]*core.MappingNode) <nil>,
                                Items: ([]*core.MappingNode) <nil>,
                                StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                                SourceMeta: (*source.Meta)({
                                  Line: (int) 48,
                                  Column: (int) 23
                                }),
                                FieldsSourceMeta: (map[string]*source.Meta) <nil>
                              })
                            },
                            Items: ([]*core.MappingNode) <nil>,
                            StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                            SourceMeta: (*source.Meta)({
                              Line: (int) 48,
                              Column: (int) 15
                            }),
                            FieldsSourceMeta: (map[string]*source.Meta) (len=3) {
                              (string) (len=10) "annotation": (*source.Meta)({
                                Line: (int) 50,
                                Column: (int) 15
                              }),
                              (string) (len=9) "connectAt": (*source.Meta)({
                                Line: (int) 49,
                                Column: (int) 15
                              }),
                              (string) (len=6) "linkTo": (*source.Meta)({
                                Line: (int) 48,
                                Column: (int) 15
                              })
                            }
                          })
                        },
                        StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                        SourceMeta: (*source.Meta)({
                          Line: (int) 48,
                          Column: (int) 13
                        }),
                        FieldsSourceMeta: (map[string]*source.Meta) <nil>
                      }),
                      (string) (len=5) "point": (*core.MappingNode)({
                        Literal: (*core.ScalarValue)({
                          IntValue: (*int)(<nil>),
                          BoolValue: (*bool)(<nil>),
                          FloatValue: (*float64)(<nil>),
                          StringValue: (*string)((len=6) "20 100"),
                          SourceMeta: (*source.Meta)({
                            Line: (int) 44,
                            Column: (int) 18
                          })
                        }),
                        Fields: (map[string]*core.MappingNode) <nil>,
                        Items: ([]*core.MappingNode) <nil>,
                        StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                        SourceMeta: (*source.Meta)({
                          Line: (int) 44,
                          Column: (int) 18
                        }),
                        FieldsSourceMeta: (map[string]*source.Meta) <nil>
                      }),
                      (string) (len=5) "width": (*core.MappingNode)({
                        Literal: (*core.ScalarValue)({
                          IntValue: (*int)(50),
                          BoolValue: (*bool)(<nil>),
                          FloatValue: (*float64)(<nil>),
                          StringValue: (*string)(<nil>),
                          SourceMeta: (*source.Meta)({
                            Line: (int) 45,
                            Column: (int) 18
                          })
                        }),
                        Fields: (map[string]*core.MappingNode) <nil>,
                        Items: ([]*core.MappingNode) <nil>,
                        StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                        SourceMeta: (*source.Meta)({
                          Line: (int) 45,
                          Column: (int) 18
                        }),
                        FieldsSourceMeta: (map[string]*source.Meta) <nil>
                      })
                    },
                    Items: ([]*core.MappingNode) <nil>,
                    StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                    SourceMeta: (*source.Meta)({
                      Line: (int) 44,
                      Column: (int) 11
                    }),
                    FieldsSourceMeta: (map[string]*source.Meta) (len=4) {
                      (string) (len=6) "height": (*source.Meta)({
                        Line: (int) 46,
                        Column: (int) 11
                      }),
                      (string) (len=9) "linkPorts": (*source.Meta)({
                        Line: (int) 47,
                        Column: (int) 11
                      }),
                      (string) (len=5) "point": (*source.Meta)({
                        Line: (int) 44,
                        Column: (int) 11
                      }),
                      (string) (len=5) "width": (*source.Meta)({
                        Line: (int) 45,
                        Column: (int) 11
                      })
                    }
                  })
                },
                Items: ([]*core.MappingNode) <nil>,
                StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                SourceMeta: (*source.Meta)({
                  Line: (int) 43,
                  Column: (int) 9
                }),
                FieldsSourceMeta: (map[string]*source.Meta) (len=1) {
                  (string) (len=6) "visual": (*source.Meta)({
                    Line: (int) 43,
                    Column: (int) 9
                  })
                }
              }),
              SourceMeta: (*source.Meta)({
                Line: (int) 39,
                Column: (int) 7
              })
            }),
            Condition: (*schema.Condition)(<nil>),
            Each: (*substitutions.StringOrSubstitutions)(<nil>),
            LinkSelector: (*schema.LinkSelector)({
              ByLabel: (*schema.StringMap)({
                Values: (map[string]string) (len=1) {
                  (string) (len=3) "app": (string) (len=8) "orderApi"
                },
                SourceMeta: (map[string]*source.Meta) (len=1) {
                  (string) (len=3) "app": (*source.Meta)({
                    Line: (int) 53,
                    Column: (int) 9
                  })
                }
              }),
              SourceMeta: (*source.Meta)({
                Line: (int) 52,
                Column: (int) 7
              })
            }),
            Spec: (*core.MappingNode)({
              Literal: (*core.ScalarValue)(<nil>),
              Fields: (map[string]*core.MappingNode) (len=3) {
                (string) (len=11) "environment": (*core.MappingNode)({
                  Literal: (*core.ScalarValue)(<nil>),
                  Fields: (map[string]*core.MappingNode) (len=1) {
                    (string) (len=9) "variables": (*core.MappingNode)({
                      Literal: (*core.ScalarValue)(<nil>),
                      Fields: (map[string]*core.MappingNode) (len=1) {
                        (string) (len=14) "DYNAMODB_TABLE": (*core.MappingNode)({
                          Literal: (*core.ScalarValue)(<nil>),
                          Fields: (map[string]*core.MappingNode) <nil>,
                          Items: ([]*core.MappingNode) <nil>,
                          StringWithSubstitutions: (*substitutions.StringOrSubstitutions)({
                            Values: ([]*substitutions.StringOrSubstitution) (len=1) {
                              (*substitutions.StringOrSubstitution)({
                                StringValue: (*string)(<nil>),
                                SubstitutionValue: (*substitutions.Substitution)({
                                  Function: (*substitutions.SubstitutionFunctionExpr)(<nil>),
                                  Variable: (*substitutions.SubstitutionVariable)({
                                    VariableName: (string) (len=13) "dynamoDBTable",
                                    SourceMeta: (*source.Meta)({
                                      Line: (int) 66,
                                      Column: (int) 29
                                    })
                                  }),
                                  ValueReference: (*substitutions.SubstitutionValueReference)(<nil>),
                                  ElemReference: (*substitutions.SubstitutionElemReference)(<nil>),
                                  ElemIndexReference: (*substitutions.SubstitutionElemIndexReference)(<nil>),
                                  DataSourceProperty: (*substitutions.SubstitutionDataSourceProperty)(<nil>),
                                  ResourceProperty: (*substitutions.SubstitutionResourceProperty)(<nil>),
                                  Child: (*substitutions.SubstitutionChild)(<nil>),
                                  StringValue: (*string)(<nil>),
                                  IntValue: (*int64)(<nil>),
                                  FloatValue: (*float64)(<nil>),
                                  BoolValue: (*bool)(<nil>),
                                  SourceMeta: (*source.Meta)({
                                    Line: (int) 66,
                                    Column: (int) 29
                                  })
                                }),
                                SourceMeta: (*source.Meta)({
                                  Line: (int) 66,
                                  Column: (int) 27
                                })
                              })
                            },
                            SourceMeta: (*source.Meta)({
                              Line: (int) 66,
                              Column: (int) 27
                            })
                          }),
                          SourceMeta: (*source.Meta)({
                            Line: (int) 66,
                            Column: (int) 27
                          }),
                          FieldsSourceMeta: (map[string]*source.Meta) <nil>
                        })
                      },
                      Items: ([]*core.MappingNode) <nil>,
                      StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                      SourceMeta: (*source.Meta)({
                        Line: (int) 66,
                        Column: (int) 11
                      }),
                      FieldsSourceMeta: (map[string]*source.Meta) (len=1) {
                        (string) (len=14) "DYNAMODB_TABLE": (*source.Meta)({
                          Line: (int) 66,
                          Column: (int) 11
                        })
                      }
                    })
                  },
                  Items: ([]*core.MappingNode) <nil>,
                  StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                  SourceMeta: (*source.Meta)({
                    Line: (int) 65,
                    Column: (int) 9
                  }),
                  FieldsSourceMeta: (map[string]*source.Meta) (len=1) {
                    (string) (len=9) "variables": (*source.Meta)({
                      Line: (int) 65,
                      Column: (int) 9
                    })
                  }
                }),
                (string) (len=7) "runtime": (*core.MappingNode)({
                  Literal: (*core.ScalarValue)({
                    IntValue: (*int)(<nil>),
                    BoolValue: (*bool)(<nil>),
                    FloatValue: (*float64)(<nil>),
                    StringValue: (*string)((len=5) "go1.x"),
                    SourceMeta: (*source.Meta)({
                      Line: (int) 71,
                      Column: (int) 16
                    })
                  }),
                  Fields: (map[string]*core.MappingNode) <nil>,
                  Items: ([]*core.MappingNode) <nil>,
                  StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                  SourceMeta: (*source.Meta)({
                    Line: (int) 71,
                    Column: (int) 16
                  }),
                  FieldsSourceMeta: (map[string]*source.Meta) <nil>
                }),
                (string) (len=14) "tracingEnabled": (*core.MappingNode)({
                  Literal: (*core.ScalarValue)({
                    IntValue: (*int)(<nil>),
                    BoolValue: (*bool)(true),
                    FloatValue: (*float64)(<nil>),
                    StringValue: (*string)(<nil>),
                    SourceMeta: (*source.Meta)({
                      Line: (int) 74,
                      Column: (int) 23
                    })
                  }),
                  Fields: (map[string]*core.MappingNode) <nil>,
                  Items: ([]*core.MappingNode) <nil>,
                  StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                  SourceMeta: (*source.Meta)({
                    Line: (int) 74,
                    Column: (int) 23
                  }),
                  FieldsSourceMeta: (map[string]*source.Meta) <nil>
                })
              },
              Items: ([]*core.MappingNode) <nil>,
              StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
              SourceMeta: (*source.Meta)({
                Line: (int) 64,
                Column: (int) 7
              }),
              FieldsSourceMeta: (map[string]*source.Meta) (len=3) {
                (string) (len=11) "environment": (*source.Meta)({
                  Line: (int) 64,
                  Column: (int) 7
                }),
                (string) (len=7) "runtime": (*source.Meta)({
                  Line: (int) 71,
                  Column: (int) 7
                }),
                (string) (len=14) "tracingEnabled": (*source.Meta)({
                  Line: (int) 74,
                  Column: (int) 7
                })
              }
            }),
            SourceMeta: (*source.Meta)({
              Line: (int) 37,
              Column: (int) 5
            })
          }),
          (string) (len=11) "orderPubSub": (*schema.Resource)({
            Type: (*schema.ResourceTypeWrapper)({
              Value: (string) (len=15) "celerity/pubsub",
              SourceMeta: (*source.Meta)({
                Line: (int) 161,
                Column: (int) 11
              })
            }),
            Description: (*substitutions.StringOrSubstitutions)(<nil>),
            Metadata: (*schema.Metadata)({
              DisplayName: (*substitutions.StringOrSubstitutions)({
                Values: ([]*substitutions.StringOrSubstitution) (len=1) {
                  (*substitutions.StringOrSubstitution)({
                    StringValue: (*string)((len=13) "Order Pub/Sub"),
                    SubstitutionValue: (*substitutions.Substitution)(<nil>),
                    SourceMeta: (*source.Meta)({
                      Line: (int) 163,
                      Column: (int) 20
                    })
                  })
                },
                SourceMeta: (*source.Meta)({
                  Line: (int) 163,
                  Column: (int) 20
                })
              }),
              Annotations: (*schema.StringOrSubstitutionsMap)(<nil>),
              Labels: (*schema.StringMap)({
                Values: (map[string]string) (len=1) {
                  (string) (len=8) "workflow": (string) (len=11) "orderPubSub"
                },
                SourceMeta: (map[string]*source.Meta) (len=1) {
                  (string) (len=8) "workflow": (*source.Meta)({
                    Line: (int) 165,
                    Column: (int) 9
                  })
                }
              }),
              Custom: (*core.MappingNode)(<nil>),
              SourceMeta: (*source.Meta)({
                Line: (int) 163,
                Column: (int) 7
              })
            }),
            Condition: (*schema.Condition)(<nil>),
            Each: (*substitutions.StringOrSubstitutions)(<nil>),
            LinkSelector: (*schema.LinkSelector)({
              ByLabel: (*schema.StringMap)({
                Values: (map[string]string) (len=1) {
                  (string) (len=8) "workflow": (string) (len=11) "orderPubSub"
                },
                SourceMeta: (map[string]*source.Meta) (len=1) {
                  (string) (len=8) "workflow": (*source.Meta)({
                    Line: (int) 168,
                    Column: (int) 9
                  })
                }
              }),
              SourceMeta: (*source.Meta)({
                Line: (int) 167,
                Column: (int) 7
              })
            }),
            Spec: (*core.MappingNode)({
              Literal: (*core.ScalarValue)(<nil>),
              Fields: (map[string]*core.MappingNode) (len=1) {
                (string) (len=9) "topicName": (*core.MappingNode)({
                  Literal: (*core.ScalarValue)(<nil>),
                  Fields: (map[string]*core.MappingNode) <nil>,
                  Items: ([]*core.MappingNode) <nil>,
                  StringWithSubstitutions: (*substitutions.StringOrSubstitutions)({
                    Values: ([]*substitutions.StringOrSubstitution) (len=1) {
                      (*substitutions.StringOrSubstitution)({
                        StringValue: (*string)(<nil>),
                        SubstitutionValue: (*substitutions.Substitution)({
                          Function: (*substitutions.SubstitutionFunctionExpr)(<nil>),
                          Variable: (*substitutions.SubstitutionVariable)({
                            VariableName: (string) (len=15) "ordersTopicName",
                            SourceMeta: (*source.Meta)({
                              Line: (int) 170,
                              Column: (int) 20
                            })
                          }),
                          ValueReference: (*substitutions.SubstitutionValueReference)(<nil>),
                          ElemReference: (*substitutions.SubstitutionElemReference)(<nil>),
                          ElemIndexReference: (*substitutions.SubstitutionElemIndexReference)(<nil>),
                          DataSourceProperty: (*substitutions.SubstitutionDataSourceProperty)(<nil>),
                          ResourceProperty: (*substitutions.SubstitutionResourceProperty)(<nil>),
                          Child: (*substitutions.SubstitutionChild)(<nil>),
                          StringValue: (*string)(<nil>),
                          IntValue: (*int64)(<nil>),
                          FloatValue: (*float64)(<nil>),
                          BoolValue: (*bool)(<nil>),
                          SourceMeta: (*source.Meta)({
                            Line: (int) 170,
                            Column: (int) 20
                          })
                        }),
                        SourceMeta: (*source.Meta)({
                          Line: (int) 170,
                          Column: (int) 18
                        })
                      })
                    },
                    SourceMeta: (*source.Meta)({
                      Line: (int) 170,
                      Column: (int) 18
                    })
                  }),
                  SourceMeta: (*source.Meta)({
                    Line: (int) 170,
                    Column: (int) 18
                  }),
                  FieldsSourceMeta: (map[string]*source.Meta) <nil>
                })
              },
              Items: ([]*core.MappingNode) <nil>,
              StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
              SourceMeta: (*source.Meta)({
                Line: (int) 170,
                Column: (int) 7
              }),
              FieldsSourceMeta: (map[string]*source.Meta) (len=1) {
                (string) (len=9) "topicName": (*source.Meta)({
                  Line: (int) 170,
                  Column: (int) 7
                })
              }
            }),
            SourceMeta: (*source.Meta)({
              Line: (int) 161,
              Column: (int) 5
            })
          }),
          (string) (len=19) "sharedPackagesLayer": (*schema.Resource)({
            Type: (*schema.ResourceTypeWrapper)({
              Value: (string) (len=21) "celerity/layerVersion",
              SourceMeta: (*source.Meta)({
                Line: (int) 145,
                Column: (int) 11
              })
            }),
            Description: (*substitutions.StringOrSubstitutions)(<nil>),
            Metadata: (*schema.Metadata)({
              DisplayName: (*substitutions.StringOrSubstitutions)({
                Values: ([]*substitutions.StringOrSubstitution) (len=1) {
                  (*substitutions.StringOrSubstitution)({
                    StringValue: (*string)((len=21) "Shared Packages Layer"),
                    SubstitutionValue: (*substitutions.Substitution)(<nil>),
                    SourceMeta: (*source.Meta)({
                      Line: (int) 147,
                      Column: (int) 20
                    })
                  })
                },
                SourceMeta: (*source.Meta)({
                  Line: (int) 147,
                  Column: (int) 20
                })
              }),
              Annotations: (*schema.StringOrSubstitutionsMap)(<nil>),
              Labels: (*schema.StringMap)({
                Values: (map[string]string) (len=2) {
                  (string) (len=3) "app": (string) (len=8) "orderApi",
                  (string) (len=8) "workflow": (string) (len=11) "orderPubSub"
                },
                SourceMeta: (map[string]*source.Meta) (len=2) {
                  (string) (len=3) "app": (*source.Meta)({
                    Line: (int) 150,
                    Column: (int) 9
                  }),
                  (string) (len=8) "workflow": (*source.Meta)({
                    Line: (int) 149,
                    Column: (int) 9
                  })
                }
              }),
              Custom: (*core.MappingNode)(<nil>),
              SourceMeta: (*source.Meta)({
                Line: (int) 147,
                Column: (int) 7
              })
            }),
            Condition: (*schema.Condition)(<nil>),
            Each: (*substitutions.StringOrSubstitutions)(<nil>),
            LinkSelector: (*schema.LinkSelector)(<nil>),
            Spec: (*core.MappingNode)({
              Literal: (*core.ScalarValue)(<nil>),
              Fields: (map[string]*core.MappingNode) (len=3) {
                (string) (len=18) "compatibleRuntimes": (*core.MappingNode)({
                  Literal: (*core.ScalarValue)(<nil>),
                  Fields: (map[string]*core.MappingNode) <nil>,
                  Items: ([]*core.MappingNode) (len=1) {
                    (*core.MappingNode)({
                      Literal: (*core.ScalarValue)({
                        IntValue: (*int)(<nil>),
                        BoolValue: (*bool)(<nil>),
                        FloatValue: (*float64)(<nil>),
                        StringValue: (*string)((len=5) "go1.x"),
                        SourceMeta: (*source.Meta)({
                          Line: (int) 152,
                          Column: (int) 28
                        })
                      }),
                      Fields: (map[string]*core.MappingNode) <nil>,
                      Items: ([]*core.MappingNode) <nil>,
                      StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                      SourceMeta: (*source.Meta)({
                        Line: (int) 152,
                        Column: (int) 28
                      }),
                      FieldsSourceMeta: (map[string]*source.Meta) <nil>
                    })
                  },
                  StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                  SourceMeta: (*source.Meta)({
                    Line: (int) 152,
                    Column: (int) 27
                  }),
                  FieldsSourceMeta: (map[string]*source.Meta) <nil>
                }),
                (string) (len=7) "content": (*core.MappingNode)({
                  Literal: (*core.ScalarValue)({
                    IntValue: (*int)(<nil>),
                    BoolValue: (*bool)(<nil>),
                    FloatValue: (*float64)(<nil>),
                    StringValue: (*string)((len=27) "build/shared-packages-layer"),
                    SourceMeta: (*source.Meta)({
                      Line: (int) 155,
                      Column: (int) 16
                    })
                  }),
                  Fields: (map[string]*core.MappingNode) <nil>,
                  Items: ([]*core.MappingNode) <nil>,
                  StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                  SourceMeta: (*source.Meta)({
                    Line: (int) 155,
                    Column: (int) 16
                  }),
                  FieldsSourceMeta: (map[string]*source.Meta) <nil>
                }),
                (string) (len=9) "layerName": (*core.MappingNode)({
                  Literal: (*core.ScalarValue)({
                    IntValue: (*int)(<nil>),
                    BoolValue: (*bool)(<nil>),
                    FloatValue: (*float64)(<nil>),
                    StringValue: (*string)((len=19) "sharedPackagesLayer"),
                    SourceMeta: (*source.Meta)({
                      Line: (int) 156,
                      Column: (int) 18
                    })
                  }),
                  Fields: (map[string]*core.MappingNode) <nil>,
                  Items: ([]*core.MappingNode) <nil>,
                  StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                  SourceMeta: (*source.Meta)({
                    Line: (int) 156,
                    Column: (int) 18
                  }),
                  FieldsSourceMeta: (map[string]*source.Meta) <nil>
                })
              },
              Items: ([]*core.MappingNode) <nil>,
              StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
              SourceMeta: (*source.Meta)({
                Line: (int) 152,
                Column: (int) 7
              }),
              FieldsSourceMeta: (map[string]*source.Meta) (len=3) {
                (string) (len=18) "compatibleRuntimes": (*source.Meta)({
                  Line: (int) 152,
                  Column: (int) 7
                }),
                (string) (len=7) "content": (*source.Meta)({
                  Line: (int) 155,
                  Column: (int) 7
                }),
                (string) (len=9) "layerName": (*source.Meta)({
                  Line: (int) 156,
                  Column: (int) 7
                })
              }
            }),
            SourceMeta: (*source.Meta)({
              Line: (int) 145,
              Column: (int) 5
            })
          }),
          (string) (len=19) "updateOrderFunction": (*schema.Resource)({
            Type: (*schema.ResourceTypeWrapper)({
              Value: (string) (len=16) "celerity/handler",
              SourceMeta: (*source.Meta)({
                Line: (int) 118,
                Column: (int) 11
              })
            }),
            Description: (*substitutions.StringOrSubstitutions)(<nil>),
            Metadata: (*schema.Metadata)({
              DisplayName: (*substitutions.StringOrSubstitutions)({
                Values: ([]*substitutions.StringOrSubstitution) (len=1) {
                  (*substitutions.StringOrSubstitution)({
                    StringValue: (*string)((len=21) "Update Order Function"),
                    SubstitutionValue: (*substitutions.Substitution)(<nil>),
                    SourceMeta: (*source.Meta)({
                      Line: (int) 120,
                      Column: (int) 20
                    })
                  })
                },
                SourceMeta: (*source.Meta)({
                  Line: (int) 120,
                  Column: (int) 20
                })
              }),
              Annotations: (*schema.StringOrSubstitutionsMap)(<nil>),
              Labels: (*schema.StringMap)({
                Values: (map[string]string) (len=2) {
                  (string) (len=10) "pubsubType": (string) (len=8) "consumer",
                  (string) (len=8) "workflow": (string) (len=11) "orderPubSub"
                },
                SourceMeta: (map[string]*source.Meta) (len=2) {
                  (string) (len=10) "pubsubType": (*source.Meta)({
                    Line: (int) 127,
                    Column: (int) 9
                  }),
                  (string) (len=8) "workflow": (*source.Meta)({
                    Line: (int) 122,
                    Column: (int) 9
                  })
                }
              }),
              Custom: (*core.MappingNode)(<nil>),
              SourceMeta: (*source.Meta)({
                Line: (int) 120,
                Column: (int) 7
              })
            }),
            Condition: (*schema.Condition)(<nil>),
            Each: (*substitutions.StringOrSubstitutions)(<nil>),
            LinkSelector: (*schema.LinkSelector)(<nil>),
            Spec: (*core.MappingNode)({
              Literal: (*core.ScalarValue)(<nil>),
              Fields: (map[string]*core.MappingNode) (len=3) {
                (string) (len=6) "events": (*core.MappingNode)({
                  Literal: (*core.ScalarValue)(<nil>),
                  Fields: (map[string]*core.MappingNode) (len=1) {
                    (string) (len=10) "orderEvent": (*core.MappingNode)({
                      Literal: (*core.ScalarValue)(<nil>),
                      Fields: (map[string]*core.MappingNode) (len=2) {
                        (string) (len=9) "batchSize": (*core.MappingNode)({
                          Literal: (*core.ScalarValue)({
                            IntValue: (*int)(10),
                            BoolValue: (*bool)(<nil>),
                            FloatValue: (*float64)(<nil>),
                            StringValue: (*string)(<nil>),
                            SourceMeta: (*source.Meta)({
                              Line: (int) 136,
                              Column: (int) 22
                            })
                          }),
                          Fields: (map[string]*core.MappingNode) <nil>,
                          Items: ([]*core.MappingNode) <nil>,
                          StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                          SourceMeta: (*source.Meta)({
                            Line: (int) 136,
                            Column: (int) 22
                          }),
                          FieldsSourceMeta: (map[string]*source.Meta) <nil>
                        }),
                        (string) (len=4) "type": (*core.MappingNode)({
                          Literal: (*core.ScalarValue)({
                            IntValue: (*int)(<nil>),
                            BoolValue: (*bool)(<nil>),
                            FloatValue: (*float64)(<nil>),
                            StringValue: (*string)((len=6) "pubsub"),
                            SourceMeta: (*source.Meta)({
                              Line: (int) 133,
                              Column: (int) 17
                            })
                          }),
                          Fields: (map[string]*core.MappingNode) <nil>,
                          Items: ([]*core.MappingNode) <nil>,
                          StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                          SourceMeta: (*source.Meta)({
                            Line: (int) 133,
                            Column: (int) 17
                          }),
                          FieldsSourceMeta: (map[string]*source.Meta) <nil>
                        })
                      },
                      Items: ([]*core.MappingNode) <nil>,
                      StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                      SourceMeta: (*source.Meta)({
                        Line: (int) 133,
                        Column: (int) 11
                      }),
                      FieldsSourceMeta: (map[string]*source.Meta) (len=2) {
                        (string) (len=9) "batchSize": (*source.Meta)({
                          Line: (int) 136,
                          Column: (int) 11
                        }),
                        (string) (len=4) "type": (*source.Meta)({
                          Line: (int) 133,
                          Column: (int) 11
                        })
                      }
                    })
                  },
                  Items: ([]*core.MappingNode) <nil>,
                  StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                  SourceMeta: (*source.Meta)({
                    Line: (int) 132,
                    Column: (int) 9
                  }),
                  FieldsSourceMeta: (map[string]*source.Meta) (len=1) {
                    (string) (len=10) "orderEvent": (*source.Meta)({
                      Line: (int) 132,
                      Column: (int) 9
                    })
                  }
                }),
                (string) (len=7) "handler": (*core.MappingNode)({
                  Literal: (*core.ScalarValue)({
                    IntValue: (*int)(<nil>),
                    BoolValue: (*bool)(<nil>),
                    FloatValue: (*float64)(<nil>),
                    StringValue: (*string)((len=20) "handlers.UpdateOrder"),
                    SourceMeta: (*source.Meta)({
                      Line: (int) 129,
                      Column: (int) 16
                    })
                  }),
                  Fields: (map[string]*core.MappingNode) <nil>,
                  Items: ([]*core.MappingNode) <nil>,
                  StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                  SourceMeta: (*source.Meta)({
                    Line: (int) 129,
                    Column: (int) 16
                  }),
                  FieldsSourceMeta: (map[string]*source.Meta) <nil>
                }),
                (string) (len=7) "timeout": (*core.MappingNode)({
                  Literal: (*core.ScalarValue)({
                    IntValue: (*int)(120),
                    BoolValue: (*bool)(<nil>),
                    FloatValue: (*float64)(<nil>),
                    StringValue: (*string)(<nil>),
                    SourceMeta: (*source.Meta)({
                      Line: (int) 130,
                      Column: (int) 16
                    })
                  }),
                  Fields: (map[string]*core.MappingNode) <nil>,
                  Items: ([]*core.MappingNode) <nil>,
                  StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                  SourceMeta: (*source.Meta)({
                    Line: (int) 130,
                    Column: (int) 16
                  }),
                  FieldsSourceMeta: (map[string]*source.Meta) <nil>
                })
              },
              Items: ([]*core.MappingNode) <nil>,
              StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
              SourceMeta: (*source.Meta)({
                Line: (int) 129,
                Column: (int) 7
              }),
              FieldsSourceMeta: (map[string]*source.Meta) (len=3) {
                (string) (len=6) "events": (*source.Meta)({
                  Line: (int) 131,
                  Column: (int) 7
                }),
                (string) (len=7) "handler": (*source.Meta)({
                  Line: (int) 129,
                  Column: (int) 7
                }),
                (string) (len=7) "timeout": (*source.Meta)({
                  Line: (int) 130,
                  Column: (int) 7
                })
              }
            }),
            SourceMeta: (*source.Meta)({
              Line: (int) 118,
              Column: (int) 5
            })
          })
        },
        SourceMeta: (map[string]*source.Meta) (len=6) {
          (string) (len=10) "authoriser": (*source.Meta)({
            Line: (int) 81,
            Column: (int) 3
          }),
          (string) (len=16) "getOrdersHandler": (*source.Meta)({
            Line: (int) 102,
            Column: (int) 3
          }),
          (string) (len=8) "orderApi": (*source.Meta)({
            Line: (int) 34,
            Column: (int) 3
          }),
          (string) (len=11) "orderPubSub": (*source.Meta)({
            Line: (int) 157,
            Column: (int) 3
          }),
          (string) (len=19) "sharedPackagesLayer": (*source.Meta)({
            Line: (int) 138,
            Column: (int) 3
          }),
          (string) (len=19) "updateOrderFunction": (*source.Meta)({
            Line: (int) 117,
            Column: (int) 3
          })
        }
      }),
      Range: (*source.Range)({
        Start: (*source.Meta)({
          Line: (int) 34,
          Column: (int) 3
        }),
        End: (*source.Meta)(<nil>)
      })
    })
  },
  SchemaElement: (*schema.Blueprint)({
    Version: (*core.ScalarValue)({
      IntValue: (*int)(<nil>),
      BoolValue: (*bool)(<nil>),
      FloatValue: (*float64)(<nil>),
      StringValue: (*string)((len=10) "2021-12-18"),
      SourceMeta: (*source.Meta)({
        Line: (int) 1,
        Column: (int) 10
      })
    }),
    Transform: (*schema.TransformValueWrapper)({
      Values: ([]string) (len=1) {
        (string) (len=19) "celerity-2022-01-22"
      },
      SourceMeta: ([]*source.Meta) (len=1) {
        (*source.Meta)({
          Line: (int) 3,
          Column: (int) 5
        })
      }
    }),
    Variables: (*schema.VariableMap)({
      Values: (map[string]*schema.Variable) (len=3) {
        (string) (len=13) "dynamoDBTable": (*schema.Variable)({
          Type: (*schema.VariableTypeWrapper)({
            Value: (schema.VariableType) (len=6) "string",
            SourceMeta: (*source.Meta)({
              Line: (int) 6,
              Column: (int) 11
            })
          }),
          Description: (*core.ScalarValue)({
            IntValue: (*int)(<nil>),
            BoolValue: (*bool)(<nil>),
            FloatValue: (*float64)(<nil>),
            StringValue: (*string)((len=25) "The Orders DynamoDB Table"),
            SourceMeta: (*source.Meta)({
              Line: (int) 7,
              Column: (int) 18
            })
          }),
          Secret: (*core.ScalarValue)(<nil>),
          Default: (*core.ScalarValue)(<nil>),
          AllowedValues: ([]*core.ScalarValue) <nil>,
          SourceMeta: (*source.Meta)({
            Line: (int) 6,
            Column: (int) 5
          })
        }),
        (string) (len=11) "environment": (*schema.Variable)({
          Type: (*schema.VariableTypeWrapper)({
            Value: (schema.VariableType) (len=6) "string",
            SourceMeta: (*source.Meta)({
              Line: (int) 12,
              Column: (int) 11
            })
          }),
          Description: (*core.ScalarValue)(<nil>),
          Secret: (*core.ScalarValue)(<nil>),
          Default: (*core.ScalarValue)(<nil>),
          AllowedValues: ([]*core.ScalarValue) <nil>,
          SourceMeta: (*source.Meta)({
            Line: (int) 12,
            Column: (int) 5
          })
        }),
        (string) (len=15) "ordersTopicName": (*schema.Variable)({
          Type: (*schema.VariableTypeWrapper)({
            Value: (schema.VariableType) (len=6) "string",
            SourceMeta: (*source.Meta)({
              Line: (int) 9,
              Column: (int) 11
            })
          }),
          Description: (*core.ScalarValue)({
            IntValue: (*int)(<nil>),
            BoolValue: (*bool)(<nil>),
            FloatValue: (*float64)(<nil>),
            StringValue: (*string)((len=22) "The Orders Event Topic"),
            SourceMeta: (*source.Meta)({
              Line: (int) 10,
              Column: (int) 18
            })
          }),
          Secret: (*core.ScalarValue)(<nil>),
          Default: (*core.ScalarValue)(<nil>),
          AllowedValues: ([]*core.ScalarValue) <nil>,
          SourceMeta: (*source.Meta)({
            Line: (int) 9,
            Column: (int) 5
          })
        })
      },
      SourceMeta: (map[string]*source.Meta) (len=3) {
        (string) (len=13) "dynamoDBTable": (*source.Meta)({
          Line: (int) 5,
          Column: (int) 3
        }),
        (string) (len=11) "environment": (*source.Meta)({
          Line: (int) 11,
          Column: (int) 3
        }),
        (string) (len=15) "ordersTopicName": (*source.Meta)({
          Line: (int) 8,
          Column: (int) 3
        })
      }
    }),
    Values: (*schema.ValueMap)(<nil>),
    Include: (*schema.IncludeMap)(<nil>),
    Resources: (*schema.ResourceMap)({
      Values: (map[string]*schema.Resource) (len=6) {
        (string) (len=10) "authoriser": (*schema.Resource)({
          Type: (*schema.ResourceTypeWrapper)({
            Value: (string) (len=16) "celerity/handler",
            SourceMeta: (*source.Meta)({
              Line: (int) 82,
              Column: (int) 11
            })
          }),
          Description: (*substitutions.StringOrSubstitutions)(<nil>),
          Metadata: (*schema.Metadata)({
            DisplayName: (*substitutions.StringOrSubstitutions)({
              Values: ([]*substitutions.StringOrSubstitution) (len=1) {
                (*substitutions.StringOrSubstitution)({
                  StringValue: (*string)((len=10) "Authoriser"),
                  SubstitutionValue: (*substitutions.Substitution)(<nil>),
                  SourceMeta: (*source.Meta)({
                    Line: (int) 84,
                    Column: (int) 20
                  })
                })
              },
              SourceMeta: (*source.Meta)({
                Line: (int) 84,
                Column: (int) 20
              })
            }),
            Annotations: (*schema.StringOrSubstitutionsMap)({
              Values: (map[string]*substitutions.StringOrSubstitutions) (len=4) {
                (string) (len=10) "authoriser": (*substitutions.StringOrSubstitutions)({
                  Values: ([]*substitutions.StringOrSubstitution) (len=1) {
                    (*substitutions.StringOrSubstitution)({
                      StringValue: (*string)((len=4) "true"),
                      SubstitutionValue: (*substitutions.Substitution)(<nil>),
                      SourceMeta: (*source.Meta)({
                        Line: (int) 89,
                        Column: (int) 21
                      })
                    })
                  },
                  SourceMeta: (*source.Meta)({
                    Line: (int) 89,
                    Column: (int) 21
                  })
                }),
                (string) (len=26) "authoriser.identity.header": (*substitutions.StringOrSubstitutions)({
                  Values: ([]*substitutions.StringOrSubstitution) (len=1) {
                    (*substitutions.StringOrSubstitution)({
                      StringValue: (*string)((len=18) "MyCustomAuthHeader"),
                      SubstitutionValue: (*substitutions.Substitution)(<nil>),
                      SourceMeta: (*source.Meta)({
                        Line: (int) 93,
                        Column: (int) 37
                      })
                    })
                  },
                  SourceMeta: (*source.Meta)({
                    Line: (int) 93,
                    Column: (int) 37
                  })
                }),
                (string) (len=36) "authoriser.identity.reauthoriseEvery": (*substitutions.StringOrSubstitutions)({
                  Values: ([]*substitutions.StringOrSubstitution) (len=1) {
                    (*substitutions.StringOrSubstitution)({
                      StringValue: (*string)((len=2) "20"),
                      SubstitutionValue: (*substitutions.Substitution)(<nil>),
                      SourceMeta: (*source.Meta)({
                        Line: (int) 95,
                        Column: (int) 47
                      })
                    })
                  },
                  SourceMeta: (*source.Meta)({
                    Line: (int) 95,
                    Column: (int) 47
                  })
                }),
                (string) (len=40) "authoriser.identity.validationExpression": (*substitutions.StringOrSubstitutions)({
                  Values: ([]*substitutions.StringOrSubstitution) (len=1) {
                    (*substitutions.StringOrSubstitution)({
                      StringValue: (*string)((len=9) "Bearer .*"),
                      SubstitutionValue: (*substitutions.Substitution)(<nil>),
                      SourceMeta: (*source.Meta)({
                        Line: (int) 94,
                        Column: (int) 51
                      })
                    })
                  },
                  SourceMeta: (*source.Meta)({
                    Line: (int) 94,
                    Column: (int) 51
                  })
                })
              },
              SourceMeta: (map[string]*source.Meta) (len=4) {
                (string) (len=10) "authoriser": (*source.Meta)({
                  Line: (int) 89,
                  Column: (int) 9
                }),
                (string) (len=26) "authoriser.identity.header": (*source.Meta)({
                  Line: (int) 93,
                  Column: (int) 9
                }),
                (string) (len=36) "authoriser.identity.reauthoriseEvery": (*source.Meta)({
                  Line: (int) 95,
                  Column: (int) 9
                }),
                (string) (len=40) "authoriser.identity.validationExpression": (*source.Meta)({
                  Line: (int) 94,
                  Column: (int) 9
                })
              }
            }),
            Labels: (*schema.StringMap)({
              Values: (map[string]string) (len=1) {
                (string) (len=3) "app": (string) (len=8) "orderApi"
              },
              SourceMeta: (map[string]*source.Meta) (len=1) {
                (string) (len=3) "app": (*source.Meta)({
                  Line: (int) 97,
                  Column: (int) 9
                })
              }
            }),
            Custom: (*core.MappingNode)(<nil>),
            SourceMeta: (*source.Meta)({
              Line: (int) 84,
              Column: (int) 7
            })
          }),
          Condition: (*schema.Condition)(<nil>),
          Each: (*substitutions.StringOrSubstitutions)(<nil>),
          LinkSelector: (*schema.LinkSelector)(<nil>),
          Spec: (*core.MappingNode)({
            Literal: (*core.ScalarValue)(<nil>),
            Fields: (map[string]*core.MappingNode) (len=2) {
              (string) (len=7) "handler": (*core.MappingNode)({
                Literal: (*core.ScalarValue)({
                  IntValue: (*int)(<nil>),
                  BoolValue: (*bool)(<nil>),
                  FloatValue: (*float64)(<nil>),
                  StringValue: (*string)((len=19) "handlers.Authoriser"),
                  SourceMeta: (*source.Meta)({
                    Line: (int) 99,
                    Column: (int) 16
                  })
                }),
                Fields: (map[string]*core.MappingNode) <nil>,
                Items: ([]*core.MappingNode) <nil>,
                StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                SourceMeta: (*source.Meta)({
                  Line: (int) 99,
                  Column: (int) 16
                }),
                FieldsSourceMeta: (map[string]*source.Meta) <nil>
              }),
              (string) (len=7) "timeout": (*core.MappingNode)({
                Literal: (*core.ScalarValue)({
                  IntValue: (*int)(120),
                  BoolValue: (*bool)(<nil>),
                  FloatValue: (*float64)(<nil>),
                  StringValue: (*string)(<nil>),
                  SourceMeta: (*source.Meta)({
                    Line: (int) 100,
                    Column: (int) 16
                  })
                }),
                Fields: (map[string]*core.MappingNode) <nil>,
                Items: ([]*core.MappingNode) <nil>,
                StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                SourceMeta: (*source.Meta)({
                  Line: (int) 100,
                  Column: (int) 16
                }),
                FieldsSourceMeta: (map[string]*source.Meta) <nil>
              })
            },
            Items: ([]*core.MappingNode) <nil>,
            StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
            SourceMeta: (*source.Meta)({
              Line: (int) 99,
              Column: (int) 7
            }),
            FieldsSourceMeta: (map[string]*source.Meta) (len=2) {
              (string) (len=7) "handler": (*source.Meta)({
                Line: (int) 99,
                Column: (int) 7
              }),
              (string) (len=7) "timeout": (*source.Meta)({
                Line: (int) 100,
                Column: (int) 7
              })
            }
          }),
          SourceMeta: (*source.Meta)({
            Line: (int) 82,
            Column: (int) 5
          })
        }),
        (string) (len=16) "getOrdersHandler": (*schema.Resource)({
          Type: (*schema.ResourceTypeWrapper)({
            Value: (string) (len=16) "celerity/handler",
            SourceMeta: (*source.Meta)({
              Line: (int) 103,
              Column: (int) 11
            })
          }),
          Description: (*substitutions.StringOrSubstitutions)(<nil>),
          Metadata: (*schema.Metadata)({
            DisplayName: (*substitutions.StringOrSubstitutions)({
              Values: ([]*substitutions.StringOrSubstitution) (len=1) {
                (*substitutions.StringOrSubstitution)({
                  StringValue: (*string)((len=18) "Get Orders Handler"),
                  SubstitutionValue: (*substitutions.Substitution)(<nil>),
                  SourceMeta: (*source.Meta)({
                    Line: (int) 105,
                    Column: (int) 20
                  })
                })
              },
              SourceMeta: (*source.Meta)({
                Line: (int) 105,
                Column: (int) 20
              })
            }),
            Annotations: (*schema.StringOrSubstitutionsMap)(<nil>),
            Labels: (*schema.StringMap)({
              Values: (map[string]string) (len=1) {
                (string) (len=3) "app": (string) (len=8) "orderApi"
              },
              SourceMeta: (map[string]*source.Meta) (len=1) {
                (string) (len=3) "app": (*source.Meta)({
                  Line: (int) 107,
                  Column: (int) 9
                })
              }
            }),
            Custom: (*core.MappingNode)(<nil>),
            SourceMeta: (*source.Meta)({
              Line: (int) 105,
              Column: (int) 7
            })
          }),
          Condition: (*schema.Condition)(<nil>),
          Each: (*substitutions.StringOrSubstitutions)(<nil>),
          LinkSelector: (*schema.LinkSelector)(<nil>),
          Spec: (*core.MappingNode)({
            Literal: (*core.ScalarValue)(<nil>),
            Fields: (map[string]*core.MappingNode) (len=3) {
              (string) (len=8) "endpoint": (*core.MappingNode)({
                Literal: (*core.ScalarValue)(<nil>),
                Fields: (map[string]*core.MappingNode) (len=3) {
                  (string) (len=10) "authoriser": (*core.MappingNode)({
                    Literal: (*core.ScalarValue)(<nil>),
                    Fields: (map[string]*core.MappingNode) <nil>,
                    Items: ([]*core.MappingNode) <nil>,
                    StringWithSubstitutions: (*substitutions.StringOrSubstitutions)({
                      Values: ([]*substitutions.StringOrSubstitution) (len=1) {
                        (*substitutions.StringOrSubstitution)({
                          StringValue: (*string)(<nil>),
                          SubstitutionValue: (*substitutions.Substitution)({
                            Function: (*substitutions.SubstitutionFunctionExpr)(<nil>),
                            Variable: (*substitutions.SubstitutionVariable)(<nil>),
                            ValueReference: (*substitutions.SubstitutionValueReference)(<nil>),
                            ElemReference: (*substitutions.SubstitutionElemReference)(<nil>),
                            ElemIndexReference: (*substitutions.SubstitutionElemIndexReference)(<nil>),
                            DataSourceProperty: (*substitutions.SubstitutionDataSourceProperty)(<nil>),
                            ResourceProperty: (*substitutions.SubstitutionResourceProperty)({
                              ResourceName: (string) (len=10) "authoriser",
                              ResourceEachTemplateIndex: (*int64)(<nil>),
                              Path: ([]*substitutions.SubstitutionPathItem) {
                              },
                              SourceMeta: (*source.Meta)({
                                Line: (int) 114,
                                Column: (int) 23
                              })
                            }),
                            Child: (*substitutions.SubstitutionChild)(<nil>),
                            StringValue: (*string)(<nil>),
                            IntValue: (*int64)(<nil>),
                            FloatValue: (*float64)(<nil>),
                            BoolValue: (*bool)(<nil>),
                            SourceMeta: (*source.Meta)({
                              Line: (int) 114,
                              Column: (int) 23
                            })
                          }),
                          SourceMeta: (*source.Meta)({
                            Line: (int) 114,
                            Column: (int) 21
                          })
                        })
                      },
                      SourceMeta: (*source.Meta)({
                        Line: (int) 114,
                        Column: (int) 21
                      })
                    }),
                    SourceMeta: (*source.Meta)({
                      Line: (int) 114,
                      Column: (int) 21
                    }),
                    FieldsSourceMeta: (map[string]*source.Meta) <nil>
                  }),
                  (string) (len=6) "method": (*core.MappingNode)({
                    Literal: (*core.ScalarValue)({
                      IntValue: (*int)(<nil>),
                      BoolValue: (*bool)(<nil>),
                      FloatValue: (*float64)(<nil>),
                      StringValue: (*string)((len=3) "get"),
                      SourceMeta: (*source.Meta)({
                        Line: (int) 112,
                        Column: (int) 17
                      })
                    }),
                    Fields: (map[string]*core.MappingNode) <nil>,
                    Items: ([]*core.MappingNode) <nil>,
                    StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                    SourceMeta: (*source.Meta)({
                      Line: (int) 112,
                      Column: (int) 17
                    }),
                    FieldsSourceMeta: (map[string]*source.Meta) <nil>
                  }),
                  (string) (len=4) "path": (*core.MappingNode)({
                    Literal: (*core.ScalarValue)({
                      IntValue: (*int)(<nil>),
                      BoolValue: (*bool)(<nil>),
                      FloatValue: (*float64)(<nil>),
                      StringValue: (*string)((len=7) "/orders"),
                      SourceMeta: (*source.Meta)({
                        Line: (int) 113,
                        Column: (int) 15
                      })
                    }),
                    Fields: (map[string]*core.MappingNode) <nil>,
                    Items: ([]*core.MappingNode) <nil>,
                    StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                    SourceMeta: (*source.Meta)({
                      Line: (int) 113,
                      Column: (int) 15
                    }),
                    FieldsSourceMeta: (map[string]*source.Meta) <nil>
                  })
                },
                Items: ([]*core.MappingNode) <nil>,
                StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                SourceMeta: (*source.Meta)({
                  Line: (int) 112,
                  Column: (int) 9
                }),
                FieldsSourceMeta: (map[string]*source.Meta) (len=3) {
                  (string) (len=10) "authoriser": (*source.Meta)({
                    Line: (int) 114,
                    Column: (int) 9
                  }),
                  (string) (len=6) "method": (*source.Meta)({
                    Line: (int) 112,
                    Column: (int) 9
                  }),
                  (string) (len=4) "path": (*source.Meta)({
                    Line: (int) 113,
                    Column: (int) 9
                  })
                }
              }),
              (string) (len=7) "handler": (*core.MappingNode)({
                Literal: (*core.ScalarValue)({
                  IntValue: (*int)(<nil>),
                  BoolValue: (*bool)(<nil>),
                  FloatValue: (*float64)(<nil>),
                  StringValue: (*string)((len=18) "handlers.GetOrders"),
                  SourceMeta: (*source.Meta)({
                    Line: (int) 109,
                    Column: (int) 16
                  })
                }),
                Fields: (map[string]*core.MappingNode) <nil>,
                Items: ([]*core.MappingNode) <nil>,
                StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                SourceMeta: (*source.Meta)({
                  Line: (int) 109,
                  Column: (int) 16
                }),
                FieldsSourceMeta: (map[string]*source.Meta) <nil>
              }),
              (string) (len=7) "timeout": (*core.MappingNode)({
                Literal: (*core.ScalarValue)({
                  IntValue: (*int)(120),
                  BoolValue: (*bool)(<nil>),
                  FloatValue: (*float64)(<nil>),
                  StringValue: (*string)(<nil>),
                  SourceMeta: (*source.Meta)({
                    Line: (int) 110,
                    Column: (int) 16
                  })
                }),
                Fields: (map[string]*core.MappingNode) <nil>,
                Items: ([]*core.MappingNode) <nil>,
                StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                SourceMeta: (*source.Meta)({
                  Line: (int) 110,
                  Column: (int) 16
                }),
                FieldsSourceMeta: (map[string]*source.Meta) <nil>
              })
            },
            Items: ([]*core.MappingNode) <nil>,
            StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
            SourceMeta: (*source.Meta)({
              Line: (int) 109,
              Column: (int) 7
            }),
            FieldsSourceMeta: (map[string]*source.Meta) (len=3) {
              (string) (len=8) "endpoint": (*source.Meta)({
                Line: (int) 111,
                Column: (int) 7
              }),
              (string) (len=7) "handler": (*source.Meta)({
                Line: (int) 109,
                Column: (int) 7
              }),
              (string) (len=7) "timeout": (*source.Meta)({
                Line: (int) 110,
                Column: (int) 7
              })
            }
          }),
          SourceMeta: (*source.Meta)({
            Line: (int) 103,
            Column: (int) 5
          })
        }),
        (string) (len=8) "orderApi": (*schema.Resource)({
          Type: (*schema.ResourceTypeWrapper)({
            Value: (string) (len=12) "celerity/api",
            SourceMeta: (*source.Meta)({
              Line: (int) 37,
              Column: (int) 11
            })
          }),
          Description: (*substitutions.StringOrSubstitutions)(<nil>),
          Metadata: (*schema.Metadata)({
            DisplayName: (*substitutions.StringOrSubstitutions)({
              Values: ([]*substitutions.StringOrSubstitution) (len=1) {
                (*substitutions.StringOrSubstitution)({
                  StringValue: (*string)((len=9) "Order API"),
                  SubstitutionValue: (*substitutions.Substitution)(<nil>),
                  SourceMeta: (*source.Meta)({
                    Line: (int) 39,
                    Column: (int) 20
                  })
                })
              },
              SourceMeta: (*source.Meta)({
                Line: (int) 39,
                Column: (int) 20
              })
            }),
            Annotations: (*schema.StringOrSubstitutionsMap)(<nil>),
            Labels: (*schema.StringMap)({
              Values: (map[string]string) (len=1) {
                (string) (len=3) "app": (string) (len=8) "orderApi"
              },
              SourceMeta: (map[string]*source.Meta) (len=1) {
                (string) (len=3) "app": (*source.Meta)({
                  Line: (int) 41,
                  Column: (int) 9
                })
              }
            }),
            Custom: (*core.MappingNode)({
              Literal: (*core.ScalarValue)(<nil>),
              Fields: (map[string]*core.MappingNode) (len=1) {
                (string) (len=6) "visual": (*core.MappingNode)({
                  Literal: (*core.ScalarValue)(<nil>),
                  Fields: (map[string]*core.MappingNode) (len=4) {
                    (string) (len=6) "height": (*core.MappingNode)({
                      Literal: (*core.ScalarValue)({
                        IntValue: (*int)(50),
                        BoolValue: (*bool)(<nil>),
                        FloatValue: (*float64)(<nil>),
                        StringValue: (*string)(<nil>),
                        SourceMeta: (*source.Meta)({
                          Line: (int) 46,
                          Column: (int) 19
                        })
                      }),
                      Fields: (map[string]*core.MappingNode) <nil>,
                      Items: ([]*core.MappingNode) <nil>,
                      StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                      SourceMeta: (*source.Meta)({
                        Line: (int) 46,
                        Column: (int) 19
                      }),
                      FieldsSourceMeta: (map[string]*source.Meta) <nil>
                    }),
                    (string) (len=9) "linkPorts": (*core.MappingNode)({
                      Literal: (*core.ScalarValue)(<nil>),
                      Fields: (map[string]*core.MappingNode) <nil>,
                      Items: ([]*core.MappingNode) (len=1) {
                        (*core.MappingNode)({
                          Literal: (*core.ScalarValue)(<nil>),
                          Fields: (map[string]*core.MappingNode) (len=3) {
                            (string) (len=10) "annotation": (*core.MappingNode)({
                              Literal: (*core.ScalarValue)({
                                IntValue: (*int)(<nil>),
                                BoolValue: (*bool)(<nil>),
                                FloatValue: (*float64)(<nil>),
                                StringValue: (*string)((len=10) "Orders API"),
                                SourceMeta: (*source.Meta)({
                                  Line: (int) 50,
                                  Column: (int) 27
                                })
                              }),
                              Fields: (map[string]*core.MappingNode) <nil>,
                              Items: ([]*core.MappingNode) <nil>,
                              StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                              SourceMeta: (*source.Meta)({
                                Line: (int) 50,
                                Column: (int) 27
                              }),
                              FieldsSourceMeta: (map[string]*source.Meta) <nil>
                            }),
                            (string) (len=9) "connectAt": (*core.MappingNode)({
                              Literal: (*core.ScalarValue)({
                                IntValue: (*int)(<nil>),
                                BoolValue: (*bool)(<nil>),
                                FloatValue: (*float64)(<nil>),
                                StringValue: (*string)((len=6) "70 100"),
                                SourceMeta: (*source.Meta)({
                                  Line: (int) 49,
                                  Column: (int) 26
                                })
                              }),
                              Fields: (map[string]*core.MappingNode) <nil>,
                              Items: ([]*core.MappingNode) <nil>,
                              StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                              SourceMeta: (*source.Meta)({
                                Line: (int) 49,
                                Column: (int) 26
                              }),
                              FieldsSourceMeta: (map[string]*source.Meta) <nil>
                            }),
                            (string) (len=6) "linkTo": (*core.MappingNode)({
                              Literal: (*core.ScalarValue)({
                                IntValue: (*int)(<nil>),
                                BoolValue: (*bool)(<nil>),
                                FloatValue: (*float64)(<nil>),
                                StringValue: (*string)((len=16) "getOrderEndpoint"),
                                SourceMeta: (*source.Meta)({
                                  Line: (int) 48,
                                  Column: (int) 23
                                })
                              }),
                              Fields: (map[string]*core.MappingNode) <nil>,
                              Items: ([]*core.MappingNode) <nil>,
                              StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                              SourceMeta: (*source.Meta)({
                                Line: (int) 48,
                                Column: (int) 23
                              }),
                              FieldsSourceMeta: (map[string]*source.Meta) <nil>
                            })
                          },
                          Items: ([]*core.MappingNode) <nil>,
                          StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                          SourceMeta: (*source.Meta)({
                            Line: (int) 48,
                            Column: (int) 15
                          }),
                          FieldsSourceMeta: (map[string]*source.Meta) (len=3) {
                            (string) (len=10) "annotation": (*source.Meta)({
                              Line: (int) 50,
                              Column: (int) 15
                            }),
                            (string) (len=9) "connectAt": (*source.Meta)({
                              Line: (int) 49,
                              Column: (int) 15
                            }),
                            (string) (len=6) "linkTo": (*source.Meta)({
                              Line: (int) 48,
                              Column: (int) 15
                            })
                          }
                        })
                      },
                      StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                      SourceMeta: (*source.Meta)({
                        Line: (int) 48,
                        Column: (int) 13
                      }),
                      FieldsSourceMeta: (map[string]*source.Meta) <nil>
                    }),
                    (string) (len=5) "point": (*core.MappingNode)({
                      Literal: (*core.ScalarValue)({
                        IntValue: (*int)(<nil>),
                        BoolValue: (*bool)(<nil>),
                        FloatValue: (*float64)(<nil>),
                        StringValue: (*string)((len=6) "20 100"),
                        SourceMeta: (*source.Meta)({
                          Line: (int) 44,
                          Column: (int) 18
                        })
                      }),
                      Fields: (map[string]*core.MappingNode) <nil>,
                      Items: ([]*core.MappingNode) <nil>,
                      StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                      SourceMeta: (*source.Meta)({
                        Line: (int) 44,
                        Column: (int) 18
                      }),
                      FieldsSourceMeta: (map[string]*source.Meta) <nil>
                    }),
                    (string) (len=5) "width": (*core.MappingNode)({
                      Literal: (*core.ScalarValue)({
                        IntValue: (*int)(50),
                        BoolValue: (*bool)(<nil>),
                        FloatValue: (*float64)(<nil>),
                        StringValue: (*string)(<nil>),
                        SourceMeta: (*source.Meta)({
                          Line: (int) 45,
                          Column: (int) 18
                        })
                      }),
                      Fields: (map[string]*core.MappingNode) <nil>,
                      Items: ([]*core.MappingNode) <nil>,
                      StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                      SourceMeta: (*source.Meta)({
                        Line: (int) 45,
                        Column: (int) 18
                      }),
                      FieldsSourceMeta: (map[string]*source.Meta) <nil>
                    })
                  },
                  Items: ([]*core.MappingNode) <nil>,
                  StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                  SourceMeta: (*source.Meta)({
                    Line: (int) 44,
                    Column: (int) 11
                  }),
                  FieldsSourceMeta: (map[string]*source.Meta) (len=4) {
                    (string) (len=6) "height": (*source.Meta)({
                      Line: (int) 46,
                      Column: (int) 11
                    }),
                    (string) (len=9) "linkPorts": (*source.Meta)({
                      Line: (int) 47,
                      Column: (int) 11
                    }),
                    (string) (len=5) "point": (*source.Meta)({
                      Line: (int) 44,
                      Column: (int) 11
                    }),
                    (string) (len=5) "width": (*source.Meta)({
                      Line: (int) 45,
                      Column: (int) 11
                    })
                  }
                })
              },
              Items: ([]*core.MappingNode) <nil>,
              StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
              SourceMeta: (*source.Meta)({
                Line: (int) 43,
                Column: (int) 9
              }),
              FieldsSourceMeta: (map[string]*source.Meta) (len=1) {
                (string) (len=6) "visual": (*source.Meta)({
                  Line: (int) 43,
                  Column: (int) 9
                })
              }
            }),
            SourceMeta: (*source.Meta)({
              Line: (int) 39,
              Column: (int) 7
            })
          }),
          Condition: (*schema.Condition)(<nil>),
          Each: (*substitutions.StringOrSubstitutions)(<nil>),
          LinkSelector: (*schema.LinkSelector)({
            ByLabel: (*schema.StringMap)({
              Values: (map[string]string) (len=1) {
                (string) (len=3) "app": (string) (len=8) "orderApi"
              },
              SourceMeta: (map[string]*source.Meta) (len=1) {
                (string) (len=3) "app": (*source.Meta)({
                  Line: (int) 53,
                  Column: (int) 9
                })
              }
            }),
            SourceMeta: (*source.Meta)({
              Line: (int) 52,
              Column: (int) 7
            })
          }),
          Spec: (*core.MappingNode)({
            Literal: (*core.ScalarValue)(<nil>),
            Fields: (map[string]*core.MappingNode) (len=3) {
              (string) (len=11) "environment": (*core.MappingNode)({
                Literal: (*core.ScalarValue)(<nil>),
                Fields: (map[string]*core.MappingNode) (len=1) {
                  (string) (len=9) "variables": (*core.MappingNode)({
                    Literal: (*core.ScalarValue)(<nil>),
                    Fields: (map[string]*core.MappingNode) (len=1) {
                      (string) (len=14) "DYNAMODB_TABLE": (*core.MappingNode)({
                        Literal: (*core.ScalarValue)(<nil>),
                        Fields: (map[string]*core.MappingNode) <nil>,
                        Items: ([]*core.MappingNode) <nil>,
                        StringWithSubstitutions: (*substitutions.StringOrSubstitutions)({
                          Values: ([]*substitutions.StringOrSubstitution) (len=1) {
                            (*substitutions.StringOrSubstitution)({
                              StringValue: (*string)(<nil>),
                              SubstitutionValue: (*substitutions.Substitution)({
                                Function: (*substitutions.SubstitutionFunctionExpr)(<nil>),
                                Variable: (*substitutions.SubstitutionVariable)({
                                  VariableName: (string) (len=13) "dynamoDBTable",
                                  SourceMeta: (*source.Meta)({
                                    Line: (int) 66,
                                    Column: (int) 29
                                  })
                                }),
                                ValueReference: (*substitutions.SubstitutionValueReference)(<nil>),
                                ElemReference: (*substitutions.SubstitutionElemReference)(<nil>),
                                ElemIndexReference: (*substitutions.SubstitutionElemIndexReference)(<nil>),
                                DataSourceProperty: (*substitutions.SubstitutionDataSourceProperty)(<nil>),
                                ResourceProperty: (*substitutions.SubstitutionResourceProperty)(<nil>),
                                Child: (*substitutions.SubstitutionChild)(<nil>),
                                StringValue: (*string)(<nil>),
                                IntValue: (*int64)(<nil>),
                                FloatValue: (*float64)(<nil>),
                                BoolValue: (*bool)(<nil>),
                                SourceMeta: (*source.Meta)({
                                  Line: (int) 66,
                                  Column: (int) 29
                                })
                              }),
                              SourceMeta: (*source.Meta)({
                                Line: (int) 66,
                                Column: (int) 27
                              })
                            })
                          },
                          SourceMeta: (*source.Meta)({
                            Line: (int) 66,
                            Column: (int) 27
                          })
                        }),
                        SourceMeta: (*source.Meta)({
                          Line: (int) 66,
                          Column: (int) 27
                        }),
                        FieldsSourceMeta: (map[string]*source.Meta) <nil>
                      })
                    },
                    Items: ([]*core.MappingNode) <nil>,
                    StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                    SourceMeta: (*source.Meta)({
                      Line: (int) 66,
                      Column: (int) 11
                    }),
                    FieldsSourceMeta: (map[string]*source.Meta) (len=1) {
                      (string) (len=14) "DYNAMODB_TABLE": (*source.Meta)({
                        Line: (int) 66,
                        Column: (int) 11
                      })
                    }
                  })
                },
                Items: ([]*core.MappingNode) <nil>,
                StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                SourceMeta: (*source.Meta)({
                  Line: (int) 65,
                  Column: (int) 9
                }),
                FieldsSourceMeta: (map[string]*source.Meta) (len=1) {
                  (string) (len=9) "variables": (*source.Meta)({
                    Line: (int) 65,
                    Column: (int) 9
                  })
                }
              }),
              (string) (len=7) "runtime": (*core.MappingNode)({
                Literal: (*core.ScalarValue)({
                  IntValue: (*int)(<nil>),
                  BoolValue: (*bool)(<nil>),
                  FloatValue: (*float64)(<nil>),
                  StringValue: (*string)((len=5) "go1.x"),
                  SourceMeta: (*source.Meta)({
                    Line: (int) 71,
                    Column: (int) 16
                  })
                }),
                Fields: (map[string]*core.MappingNode) <nil>,
                Items: ([]*core.MappingNode) <nil>,
                StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                SourceMeta: (*source.Meta)({
                  Line: (int) 71,
                  Column: (int) 16
                }),
                FieldsSourceMeta: (map[string]*source.Meta) <nil>
              }),
              (string) (len=14) "tracingEnabled": (*core.MappingNode)({
                Literal: (*core.ScalarValue)({
                  IntValue: (*int)(<nil>),
                  BoolValue: (*bool)(true),
                  FloatValue: (*float64)(<nil>),
                  StringValue: (*string)(<nil>),
                  SourceMeta: (*source.Meta)({
                    Line: (int) 74,
                    Column: (int) 23
                  })
                }),
                Fields: (map[string]*core.MappingNode) <nil>,
                Items: ([]*core.MappingNode) <nil>,
                StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                SourceMeta: (*source.Meta)({
                  Line: (int) 74,
                  Column: (int) 23
                }),
                FieldsSourceMeta: (map[string]*source.Meta) <nil>
              })
            },
            Items: ([]*core.MappingNode) <nil>,
            StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
            SourceMeta: (*source.Meta)({
              Line: (int) 64,
              Column: (int) 7
            }),
            FieldsSourceMeta: (map[string]*source.Meta) (len=3) {
              (string) (len=11) "environment": (*source.Meta)({
                Line: (int) 64,
                Column: (int) 7
              }),
              (string) (len=7) "runtime": (*source.Meta)({
                Line: (int) 71,
                Column: (int) 7
              }),
              (string) (len=14) "tracingEnabled": (*source.Meta)({
                Line: (int) 74,
                Column: (int) 7
              })
            }
          }),
          SourceMeta: (*source.Meta)({
            Line: (int) 37,
            Column: (int) 5
          })
        }),
        (string) (len=11) "orderPubSub": (*schema.Resource)({
          Type: (*schema.ResourceTypeWrapper)({
            Value: (string) (len=15) "celerity/pubsub",
            SourceMeta: (*source.Meta)({
              Line: (int) 161,
              Column: (int) 11
            })
          }),
          Description: (*substitutions.StringOrSubstitutions)(<nil>),
          Metadata: (*schema.Metadata)({
            DisplayName: (*substitutions.StringOrSubstitutions)({
              Values: ([]*substitutions.StringOrSubstitution) (len=1) {
                (*substitutions.StringOrSubstitution)({
                  StringValue: (*string)((len=13) "Order Pub/Sub"),
                  SubstitutionValue: (*substitutions.Substitution)(<nil>),
                  SourceMeta: (*source.Meta)({
                    Line: (int) 163,
                    Column: (int) 20
                  })
                })
              },
              SourceMeta: (*source.Meta)({
                Line: (int) 163,
                Column: (int) 20
              })
            }),
            Annotations: (*schema.StringOrSubstitutionsMap)(<nil>),
            Labels: (*schema.StringMap)({
              Values: (map[string]string) (len=1) {
                (string) (len=8) "workflow": (string) (len=11) "orderPubSub"
              },
              SourceMeta: (map[string]*source.Meta) (len=1) {
                (string) (len=8) "workflow": (*source.Meta)({
                  Line: (int) 165,
                  Column: (int) 9
                })
              }
            }),
            Custom: (*core.MappingNode)(<nil>),
            SourceMeta: (*source.Meta)({
              Line: (int) 163,
              Column: (int) 7
            })
          }),
          Condition: (*schema.Condition)(<nil>),
          Each: (*substitutions.StringOrSubstitutions)(<nil>),
          LinkSelector: (*schema.LinkSelector)({
            ByLabel: (*schema.StringMap)({
              Values: (map[string]string) (len=1) {
                (string) (len=8) "workflow": (string) (len=11) "orderPubSub"
              },
              SourceMeta: (map[string]*source.Meta) (len=1) {
                (string) (len=8) "workflow": (*source.Meta)({
                  Line: (int) 168,
                  Column: (int) 9
                })
              }
            }),
            SourceMeta: (*source.Meta)({
              Line: (int) 167,
              Column: (int) 7
            })
          }),
          Spec: (*core.MappingNode)({
            Literal: (*core.ScalarValue)(<nil>),
            Fields: (map[string]*core.MappingNode) (len=1) {
              (string) (len=9) "topicName": (*core.MappingNode)({
                Literal: (*core.ScalarValue)(<nil>),
                Fields: (map[string]*core.MappingNode) <nil>,
                Items: ([]*core.MappingNode) <nil>,
                StringWithSubstitutions: (*substitutions.StringOrSubstitutions)({
                  Values: ([]*substitutions.StringOrSubstitution) (len=1) {
                    (*substitutions.StringOrSubstitution)({
                      StringValue: (*string)(<nil>),
                      SubstitutionValue: (*substitutions.Substitution)({
                        Function: (*substitutions.SubstitutionFunctionExpr)(<nil>),
                        Variable: (*substitutions.SubstitutionVariable)({
                          VariableName: (string) (len=15) "ordersTopicName",
                          SourceMeta: (*source.Meta)({
                            Line: (int) 170,
                            Column: (int) 20
                          })
                        }),
                        ValueReference: (*substitutions.SubstitutionValueReference)(<nil>),
                        ElemReference: (*substitutions.SubstitutionElemReference)(<nil>),
                        ElemIndexReference: (*substitutions.SubstitutionElemIndexReference)(<nil>),
                        DataSourceProperty: (*substitutions.SubstitutionDataSourceProperty)(<nil>),
                        ResourceProperty: (*substitutions.SubstitutionResourceProperty)(<nil>),
                        Child: (*substitutions.SubstitutionChild)(<nil>),
                        StringValue: (*string)(<nil>),
                        IntValue: (*int64)(<nil>),
                        FloatValue: (*float64)(<nil>),
                        BoolValue: (*bool)(<nil>),
                        SourceMeta: (*source.Meta)({
                          Line: (int) 170,
                          Column: (int) 20
                        })
                      }),
                      SourceMeta: (*source.Meta)({
                        Line: (int) 170,
                        Column: (int) 18
                      })
                    })
                  },
                  SourceMeta: (*source.Meta)({
                    Line: (int) 170,
                    Column: (int) 18
                  })
                }),
                SourceMeta: (*source.Meta)({
                  Line: (int) 170,
                  Column: (int) 18
                }),
                FieldsSourceMeta: (map[string]*source.Meta) <nil>
              })
            },
            Items: ([]*core.MappingNode) <nil>,
            StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
            SourceMeta: (*source.Meta)({
              Line: (int) 170,
              Column: (int) 7
            }),
            FieldsSourceMeta: (map[string]*source.Meta) (len=1) {
              (string) (len=9) "topicName": (*source.Meta)({
                Line: (int) 170,
                Column: (int) 7
              })
            }
          }),
          SourceMeta: (*source.Meta)({
            Line: (int) 161,
            Column: (int) 5
          })
        }),
        (string) (len=19) "sharedPackagesLayer": (*schema.Resource)({
          Type: (*schema.ResourceTypeWrapper)({
            Value: (string) (len=21) "celerity/layerVersion",
            SourceMeta: (*source.Meta)({
              Line: (int) 145,
              Column: (int) 11
            })
          }),
          Description: (*substitutions.StringOrSubstitutions)(<nil>),
          Metadata: (*schema.Metadata)({
            DisplayName: (*substitutions.StringOrSubstitutions)({
              Values: ([]*substitutions.StringOrSubstitution) (len=1) {
                (*substitutions.StringOrSubstitution)({
                  StringValue: (*string)((len=21) "Shared Packages Layer"),
                  SubstitutionValue: (*substitutions.Substitution)(<nil>),
                  SourceMeta: (*source.Meta)({
                    Line: (int) 147,
                    Column: (int) 20
                  })
                })
              },
              SourceMeta: (*source.Meta)({
                Line: (int) 147,
                Column: (int) 20
              })
            }),
            Annotations: (*schema.StringOrSubstitutionsMap)(<nil>),
            Labels: (*schema.StringMap)({
              Values: (map[string]string) (len=2) {
                (string) (len=3) "app": (string) (len=8) "orderApi",
                (string) (len=8) "workflow": (string) (len=11) "orderPubSub"
              },
              SourceMeta: (map[string]*source.Meta) (len=2) {
                (string) (len=3) "app": (*source.Meta)({
                  Line: (int) 150,
                  Column: (int) 9
                }),
                (string) (len=8) "workflow": (*source.Meta)({
                  Line: (int) 149,
                  Column: (int) 9
                })
              }
            }),
            Custom: (*core.MappingNode)(<nil>),
            SourceMeta: (*source.Meta)({
              Line: (int) 147,
              Column: (int) 7
            })
          }),
          Condition: (*schema.Condition)(<nil>),
          Each: (*substitutions.StringOrSubstitutions)(<nil>),
          LinkSelector: (*schema.LinkSelector)(<nil>),
          Spec: (*core.MappingNode)({
            Literal: (*core.ScalarValue)(<nil>),
            Fields: (map[string]*core.MappingNode) (len=3) {
              (string) (len=18) "compatibleRuntimes": (*core.MappingNode)({
                Literal: (*core.ScalarValue)(<nil>),
                Fields: (map[string]*core.MappingNode) <nil>,
                Items: ([]*core.MappingNode) (len=1) {
                  (*core.MappingNode)({
                    Literal: (*core.ScalarValue)({
                      IntValue: (*int)(<nil>),
                      BoolValue: (*bool)(<nil>),
                      FloatValue: (*float64)(<nil>),
                      StringValue: (*string)((len=5) "go1.x"),
                      SourceMeta: (*source.Meta)({
                        Line: (int) 152,
                        Column: (int) 28
                      })
                    }),
                    Fields: (map[string]*core.MappingNode) <nil>,
                    Items: ([]*core.MappingNode) <nil>,
                    StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                    SourceMeta: (*source.Meta)({
                      Line: (int) 152,
                      Column: (int) 28
                    }),
                    FieldsSourceMeta: (map[string]*source.Meta) <nil>
                  })
                },
                StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                SourceMeta: (*source.Meta)({
                  Line: (int) 152,
                  Column: (int) 27
                }),
                FieldsSourceMeta: (map[string]*source.Meta) <nil>
              }),
              (string) (len=7) "content": (*core.MappingNode)({
                Literal: (*core.ScalarValue)({
                  IntValue: (*int)(<nil>),
                  BoolValue: (*bool)(<nil>),
                  FloatValue: (*float64)(<nil>),
                  StringValue: (*string)((len=27) "build/shared-packages-layer"),
                  SourceMeta: (*source.Meta)({
                    Line: (int) 155,
                    Column: (int) 16
                  })
                }),
                Fields: (map[string]*core.MappingNode) <nil>,
                Items: ([]*core.MappingNode) <nil>,
                StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                SourceMeta: (*source.Meta)({
                  Line: (int) 155,
                  Column: (int) 16
                }),
                FieldsSourceMeta: (map[string]*source.Meta) <nil>
              }),
              (string) (len=9) "layerName": (*core.MappingNode)({
                Literal: (*core.ScalarValue)({
                  IntValue: (*int)(<nil>),
                  BoolValue: (*bool)(<nil>),
                  FloatValue: (*float64)(<nil>),
                  StringValue: (*string)((len=19) "sharedPackagesLayer"),
                  SourceMeta: (*source.Meta)({
                    Line: (int) 156,
                    Column: (int) 18
                  })
                }),
                Fields: (map[string]*core.MappingNode) <nil>,
                Items: ([]*core.MappingNode) <nil>,
                StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                SourceMeta: (*source.Meta)({
                  Line: (int) 156,
                  Column: (int) 18
                }),
                FieldsSourceMeta: (map[string]*source.Meta) <nil>
              })
            },
            Items: ([]*core.MappingNode) <nil>,
            StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
            SourceMeta: (*source.Meta)({
              Line: (int) 152,
              Column: (int) 7
            }),
            FieldsSourceMeta: (map[string]*source.Meta) (len=3) {
              (string) (len=18) "compatibleRuntimes": (*source.Meta)({
                Line: (int) 152,
                Column: (int) 7
              }),
              (string) (len=7) "content": (*source.Meta)({
                Line: (int) 155,
                Column: (int) 7
              }),
              (string) (len=9) "layerName": (*source.Meta)({
                Line: (int) 156,
                Column: (int) 7
              })
            }
          }),
          SourceMeta: (*source.Meta)({
            Line: (int) 145,
            Column: (int) 5
          })
        }),
        (string) (len=19) "updateOrderFunction": (*schema.Resource)({
          Type: (*schema.ResourceTypeWrapper)({
            Value: (string) (len=16) "celerity/handler",
            SourceMeta: (*source.Meta)({
              Line: (int) 118,
              Column: (int) 11
            })
          }),
          Description: (*substitutions.StringOrSubstitutions)(<nil>),
          Metadata: (*schema.Metadata)({
            DisplayName: (*substitutions.StringOrSubstitutions)({
              Values: ([]*substitutions.StringOrSubstitution) (len=1) {
                (*substitutions.StringOrSubstitution)({
                  StringValue: (*string)((len=21) "Update Order Function"),
                  SubstitutionValue: (*substitutions.Substitution)(<nil>),
                  SourceMeta: (*source.Meta)({
                    Line: (int) 120,
                    Column: (int) 20
                  })
                })
              },
              SourceMeta: (*source.Meta)({
                Line: (int) 120,
                Column: (int) 20
              })
            }),
            Annotations: (*schema.StringOrSubstitutionsMap)(<nil>),
            Labels: (*schema.StringMap)({
              Values: (map[string]string) (len=2) {
                (string) (len=10) "pubsubType": (string) (len=8) "consumer",
                (string) (len=8) "workflow": (string) (len=11) "orderPubSub"
              },
              SourceMeta: (map[string]*source.Meta) (len=2) {
                (string) (len=10) "pubsubType": (*source.Meta)({
                  Line: (int) 127,
                  Column: (int) 9
                }),
                (string) (len=8) "workflow": (*source.Meta)({
                  Line: (int) 122,
                  Column: (int) 9
                })
              }
            }),
            Custom: (*core.MappingNode)(<nil>),
            SourceMeta: (*source.Meta)({
              Line: (int) 120,
              Column: (int) 7
            })
          }),
          Condition: (*schema.Condition)(<nil>),
          Each: (*substitutions.StringOrSubstitutions)(<nil>),
          LinkSelector: (*schema.LinkSelector)(<nil>),
          Spec: (*core.MappingNode)({
            Literal: (*core.ScalarValue)(<nil>),
            Fields: (map[string]*core.MappingNode) (len=3) {
              (string) (len=6) "events": (*core.MappingNode)({
                Literal: (*core.ScalarValue)(<nil>),
                Fields: (map[string]*core.MappingNode) (len=1) {
                  (string) (len=10) "orderEvent": (*core.MappingNode)({
                    Literal: (*core.ScalarValue)(<nil>),
                    Fields: (map[string]*core.MappingNode) (len=2) {
                      (string) (len=9) "batchSize": (*core.MappingNode)({
                        Literal: (*core.ScalarValue)({
                          IntValue: (*int)(10),
                          BoolValue: (*bool)(<nil>),
                          FloatValue: (*float64)(<nil>),
                          StringValue: (*string)(<nil>),
                          SourceMeta: (*source.Meta)({
                            Line: (int) 136,
                            Column: (int) 22
                          })
                        }),
                        Fields: (map[string]*core.MappingNode) <nil>,
                        Items: ([]*core.MappingNode) <nil>,
                        StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                        SourceMeta: (*source.Meta)({
                          Line: (int) 136,
                          Column: (int) 22
                        }),
                        FieldsSourceMeta: (map[string]*source.Meta) <nil>
                      }),
                      (string) (len=4) "type": (*core.MappingNode)({
                        Literal: (*core.ScalarValue)({
                          IntValue: (*int)(<nil>),
                          BoolValue: (*bool)(<nil>),
                          FloatValue: (*float64)(<nil>),
                          StringValue: (*string)((len=6) "pubsub"),
                          SourceMeta: (*source.Meta)({
                            Line: (int) 133,
                            Column: (int) 17
                          })
                        }),
                        Fields: (map[string]*core.MappingNode) <nil>,
                        Items: ([]*core.MappingNode) <nil>,
                        StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                        SourceMeta: (*source.Meta)({
                          Line: (int) 133,
                          Column: (int) 17
                        }),
                        FieldsSourceMeta: (map[string]*source.Meta) <nil>
                      })
                    },
                    Items: ([]*core.MappingNode) <nil>,
                    StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                    SourceMeta: (*source.Meta)({
                      Line: (int) 133,
                      Column: (int) 11
                    }),
                    FieldsSourceMeta: (map[string]*source.Meta) (len=2) {
                      (string) (len=9) "batchSize": (*source.Meta)({
                        Line: (int) 136,
                        Column: (int) 11
                      }),
                      (string) (len=4) "type": (*source.Meta)({
                        Line: (int) 133,
                        Column: (int) 11
                      })
                    }
                  })
                },
                Items: ([]*core.MappingNode) <nil>,
                StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                SourceMeta: (*source.Meta)({
                  Line: (int) 132,
                  Column: (int) 9
                }),
                FieldsSourceMeta: (map[string]*source.Meta) (len=1) {
                  (string) (len=10) "orderEvent": (*source.Meta)({
                    Line: (int) 132,
                    Column: (int) 9
                  })
                }
              }),
              (string) (len=7) "handler": (*core.MappingNode)({
                Literal: (*core.ScalarValue)({
                  IntValue: (*int)(<nil>),
                  BoolValue: (*bool)(<nil>),
                  FloatValue: (*float64)(<nil>),
                  StringValue: (*string)((len=20) "handlers.UpdateOrder"),
                  SourceMeta: (*source.Meta)({
                    Line: (int) 129,
                    Column: (int) 16
                  })
                }),
                Fields: (map[string]*core.MappingNode) <nil>,
                Items: ([]*core.MappingNode) <nil>,
                StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                SourceMeta: (*source.Meta)({
                  Line: (int) 129,
                  Column: (int) 16
                }),
                FieldsSourceMeta: (map[string]*source.Meta) <nil>
              }),
              (string) (len=7) "timeout": (*core.MappingNode)({
                Literal: (*core.ScalarValue)({
                  IntValue: (*int)(120),
                  BoolValue: (*bool)(<nil>),
                  FloatValue: (*float64)(<nil>),
                  StringValue: (*string)(<nil>),
                  SourceMeta: (*source.Meta)({
                    Line: (int) 130,
                    Column: (int) 16
                  })
                }),
                Fields: (map[string]*core.MappingNode) <nil>,
                Items: ([]*core.MappingNode) <nil>,
                StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                SourceMeta: (*source.Meta)({
                  Line: (int) 130,
                  Column: (int) 16
                }),
                FieldsSourceMeta: (map[string]*source.Meta) <nil>
              })
            },
            Items: ([]*core.MappingNode) <nil>,
            StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
            SourceMeta: (*source.Meta)({
              Line: (int) 129,
              Column: (int) 7
            }),
            FieldsSourceMeta: (map[string]*source.Meta) (len=3) {
              (string) (len=6) "events": (*source.Meta)({
                Line: (int) 131,
                Column: (int) 7
              }),
              (string) (len=7) "handler": (*source.Meta)({
                Line: (int) 129,
                Column: (int) 7
              }),
              (string) (len=7) "timeout": (*source.Meta)({
                Line: (int) 130,
                Column: (int) 7
              })
            }
          }),
          SourceMeta: (*source.Meta)({
            Line: (int) 118,
            Column: (int) 5
          })
        })
      },
      SourceMeta: (map[string]*source.Meta) (len=6) {
        (string) (len=10) "authoriser": (*source.Meta)({
          Line: (int) 81,
          Column: (int) 3
        }),
        (string) (len=16) "getOrdersHandler": (*source.Meta)({
          Line: (int) 102,
          Column: (int) 3
        }),
        (string) (len=8) "orderApi": (*source.Meta)({
          Line: (int) 34,
          Column: (int) 3
        }),
        (string) (len=11) "orderPubSub": (*source.Meta)({
          Line: (int) 157,
          Column: (int) 3
        }),
        (string) (len=19) "sharedPackagesLayer": (*source.Meta)({
          Line: (int) 138,
          Column: (int) 3
        }),
        (string) (len=19) "updateOrderFunction": (*source.Meta)({
          Line: (int) 117,
          Column: (int) 3
        })
      }
    }),
    DataSources: (*schema.DataSourceMap)({
      Values: (map[string]*schema.DataSource) (len=1) {
        (string) (len=7) "network": (*schema.DataSource)({
          Type: (*schema.DataSourceTypeWrapper)({
            Value: (string) (len=7) "aws/vpc",
            SourceMeta: (*source.Meta)({
              Line: (int) 16,
              Column: (int) 11
            })
          }),
          DataSourceMetadata: (*schema.DataSourceMetadata)({
            DisplayName: (*substitutions.StringOrSubstitutions)({
              Values: ([]*substitutions.StringOrSubstitution) (len=1) {
                (*substitutions.StringOrSubstitution)({
                  StringValue: (*string)((len=14) "Network source"),
                  SubstitutionValue: (*substitutions.Substitution)(<nil>),
                  SourceMeta: (*source.Meta)({
                    Line: (int) 18,
                    Column: (int) 20
                  })
                })
              },
              SourceMeta: (*source.Meta)({
                Line: (int) 18,
                Column: (int) 20
              })
            }),
            Annotations: (*schema.StringOrSubstitutionsMap)(<nil>),
            Custom: (*core.MappingNode)(<nil>),
            SourceMeta: (*source.Meta)({
              Line: (int) 18,
              Column: (int) 7
            })
          }),
          Filter: (*schema.DataSourceFilter)({
            Field: (*core.ScalarValue)({
              IntValue: (*int)(<nil>),
              BoolValue: (*bool)(<nil>),
              FloatValue: (*float64)(<nil>),
              StringValue: (*string)((len=4) "tags"),
              SourceMeta: (*source.Meta)({
                Line: (int) 20,
                Column: (int) 14
              })
            }),
            Operator: (*schema.DataSourceFilterOperatorWrapper)({
              Value: (schema.DataSourceFilterOperator) (len=7) "has key",
              SourceMeta: (*source.Meta)({
                Line: (int) 21,
                Column: (int) 17
              })
            }),
            Search: (*schema.DataSourceFilterSearch)({
              Values: ([]*substitutions.StringOrSubstitutions) (len=1) {
                (*substitutions.StringOrSubstitutions)({
                  Values: ([]*substitutions.StringOrSubstitution) (len=1) {
                    (*substitutions.StringOrSubstitution)({
                      StringValue: (*string)(<nil>),
                      SubstitutionValue: (*substitutions.Substitution)({
                        Function: (*substitutions.SubstitutionFunctionExpr)(<nil>),
                        Variable: (*substitutions.SubstitutionVariable)({
                          VariableName: (string) (len=11) "environment",
                          SourceMeta: (*source.Meta)({
                            Line: (int) 22,
                            Column: (int) 17
                          })
                        }),
                        ValueReference: (*substitutions.SubstitutionValueReference)(<nil>),
                        ElemReference: (*substitutions.SubstitutionElemReference)(<nil>),
                        ElemIndexReference: (*substitutions.SubstitutionElemIndexReference)(<nil>),
                        DataSourceProperty: (*substitutions.SubstitutionDataSourceProperty)(<nil>),
                        ResourceProperty: (*substitutions.SubstitutionResourceProperty)(<nil>),
                        Child: (*substitutions.SubstitutionChild)(<nil>),
                        StringValue: (*string)(<nil>),
                        IntValue: (*int64)(<nil>),
                        FloatValue: (*float64)(<nil>),
                        BoolValue: (*bool)(<nil>),
                        SourceMeta: (*source.Meta)({
                          Line: (int) 22,
                          Column: (int) 17
                        })
                      }),
                      SourceMeta: (*source.Meta)({
                        Line: (int) 22,
                        Column: (int) 15
                      })
                    })
                  },
                  SourceMeta: (*source.Meta)({
                    Line: (int) 22,
                    Column: (int) 15
                  })
                })
              },
              SourceMeta: (*source.Meta)({
                Line: (int) 22,
                Column: (int) 15
              })
            }),
            SourceMeta: (*source.Meta)({
              Line: (int) 20,
              Column: (int) 7
            })
          }),
          Exports: (*schema.DataSourceFieldExportMap)({
            Values: (map[string]*schema.DataSourceFieldExport) (len=3) {
              (string) (len=14) "securityGroups": (*schema.DataSourceFieldExport)({
                Type: (*schema.DataSourceFieldTypeWrapper)({
                  Value: (schema.DataSourceFieldType) (len=5) "array",
                  SourceMeta: (*source.Meta)({
                    Line: (int) 27,
                    Column: (int) 15
                  })
                }),
                AliasFor: (*core.ScalarValue)(<nil>),
                Description: (*substitutions.StringOrSubstitutions)(<nil>),
                SourceMeta: (*source.Meta)({
                  Line: (int) 27,
                  Column: (int) 9
                })
              }),
              (string) (len=7) "subnets": (*schema.DataSourceFieldExport)({
                Type: (*schema.DataSourceFieldTypeWrapper)({
                  Value: (schema.DataSourceFieldType) (len=5) "array",
                  SourceMeta: (*source.Meta)({
                    Line: (int) 25,
                    Column: (int) 15
                  })
                }),
                AliasFor: (*core.ScalarValue)(<nil>),
                Description: (*substitutions.StringOrSubstitutions)(<nil>),
                SourceMeta: (*source.Meta)({
                  Line: (int) 25,
                  Column: (int) 9
                })
              }),
              (string) (len=3) "vpc": (*schema.DataSourceFieldExport)({
                Type: (*schema.DataSourceFieldTypeWrapper)({
                  Value: (schema.DataSourceFieldType) (len=6) "string",
                  SourceMeta: (*source.Meta)({
                    Line: (int) 29,
                    Column: (int) 15
                  })
                }),
                AliasFor: (*core.ScalarValue)(<nil>),
                Description: (*substitutions.StringOrSubstitutions)(<nil>),
                SourceMeta: (*source.Meta)({
                  Line: (int) 29,
                  Column: (int) 9
                })
              })
            },
            SourceMeta: (map[string]*source.Meta) (len=3) {
              (string) (len=14) "securityGroups": (*source.Meta)({
                Line: (int) 26,
                Column: (int) 7
              }),
              (string) (len=7) "subnets": (*source.Meta)({
                Line: (int) 24,
                Column: (int) 7
              }),
              (string) (len=3) "vpc": (*source.Meta)({
                Line: (int) 28,
                Column: (int) 7
              })
            }
          }),
          Description: (*substitutions.StringOrSubstitutions)(<nil>),
          SourceMeta: (*source.Meta)({
            Line: (int) 16,
            Column: (int) 5
          })
        })
      },
      SourceMeta: (map[string]*source.Meta) (len=1) {
        (string) (len=7) "network": (*source.Meta)({
          Line: (int) 15,
          Column: (int) 3
        })
      }
    }),
    Exports: (*schema.ExportMap)(<nil>),
    Metadata: (*core.MappingNode)(<nil>)
  }),
  Range: (*source.Range)({
    Start: (*source.Meta)({
      Line: (int) 1,
      Column: (int) 1
    }),
    End: (*source.Meta)(<nil>)
  })
})
