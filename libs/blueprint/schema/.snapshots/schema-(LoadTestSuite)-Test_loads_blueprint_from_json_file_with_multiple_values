(*schema.Blueprint)({
  Version: (*core.ScalarValue)({
    IntValue: (*int)(<nil>),
    BoolValue: (*bool)(<nil>),
    FloatValue: (*float64)(<nil>),
    StringValue: (*string)((len=10) "2021-12-18"),
    SourceMeta: (*source.Meta)({
      Position: (source.Position) {
        Line: (int) 2,
        Column: (int) 12
      },
      EndPosition: (*source.Position)({
        Line: (int) 2,
        Column: (int) 26
      })
    })
  }),
  Transform: (*schema.TransformValueWrapper)({
    StringList: (schema.StringList) {
      Values: ([]string) (len=1) {
        (string) (len=19) "celerity-2022-01-22"
      },
      SourceMeta: ([]*source.Meta) (len=1) {
        (*source.Meta)({
          Position: (source.Position) {
            Line: (int) 3,
            Column: (int) 17
          },
          EndPosition: (*source.Position)({
            Line: (int) 3,
            Column: (int) 38
          })
        })
      }
    }
  }),
  Variables: (*schema.VariableMap)({
    Values: (map[string]*schema.Variable) (len=3) {
      (string) (len=13) "dynamoDBTable": (*schema.Variable)({
        Type: (*schema.VariableTypeWrapper)({
          Value: (schema.VariableType) (len=6) "string",
          SourceMeta: (*source.Meta)({
            Position: (source.Position) {
              Line: (int) 6,
              Column: (int) 13
            },
            EndPosition: (*source.Position)({
              Line: (int) 6,
              Column: (int) 23
            })
          })
        }),
        Description: (*core.ScalarValue)({
          IntValue: (*int)(<nil>),
          BoolValue: (*bool)(<nil>),
          FloatValue: (*float64)(<nil>),
          StringValue: (*string)((len=25) "The Orders DynamoDB Table"),
          SourceMeta: (*source.Meta)({
            Position: (source.Position) {
              Line: (int) 7,
              Column: (int) 20
            },
            EndPosition: (*source.Position)({
              Line: (int) 7,
              Column: (int) 49
            })
          })
        }),
        Secret: (*core.ScalarValue)({
          IntValue: (*int)(<nil>),
          BoolValue: (*bool)(<nil>),
          FloatValue: (*float64)(<nil>),
          StringValue: (*string)(<nil>),
          SourceMeta: (*source.Meta)(<nil>)
        }),
        Default: (*core.ScalarValue)({
          IntValue: (*int)(<nil>),
          BoolValue: (*bool)(<nil>),
          FloatValue: (*float64)(<nil>),
          StringValue: (*string)(<nil>),
          SourceMeta: (*source.Meta)(<nil>)
        }),
        AllowedValues: ([]*core.ScalarValue) {
        },
        SourceMeta: (*source.Meta)({
          Position: (source.Position) {
            Line: (int) 5,
            Column: (int) 20
          },
          EndPosition: (*source.Position)({
            Line: (int) 8,
            Column: (int) 6
          })
        })
      }),
      (string) (len=11) "environment": (*schema.Variable)({
        Type: (*schema.VariableTypeWrapper)({
          Value: (schema.VariableType) (len=6) "string",
          SourceMeta: (*source.Meta)({
            Position: (source.Position) {
              Line: (int) 14,
              Column: (int) 13
            },
            EndPosition: (*source.Position)({
              Line: (int) 14,
              Column: (int) 23
            })
          })
        }),
        Description: (*core.ScalarValue)({
          IntValue: (*int)(<nil>),
          BoolValue: (*bool)(<nil>),
          FloatValue: (*float64)(<nil>),
          StringValue: (*string)(<nil>),
          SourceMeta: (*source.Meta)(<nil>)
        }),
        Secret: (*core.ScalarValue)({
          IntValue: (*int)(<nil>),
          BoolValue: (*bool)(<nil>),
          FloatValue: (*float64)(<nil>),
          StringValue: (*string)(<nil>),
          SourceMeta: (*source.Meta)(<nil>)
        }),
        Default: (*core.ScalarValue)({
          IntValue: (*int)(<nil>),
          BoolValue: (*bool)(<nil>),
          FloatValue: (*float64)(<nil>),
          StringValue: (*string)(<nil>),
          SourceMeta: (*source.Meta)(<nil>)
        }),
        AllowedValues: ([]*core.ScalarValue) {
        },
        SourceMeta: (*source.Meta)({
          Position: (source.Position) {
            Line: (int) 13,
            Column: (int) 18
          },
          EndPosition: (*source.Position)({
            Line: (int) 16,
            Column: (int) 6
          })
        })
      }),
      (string) (len=15) "ordersTopicName": (*schema.Variable)({
        Type: (*schema.VariableTypeWrapper)({
          Value: (schema.VariableType) (len=6) "string",
          SourceMeta: (*source.Meta)({
            Position: (source.Position) {
              Line: (int) 10,
              Column: (int) 13
            },
            EndPosition: (*source.Position)({
              Line: (int) 10,
              Column: (int) 23
            })
          })
        }),
        Description: (*core.ScalarValue)({
          IntValue: (*int)(<nil>),
          BoolValue: (*bool)(<nil>),
          FloatValue: (*float64)(<nil>),
          StringValue: (*string)((len=22) "The Orders Event Topic"),
          SourceMeta: (*source.Meta)({
            Position: (source.Position) {
              Line: (int) 11,
              Column: (int) 20
            },
            EndPosition: (*source.Position)({
              Line: (int) 11,
              Column: (int) 46
            })
          })
        }),
        Secret: (*core.ScalarValue)({
          IntValue: (*int)(<nil>),
          BoolValue: (*bool)(<nil>),
          FloatValue: (*float64)(<nil>),
          StringValue: (*string)(<nil>),
          SourceMeta: (*source.Meta)(<nil>)
        }),
        Default: (*core.ScalarValue)({
          IntValue: (*int)(<nil>),
          BoolValue: (*bool)(<nil>),
          FloatValue: (*float64)(<nil>),
          StringValue: (*string)(<nil>),
          SourceMeta: (*source.Meta)(<nil>)
        }),
        AllowedValues: ([]*core.ScalarValue) {
        },
        SourceMeta: (*source.Meta)({
          Position: (source.Position) {
            Line: (int) 9,
            Column: (int) 22
          },
          EndPosition: (*source.Position)({
            Line: (int) 12,
            Column: (int) 6
          })
        })
      })
    },
    SourceMeta: (map[string]*source.Meta) (len=3) {
      (string) (len=13) "dynamoDBTable": (*source.Meta)({
        Position: (source.Position) {
          Line: (int) 5,
          Column: (int) 20
        },
        EndPosition: (*source.Position)({
          Line: (int) 8,
          Column: (int) 6
        })
      }),
      (string) (len=11) "environment": (*source.Meta)({
        Position: (source.Position) {
          Line: (int) 13,
          Column: (int) 18
        },
        EndPosition: (*source.Position)({
          Line: (int) 16,
          Column: (int) 6
        })
      }),
      (string) (len=15) "ordersTopicName": (*source.Meta)({
        Position: (source.Position) {
          Line: (int) 9,
          Column: (int) 22
        },
        EndPosition: (*source.Position)({
          Line: (int) 12,
          Column: (int) 6
        })
      })
    }
  }),
  Values: (*schema.ValueMap)({
    Values: (map[string]*schema.Value) (len=6) {
      (string) (len=12) "alteredTable": (*schema.Value)({
        Type: (*schema.ValueTypeWrapper)({
          Value: (schema.ValueType) (len=6) "string",
          SourceMeta: (*source.Meta)({
            Position: (source.Position) {
              Line: (int) 20,
              Column: (int) 13
            },
            EndPosition: (*source.Position)({
              Line: (int) 20,
              Column: (int) 23
            })
          })
        }),
        Value: (*core.MappingNode)({
          Scalar: (*core.ScalarValue)(<nil>),
          Fields: (map[string]*core.MappingNode) <nil>,
          Items: ([]*core.MappingNode) <nil>,
          StringWithSubstitutions: (*substitutions.StringOrSubstitutions)({
            Values: ([]*substitutions.StringOrSubstitution) (len=2) {
              (*substitutions.StringOrSubstitution)({
                StringValue: (*string)(<nil>),
                SubstitutionValue: (*substitutions.Substitution)({
                  Function: (*substitutions.SubstitutionFunctionExpr)(<nil>),
                  Variable: (*substitutions.SubstitutionVariable)({
                    VariableName: (string) (len=13) "dynamoDBTable",
                    SourceMeta: (*source.Meta)({
                      Position: (source.Position) {
                        Line: (int) 22,
                        Column: (int) 19
                      },
                      EndPosition: (*source.Position)({
                        Line: (int) 22,
                        Column: (int) 42
                      })
                    })
                  }),
                  ValueReference: (*substitutions.SubstitutionValueReference)(<nil>),
                  ElemReference: (*substitutions.SubstitutionElemReference)(<nil>),
                  ElemIndexReference: (*substitutions.SubstitutionElemIndexReference)(<nil>),
                  DataSourceProperty: (*substitutions.SubstitutionDataSourceProperty)(<nil>),
                  ResourceProperty: (*substitutions.SubstitutionResourceProperty)(<nil>),
                  Child: (*substitutions.SubstitutionChild)(<nil>),
                  StringValue: (*string)(<nil>),
                  IntValue: (*int64)(<nil>),
                  FloatValue: (*float64)(<nil>),
                  BoolValue: (*bool)(<nil>),
                  SourceMeta: (*source.Meta)({
                    Position: (source.Position) {
                      Line: (int) 22,
                      Column: (int) 19
                    },
                    EndPosition: (*source.Position)({
                      Line: (int) 22,
                      Column: (int) 42
                    })
                  })
                }),
                SourceMeta: (*source.Meta)({
                  Position: (source.Position) {
                    Line: (int) 22,
                    Column: (int) 16
                  },
                  EndPosition: (*source.Position)({
                    Line: (int) 22,
                    Column: (int) 42
                  })
                })
              }),
              (*substitutions.StringOrSubstitution)({
                StringValue: (*string)((len=8) "-altered"),
                SubstitutionValue: (*substitutions.Substitution)(<nil>),
                SourceMeta: (*source.Meta)({
                  Position: (source.Position) {
                    Line: (int) 22,
                    Column: (int) 42
                  },
                  EndPosition: (*source.Position)({
                    Line: (int) 22,
                    Column: (int) 51
                  })
                })
              })
            },
            SourceMeta: (*source.Meta)({
              Position: (source.Position) {
                Line: (int) 22,
                Column: (int) 14
              },
              EndPosition: (*source.Position)({
                Line: (int) 22,
                Column: (int) 52
              })
            })
          }),
          SourceMeta: (*source.Meta)({
            Position: (source.Position) {
              Line: (int) 22,
              Column: (int) 14
            },
            EndPosition: (*source.Position)({
              Line: (int) 22,
              Column: (int) 52
            })
          }),
          FieldsSourceMeta: (map[string]*source.Meta) <nil>
        }),
        Description: (*substitutions.StringOrSubstitutions)({
          Values: ([]*substitutions.StringOrSubstitution) (len=1) {
            (*substitutions.StringOrSubstitution)({
              StringValue: (*string)((len=21) "An altered table name"),
              SubstitutionValue: (*substitutions.Substitution)(<nil>),
              SourceMeta: (*source.Meta)({
                Position: (source.Position) {
                  Line: (int) 21,
                  Column: (int) 22
                },
                EndPosition: (*source.Position)({
                  Line: (int) 21,
                  Column: (int) 44
                })
              })
            })
          },
          SourceMeta: (*source.Meta)({
            Position: (source.Position) {
              Line: (int) 21,
              Column: (int) 20
            },
            EndPosition: (*source.Position)({
              Line: (int) 21,
              Column: (int) 45
            })
          })
        }),
        Secret: (*core.ScalarValue)({
          IntValue: (*int)(<nil>),
          BoolValue: (*bool)(<nil>),
          FloatValue: (*float64)(<nil>),
          StringValue: (*string)(<nil>),
          SourceMeta: (*source.Meta)(<nil>)
        }),
        SourceMeta: (*source.Meta)({
          Position: (source.Position) {
            Line: (int) 19,
            Column: (int) 19
          },
          EndPosition: (*source.Position)({
            Line: (int) 23,
            Column: (int) 6
          })
        })
      }),
      (string) (len=11) "sampleArray": (*schema.Value)({
        Type: (*schema.ValueTypeWrapper)({
          Value: (schema.ValueType) (len=5) "array",
          SourceMeta: (*source.Meta)({
            Position: (source.Position) {
              Line: (int) 48,
              Column: (int) 13
            },
            EndPosition: (*source.Position)({
              Line: (int) 48,
              Column: (int) 22
            })
          })
        }),
        Value: (*core.MappingNode)({
          Scalar: (*core.ScalarValue)(<nil>),
          Fields: (map[string]*core.MappingNode) <nil>,
          Items: ([]*core.MappingNode) (len=4) {
            (*core.MappingNode)({
              Scalar: (*core.ScalarValue)(<nil>),
              Fields: (map[string]*core.MappingNode) (len=2) {
                (string) (len=4) "name": (*core.MappingNode)({
                  Scalar: (*core.ScalarValue)({
                    IntValue: (*int)(<nil>),
                    BoolValue: (*bool)(<nil>),
                    FloatValue: (*float64)(<nil>),
                    StringValue: (*string)((len=6) "Item 1"),
                    SourceMeta: (*source.Meta)({
                      Position: (source.Position) {
                        Line: (int) 52,
                        Column: (int) 17
                      },
                      EndPosition: (*source.Position)({
                        Line: (int) 52,
                        Column: (int) 27
                      })
                    })
                  }),
                  Fields: (map[string]*core.MappingNode) <nil>,
                  Items: ([]*core.MappingNode) <nil>,
                  StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                  SourceMeta: (*source.Meta)({
                    Position: (source.Position) {
                      Line: (int) 52,
                      Column: (int) 17
                    },
                    EndPosition: (*source.Position)({
                      Line: (int) 52,
                      Column: (int) 27
                    })
                  }),
                  FieldsSourceMeta: (map[string]*source.Meta) <nil>
                }),
                (string) (len=5) "value": (*core.MappingNode)({
                  Scalar: (*core.ScalarValue)({
                    IntValue: (*int)(<nil>),
                    BoolValue: (*bool)(<nil>),
                    FloatValue: (*float64)(<nil>),
                    StringValue: (*string)((len=7) "Value 1"),
                    SourceMeta: (*source.Meta)({
                      Position: (source.Position) {
                        Line: (int) 53,
                        Column: (int) 18
                      },
                      EndPosition: (*source.Position)({
                        Line: (int) 53,
                        Column: (int) 29
                      })
                    })
                  }),
                  Fields: (map[string]*core.MappingNode) <nil>,
                  Items: ([]*core.MappingNode) <nil>,
                  StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                  SourceMeta: (*source.Meta)({
                    Position: (source.Position) {
                      Line: (int) 53,
                      Column: (int) 18
                    },
                    EndPosition: (*source.Position)({
                      Line: (int) 53,
                      Column: (int) 29
                    })
                  }),
                  FieldsSourceMeta: (map[string]*source.Meta) <nil>
                })
              },
              Items: ([]*core.MappingNode) <nil>,
              StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
              SourceMeta: (*source.Meta)({
                Position: (source.Position) {
                  Line: (int) 51,
                  Column: (int) 10
                },
                EndPosition: (*source.Position)({
                  Line: (int) 54,
                  Column: (int) 10
                })
              }),
              FieldsSourceMeta: (map[string]*source.Meta) (len=2) {
                (string) (len=4) "name": (*source.Meta)({
                  Position: (source.Position) {
                    Line: (int) 52,
                    Column: (int) 11
                  },
                  EndPosition: (*source.Position)({
                    Line: (int) 52,
                    Column: (int) 27
                  })
                }),
                (string) (len=5) "value": (*source.Meta)({
                  Position: (source.Position) {
                    Line: (int) 53,
                    Column: (int) 11
                  },
                  EndPosition: (*source.Position)({
                    Line: (int) 53,
                    Column: (int) 29
                  })
                })
              }
            }),
            (*core.MappingNode)({
              Scalar: (*core.ScalarValue)(<nil>),
              Fields: (map[string]*core.MappingNode) (len=2) {
                (string) (len=4) "name": (*core.MappingNode)({
                  Scalar: (*core.ScalarValue)({
                    IntValue: (*int)(<nil>),
                    BoolValue: (*bool)(<nil>),
                    FloatValue: (*float64)(<nil>),
                    StringValue: (*string)((len=6) "Item 2"),
                    SourceMeta: (*source.Meta)({
                      Position: (source.Position) {
                        Line: (int) 56,
                        Column: (int) 17
                      },
                      EndPosition: (*source.Position)({
                        Line: (int) 56,
                        Column: (int) 27
                      })
                    })
                  }),
                  Fields: (map[string]*core.MappingNode) <nil>,
                  Items: ([]*core.MappingNode) <nil>,
                  StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                  SourceMeta: (*source.Meta)({
                    Position: (source.Position) {
                      Line: (int) 56,
                      Column: (int) 17
                    },
                    EndPosition: (*source.Position)({
                      Line: (int) 56,
                      Column: (int) 27
                    })
                  }),
                  FieldsSourceMeta: (map[string]*source.Meta) <nil>
                }),
                (string) (len=5) "value": (*core.MappingNode)({
                  Scalar: (*core.ScalarValue)({
                    IntValue: (*int)(<nil>),
                    BoolValue: (*bool)(<nil>),
                    FloatValue: (*float64)(<nil>),
                    StringValue: (*string)((len=7) "Value 2"),
                    SourceMeta: (*source.Meta)({
                      Position: (source.Position) {
                        Line: (int) 57,
                        Column: (int) 18
                      },
                      EndPosition: (*source.Position)({
                        Line: (int) 57,
                        Column: (int) 29
                      })
                    })
                  }),
                  Fields: (map[string]*core.MappingNode) <nil>,
                  Items: ([]*core.MappingNode) <nil>,
                  StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                  SourceMeta: (*source.Meta)({
                    Position: (source.Position) {
                      Line: (int) 57,
                      Column: (int) 18
                    },
                    EndPosition: (*source.Position)({
                      Line: (int) 57,
                      Column: (int) 29
                    })
                  }),
                  FieldsSourceMeta: (map[string]*source.Meta) <nil>
                })
              },
              Items: ([]*core.MappingNode) <nil>,
              StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
              SourceMeta: (*source.Meta)({
                Position: (source.Position) {
                  Line: (int) 55,
                  Column: (int) 10
                },
                EndPosition: (*source.Position)({
                  Line: (int) 58,
                  Column: (int) 10
                })
              }),
              FieldsSourceMeta: (map[string]*source.Meta) (len=2) {
                (string) (len=4) "name": (*source.Meta)({
                  Position: (source.Position) {
                    Line: (int) 56,
                    Column: (int) 11
                  },
                  EndPosition: (*source.Position)({
                    Line: (int) 56,
                    Column: (int) 27
                  })
                }),
                (string) (len=5) "value": (*source.Meta)({
                  Position: (source.Position) {
                    Line: (int) 57,
                    Column: (int) 11
                  },
                  EndPosition: (*source.Position)({
                    Line: (int) 57,
                    Column: (int) 29
                  })
                })
              }
            }),
            (*core.MappingNode)({
              Scalar: (*core.ScalarValue)(<nil>),
              Fields: (map[string]*core.MappingNode) (len=2) {
                (string) (len=4) "name": (*core.MappingNode)({
                  Scalar: (*core.ScalarValue)({
                    IntValue: (*int)(<nil>),
                    BoolValue: (*bool)(<nil>),
                    FloatValue: (*float64)(<nil>),
                    StringValue: (*string)((len=6) "Item 3"),
                    SourceMeta: (*source.Meta)({
                      Position: (source.Position) {
                        Line: (int) 60,
                        Column: (int) 17
                      },
                      EndPosition: (*source.Position)({
                        Line: (int) 60,
                        Column: (int) 27
                      })
                    })
                  }),
                  Fields: (map[string]*core.MappingNode) <nil>,
                  Items: ([]*core.MappingNode) <nil>,
                  StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                  SourceMeta: (*source.Meta)({
                    Position: (source.Position) {
                      Line: (int) 60,
                      Column: (int) 17
                    },
                    EndPosition: (*source.Position)({
                      Line: (int) 60,
                      Column: (int) 27
                    })
                  }),
                  FieldsSourceMeta: (map[string]*source.Meta) <nil>
                }),
                (string) (len=5) "value": (*core.MappingNode)({
                  Scalar: (*core.ScalarValue)({
                    IntValue: (*int)(<nil>),
                    BoolValue: (*bool)(<nil>),
                    FloatValue: (*float64)(<nil>),
                    StringValue: (*string)((len=7) "Value 3"),
                    SourceMeta: (*source.Meta)({
                      Position: (source.Position) {
                        Line: (int) 61,
                        Column: (int) 18
                      },
                      EndPosition: (*source.Position)({
                        Line: (int) 61,
                        Column: (int) 29
                      })
                    })
                  }),
                  Fields: (map[string]*core.MappingNode) <nil>,
                  Items: ([]*core.MappingNode) <nil>,
                  StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                  SourceMeta: (*source.Meta)({
                    Position: (source.Position) {
                      Line: (int) 61,
                      Column: (int) 18
                    },
                    EndPosition: (*source.Position)({
                      Line: (int) 61,
                      Column: (int) 29
                    })
                  }),
                  FieldsSourceMeta: (map[string]*source.Meta) <nil>
                })
              },
              Items: ([]*core.MappingNode) <nil>,
              StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
              SourceMeta: (*source.Meta)({
                Position: (source.Position) {
                  Line: (int) 59,
                  Column: (int) 10
                },
                EndPosition: (*source.Position)({
                  Line: (int) 62,
                  Column: (int) 10
                })
              }),
              FieldsSourceMeta: (map[string]*source.Meta) (len=2) {
                (string) (len=4) "name": (*source.Meta)({
                  Position: (source.Position) {
                    Line: (int) 60,
                    Column: (int) 11
                  },
                  EndPosition: (*source.Position)({
                    Line: (int) 60,
                    Column: (int) 27
                  })
                }),
                (string) (len=5) "value": (*source.Meta)({
                  Position: (source.Position) {
                    Line: (int) 61,
                    Column: (int) 11
                  },
                  EndPosition: (*source.Position)({
                    Line: (int) 61,
                    Column: (int) 29
                  })
                })
              }
            }),
            (*core.MappingNode)({
              Scalar: (*core.ScalarValue)(<nil>),
              Fields: (map[string]*core.MappingNode) (len=2) {
                (string) (len=4) "name": (*core.MappingNode)({
                  Scalar: (*core.ScalarValue)({
                    IntValue: (*int)(<nil>),
                    BoolValue: (*bool)(<nil>),
                    FloatValue: (*float64)(<nil>),
                    StringValue: (*string)((len=6) "Item 4"),
                    SourceMeta: (*source.Meta)({
                      Position: (source.Position) {
                        Line: (int) 64,
                        Column: (int) 17
                      },
                      EndPosition: (*source.Position)({
                        Line: (int) 64,
                        Column: (int) 27
                      })
                    })
                  }),
                  Fields: (map[string]*core.MappingNode) <nil>,
                  Items: ([]*core.MappingNode) <nil>,
                  StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                  SourceMeta: (*source.Meta)({
                    Position: (source.Position) {
                      Line: (int) 64,
                      Column: (int) 17
                    },
                    EndPosition: (*source.Position)({
                      Line: (int) 64,
                      Column: (int) 27
                    })
                  }),
                  FieldsSourceMeta: (map[string]*source.Meta) <nil>
                }),
                (string) (len=5) "value": (*core.MappingNode)({
                  Scalar: (*core.ScalarValue)({
                    IntValue: (*int)(<nil>),
                    BoolValue: (*bool)(<nil>),
                    FloatValue: (*float64)(<nil>),
                    StringValue: (*string)((len=7) "Value 4"),
                    SourceMeta: (*source.Meta)({
                      Position: (source.Position) {
                        Line: (int) 65,
                        Column: (int) 18
                      },
                      EndPosition: (*source.Position)({
                        Line: (int) 65,
                        Column: (int) 29
                      })
                    })
                  }),
                  Fields: (map[string]*core.MappingNode) <nil>,
                  Items: ([]*core.MappingNode) <nil>,
                  StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                  SourceMeta: (*source.Meta)({
                    Position: (source.Position) {
                      Line: (int) 65,
                      Column: (int) 18
                    },
                    EndPosition: (*source.Position)({
                      Line: (int) 65,
                      Column: (int) 29
                    })
                  }),
                  FieldsSourceMeta: (map[string]*source.Meta) <nil>
                })
              },
              Items: ([]*core.MappingNode) <nil>,
              StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
              SourceMeta: (*source.Meta)({
                Position: (source.Position) {
                  Line: (int) 63,
                  Column: (int) 10
                },
                EndPosition: (*source.Position)({
                  Line: (int) 66,
                  Column: (int) 10
                })
              }),
              FieldsSourceMeta: (map[string]*source.Meta) (len=2) {
                (string) (len=4) "name": (*source.Meta)({
                  Position: (source.Position) {
                    Line: (int) 64,
                    Column: (int) 11
                  },
                  EndPosition: (*source.Position)({
                    Line: (int) 64,
                    Column: (int) 27
                  })
                }),
                (string) (len=5) "value": (*source.Meta)({
                  Position: (source.Position) {
                    Line: (int) 65,
                    Column: (int) 11
                  },
                  EndPosition: (*source.Position)({
                    Line: (int) 65,
                    Column: (int) 29
                  })
                })
              }
            })
          },
          StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
          SourceMeta: (*source.Meta)({
            Position: (source.Position) {
              Line: (int) 50,
              Column: (int) 14
            },
            EndPosition: (*source.Position)({
              Line: (int) 67,
              Column: (int) 8
            })
          }),
          FieldsSourceMeta: (map[string]*source.Meta) <nil>
        }),
        Description: (*substitutions.StringOrSubstitutions)({
          Values: ([]*substitutions.StringOrSubstitution) (len=1) {
            (*substitutions.StringOrSubstitution)({
              StringValue: (*string)((len=25) "A sample array value type"),
              SubstitutionValue: (*substitutions.Substitution)(<nil>),
              SourceMeta: (*source.Meta)({
                Position: (source.Position) {
                  Line: (int) 49,
                  Column: (int) 22
                },
                EndPosition: (*source.Position)({
                  Line: (int) 49,
                  Column: (int) 48
                })
              })
            })
          },
          SourceMeta: (*source.Meta)({
            Position: (source.Position) {
              Line: (int) 49,
              Column: (int) 20
            },
            EndPosition: (*source.Position)({
              Line: (int) 49,
              Column: (int) 49
            })
          })
        }),
        Secret: (*core.ScalarValue)({
          IntValue: (*int)(<nil>),
          BoolValue: (*bool)(<nil>),
          FloatValue: (*float64)(<nil>),
          StringValue: (*string)(<nil>),
          SourceMeta: (*source.Meta)(<nil>)
        }),
        SourceMeta: (*source.Meta)({
          Position: (source.Position) {
            Line: (int) 47,
            Column: (int) 18
          },
          EndPosition: (*source.Position)({
            Line: (int) 68,
            Column: (int) 6
          })
        })
      }),
      (string) (len=13) "sampleBoolean": (*schema.Value)({
        Type: (*schema.ValueTypeWrapper)({
          Value: (schema.ValueType) (len=7) "boolean",
          SourceMeta: (*source.Meta)({
            Position: (source.Position) {
              Line: (int) 75,
              Column: (int) 13
            },
            EndPosition: (*source.Position)({
              Line: (int) 75,
              Column: (int) 24
            })
          })
        }),
        Value: (*core.MappingNode)({
          Scalar: (*core.ScalarValue)({
            IntValue: (*int)(<nil>),
            BoolValue: (*bool)(true),
            FloatValue: (*float64)(<nil>),
            StringValue: (*string)(<nil>),
            SourceMeta: (*source.Meta)({
              Position: (source.Position) {
                Line: (int) 77,
                Column: (int) 14
              },
              EndPosition: (*source.Position)({
                Line: (int) 77,
                Column: (int) 20
              })
            })
          }),
          Fields: (map[string]*core.MappingNode) <nil>,
          Items: ([]*core.MappingNode) <nil>,
          StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
          SourceMeta: (*source.Meta)({
            Position: (source.Position) {
              Line: (int) 77,
              Column: (int) 14
            },
            EndPosition: (*source.Position)({
              Line: (int) 77,
              Column: (int) 20
            })
          }),
          FieldsSourceMeta: (map[string]*source.Meta) <nil>
        }),
        Description: (*substitutions.StringOrSubstitutions)({
          Values: ([]*substitutions.StringOrSubstitution) (len=1) {
            (*substitutions.StringOrSubstitution)({
              StringValue: (*string)((len=27) "A sample boolean value type"),
              SubstitutionValue: (*substitutions.Substitution)(<nil>),
              SourceMeta: (*source.Meta)({
                Position: (source.Position) {
                  Line: (int) 76,
                  Column: (int) 22
                },
                EndPosition: (*source.Position)({
                  Line: (int) 76,
                  Column: (int) 50
                })
              })
            })
          },
          SourceMeta: (*source.Meta)({
            Position: (source.Position) {
              Line: (int) 76,
              Column: (int) 20
            },
            EndPosition: (*source.Position)({
              Line: (int) 76,
              Column: (int) 51
            })
          })
        }),
        Secret: (*core.ScalarValue)({
          IntValue: (*int)(<nil>),
          BoolValue: (*bool)(<nil>),
          FloatValue: (*float64)(<nil>),
          StringValue: (*string)(<nil>),
          SourceMeta: (*source.Meta)(<nil>)
        }),
        SourceMeta: (*source.Meta)({
          Position: (source.Position) {
            Line: (int) 74,
            Column: (int) 20
          },
          EndPosition: (*source.Position)({
            Line: (int) 78,
            Column: (int) 6
          })
        })
      }),
      (string) (len=11) "sampleFloat": (*schema.Value)({
        Type: (*schema.ValueTypeWrapper)({
          Value: (schema.ValueType) (len=5) "float",
          SourceMeta: (*source.Meta)({
            Position: (source.Position) {
              Line: (int) 80,
              Column: (int) 13
            },
            EndPosition: (*source.Position)({
              Line: (int) 80,
              Column: (int) 22
            })
          })
        }),
        Value: (*core.MappingNode)({
          Scalar: (*core.ScalarValue)({
            IntValue: (*int)(<nil>),
            BoolValue: (*bool)(<nil>),
            FloatValue: (*float64)(3.14),
            StringValue: (*string)(<nil>),
            SourceMeta: (*source.Meta)({
              Position: (source.Position) {
                Line: (int) 82,
                Column: (int) 14
              },
              EndPosition: (*source.Position)({
                Line: (int) 82,
                Column: (int) 20
              })
            })
          }),
          Fields: (map[string]*core.MappingNode) <nil>,
          Items: ([]*core.MappingNode) <nil>,
          StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
          SourceMeta: (*source.Meta)({
            Position: (source.Position) {
              Line: (int) 82,
              Column: (int) 14
            },
            EndPosition: (*source.Position)({
              Line: (int) 82,
              Column: (int) 20
            })
          }),
          FieldsSourceMeta: (map[string]*source.Meta) <nil>
        }),
        Description: (*substitutions.StringOrSubstitutions)({
          Values: ([]*substitutions.StringOrSubstitution) (len=1) {
            (*substitutions.StringOrSubstitution)({
              StringValue: (*string)((len=25) "A sample float value type"),
              SubstitutionValue: (*substitutions.Substitution)(<nil>),
              SourceMeta: (*source.Meta)({
                Position: (source.Position) {
                  Line: (int) 81,
                  Column: (int) 22
                },
                EndPosition: (*source.Position)({
                  Line: (int) 81,
                  Column: (int) 48
                })
              })
            })
          },
          SourceMeta: (*source.Meta)({
            Position: (source.Position) {
              Line: (int) 81,
              Column: (int) 20
            },
            EndPosition: (*source.Position)({
              Line: (int) 81,
              Column: (int) 49
            })
          })
        }),
        Secret: (*core.ScalarValue)({
          IntValue: (*int)(<nil>),
          BoolValue: (*bool)(<nil>),
          FloatValue: (*float64)(<nil>),
          StringValue: (*string)(<nil>),
          SourceMeta: (*source.Meta)(<nil>)
        }),
        SourceMeta: (*source.Meta)({
          Position: (source.Position) {
            Line: (int) 79,
            Column: (int) 18
          },
          EndPosition: (*source.Position)({
            Line: (int) 83,
            Column: (int) 6
          })
        })
      }),
      (string) (len=13) "sampleInteger": (*schema.Value)({
        Type: (*schema.ValueTypeWrapper)({
          Value: (schema.ValueType) (len=7) "integer",
          SourceMeta: (*source.Meta)({
            Position: (source.Position) {
              Line: (int) 70,
              Column: (int) 13
            },
            EndPosition: (*source.Position)({
              Line: (int) 70,
              Column: (int) 24
            })
          })
        }),
        Value: (*core.MappingNode)({
          Scalar: (*core.ScalarValue)({
            IntValue: (*int)(100),
            BoolValue: (*bool)(<nil>),
            FloatValue: (*float64)(<nil>),
            StringValue: (*string)(<nil>),
            SourceMeta: (*source.Meta)({
              Position: (source.Position) {
                Line: (int) 72,
                Column: (int) 14
              },
              EndPosition: (*source.Position)({
                Line: (int) 72,
                Column: (int) 19
              })
            })
          }),
          Fields: (map[string]*core.MappingNode) <nil>,
          Items: ([]*core.MappingNode) <nil>,
          StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
          SourceMeta: (*source.Meta)({
            Position: (source.Position) {
              Line: (int) 72,
              Column: (int) 14
            },
            EndPosition: (*source.Position)({
              Line: (int) 72,
              Column: (int) 19
            })
          }),
          FieldsSourceMeta: (map[string]*source.Meta) <nil>
        }),
        Description: (*substitutions.StringOrSubstitutions)({
          Values: ([]*substitutions.StringOrSubstitution) (len=1) {
            (*substitutions.StringOrSubstitution)({
              StringValue: (*string)((len=27) "A sample integer value type"),
              SubstitutionValue: (*substitutions.Substitution)(<nil>),
              SourceMeta: (*source.Meta)({
                Position: (source.Position) {
                  Line: (int) 71,
                  Column: (int) 22
                },
                EndPosition: (*source.Position)({
                  Line: (int) 71,
                  Column: (int) 50
                })
              })
            })
          },
          SourceMeta: (*source.Meta)({
            Position: (source.Position) {
              Line: (int) 71,
              Column: (int) 20
            },
            EndPosition: (*source.Position)({
              Line: (int) 71,
              Column: (int) 51
            })
          })
        }),
        Secret: (*core.ScalarValue)({
          IntValue: (*int)(<nil>),
          BoolValue: (*bool)(<nil>),
          FloatValue: (*float64)(<nil>),
          StringValue: (*string)(<nil>),
          SourceMeta: (*source.Meta)(<nil>)
        }),
        SourceMeta: (*source.Meta)({
          Position: (source.Position) {
            Line: (int) 69,
            Column: (int) 20
          },
          EndPosition: (*source.Position)({
            Line: (int) 73,
            Column: (int) 6
          })
        })
      }),
      (string) (len=12) "sampleObject": (*schema.Value)({
        Type: (*schema.ValueTypeWrapper)({
          Value: (schema.ValueType) (len=6) "object",
          SourceMeta: (*source.Meta)({
            Position: (source.Position) {
              Line: (int) 25,
              Column: (int) 13
            },
            EndPosition: (*source.Position)({
              Line: (int) 25,
              Column: (int) 23
            })
          })
        }),
        Value: (*core.MappingNode)({
          Scalar: (*core.ScalarValue)(<nil>),
          Fields: (map[string]*core.MappingNode) (len=3) {
            (string) (len=11) "description": (*core.MappingNode)({
              Scalar: (*core.ScalarValue)({
                IntValue: (*int)(<nil>),
                BoolValue: (*bool)(<nil>),
                FloatValue: (*float64)(<nil>),
                StringValue: (*string)((len=34) "This is a sample object value type"),
                SourceMeta: (*source.Meta)({
                  Position: (source.Position) {
                    Line: (int) 29,
                    Column: (int) 22
                  },
                  EndPosition: (*source.Position)({
                    Line: (int) 29,
                    Column: (int) 60
                  })
                })
              }),
              Fields: (map[string]*core.MappingNode) <nil>,
              Items: ([]*core.MappingNode) <nil>,
              StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
              SourceMeta: (*source.Meta)({
                Position: (source.Position) {
                  Line: (int) 29,
                  Column: (int) 22
                },
                EndPosition: (*source.Position)({
                  Line: (int) 29,
                  Column: (int) 60
                })
              }),
              FieldsSourceMeta: (map[string]*source.Meta) <nil>
            }),
            (string) (len=4) "name": (*core.MappingNode)({
              Scalar: (*core.ScalarValue)({
                IntValue: (*int)(<nil>),
                BoolValue: (*bool)(<nil>),
                FloatValue: (*float64)(<nil>),
                StringValue: (*string)((len=13) "Sample Object"),
                SourceMeta: (*source.Meta)({
                  Position: (source.Position) {
                    Line: (int) 28,
                    Column: (int) 15
                  },
                  EndPosition: (*source.Position)({
                    Line: (int) 28,
                    Column: (int) 32
                  })
                })
              }),
              Fields: (map[string]*core.MappingNode) <nil>,
              Items: ([]*core.MappingNode) <nil>,
              StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
              SourceMeta: (*source.Meta)({
                Position: (source.Position) {
                  Line: (int) 28,
                  Column: (int) 15
                },
                EndPosition: (*source.Position)({
                  Line: (int) 28,
                  Column: (int) 32
                })
              }),
              FieldsSourceMeta: (map[string]*source.Meta) <nil>
            }),
            (string) (len=10) "properties": (*core.MappingNode)({
              Scalar: (*core.ScalarValue)(<nil>),
              Fields: (map[string]*core.MappingNode) (len=4) {
                (string) (len=9) "nestedRef": (*core.MappingNode)({
                  Scalar: (*core.ScalarValue)(<nil>),
                  Fields: (map[string]*core.MappingNode) <nil>,
                  Items: ([]*core.MappingNode) <nil>,
                  StringWithSubstitutions: (*substitutions.StringOrSubstitutions)({
                    Values: ([]*substitutions.StringOrSubstitution) (len=1) {
                      (*substitutions.StringOrSubstitution)({
                        StringValue: (*string)(<nil>),
                        SubstitutionValue: (*substitutions.Substitution)({
                          Function: (*substitutions.SubstitutionFunctionExpr)(<nil>),
                          Variable: (*substitutions.SubstitutionVariable)({
                            VariableName: (string) (len=13) "dynamoDBTable",
                            SourceMeta: (*source.Meta)({
                              Position: (source.Position) {
                                Line: (int) 43,
                                Column: (int) 27
                              },
                              EndPosition: (*source.Position)({
                                Line: (int) 43,
                                Column: (int) 50
                              })
                            })
                          }),
                          ValueReference: (*substitutions.SubstitutionValueReference)(<nil>),
                          ElemReference: (*substitutions.SubstitutionElemReference)(<nil>),
                          ElemIndexReference: (*substitutions.SubstitutionElemIndexReference)(<nil>),
                          DataSourceProperty: (*substitutions.SubstitutionDataSourceProperty)(<nil>),
                          ResourceProperty: (*substitutions.SubstitutionResourceProperty)(<nil>),
                          Child: (*substitutions.SubstitutionChild)(<nil>),
                          StringValue: (*string)(<nil>),
                          IntValue: (*int64)(<nil>),
                          FloatValue: (*float64)(<nil>),
                          BoolValue: (*bool)(<nil>),
                          SourceMeta: (*source.Meta)({
                            Position: (source.Position) {
                              Line: (int) 43,
                              Column: (int) 27
                            },
                            EndPosition: (*source.Position)({
                              Line: (int) 43,
                              Column: (int) 50
                            })
                          })
                        }),
                        SourceMeta: (*source.Meta)({
                          Position: (source.Position) {
                            Line: (int) 43,
                            Column: (int) 24
                          },
                          EndPosition: (*source.Position)({
                            Line: (int) 43,
                            Column: (int) 50
                          })
                        })
                      })
                    },
                    SourceMeta: (*source.Meta)({
                      Position: (source.Position) {
                        Line: (int) 43,
                        Column: (int) 22
                      },
                      EndPosition: (*source.Position)({
                        Line: (int) 43,
                        Column: (int) 52
                      })
                    })
                  }),
                  SourceMeta: (*source.Meta)({
                    Position: (source.Position) {
                      Line: (int) 43,
                      Column: (int) 22
                    },
                    EndPosition: (*source.Position)({
                      Line: (int) 43,
                      Column: (int) 52
                    })
                  }),
                  FieldsSourceMeta: (map[string]*source.Meta) <nil>
                }),
                (string) (len=9) "property1": (*core.MappingNode)({
                  Scalar: (*core.ScalarValue)(<nil>),
                  Fields: (map[string]*core.MappingNode) (len=2) {
                    (string) (len=4) "type": (*core.MappingNode)({
                      Scalar: (*core.ScalarValue)({
                        IntValue: (*int)(<nil>),
                        BoolValue: (*bool)(<nil>),
                        FloatValue: (*float64)(<nil>),
                        StringValue: (*string)((len=6) "string"),
                        SourceMeta: (*source.Meta)({
                          Position: (source.Position) {
                            Line: (int) 32,
                            Column: (int) 19
                          },
                          EndPosition: (*source.Position)({
                            Line: (int) 32,
                            Column: (int) 29
                          })
                        })
                      }),
                      Fields: (map[string]*core.MappingNode) <nil>,
                      Items: ([]*core.MappingNode) <nil>,
                      StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                      SourceMeta: (*source.Meta)({
                        Position: (source.Position) {
                          Line: (int) 32,
                          Column: (int) 19
                        },
                        EndPosition: (*source.Position)({
                          Line: (int) 32,
                          Column: (int) 29
                        })
                      }),
                      FieldsSourceMeta: (map[string]*source.Meta) <nil>
                    }),
                    (string) (len=5) "value": (*core.MappingNode)({
                      Scalar: (*core.ScalarValue)({
                        IntValue: (*int)(<nil>),
                        BoolValue: (*bool)(<nil>),
                        FloatValue: (*float64)(<nil>),
                        StringValue: (*string)((len=16) "Property 1 Value"),
                        SourceMeta: (*source.Meta)({
                          Position: (source.Position) {
                            Line: (int) 33,
                            Column: (int) 20
                          },
                          EndPosition: (*source.Position)({
                            Line: (int) 33,
                            Column: (int) 40
                          })
                        })
                      }),
                      Fields: (map[string]*core.MappingNode) <nil>,
                      Items: ([]*core.MappingNode) <nil>,
                      StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                      SourceMeta: (*source.Meta)({
                        Position: (source.Position) {
                          Line: (int) 33,
                          Column: (int) 20
                        },
                        EndPosition: (*source.Position)({
                          Line: (int) 33,
                          Column: (int) 40
                        })
                      }),
                      FieldsSourceMeta: (map[string]*source.Meta) <nil>
                    })
                  },
                  Items: ([]*core.MappingNode) <nil>,
                  StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                  SourceMeta: (*source.Meta)({
                    Position: (source.Position) {
                      Line: (int) 31,
                      Column: (int) 22
                    },
                    EndPosition: (*source.Position)({
                      Line: (int) 34,
                      Column: (int) 12
                    })
                  }),
                  FieldsSourceMeta: (map[string]*source.Meta) (len=2) {
                    (string) (len=4) "type": (*source.Meta)({
                      Position: (source.Position) {
                        Line: (int) 32,
                        Column: (int) 13
                      },
                      EndPosition: (*source.Position)({
                        Line: (int) 32,
                        Column: (int) 29
                      })
                    }),
                    (string) (len=5) "value": (*source.Meta)({
                      Position: (source.Position) {
                        Line: (int) 33,
                        Column: (int) 13
                      },
                      EndPosition: (*source.Position)({
                        Line: (int) 33,
                        Column: (int) 40
                      })
                    })
                  }
                }),
                (string) (len=9) "property2": (*core.MappingNode)({
                  Scalar: (*core.ScalarValue)(<nil>),
                  Fields: (map[string]*core.MappingNode) (len=2) {
                    (string) (len=4) "type": (*core.MappingNode)({
                      Scalar: (*core.ScalarValue)({
                        IntValue: (*int)(<nil>),
                        BoolValue: (*bool)(<nil>),
                        FloatValue: (*float64)(<nil>),
                        StringValue: (*string)((len=7) "integer"),
                        SourceMeta: (*source.Meta)({
                          Position: (source.Position) {
                            Line: (int) 36,
                            Column: (int) 19
                          },
                          EndPosition: (*source.Position)({
                            Line: (int) 36,
                            Column: (int) 30
                          })
                        })
                      }),
                      Fields: (map[string]*core.MappingNode) <nil>,
                      Items: ([]*core.MappingNode) <nil>,
                      StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                      SourceMeta: (*source.Meta)({
                        Position: (source.Position) {
                          Line: (int) 36,
                          Column: (int) 19
                        },
                        EndPosition: (*source.Position)({
                          Line: (int) 36,
                          Column: (int) 30
                        })
                      }),
                      FieldsSourceMeta: (map[string]*source.Meta) <nil>
                    }),
                    (string) (len=5) "value": (*core.MappingNode)({
                      Scalar: (*core.ScalarValue)({
                        IntValue: (*int)(42),
                        BoolValue: (*bool)(<nil>),
                        FloatValue: (*float64)(<nil>),
                        StringValue: (*string)(<nil>),
                        SourceMeta: (*source.Meta)({
                          Position: (source.Position) {
                            Line: (int) 37,
                            Column: (int) 20
                          },
                          EndPosition: (*source.Position)({
                            Line: (int) 37,
                            Column: (int) 24
                          })
                        })
                      }),
                      Fields: (map[string]*core.MappingNode) <nil>,
                      Items: ([]*core.MappingNode) <nil>,
                      StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                      SourceMeta: (*source.Meta)({
                        Position: (source.Position) {
                          Line: (int) 37,
                          Column: (int) 20
                        },
                        EndPosition: (*source.Position)({
                          Line: (int) 37,
                          Column: (int) 24
                        })
                      }),
                      FieldsSourceMeta: (map[string]*source.Meta) <nil>
                    })
                  },
                  Items: ([]*core.MappingNode) <nil>,
                  StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                  SourceMeta: (*source.Meta)({
                    Position: (source.Position) {
                      Line: (int) 35,
                      Column: (int) 22
                    },
                    EndPosition: (*source.Position)({
                      Line: (int) 38,
                      Column: (int) 12
                    })
                  }),
                  FieldsSourceMeta: (map[string]*source.Meta) (len=2) {
                    (string) (len=4) "type": (*source.Meta)({
                      Position: (source.Position) {
                        Line: (int) 36,
                        Column: (int) 13
                      },
                      EndPosition: (*source.Position)({
                        Line: (int) 36,
                        Column: (int) 30
                      })
                    }),
                    (string) (len=5) "value": (*source.Meta)({
                      Position: (source.Position) {
                        Line: (int) 37,
                        Column: (int) 13
                      },
                      EndPosition: (*source.Position)({
                        Line: (int) 37,
                        Column: (int) 24
                      })
                    })
                  }
                }),
                (string) (len=9) "property3": (*core.MappingNode)({
                  Scalar: (*core.ScalarValue)(<nil>),
                  Fields: (map[string]*core.MappingNode) (len=2) {
                    (string) (len=4) "type": (*core.MappingNode)({
                      Scalar: (*core.ScalarValue)({
                        IntValue: (*int)(<nil>),
                        BoolValue: (*bool)(<nil>),
                        FloatValue: (*float64)(<nil>),
                        StringValue: (*string)((len=7) "boolean"),
                        SourceMeta: (*source.Meta)({
                          Position: (source.Position) {
                            Line: (int) 40,
                            Column: (int) 19
                          },
                          EndPosition: (*source.Position)({
                            Line: (int) 40,
                            Column: (int) 30
                          })
                        })
                      }),
                      Fields: (map[string]*core.MappingNode) <nil>,
                      Items: ([]*core.MappingNode) <nil>,
                      StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                      SourceMeta: (*source.Meta)({
                        Position: (source.Position) {
                          Line: (int) 40,
                          Column: (int) 19
                        },
                        EndPosition: (*source.Position)({
                          Line: (int) 40,
                          Column: (int) 30
                        })
                      }),
                      FieldsSourceMeta: (map[string]*source.Meta) <nil>
                    }),
                    (string) (len=5) "value": (*core.MappingNode)({
                      Scalar: (*core.ScalarValue)({
                        IntValue: (*int)(<nil>),
                        BoolValue: (*bool)(true),
                        FloatValue: (*float64)(<nil>),
                        StringValue: (*string)(<nil>),
                        SourceMeta: (*source.Meta)({
                          Position: (source.Position) {
                            Line: (int) 41,
                            Column: (int) 20
                          },
                          EndPosition: (*source.Position)({
                            Line: (int) 41,
                            Column: (int) 26
                          })
                        })
                      }),
                      Fields: (map[string]*core.MappingNode) <nil>,
                      Items: ([]*core.MappingNode) <nil>,
                      StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                      SourceMeta: (*source.Meta)({
                        Position: (source.Position) {
                          Line: (int) 41,
                          Column: (int) 20
                        },
                        EndPosition: (*source.Position)({
                          Line: (int) 41,
                          Column: (int) 26
                        })
                      }),
                      FieldsSourceMeta: (map[string]*source.Meta) <nil>
                    })
                  },
                  Items: ([]*core.MappingNode) <nil>,
                  StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                  SourceMeta: (*source.Meta)({
                    Position: (source.Position) {
                      Line: (int) 39,
                      Column: (int) 22
                    },
                    EndPosition: (*source.Position)({
                      Line: (int) 42,
                      Column: (int) 12
                    })
                  }),
                  FieldsSourceMeta: (map[string]*source.Meta) (len=2) {
                    (string) (len=4) "type": (*source.Meta)({
                      Position: (source.Position) {
                        Line: (int) 40,
                        Column: (int) 13
                      },
                      EndPosition: (*source.Position)({
                        Line: (int) 40,
                        Column: (int) 30
                      })
                    }),
                    (string) (len=5) "value": (*source.Meta)({
                      Position: (source.Position) {
                        Line: (int) 41,
                        Column: (int) 13
                      },
                      EndPosition: (*source.Position)({
                        Line: (int) 41,
                        Column: (int) 26
                      })
                    })
                  }
                })
              },
              Items: ([]*core.MappingNode) <nil>,
              StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
              SourceMeta: (*source.Meta)({
                Position: (source.Position) {
                  Line: (int) 30,
                  Column: (int) 21
                },
                EndPosition: (*source.Position)({
                  Line: (int) 44,
                  Column: (int) 10
                })
              }),
              FieldsSourceMeta: (map[string]*source.Meta) (len=4) {
                (string) (len=9) "nestedRef": (*source.Meta)({
                  Position: (source.Position) {
                    Line: (int) 43,
                    Column: (int) 11
                  },
                  EndPosition: (*source.Position)({
                    Line: (int) 43,
                    Column: (int) 52
                  })
                }),
                (string) (len=9) "property1": (*source.Meta)({
                  Position: (source.Position) {
                    Line: (int) 31,
                    Column: (int) 11
                  },
                  EndPosition: (*source.Position)({
                    Line: (int) 34,
                    Column: (int) 12
                  })
                }),
                (string) (len=9) "property2": (*source.Meta)({
                  Position: (source.Position) {
                    Line: (int) 35,
                    Column: (int) 11
                  },
                  EndPosition: (*source.Position)({
                    Line: (int) 38,
                    Column: (int) 12
                  })
                }),
                (string) (len=9) "property3": (*source.Meta)({
                  Position: (source.Position) {
                    Line: (int) 39,
                    Column: (int) 11
                  },
                  EndPosition: (*source.Position)({
                    Line: (int) 42,
                    Column: (int) 12
                  })
                })
              }
            })
          },
          Items: ([]*core.MappingNode) <nil>,
          StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
          SourceMeta: (*source.Meta)({
            Position: (source.Position) {
              Line: (int) 27,
              Column: (int) 14
            },
            EndPosition: (*source.Position)({
              Line: (int) 45,
              Column: (int) 8
            })
          }),
          FieldsSourceMeta: (map[string]*source.Meta) (len=3) {
            (string) (len=11) "description": (*source.Meta)({
              Position: (source.Position) {
                Line: (int) 29,
                Column: (int) 9
              },
              EndPosition: (*source.Position)({
                Line: (int) 29,
                Column: (int) 60
              })
            }),
            (string) (len=4) "name": (*source.Meta)({
              Position: (source.Position) {
                Line: (int) 28,
                Column: (int) 9
              },
              EndPosition: (*source.Position)({
                Line: (int) 28,
                Column: (int) 32
              })
            }),
            (string) (len=10) "properties": (*source.Meta)({
              Position: (source.Position) {
                Line: (int) 30,
                Column: (int) 9
              },
              EndPosition: (*source.Position)({
                Line: (int) 44,
                Column: (int) 10
              })
            })
          }
        }),
        Description: (*substitutions.StringOrSubstitutions)({
          Values: ([]*substitutions.StringOrSubstitution) (len=1) {
            (*substitutions.StringOrSubstitution)({
              StringValue: (*string)((len=26) "A sample object value type"),
              SubstitutionValue: (*substitutions.Substitution)(<nil>),
              SourceMeta: (*source.Meta)({
                Position: (source.Position) {
                  Line: (int) 26,
                  Column: (int) 22
                },
                EndPosition: (*source.Position)({
                  Line: (int) 26,
                  Column: (int) 49
                })
              })
            })
          },
          SourceMeta: (*source.Meta)({
            Position: (source.Position) {
              Line: (int) 26,
              Column: (int) 20
            },
            EndPosition: (*source.Position)({
              Line: (int) 26,
              Column: (int) 50
            })
          })
        }),
        Secret: (*core.ScalarValue)({
          IntValue: (*int)(<nil>),
          BoolValue: (*bool)(<nil>),
          FloatValue: (*float64)(<nil>),
          StringValue: (*string)(<nil>),
          SourceMeta: (*source.Meta)(<nil>)
        }),
        SourceMeta: (*source.Meta)({
          Position: (source.Position) {
            Line: (int) 24,
            Column: (int) 19
          },
          EndPosition: (*source.Position)({
            Line: (int) 46,
            Column: (int) 6
          })
        })
      })
    },
    SourceMeta: (map[string]*source.Meta) (len=6) {
      (string) (len=12) "alteredTable": (*source.Meta)({
        Position: (source.Position) {
          Line: (int) 19,
          Column: (int) 19
        },
        EndPosition: (*source.Position)({
          Line: (int) 23,
          Column: (int) 6
        })
      }),
      (string) (len=11) "sampleArray": (*source.Meta)({
        Position: (source.Position) {
          Line: (int) 47,
          Column: (int) 18
        },
        EndPosition: (*source.Position)({
          Line: (int) 68,
          Column: (int) 6
        })
      }),
      (string) (len=13) "sampleBoolean": (*source.Meta)({
        Position: (source.Position) {
          Line: (int) 74,
          Column: (int) 20
        },
        EndPosition: (*source.Position)({
          Line: (int) 78,
          Column: (int) 6
        })
      }),
      (string) (len=11) "sampleFloat": (*source.Meta)({
        Position: (source.Position) {
          Line: (int) 79,
          Column: (int) 18
        },
        EndPosition: (*source.Position)({
          Line: (int) 83,
          Column: (int) 6
        })
      }),
      (string) (len=13) "sampleInteger": (*source.Meta)({
        Position: (source.Position) {
          Line: (int) 69,
          Column: (int) 20
        },
        EndPosition: (*source.Position)({
          Line: (int) 73,
          Column: (int) 6
        })
      }),
      (string) (len=12) "sampleObject": (*source.Meta)({
        Position: (source.Position) {
          Line: (int) 24,
          Column: (int) 19
        },
        EndPosition: (*source.Position)({
          Line: (int) 46,
          Column: (int) 6
        })
      })
    }
  }),
  Include: (*schema.IncludeMap)({
    Values: (map[string]*schema.Include) <nil>,
    SourceMeta: (map[string]*source.Meta) <nil>
  }),
  Resources: (*schema.ResourceMap)({
    Values: (map[string]*schema.Resource) (len=6) {
      (string) (len=10) "authoriser": (*schema.Resource)({
        Type: (*schema.ResourceTypeWrapper)({
          Value: (string) (len=16) "celerity/handler",
          SourceMeta: (*source.Meta)({
            Position: (source.Position) {
              Line: (int) 173,
              Column: (int) 13
            },
            EndPosition: (*source.Position)({
              Line: (int) 173,
              Column: (int) 33
            })
          })
        }),
        Description: (*substitutions.StringOrSubstitutions)({
          Values: ([]*substitutions.StringOrSubstitution) <nil>,
          SourceMeta: (*source.Meta)(<nil>)
        }),
        Metadata: (*schema.Metadata)({
          DisplayName: (*substitutions.StringOrSubstitutions)({
            Values: ([]*substitutions.StringOrSubstitution) (len=1) {
              (*substitutions.StringOrSubstitution)({
                StringValue: (*string)((len=10) "Authoriser"),
                SubstitutionValue: (*substitutions.Substitution)(<nil>),
                SourceMeta: (*source.Meta)({
                  Position: (source.Position) {
                    Line: (int) 175,
                    Column: (int) 24
                  },
                  EndPosition: (*source.Position)({
                    Line: (int) 175,
                    Column: (int) 35
                  })
                })
              })
            },
            SourceMeta: (*source.Meta)({
              Position: (source.Position) {
                Line: (int) 175,
                Column: (int) 22
              },
              EndPosition: (*source.Position)({
                Line: (int) 175,
                Column: (int) 36
              })
            })
          }),
          Annotations: (*schema.StringOrSubstitutionsMap)({
            Values: (map[string]*substitutions.StringOrSubstitutions) (len=4) {
              (string) (len=10) "authoriser": (*substitutions.StringOrSubstitutions)({
                Values: ([]*substitutions.StringOrSubstitution) (len=1) {
                  (*substitutions.StringOrSubstitution)({
                    StringValue: (*string)((len=4) "true"),
                    SubstitutionValue: (*substitutions.Substitution)(<nil>),
                    SourceMeta: (*source.Meta)({
                      Position: (source.Position) {
                        Line: (int) 180,
                        Column: (int) 25
                      },
                      EndPosition: (*source.Position)({
                        Line: (int) 180,
                        Column: (int) 30
                      })
                    })
                  })
                },
                SourceMeta: (*source.Meta)({
                  Position: (source.Position) {
                    Line: (int) 180,
                    Column: (int) 23
                  },
                  EndPosition: (*source.Position)({
                    Line: (int) 180,
                    Column: (int) 31
                  })
                })
              }),
              (string) (len=26) "authoriser.identity.header": (*substitutions.StringOrSubstitutions)({
                Values: ([]*substitutions.StringOrSubstitution) (len=1) {
                  (*substitutions.StringOrSubstitution)({
                    StringValue: (*string)((len=18) "MyCustomAuthHeader"),
                    SubstitutionValue: (*substitutions.Substitution)(<nil>),
                    SourceMeta: (*source.Meta)({
                      Position: (source.Position) {
                        Line: (int) 184,
                        Column: (int) 41
                      },
                      EndPosition: (*source.Position)({
                        Line: (int) 184,
                        Column: (int) 60
                      })
                    })
                  })
                },
                SourceMeta: (*source.Meta)({
                  Position: (source.Position) {
                    Line: (int) 184,
                    Column: (int) 39
                  },
                  EndPosition: (*source.Position)({
                    Line: (int) 184,
                    Column: (int) 61
                  })
                })
              }),
              (string) (len=36) "authoriser.identity.reauthoriseEvery": (*substitutions.StringOrSubstitutions)({
                Values: ([]*substitutions.StringOrSubstitution) (len=1) {
                  (*substitutions.StringOrSubstitution)({
                    StringValue: (*string)((len=2) "20"),
                    SubstitutionValue: (*substitutions.Substitution)(<nil>),
                    SourceMeta: (*source.Meta)({
                      Position: (source.Position) {
                        Line: (int) 186,
                        Column: (int) 51
                      },
                      EndPosition: (*source.Position)({
                        Line: (int) 186,
                        Column: (int) 54
                      })
                    })
                  })
                },
                SourceMeta: (*source.Meta)({
                  Position: (source.Position) {
                    Line: (int) 186,
                    Column: (int) 49
                  },
                  EndPosition: (*source.Position)({
                    Line: (int) 186,
                    Column: (int) 55
                  })
                })
              }),
              (string) (len=40) "authoriser.identity.validationExpression": (*substitutions.StringOrSubstitutions)({
                Values: ([]*substitutions.StringOrSubstitution) (len=1) {
                  (*substitutions.StringOrSubstitution)({
                    StringValue: (*string)((len=9) "Bearer .*"),
                    SubstitutionValue: (*substitutions.Substitution)(<nil>),
                    SourceMeta: (*source.Meta)({
                      Position: (source.Position) {
                        Line: (int) 185,
                        Column: (int) 55
                      },
                      EndPosition: (*source.Position)({
                        Line: (int) 185,
                        Column: (int) 65
                      })
                    })
                  })
                },
                SourceMeta: (*source.Meta)({
                  Position: (source.Position) {
                    Line: (int) 185,
                    Column: (int) 53
                  },
                  EndPosition: (*source.Position)({
                    Line: (int) 185,
                    Column: (int) 66
                  })
                })
              })
            },
            SourceMeta: (map[string]*source.Meta) (len=4) {
              (string) (len=10) "authoriser": (*source.Meta)({
                Position: (source.Position) {
                  Line: (int) 180,
                  Column: (int) 23
                },
                EndPosition: (*source.Position)({
                  Line: (int) 180,
                  Column: (int) 31
                })
              }),
              (string) (len=26) "authoriser.identity.header": (*source.Meta)({
                Position: (source.Position) {
                  Line: (int) 184,
                  Column: (int) 39
                },
                EndPosition: (*source.Position)({
                  Line: (int) 184,
                  Column: (int) 61
                })
              }),
              (string) (len=36) "authoriser.identity.reauthoriseEvery": (*source.Meta)({
                Position: (source.Position) {
                  Line: (int) 186,
                  Column: (int) 49
                },
                EndPosition: (*source.Position)({
                  Line: (int) 186,
                  Column: (int) 55
                })
              }),
              (string) (len=40) "authoriser.identity.validationExpression": (*source.Meta)({
                Position: (source.Position) {
                  Line: (int) 185,
                  Column: (int) 53
                },
                EndPosition: (*source.Position)({
                  Line: (int) 185,
                  Column: (int) 66
                })
              })
            }
          }),
          Labels: (*schema.StringMap)({
            Values: (map[string]string) (len=1) {
              (string) (len=3) "app": (string) (len=8) "orderApi"
            },
            SourceMeta: (map[string]*source.Meta) (len=1) {
              (string) (len=3) "app": (*source.Meta)({
                Position: (source.Position) {
                  Line: (int) 189,
                  Column: (int) 16
                },
                EndPosition: (*source.Position)({
                  Line: (int) 189,
                  Column: (int) 28
                })
              })
            }
          }),
          Custom: (*core.MappingNode)({
            Scalar: (*core.ScalarValue)(<nil>),
            Fields: (map[string]*core.MappingNode) <nil>,
            Items: ([]*core.MappingNode) <nil>,
            StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
            SourceMeta: (*source.Meta)(<nil>),
            FieldsSourceMeta: (map[string]*source.Meta) <nil>
          }),
          SourceMeta: (*source.Meta)({
            Position: (source.Position) {
              Line: (int) 174,
              Column: (int) 17
            },
            EndPosition: (*source.Position)({
              Line: (int) 191,
              Column: (int) 8
            })
          })
        }),
        DependsOn: (*schema.DependsOnList)({
          StringList: (schema.StringList) {
            Values: ([]string) <nil>,
            SourceMeta: ([]*source.Meta) <nil>
          }
        }),
        Condition: (*schema.Condition)({
          And: ([]*schema.Condition) <nil>,
          Or: ([]*schema.Condition) <nil>,
          Not: (*schema.Condition)(<nil>),
          StringValue: (*substitutions.StringOrSubstitutions)(<nil>),
          SourceMeta: (*source.Meta)(<nil>)
        }),
        Each: (*substitutions.StringOrSubstitutions)({
          Values: ([]*substitutions.StringOrSubstitution) <nil>,
          SourceMeta: (*source.Meta)(<nil>)
        }),
        LinkSelector: (*schema.LinkSelector)({
          ByLabel: (*schema.StringMap)(<nil>),
          SourceMeta: (*source.Meta)(<nil>)
        }),
        Spec: (*core.MappingNode)({
          Scalar: (*core.ScalarValue)(<nil>),
          Fields: (map[string]*core.MappingNode) (len=2) {
            (string) (len=7) "handler": (*core.MappingNode)({
              Scalar: (*core.ScalarValue)({
                IntValue: (*int)(<nil>),
                BoolValue: (*bool)(<nil>),
                FloatValue: (*float64)(<nil>),
                StringValue: (*string)((len=19) "handlers.Authoriser"),
                SourceMeta: (*source.Meta)({
                  Position: (source.Position) {
                    Line: (int) 193,
                    Column: (int) 18
                  },
                  EndPosition: (*source.Position)({
                    Line: (int) 193,
                    Column: (int) 41
                  })
                })
              }),
              Fields: (map[string]*core.MappingNode) <nil>,
              Items: ([]*core.MappingNode) <nil>,
              StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
              SourceMeta: (*source.Meta)({
                Position: (source.Position) {
                  Line: (int) 193,
                  Column: (int) 18
                },
                EndPosition: (*source.Position)({
                  Line: (int) 193,
                  Column: (int) 41
                })
              }),
              FieldsSourceMeta: (map[string]*source.Meta) <nil>
            }),
            (string) (len=7) "timeout": (*core.MappingNode)({
              Scalar: (*core.ScalarValue)({
                IntValue: (*int)(120),
                BoolValue: (*bool)(<nil>),
                FloatValue: (*float64)(<nil>),
                StringValue: (*string)(<nil>),
                SourceMeta: (*source.Meta)({
                  Position: (source.Position) {
                    Line: (int) 194,
                    Column: (int) 18
                  },
                  EndPosition: (*source.Position)({
                    Line: (int) 194,
                    Column: (int) 23
                  })
                })
              }),
              Fields: (map[string]*core.MappingNode) <nil>,
              Items: ([]*core.MappingNode) <nil>,
              StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
              SourceMeta: (*source.Meta)({
                Position: (source.Position) {
                  Line: (int) 194,
                  Column: (int) 18
                },
                EndPosition: (*source.Position)({
                  Line: (int) 194,
                  Column: (int) 23
                })
              }),
              FieldsSourceMeta: (map[string]*source.Meta) <nil>
            })
          },
          Items: ([]*core.MappingNode) <nil>,
          StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
          SourceMeta: (*source.Meta)({
            Position: (source.Position) {
              Line: (int) 192,
              Column: (int) 13
            },
            EndPosition: (*source.Position)({
              Line: (int) 195,
              Column: (int) 8
            })
          }),
          FieldsSourceMeta: (map[string]*source.Meta) (len=2) {
            (string) (len=7) "handler": (*source.Meta)({
              Position: (source.Position) {
                Line: (int) 193,
                Column: (int) 9
              },
              EndPosition: (*source.Position)({
                Line: (int) 193,
                Column: (int) 41
              })
            }),
            (string) (len=7) "timeout": (*source.Meta)({
              Position: (source.Position) {
                Line: (int) 194,
                Column: (int) 9
              },
              EndPosition: (*source.Position)({
                Line: (int) 194,
                Column: (int) 23
              })
            })
          }
        }),
        SourceMeta: (*source.Meta)({
          Position: (source.Position) {
            Line: (int) 172,
            Column: (int) 17
          },
          EndPosition: (*source.Position)({
            Line: (int) 196,
            Column: (int) 6
          })
        })
      }),
      (string) (len=16) "getOrdersHandler": (*schema.Resource)({
        Type: (*schema.ResourceTypeWrapper)({
          Value: (string) (len=16) "celerity/handler",
          SourceMeta: (*source.Meta)({
            Position: (source.Position) {
              Line: (int) 198,
              Column: (int) 13
            },
            EndPosition: (*source.Position)({
              Line: (int) 198,
              Column: (int) 33
            })
          })
        }),
        Description: (*substitutions.StringOrSubstitutions)({
          Values: ([]*substitutions.StringOrSubstitution) <nil>,
          SourceMeta: (*source.Meta)(<nil>)
        }),
        Metadata: (*schema.Metadata)({
          DisplayName: (*substitutions.StringOrSubstitutions)({
            Values: ([]*substitutions.StringOrSubstitution) (len=1) {
              (*substitutions.StringOrSubstitution)({
                StringValue: (*string)((len=18) "Get Orders Handler"),
                SubstitutionValue: (*substitutions.Substitution)(<nil>),
                SourceMeta: (*source.Meta)({
                  Position: (source.Position) {
                    Line: (int) 200,
                    Column: (int) 24
                  },
                  EndPosition: (*source.Position)({
                    Line: (int) 200,
                    Column: (int) 43
                  })
                })
              })
            },
            SourceMeta: (*source.Meta)({
              Position: (source.Position) {
                Line: (int) 200,
                Column: (int) 22
              },
              EndPosition: (*source.Position)({
                Line: (int) 200,
                Column: (int) 44
              })
            })
          }),
          Annotations: (*schema.StringOrSubstitutionsMap)({
            Values: (map[string]*substitutions.StringOrSubstitutions) <nil>,
            SourceMeta: (map[string]*source.Meta) <nil>
          }),
          Labels: (*schema.StringMap)({
            Values: (map[string]string) (len=1) {
              (string) (len=3) "app": (string) (len=8) "orderApi"
            },
            SourceMeta: (map[string]*source.Meta) (len=1) {
              (string) (len=3) "app": (*source.Meta)({
                Position: (source.Position) {
                  Line: (int) 202,
                  Column: (int) 16
                },
                EndPosition: (*source.Position)({
                  Line: (int) 202,
                  Column: (int) 28
                })
              })
            }
          }),
          Custom: (*core.MappingNode)({
            Scalar: (*core.ScalarValue)(<nil>),
            Fields: (map[string]*core.MappingNode) <nil>,
            Items: ([]*core.MappingNode) <nil>,
            StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
            SourceMeta: (*source.Meta)(<nil>),
            FieldsSourceMeta: (map[string]*source.Meta) <nil>
          }),
          SourceMeta: (*source.Meta)({
            Position: (source.Position) {
              Line: (int) 199,
              Column: (int) 17
            },
            EndPosition: (*source.Position)({
              Line: (int) 204,
              Column: (int) 8
            })
          })
        }),
        DependsOn: (*schema.DependsOnList)({
          StringList: (schema.StringList) {
            Values: ([]string) <nil>,
            SourceMeta: ([]*source.Meta) <nil>
          }
        }),
        Condition: (*schema.Condition)({
          And: ([]*schema.Condition) <nil>,
          Or: ([]*schema.Condition) <nil>,
          Not: (*schema.Condition)(<nil>),
          StringValue: (*substitutions.StringOrSubstitutions)(<nil>),
          SourceMeta: (*source.Meta)(<nil>)
        }),
        Each: (*substitutions.StringOrSubstitutions)({
          Values: ([]*substitutions.StringOrSubstitution) <nil>,
          SourceMeta: (*source.Meta)(<nil>)
        }),
        LinkSelector: (*schema.LinkSelector)({
          ByLabel: (*schema.StringMap)(<nil>),
          SourceMeta: (*source.Meta)(<nil>)
        }),
        Spec: (*core.MappingNode)({
          Scalar: (*core.ScalarValue)(<nil>),
          Fields: (map[string]*core.MappingNode) (len=3) {
            (string) (len=8) "endpoint": (*core.MappingNode)({
              Scalar: (*core.ScalarValue)(<nil>),
              Fields: (map[string]*core.MappingNode) (len=3) {
                (string) (len=10) "authoriser": (*core.MappingNode)({
                  Scalar: (*core.ScalarValue)(<nil>),
                  Fields: (map[string]*core.MappingNode) <nil>,
                  Items: ([]*core.MappingNode) <nil>,
                  StringWithSubstitutions: (*substitutions.StringOrSubstitutions)({
                    Values: ([]*substitutions.StringOrSubstitution) (len=1) {
                      (*substitutions.StringOrSubstitution)({
                        StringValue: (*string)(<nil>),
                        SubstitutionValue: (*substitutions.Substitution)({
                          Function: (*substitutions.SubstitutionFunctionExpr)(<nil>),
                          Variable: (*substitutions.SubstitutionVariable)(<nil>),
                          ValueReference: (*substitutions.SubstitutionValueReference)(<nil>),
                          ElemReference: (*substitutions.SubstitutionElemReference)(<nil>),
                          ElemIndexReference: (*substitutions.SubstitutionElemIndexReference)(<nil>),
                          DataSourceProperty: (*substitutions.SubstitutionDataSourceProperty)(<nil>),
                          ResourceProperty: (*substitutions.SubstitutionResourceProperty)({
                            ResourceName: (string) (len=10) "authoriser",
                            ResourceEachTemplateIndex: (*int64)(<nil>),
                            Path: ([]*substitutions.SubstitutionPathItem) {
                            },
                            SourceMeta: (*source.Meta)({
                              Position: (source.Position) {
                                Line: (int) 211,
                                Column: (int) 28
                              },
                              EndPosition: (*source.Position)({
                                Line: (int) 211,
                                Column: (int) 38
                              })
                            })
                          }),
                          Child: (*substitutions.SubstitutionChild)(<nil>),
                          StringValue: (*string)(<nil>),
                          IntValue: (*int64)(<nil>),
                          FloatValue: (*float64)(<nil>),
                          BoolValue: (*bool)(<nil>),
                          SourceMeta: (*source.Meta)({
                            Position: (source.Position) {
                              Line: (int) 211,
                              Column: (int) 28
                            },
                            EndPosition: (*source.Position)({
                              Line: (int) 211,
                              Column: (int) 38
                            })
                          })
                        }),
                        SourceMeta: (*source.Meta)({
                          Position: (source.Position) {
                            Line: (int) 211,
                            Column: (int) 25
                          },
                          EndPosition: (*source.Position)({
                            Line: (int) 211,
                            Column: (int) 38
                          })
                        })
                      })
                    },
                    SourceMeta: (*source.Meta)({
                      Position: (source.Position) {
                        Line: (int) 211,
                        Column: (int) 23
                      },
                      EndPosition: (*source.Position)({
                        Line: (int) 211,
                        Column: (int) 40
                      })
                    })
                  }),
                  SourceMeta: (*source.Meta)({
                    Position: (source.Position) {
                      Line: (int) 211,
                      Column: (int) 23
                    },
                    EndPosition: (*source.Position)({
                      Line: (int) 211,
                      Column: (int) 40
                    })
                  }),
                  FieldsSourceMeta: (map[string]*source.Meta) <nil>
                }),
                (string) (len=6) "method": (*core.MappingNode)({
                  Scalar: (*core.ScalarValue)({
                    IntValue: (*int)(<nil>),
                    BoolValue: (*bool)(<nil>),
                    FloatValue: (*float64)(<nil>),
                    StringValue: (*string)((len=3) "get"),
                    SourceMeta: (*source.Meta)({
                      Position: (source.Position) {
                        Line: (int) 209,
                        Column: (int) 19
                      },
                      EndPosition: (*source.Position)({
                        Line: (int) 209,
                        Column: (int) 26
                      })
                    })
                  }),
                  Fields: (map[string]*core.MappingNode) <nil>,
                  Items: ([]*core.MappingNode) <nil>,
                  StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                  SourceMeta: (*source.Meta)({
                    Position: (source.Position) {
                      Line: (int) 209,
                      Column: (int) 19
                    },
                    EndPosition: (*source.Position)({
                      Line: (int) 209,
                      Column: (int) 26
                    })
                  }),
                  FieldsSourceMeta: (map[string]*source.Meta) <nil>
                }),
                (string) (len=4) "path": (*core.MappingNode)({
                  Scalar: (*core.ScalarValue)({
                    IntValue: (*int)(<nil>),
                    BoolValue: (*bool)(<nil>),
                    FloatValue: (*float64)(<nil>),
                    StringValue: (*string)((len=7) "/orders"),
                    SourceMeta: (*source.Meta)({
                      Position: (source.Position) {
                        Line: (int) 210,
                        Column: (int) 17
                      },
                      EndPosition: (*source.Position)({
                        Line: (int) 210,
                        Column: (int) 28
                      })
                    })
                  }),
                  Fields: (map[string]*core.MappingNode) <nil>,
                  Items: ([]*core.MappingNode) <nil>,
                  StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                  SourceMeta: (*source.Meta)({
                    Position: (source.Position) {
                      Line: (int) 210,
                      Column: (int) 17
                    },
                    EndPosition: (*source.Position)({
                      Line: (int) 210,
                      Column: (int) 28
                    })
                  }),
                  FieldsSourceMeta: (map[string]*source.Meta) <nil>
                })
              },
              Items: ([]*core.MappingNode) <nil>,
              StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
              SourceMeta: (*source.Meta)({
                Position: (source.Position) {
                  Line: (int) 208,
                  Column: (int) 19
                },
                EndPosition: (*source.Position)({
                  Line: (int) 212,
                  Column: (int) 10
                })
              }),
              FieldsSourceMeta: (map[string]*source.Meta) (len=3) {
                (string) (len=10) "authoriser": (*source.Meta)({
                  Position: (source.Position) {
                    Line: (int) 211,
                    Column: (int) 11
                  },
                  EndPosition: (*source.Position)({
                    Line: (int) 211,
                    Column: (int) 40
                  })
                }),
                (string) (len=6) "method": (*source.Meta)({
                  Position: (source.Position) {
                    Line: (int) 209,
                    Column: (int) 11
                  },
                  EndPosition: (*source.Position)({
                    Line: (int) 209,
                    Column: (int) 26
                  })
                }),
                (string) (len=4) "path": (*source.Meta)({
                  Position: (source.Position) {
                    Line: (int) 210,
                    Column: (int) 11
                  },
                  EndPosition: (*source.Position)({
                    Line: (int) 210,
                    Column: (int) 28
                  })
                })
              }
            }),
            (string) (len=7) "handler": (*core.MappingNode)({
              Scalar: (*core.ScalarValue)({
                IntValue: (*int)(<nil>),
                BoolValue: (*bool)(<nil>),
                FloatValue: (*float64)(<nil>),
                StringValue: (*string)((len=18) "handlers.GetOrders"),
                SourceMeta: (*source.Meta)({
                  Position: (source.Position) {
                    Line: (int) 206,
                    Column: (int) 18
                  },
                  EndPosition: (*source.Position)({
                    Line: (int) 206,
                    Column: (int) 40
                  })
                })
              }),
              Fields: (map[string]*core.MappingNode) <nil>,
              Items: ([]*core.MappingNode) <nil>,
              StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
              SourceMeta: (*source.Meta)({
                Position: (source.Position) {
                  Line: (int) 206,
                  Column: (int) 18
                },
                EndPosition: (*source.Position)({
                  Line: (int) 206,
                  Column: (int) 40
                })
              }),
              FieldsSourceMeta: (map[string]*source.Meta) <nil>
            }),
            (string) (len=7) "timeout": (*core.MappingNode)({
              Scalar: (*core.ScalarValue)({
                IntValue: (*int)(120),
                BoolValue: (*bool)(<nil>),
                FloatValue: (*float64)(<nil>),
                StringValue: (*string)(<nil>),
                SourceMeta: (*source.Meta)({
                  Position: (source.Position) {
                    Line: (int) 207,
                    Column: (int) 18
                  },
                  EndPosition: (*source.Position)({
                    Line: (int) 207,
                    Column: (int) 23
                  })
                })
              }),
              Fields: (map[string]*core.MappingNode) <nil>,
              Items: ([]*core.MappingNode) <nil>,
              StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
              SourceMeta: (*source.Meta)({
                Position: (source.Position) {
                  Line: (int) 207,
                  Column: (int) 18
                },
                EndPosition: (*source.Position)({
                  Line: (int) 207,
                  Column: (int) 23
                })
              }),
              FieldsSourceMeta: (map[string]*source.Meta) <nil>
            })
          },
          Items: ([]*core.MappingNode) <nil>,
          StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
          SourceMeta: (*source.Meta)({
            Position: (source.Position) {
              Line: (int) 205,
              Column: (int) 13
            },
            EndPosition: (*source.Position)({
              Line: (int) 213,
              Column: (int) 8
            })
          }),
          FieldsSourceMeta: (map[string]*source.Meta) (len=3) {
            (string) (len=8) "endpoint": (*source.Meta)({
              Position: (source.Position) {
                Line: (int) 208,
                Column: (int) 9
              },
              EndPosition: (*source.Position)({
                Line: (int) 212,
                Column: (int) 10
              })
            }),
            (string) (len=7) "handler": (*source.Meta)({
              Position: (source.Position) {
                Line: (int) 206,
                Column: (int) 9
              },
              EndPosition: (*source.Position)({
                Line: (int) 206,
                Column: (int) 40
              })
            }),
            (string) (len=7) "timeout": (*source.Meta)({
              Position: (source.Position) {
                Line: (int) 207,
                Column: (int) 9
              },
              EndPosition: (*source.Position)({
                Line: (int) 207,
                Column: (int) 23
              })
            })
          }
        }),
        SourceMeta: (*source.Meta)({
          Position: (source.Position) {
            Line: (int) 197,
            Column: (int) 23
          },
          EndPosition: (*source.Position)({
            Line: (int) 214,
            Column: (int) 6
          })
        })
      }),
      (string) (len=8) "orderApi": (*schema.Resource)({
        Type: (*schema.ResourceTypeWrapper)({
          Value: (string) (len=12) "celerity/api",
          SourceMeta: (*source.Meta)({
            Position: (source.Position) {
              Line: (int) 116,
              Column: (int) 13
            },
            EndPosition: (*source.Position)({
              Line: (int) 116,
              Column: (int) 29
            })
          })
        }),
        Description: (*substitutions.StringOrSubstitutions)({
          Values: ([]*substitutions.StringOrSubstitution) <nil>,
          SourceMeta: (*source.Meta)(<nil>)
        }),
        Metadata: (*schema.Metadata)({
          DisplayName: (*substitutions.StringOrSubstitutions)({
            Values: ([]*substitutions.StringOrSubstitution) (len=1) {
              (*substitutions.StringOrSubstitution)({
                StringValue: (*string)((len=9) "Order API"),
                SubstitutionValue: (*substitutions.Substitution)(<nil>),
                SourceMeta: (*source.Meta)({
                  Position: (source.Position) {
                    Line: (int) 118,
                    Column: (int) 24
                  },
                  EndPosition: (*source.Position)({
                    Line: (int) 118,
                    Column: (int) 34
                  })
                })
              })
            },
            SourceMeta: (*source.Meta)({
              Position: (source.Position) {
                Line: (int) 118,
                Column: (int) 22
              },
              EndPosition: (*source.Position)({
                Line: (int) 118,
                Column: (int) 35
              })
            })
          }),
          Annotations: (*schema.StringOrSubstitutionsMap)({
            Values: (map[string]*substitutions.StringOrSubstitutions) <nil>,
            SourceMeta: (map[string]*source.Meta) <nil>
          }),
          Labels: (*schema.StringMap)({
            Values: (map[string]string) (len=1) {
              (string) (len=3) "app": (string) (len=8) "orderApi"
            },
            SourceMeta: (map[string]*source.Meta) (len=1) {
              (string) (len=3) "app": (*source.Meta)({
                Position: (source.Position) {
                  Line: (int) 120,
                  Column: (int) 16
                },
                EndPosition: (*source.Position)({
                  Line: (int) 120,
                  Column: (int) 28
                })
              })
            }
          }),
          Custom: (*core.MappingNode)({
            Scalar: (*core.ScalarValue)(<nil>),
            Fields: (map[string]*core.MappingNode) (len=1) {
              (string) (len=6) "visual": (*core.MappingNode)({
                Scalar: (*core.ScalarValue)(<nil>),
                Fields: (map[string]*core.MappingNode) (len=4) {
                  (string) (len=6) "height": (*core.MappingNode)({
                    Scalar: (*core.ScalarValue)({
                      IntValue: (*int)(50),
                      BoolValue: (*bool)(<nil>),
                      FloatValue: (*float64)(<nil>),
                      StringValue: (*string)(<nil>),
                      SourceMeta: (*source.Meta)({
                        Position: (source.Position) {
                          Line: (int) 126,
                          Column: (int) 21
                        },
                        EndPosition: (*source.Position)({
                          Line: (int) 126,
                          Column: (int) 25
                        })
                      })
                    }),
                    Fields: (map[string]*core.MappingNode) <nil>,
                    Items: ([]*core.MappingNode) <nil>,
                    StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                    SourceMeta: (*source.Meta)({
                      Position: (source.Position) {
                        Line: (int) 126,
                        Column: (int) 21
                      },
                      EndPosition: (*source.Position)({
                        Line: (int) 126,
                        Column: (int) 25
                      })
                    }),
                    FieldsSourceMeta: (map[string]*source.Meta) <nil>
                  }),
                  (string) (len=9) "linkPorts": (*core.MappingNode)({
                    Scalar: (*core.ScalarValue)(<nil>),
                    Fields: (map[string]*core.MappingNode) <nil>,
                    Items: ([]*core.MappingNode) (len=1) {
                      (*core.MappingNode)({
                        Scalar: (*core.ScalarValue)(<nil>),
                        Fields: (map[string]*core.MappingNode) (len=3) {
                          (string) (len=10) "annotation": (*core.MappingNode)({
                            Scalar: (*core.ScalarValue)({
                              IntValue: (*int)(<nil>),
                              BoolValue: (*bool)(<nil>),
                              FloatValue: (*float64)(<nil>),
                              StringValue: (*string)((len=10) "Orders API"),
                              SourceMeta: (*source.Meta)({
                                Position: (source.Position) {
                                  Line: (int) 131,
                                  Column: (int) 29
                                },
                                EndPosition: (*source.Position)({
                                  Line: (int) 131,
                                  Column: (int) 43
                                })
                              })
                            }),
                            Fields: (map[string]*core.MappingNode) <nil>,
                            Items: ([]*core.MappingNode) <nil>,
                            StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                            SourceMeta: (*source.Meta)({
                              Position: (source.Position) {
                                Line: (int) 131,
                                Column: (int) 29
                              },
                              EndPosition: (*source.Position)({
                                Line: (int) 131,
                                Column: (int) 43
                              })
                            }),
                            FieldsSourceMeta: (map[string]*source.Meta) <nil>
                          }),
                          (string) (len=9) "connectAt": (*core.MappingNode)({
                            Scalar: (*core.ScalarValue)({
                              IntValue: (*int)(<nil>),
                              BoolValue: (*bool)(<nil>),
                              FloatValue: (*float64)(<nil>),
                              StringValue: (*string)((len=6) "70 100"),
                              SourceMeta: (*source.Meta)({
                                Position: (source.Position) {
                                  Line: (int) 130,
                                  Column: (int) 28
                                },
                                EndPosition: (*source.Position)({
                                  Line: (int) 130,
                                  Column: (int) 38
                                })
                              })
                            }),
                            Fields: (map[string]*core.MappingNode) <nil>,
                            Items: ([]*core.MappingNode) <nil>,
                            StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                            SourceMeta: (*source.Meta)({
                              Position: (source.Position) {
                                Line: (int) 130,
                                Column: (int) 28
                              },
                              EndPosition: (*source.Position)({
                                Line: (int) 130,
                                Column: (int) 38
                              })
                            }),
                            FieldsSourceMeta: (map[string]*source.Meta) <nil>
                          }),
                          (string) (len=6) "linkTo": (*core.MappingNode)({
                            Scalar: (*core.ScalarValue)({
                              IntValue: (*int)(<nil>),
                              BoolValue: (*bool)(<nil>),
                              FloatValue: (*float64)(<nil>),
                              StringValue: (*string)((len=16) "getOrderEndpoint"),
                              SourceMeta: (*source.Meta)({
                                Position: (source.Position) {
                                  Line: (int) 129,
                                  Column: (int) 25
                                },
                                EndPosition: (*source.Position)({
                                  Line: (int) 129,
                                  Column: (int) 45
                                })
                              })
                            }),
                            Fields: (map[string]*core.MappingNode) <nil>,
                            Items: ([]*core.MappingNode) <nil>,
                            StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                            SourceMeta: (*source.Meta)({
                              Position: (source.Position) {
                                Line: (int) 129,
                                Column: (int) 25
                              },
                              EndPosition: (*source.Position)({
                                Line: (int) 129,
                                Column: (int) 45
                              })
                            }),
                            FieldsSourceMeta: (map[string]*source.Meta) <nil>
                          })
                        },
                        Items: ([]*core.MappingNode) <nil>,
                        StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                        SourceMeta: (*source.Meta)({
                          Position: (source.Position) {
                            Line: (int) 128,
                            Column: (int) 16
                          },
                          EndPosition: (*source.Position)({
                            Line: (int) 132,
                            Column: (int) 16
                          })
                        }),
                        FieldsSourceMeta: (map[string]*source.Meta) (len=3) {
                          (string) (len=10) "annotation": (*source.Meta)({
                            Position: (source.Position) {
                              Line: (int) 131,
                              Column: (int) 17
                            },
                            EndPosition: (*source.Position)({
                              Line: (int) 131,
                              Column: (int) 43
                            })
                          }),
                          (string) (len=9) "connectAt": (*source.Meta)({
                            Position: (source.Position) {
                              Line: (int) 130,
                              Column: (int) 17
                            },
                            EndPosition: (*source.Position)({
                              Line: (int) 130,
                              Column: (int) 38
                            })
                          }),
                          (string) (len=6) "linkTo": (*source.Meta)({
                            Position: (source.Position) {
                              Line: (int) 129,
                              Column: (int) 17
                            },
                            EndPosition: (*source.Position)({
                              Line: (int) 129,
                              Column: (int) 45
                            })
                          })
                        }
                      })
                    },
                    StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                    SourceMeta: (*source.Meta)({
                      Position: (source.Position) {
                        Line: (int) 127,
                        Column: (int) 24
                      },
                      EndPosition: (*source.Position)({
                        Line: (int) 133,
                        Column: (int) 14
                      })
                    }),
                    FieldsSourceMeta: (map[string]*source.Meta) <nil>
                  }),
                  (string) (len=5) "point": (*core.MappingNode)({
                    Scalar: (*core.ScalarValue)({
                      IntValue: (*int)(<nil>),
                      BoolValue: (*bool)(<nil>),
                      FloatValue: (*float64)(<nil>),
                      StringValue: (*string)((len=6) "20 100"),
                      SourceMeta: (*source.Meta)({
                        Position: (source.Position) {
                          Line: (int) 124,
                          Column: (int) 20
                        },
                        EndPosition: (*source.Position)({
                          Line: (int) 124,
                          Column: (int) 30
                        })
                      })
                    }),
                    Fields: (map[string]*core.MappingNode) <nil>,
                    Items: ([]*core.MappingNode) <nil>,
                    StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                    SourceMeta: (*source.Meta)({
                      Position: (source.Position) {
                        Line: (int) 124,
                        Column: (int) 20
                      },
                      EndPosition: (*source.Position)({
                        Line: (int) 124,
                        Column: (int) 30
                      })
                    }),
                    FieldsSourceMeta: (map[string]*source.Meta) <nil>
                  }),
                  (string) (len=5) "width": (*core.MappingNode)({
                    Scalar: (*core.ScalarValue)({
                      IntValue: (*int)(50),
                      BoolValue: (*bool)(<nil>),
                      FloatValue: (*float64)(<nil>),
                      StringValue: (*string)(<nil>),
                      SourceMeta: (*source.Meta)({
                        Position: (source.Position) {
                          Line: (int) 125,
                          Column: (int) 20
                        },
                        EndPosition: (*source.Position)({
                          Line: (int) 125,
                          Column: (int) 24
                        })
                      })
                    }),
                    Fields: (map[string]*core.MappingNode) <nil>,
                    Items: ([]*core.MappingNode) <nil>,
                    StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                    SourceMeta: (*source.Meta)({
                      Position: (source.Position) {
                        Line: (int) 125,
                        Column: (int) 20
                      },
                      EndPosition: (*source.Position)({
                        Line: (int) 125,
                        Column: (int) 24
                      })
                    }),
                    FieldsSourceMeta: (map[string]*source.Meta) <nil>
                  })
                },
                Items: ([]*core.MappingNode) <nil>,
                StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                SourceMeta: (*source.Meta)({
                  Position: (source.Position) {
                    Line: (int) 123,
                    Column: (int) 19
                  },
                  EndPosition: (*source.Position)({
                    Line: (int) 134,
                    Column: (int) 12
                  })
                }),
                FieldsSourceMeta: (map[string]*source.Meta) (len=4) {
                  (string) (len=6) "height": (*source.Meta)({
                    Position: (source.Position) {
                      Line: (int) 126,
                      Column: (int) 13
                    },
                    EndPosition: (*source.Position)({
                      Line: (int) 126,
                      Column: (int) 25
                    })
                  }),
                  (string) (len=9) "linkPorts": (*source.Meta)({
                    Position: (source.Position) {
                      Line: (int) 127,
                      Column: (int) 13
                    },
                    EndPosition: (*source.Position)({
                      Line: (int) 133,
                      Column: (int) 14
                    })
                  }),
                  (string) (len=5) "point": (*source.Meta)({
                    Position: (source.Position) {
                      Line: (int) 124,
                      Column: (int) 13
                    },
                    EndPosition: (*source.Position)({
                      Line: (int) 124,
                      Column: (int) 30
                    })
                  }),
                  (string) (len=5) "width": (*source.Meta)({
                    Position: (source.Position) {
                      Line: (int) 125,
                      Column: (int) 13
                    },
                    EndPosition: (*source.Position)({
                      Line: (int) 125,
                      Column: (int) 24
                    })
                  })
                }
              })
            },
            Items: ([]*core.MappingNode) <nil>,
            StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
            SourceMeta: (*source.Meta)({
              Position: (source.Position) {
                Line: (int) 122,
                Column: (int) 17
              },
              EndPosition: (*source.Position)({
                Line: (int) 135,
                Column: (int) 10
              })
            }),
            FieldsSourceMeta: (map[string]*source.Meta) (len=1) {
              (string) (len=6) "visual": (*source.Meta)({
                Position: (source.Position) {
                  Line: (int) 123,
                  Column: (int) 11
                },
                EndPosition: (*source.Position)({
                  Line: (int) 134,
                  Column: (int) 12
                })
              })
            }
          }),
          SourceMeta: (*source.Meta)({
            Position: (source.Position) {
              Line: (int) 117,
              Column: (int) 17
            },
            EndPosition: (*source.Position)({
              Line: (int) 136,
              Column: (int) 8
            })
          })
        }),
        DependsOn: (*schema.DependsOnList)({
          StringList: (schema.StringList) {
            Values: ([]string) <nil>,
            SourceMeta: ([]*source.Meta) <nil>
          }
        }),
        Condition: (*schema.Condition)({
          And: ([]*schema.Condition) <nil>,
          Or: ([]*schema.Condition) <nil>,
          Not: (*schema.Condition)(<nil>),
          StringValue: (*substitutions.StringOrSubstitutions)(<nil>),
          SourceMeta: (*source.Meta)(<nil>)
        }),
        Each: (*substitutions.StringOrSubstitutions)({
          Values: ([]*substitutions.StringOrSubstitution) <nil>,
          SourceMeta: (*source.Meta)(<nil>)
        }),
        LinkSelector: (*schema.LinkSelector)({
          ByLabel: (*schema.StringMap)({
            Values: (map[string]string) (len=1) {
              (string) (len=3) "app": (string) (len=8) "orderApi"
            },
            SourceMeta: (map[string]*source.Meta) (len=1) {
              (string) (len=3) "app": (*source.Meta)({
                Position: (source.Position) {
                  Line: (int) 139,
                  Column: (int) 16
                },
                EndPosition: (*source.Position)({
                  Line: (int) 139,
                  Column: (int) 28
                })
              })
            }
          }),
          SourceMeta: (*source.Meta)({
            Position: (source.Position) {
              Line: (int) 137,
              Column: (int) 21
            },
            EndPosition: (*source.Position)({
              Line: (int) 141,
              Column: (int) 8
            })
          })
        }),
        Spec: (*core.MappingNode)({
          Scalar: (*core.ScalarValue)(<nil>),
          Fields: (map[string]*core.MappingNode) (len=3) {
            (string) (len=11) "environment": (*core.MappingNode)({
              Scalar: (*core.ScalarValue)(<nil>),
              Fields: (map[string]*core.MappingNode) (len=1) {
                (string) (len=9) "variables": (*core.MappingNode)({
                  Scalar: (*core.ScalarValue)(<nil>),
                  Fields: (map[string]*core.MappingNode) (len=1) {
                    (string) (len=14) "DYNAMODB_TABLE": (*core.MappingNode)({
                      Scalar: (*core.ScalarValue)(<nil>),
                      Fields: (map[string]*core.MappingNode) <nil>,
                      Items: ([]*core.MappingNode) <nil>,
                      StringWithSubstitutions: (*substitutions.StringOrSubstitutions)({
                        Values: ([]*substitutions.StringOrSubstitution) (len=1) {
                          (*substitutions.StringOrSubstitution)({
                            StringValue: (*string)(<nil>),
                            SubstitutionValue: (*substitutions.Substitution)({
                              Function: (*substitutions.SubstitutionFunctionExpr)(<nil>),
                              Variable: (*substitutions.SubstitutionVariable)({
                                VariableName: (string) (len=13) "dynamoDBTable",
                                SourceMeta: (*source.Meta)({
                                  Position: (source.Position) {
                                    Line: (int) 154,
                                    Column: (int) 34
                                  },
                                  EndPosition: (*source.Position)({
                                    Line: (int) 154,
                                    Column: (int) 57
                                  })
                                })
                              }),
                              ValueReference: (*substitutions.SubstitutionValueReference)(<nil>),
                              ElemReference: (*substitutions.SubstitutionElemReference)(<nil>),
                              ElemIndexReference: (*substitutions.SubstitutionElemIndexReference)(<nil>),
                              DataSourceProperty: (*substitutions.SubstitutionDataSourceProperty)(<nil>),
                              ResourceProperty: (*substitutions.SubstitutionResourceProperty)(<nil>),
                              Child: (*substitutions.SubstitutionChild)(<nil>),
                              StringValue: (*string)(<nil>),
                              IntValue: (*int64)(<nil>),
                              FloatValue: (*float64)(<nil>),
                              BoolValue: (*bool)(<nil>),
                              SourceMeta: (*source.Meta)({
                                Position: (source.Position) {
                                  Line: (int) 154,
                                  Column: (int) 34
                                },
                                EndPosition: (*source.Position)({
                                  Line: (int) 154,
                                  Column: (int) 57
                                })
                              })
                            }),
                            SourceMeta: (*source.Meta)({
                              Position: (source.Position) {
                                Line: (int) 154,
                                Column: (int) 31
                              },
                              EndPosition: (*source.Position)({
                                Line: (int) 154,
                                Column: (int) 57
                              })
                            })
                          })
                        },
                        SourceMeta: (*source.Meta)({
                          Position: (source.Position) {
                            Line: (int) 154,
                            Column: (int) 29
                          },
                          EndPosition: (*source.Position)({
                            Line: (int) 154,
                            Column: (int) 59
                          })
                        })
                      }),
                      SourceMeta: (*source.Meta)({
                        Position: (source.Position) {
                          Line: (int) 154,
                          Column: (int) 29
                        },
                        EndPosition: (*source.Position)({
                          Line: (int) 154,
                          Column: (int) 59
                        })
                      }),
                      FieldsSourceMeta: (map[string]*source.Meta) <nil>
                    })
                  },
                  Items: ([]*core.MappingNode) <nil>,
                  StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                  SourceMeta: (*source.Meta)({
                    Position: (source.Position) {
                      Line: (int) 153,
                      Column: (int) 22
                    },
                    EndPosition: (*source.Position)({
                      Line: (int) 155,
                      Column: (int) 12
                    })
                  }),
                  FieldsSourceMeta: (map[string]*source.Meta) (len=1) {
                    (string) (len=14) "DYNAMODB_TABLE": (*source.Meta)({
                      Position: (source.Position) {
                        Line: (int) 154,
                        Column: (int) 13
                      },
                      EndPosition: (*source.Position)({
                        Line: (int) 154,
                        Column: (int) 59
                      })
                    })
                  }
                })
              },
              Items: ([]*core.MappingNode) <nil>,
              StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
              SourceMeta: (*source.Meta)({
                Position: (source.Position) {
                  Line: (int) 152,
                  Column: (int) 22
                },
                EndPosition: (*source.Position)({
                  Line: (int) 156,
                  Column: (int) 10
                })
              }),
              FieldsSourceMeta: (map[string]*source.Meta) (len=1) {
                (string) (len=9) "variables": (*source.Meta)({
                  Position: (source.Position) {
                    Line: (int) 153,
                    Column: (int) 11
                  },
                  EndPosition: (*source.Position)({
                    Line: (int) 155,
                    Column: (int) 12
                  })
                })
              }
            }),
            (string) (len=7) "runtime": (*core.MappingNode)({
              Scalar: (*core.ScalarValue)({
                IntValue: (*int)(<nil>),
                BoolValue: (*bool)(<nil>),
                FloatValue: (*float64)(<nil>),
                StringValue: (*string)((len=5) "go1.x"),
                SourceMeta: (*source.Meta)({
                  Position: (source.Position) {
                    Line: (int) 161,
                    Column: (int) 18
                  },
                  EndPosition: (*source.Position)({
                    Line: (int) 161,
                    Column: (int) 27
                  })
                })
              }),
              Fields: (map[string]*core.MappingNode) <nil>,
              Items: ([]*core.MappingNode) <nil>,
              StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
              SourceMeta: (*source.Meta)({
                Position: (source.Position) {
                  Line: (int) 161,
                  Column: (int) 18
                },
                EndPosition: (*source.Position)({
                  Line: (int) 161,
                  Column: (int) 27
                })
              }),
              FieldsSourceMeta: (map[string]*source.Meta) <nil>
            }),
            (string) (len=14) "tracingEnabled": (*core.MappingNode)({
              Scalar: (*core.ScalarValue)({
                IntValue: (*int)(<nil>),
                BoolValue: (*bool)(true),
                FloatValue: (*float64)(<nil>),
                StringValue: (*string)(<nil>),
                SourceMeta: (*source.Meta)({
                  Position: (source.Position) {
                    Line: (int) 164,
                    Column: (int) 25
                  },
                  EndPosition: (*source.Position)({
                    Line: (int) 164,
                    Column: (int) 31
                  })
                })
              }),
              Fields: (map[string]*core.MappingNode) <nil>,
              Items: ([]*core.MappingNode) <nil>,
              StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
              SourceMeta: (*source.Meta)({
                Position: (source.Position) {
                  Line: (int) 164,
                  Column: (int) 25
                },
                EndPosition: (*source.Position)({
                  Line: (int) 164,
                  Column: (int) 31
                })
              }),
              FieldsSourceMeta: (map[string]*source.Meta) <nil>
            })
          },
          Items: ([]*core.MappingNode) <nil>,
          StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
          SourceMeta: (*source.Meta)({
            Position: (source.Position) {
              Line: (int) 142,
              Column: (int) 13
            },
            EndPosition: (*source.Position)({
              Line: (int) 165,
              Column: (int) 8
            })
          }),
          FieldsSourceMeta: (map[string]*source.Meta) (len=3) {
            (string) (len=11) "environment": (*source.Meta)({
              Position: (source.Position) {
                Line: (int) 152,
                Column: (int) 9
              },
              EndPosition: (*source.Position)({
                Line: (int) 156,
                Column: (int) 10
              })
            }),
            (string) (len=7) "runtime": (*source.Meta)({
              Position: (source.Position) {
                Line: (int) 161,
                Column: (int) 9
              },
              EndPosition: (*source.Position)({
                Line: (int) 161,
                Column: (int) 27
              })
            }),
            (string) (len=14) "tracingEnabled": (*source.Meta)({
              Position: (source.Position) {
                Line: (int) 164,
                Column: (int) 9
              },
              EndPosition: (*source.Position)({
                Line: (int) 164,
                Column: (int) 31
              })
            })
          }
        }),
        SourceMeta: (*source.Meta)({
          Position: (source.Position) {
            Line: (int) 113,
            Column: (int) 15
          },
          EndPosition: (*source.Position)({
            Line: (int) 166,
            Column: (int) 6
          })
        })
      }),
      (string) (len=11) "orderPubSub": (*schema.Resource)({
        Type: (*schema.ResourceTypeWrapper)({
          Value: (string) (len=15) "celerity/pubsub",
          SourceMeta: (*source.Meta)({
            Position: (source.Position) {
              Line: (int) 269,
              Column: (int) 13
            },
            EndPosition: (*source.Position)({
              Line: (int) 269,
              Column: (int) 32
            })
          })
        }),
        Description: (*substitutions.StringOrSubstitutions)({
          Values: ([]*substitutions.StringOrSubstitution) <nil>,
          SourceMeta: (*source.Meta)(<nil>)
        }),
        Metadata: (*schema.Metadata)({
          DisplayName: (*substitutions.StringOrSubstitutions)({
            Values: ([]*substitutions.StringOrSubstitution) (len=1) {
              (*substitutions.StringOrSubstitution)({
                StringValue: (*string)((len=13) "Order Pub/Sub"),
                SubstitutionValue: (*substitutions.Substitution)(<nil>),
                SourceMeta: (*source.Meta)({
                  Position: (source.Position) {
                    Line: (int) 271,
                    Column: (int) 24
                  },
                  EndPosition: (*source.Position)({
                    Line: (int) 271,
                    Column: (int) 38
                  })
                })
              })
            },
            SourceMeta: (*source.Meta)({
              Position: (source.Position) {
                Line: (int) 271,
                Column: (int) 22
              },
              EndPosition: (*source.Position)({
                Line: (int) 271,
                Column: (int) 39
              })
            })
          }),
          Annotations: (*schema.StringOrSubstitutionsMap)({
            Values: (map[string]*substitutions.StringOrSubstitutions) <nil>,
            SourceMeta: (map[string]*source.Meta) <nil>
          }),
          Labels: (*schema.StringMap)({
            Values: (map[string]string) (len=1) {
              (string) (len=8) "workflow": (string) (len=11) "orderPubSub"
            },
            SourceMeta: (map[string]*source.Meta) (len=1) {
              (string) (len=8) "workflow": (*source.Meta)({
                Position: (source.Position) {
                  Line: (int) 273,
                  Column: (int) 21
                },
                EndPosition: (*source.Position)({
                  Line: (int) 273,
                  Column: (int) 36
                })
              })
            }
          }),
          Custom: (*core.MappingNode)({
            Scalar: (*core.ScalarValue)(<nil>),
            Fields: (map[string]*core.MappingNode) <nil>,
            Items: ([]*core.MappingNode) <nil>,
            StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
            SourceMeta: (*source.Meta)(<nil>),
            FieldsSourceMeta: (map[string]*source.Meta) <nil>
          }),
          SourceMeta: (*source.Meta)({
            Position: (source.Position) {
              Line: (int) 270,
              Column: (int) 17
            },
            EndPosition: (*source.Position)({
              Line: (int) 275,
              Column: (int) 8
            })
          })
        }),
        DependsOn: (*schema.DependsOnList)({
          StringList: (schema.StringList) {
            Values: ([]string) <nil>,
            SourceMeta: ([]*source.Meta) <nil>
          }
        }),
        Condition: (*schema.Condition)({
          And: ([]*schema.Condition) <nil>,
          Or: ([]*schema.Condition) <nil>,
          Not: (*schema.Condition)(<nil>),
          StringValue: (*substitutions.StringOrSubstitutions)(<nil>),
          SourceMeta: (*source.Meta)(<nil>)
        }),
        Each: (*substitutions.StringOrSubstitutions)({
          Values: ([]*substitutions.StringOrSubstitution) <nil>,
          SourceMeta: (*source.Meta)(<nil>)
        }),
        LinkSelector: (*schema.LinkSelector)({
          ByLabel: (*schema.StringMap)({
            Values: (map[string]string) (len=1) {
              (string) (len=8) "workflow": (string) (len=11) "orderPubSub"
            },
            SourceMeta: (map[string]*source.Meta) (len=1) {
              (string) (len=8) "workflow": (*source.Meta)({
                Position: (source.Position) {
                  Line: (int) 278,
                  Column: (int) 21
                },
                EndPosition: (*source.Position)({
                  Line: (int) 278,
                  Column: (int) 36
                })
              })
            }
          }),
          SourceMeta: (*source.Meta)({
            Position: (source.Position) {
              Line: (int) 276,
              Column: (int) 21
            },
            EndPosition: (*source.Position)({
              Line: (int) 280,
              Column: (int) 8
            })
          })
        }),
        Spec: (*core.MappingNode)({
          Scalar: (*core.ScalarValue)(<nil>),
          Fields: (map[string]*core.MappingNode) (len=1) {
            (string) (len=9) "topicName": (*core.MappingNode)({
              Scalar: (*core.ScalarValue)(<nil>),
              Fields: (map[string]*core.MappingNode) <nil>,
              Items: ([]*core.MappingNode) <nil>,
              StringWithSubstitutions: (*substitutions.StringOrSubstitutions)({
                Values: ([]*substitutions.StringOrSubstitution) (len=1) {
                  (*substitutions.StringOrSubstitution)({
                    StringValue: (*string)(<nil>),
                    SubstitutionValue: (*substitutions.Substitution)({
                      Function: (*substitutions.SubstitutionFunctionExpr)(<nil>),
                      Variable: (*substitutions.SubstitutionVariable)({
                        VariableName: (string) (len=15) "ordersTopicName",
                        SourceMeta: (*source.Meta)({
                          Position: (source.Position) {
                            Line: (int) 282,
                            Column: (int) 25
                          },
                          EndPosition: (*source.Position)({
                            Line: (int) 282,
                            Column: (int) 50
                          })
                        })
                      }),
                      ValueReference: (*substitutions.SubstitutionValueReference)(<nil>),
                      ElemReference: (*substitutions.SubstitutionElemReference)(<nil>),
                      ElemIndexReference: (*substitutions.SubstitutionElemIndexReference)(<nil>),
                      DataSourceProperty: (*substitutions.SubstitutionDataSourceProperty)(<nil>),
                      ResourceProperty: (*substitutions.SubstitutionResourceProperty)(<nil>),
                      Child: (*substitutions.SubstitutionChild)(<nil>),
                      StringValue: (*string)(<nil>),
                      IntValue: (*int64)(<nil>),
                      FloatValue: (*float64)(<nil>),
                      BoolValue: (*bool)(<nil>),
                      SourceMeta: (*source.Meta)({
                        Position: (source.Position) {
                          Line: (int) 282,
                          Column: (int) 25
                        },
                        EndPosition: (*source.Position)({
                          Line: (int) 282,
                          Column: (int) 50
                        })
                      })
                    }),
                    SourceMeta: (*source.Meta)({
                      Position: (source.Position) {
                        Line: (int) 282,
                        Column: (int) 22
                      },
                      EndPosition: (*source.Position)({
                        Line: (int) 282,
                        Column: (int) 50
                      })
                    })
                  })
                },
                SourceMeta: (*source.Meta)({
                  Position: (source.Position) {
                    Line: (int) 282,
                    Column: (int) 20
                  },
                  EndPosition: (*source.Position)({
                    Line: (int) 282,
                    Column: (int) 52
                  })
                })
              }),
              SourceMeta: (*source.Meta)({
                Position: (source.Position) {
                  Line: (int) 282,
                  Column: (int) 20
                },
                EndPosition: (*source.Position)({
                  Line: (int) 282,
                  Column: (int) 52
                })
              }),
              FieldsSourceMeta: (map[string]*source.Meta) <nil>
            })
          },
          Items: ([]*core.MappingNode) <nil>,
          StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
          SourceMeta: (*source.Meta)({
            Position: (source.Position) {
              Line: (int) 281,
              Column: (int) 13
            },
            EndPosition: (*source.Position)({
              Line: (int) 283,
              Column: (int) 8
            })
          }),
          FieldsSourceMeta: (map[string]*source.Meta) (len=1) {
            (string) (len=9) "topicName": (*source.Meta)({
              Position: (source.Position) {
                Line: (int) 282,
                Column: (int) 9
              },
              EndPosition: (*source.Position)({
                Line: (int) 282,
                Column: (int) 52
              })
            })
          }
        }),
        SourceMeta: (*source.Meta)({
          Position: (source.Position) {
            Line: (int) 265,
            Column: (int) 18
          },
          EndPosition: (*source.Position)({
            Line: (int) 284,
            Column: (int) 6
          })
        })
      }),
      (string) (len=19) "sharedPackagesLayer": (*schema.Resource)({
        Type: (*schema.ResourceTypeWrapper)({
          Value: (string) (len=21) "celerity/layerVersion",
          SourceMeta: (*source.Meta)({
            Position: (source.Position) {
              Line: (int) 249,
              Column: (int) 13
            },
            EndPosition: (*source.Position)({
              Line: (int) 249,
              Column: (int) 38
            })
          })
        }),
        Description: (*substitutions.StringOrSubstitutions)({
          Values: ([]*substitutions.StringOrSubstitution) <nil>,
          SourceMeta: (*source.Meta)(<nil>)
        }),
        Metadata: (*schema.Metadata)({
          DisplayName: (*substitutions.StringOrSubstitutions)({
            Values: ([]*substitutions.StringOrSubstitution) (len=1) {
              (*substitutions.StringOrSubstitution)({
                StringValue: (*string)((len=21) "Shared Packages Layer"),
                SubstitutionValue: (*substitutions.Substitution)(<nil>),
                SourceMeta: (*source.Meta)({
                  Position: (source.Position) {
                    Line: (int) 251,
                    Column: (int) 24
                  },
                  EndPosition: (*source.Position)({
                    Line: (int) 251,
                    Column: (int) 46
                  })
                })
              })
            },
            SourceMeta: (*source.Meta)({
              Position: (source.Position) {
                Line: (int) 251,
                Column: (int) 22
              },
              EndPosition: (*source.Position)({
                Line: (int) 251,
                Column: (int) 47
              })
            })
          }),
          Annotations: (*schema.StringOrSubstitutionsMap)({
            Values: (map[string]*substitutions.StringOrSubstitutions) <nil>,
            SourceMeta: (map[string]*source.Meta) <nil>
          }),
          Labels: (*schema.StringMap)({
            Values: (map[string]string) (len=2) {
              (string) (len=3) "app": (string) (len=8) "orderApi",
              (string) (len=8) "workflow": (string) (len=11) "orderPubSub"
            },
            SourceMeta: (map[string]*source.Meta) (len=2) {
              (string) (len=3) "app": (*source.Meta)({
                Position: (source.Position) {
                  Line: (int) 254,
                  Column: (int) 16
                },
                EndPosition: (*source.Position)({
                  Line: (int) 254,
                  Column: (int) 28
                })
              }),
              (string) (len=8) "workflow": (*source.Meta)({
                Position: (source.Position) {
                  Line: (int) 253,
                  Column: (int) 21
                },
                EndPosition: (*source.Position)({
                  Line: (int) 253,
                  Column: (int) 36
                })
              })
            }
          }),
          Custom: (*core.MappingNode)({
            Scalar: (*core.ScalarValue)(<nil>),
            Fields: (map[string]*core.MappingNode) <nil>,
            Items: ([]*core.MappingNode) <nil>,
            StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
            SourceMeta: (*source.Meta)(<nil>),
            FieldsSourceMeta: (map[string]*source.Meta) <nil>
          }),
          SourceMeta: (*source.Meta)({
            Position: (source.Position) {
              Line: (int) 250,
              Column: (int) 17
            },
            EndPosition: (*source.Position)({
              Line: (int) 256,
              Column: (int) 8
            })
          })
        }),
        DependsOn: (*schema.DependsOnList)({
          StringList: (schema.StringList) {
            Values: ([]string) <nil>,
            SourceMeta: ([]*source.Meta) <nil>
          }
        }),
        Condition: (*schema.Condition)({
          And: ([]*schema.Condition) <nil>,
          Or: ([]*schema.Condition) <nil>,
          Not: (*schema.Condition)(<nil>),
          StringValue: (*substitutions.StringOrSubstitutions)(<nil>),
          SourceMeta: (*source.Meta)(<nil>)
        }),
        Each: (*substitutions.StringOrSubstitutions)({
          Values: ([]*substitutions.StringOrSubstitution) <nil>,
          SourceMeta: (*source.Meta)(<nil>)
        }),
        LinkSelector: (*schema.LinkSelector)({
          ByLabel: (*schema.StringMap)(<nil>),
          SourceMeta: (*source.Meta)(<nil>)
        }),
        Spec: (*core.MappingNode)({
          Scalar: (*core.ScalarValue)(<nil>),
          Fields: (map[string]*core.MappingNode) (len=3) {
            (string) (len=18) "compatibleRuntimes": (*core.MappingNode)({
              Scalar: (*core.ScalarValue)(<nil>),
              Fields: (map[string]*core.MappingNode) <nil>,
              Items: ([]*core.MappingNode) (len=1) {
                (*core.MappingNode)({
                  Scalar: (*core.ScalarValue)({
                    IntValue: (*int)(<nil>),
                    BoolValue: (*bool)(<nil>),
                    FloatValue: (*float64)(<nil>),
                    StringValue: (*string)((len=5) "go1.x"),
                    SourceMeta: (*source.Meta)({
                      Position: (source.Position) {
                        Line: (int) 258,
                        Column: (int) 32
                      },
                      EndPosition: (*source.Position)({
                        Line: (int) 258,
                        Column: (int) 39
                      })
                    })
                  }),
                  Fields: (map[string]*core.MappingNode) <nil>,
                  Items: ([]*core.MappingNode) <nil>,
                  StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                  SourceMeta: (*source.Meta)({
                    Position: (source.Position) {
                      Line: (int) 258,
                      Column: (int) 32
                    },
                    EndPosition: (*source.Position)({
                      Line: (int) 258,
                      Column: (int) 39
                    })
                  }),
                  FieldsSourceMeta: (map[string]*source.Meta) <nil>
                })
              },
              StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
              SourceMeta: (*source.Meta)({
                Position: (source.Position) {
                  Line: (int) 258,
                  Column: (int) 29
                },
                EndPosition: (*source.Position)({
                  Line: (int) 258,
                  Column: (int) 40
                })
              }),
              FieldsSourceMeta: (map[string]*source.Meta) <nil>
            }),
            (string) (len=7) "content": (*core.MappingNode)({
              Scalar: (*core.ScalarValue)({
                IntValue: (*int)(<nil>),
                BoolValue: (*bool)(<nil>),
                FloatValue: (*float64)(<nil>),
                StringValue: (*string)((len=27) "build/shared-packages-layer"),
                SourceMeta: (*source.Meta)({
                  Position: (source.Position) {
                    Line: (int) 261,
                    Column: (int) 18
                  },
                  EndPosition: (*source.Position)({
                    Line: (int) 261,
                    Column: (int) 49
                  })
                })
              }),
              Fields: (map[string]*core.MappingNode) <nil>,
              Items: ([]*core.MappingNode) <nil>,
              StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
              SourceMeta: (*source.Meta)({
                Position: (source.Position) {
                  Line: (int) 261,
                  Column: (int) 18
                },
                EndPosition: (*source.Position)({
                  Line: (int) 261,
                  Column: (int) 49
                })
              }),
              FieldsSourceMeta: (map[string]*source.Meta) <nil>
            }),
            (string) (len=9) "layerName": (*core.MappingNode)({
              Scalar: (*core.ScalarValue)({
                IntValue: (*int)(<nil>),
                BoolValue: (*bool)(<nil>),
                FloatValue: (*float64)(<nil>),
                StringValue: (*string)((len=19) "sharedPackagesLayer"),
                SourceMeta: (*source.Meta)({
                  Position: (source.Position) {
                    Line: (int) 262,
                    Column: (int) 20
                  },
                  EndPosition: (*source.Position)({
                    Line: (int) 262,
                    Column: (int) 43
                  })
                })
              }),
              Fields: (map[string]*core.MappingNode) <nil>,
              Items: ([]*core.MappingNode) <nil>,
              StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
              SourceMeta: (*source.Meta)({
                Position: (source.Position) {
                  Line: (int) 262,
                  Column: (int) 20
                },
                EndPosition: (*source.Position)({
                  Line: (int) 262,
                  Column: (int) 43
                })
              }),
              FieldsSourceMeta: (map[string]*source.Meta) <nil>
            })
          },
          Items: ([]*core.MappingNode) <nil>,
          StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
          SourceMeta: (*source.Meta)({
            Position: (source.Position) {
              Line: (int) 257,
              Column: (int) 13
            },
            EndPosition: (*source.Position)({
              Line: (int) 263,
              Column: (int) 8
            })
          }),
          FieldsSourceMeta: (map[string]*source.Meta) (len=3) {
            (string) (len=18) "compatibleRuntimes": (*source.Meta)({
              Position: (source.Position) {
                Line: (int) 258,
                Column: (int) 9
              },
              EndPosition: (*source.Position)({
                Line: (int) 258,
                Column: (int) 40
              })
            }),
            (string) (len=7) "content": (*source.Meta)({
              Position: (source.Position) {
                Line: (int) 261,
                Column: (int) 9
              },
              EndPosition: (*source.Position)({
                Line: (int) 261,
                Column: (int) 49
              })
            }),
            (string) (len=9) "layerName": (*source.Meta)({
              Position: (source.Position) {
                Line: (int) 262,
                Column: (int) 9
              },
              EndPosition: (*source.Position)({
                Line: (int) 262,
                Column: (int) 43
              })
            })
          }
        }),
        SourceMeta: (*source.Meta)({
          Position: (source.Position) {
            Line: (int) 242,
            Column: (int) 26
          },
          EndPosition: (*source.Position)({
            Line: (int) 264,
            Column: (int) 6
          })
        })
      }),
      (string) (len=19) "updateOrderFunction": (*schema.Resource)({
        Type: (*schema.ResourceTypeWrapper)({
          Value: (string) (len=16) "celerity/handler",
          SourceMeta: (*source.Meta)({
            Position: (source.Position) {
              Line: (int) 217,
              Column: (int) 13
            },
            EndPosition: (*source.Position)({
              Line: (int) 217,
              Column: (int) 33
            })
          })
        }),
        Description: (*substitutions.StringOrSubstitutions)({
          Values: ([]*substitutions.StringOrSubstitution) <nil>,
          SourceMeta: (*source.Meta)(<nil>)
        }),
        Metadata: (*schema.Metadata)({
          DisplayName: (*substitutions.StringOrSubstitutions)({
            Values: ([]*substitutions.StringOrSubstitution) (len=1) {
              (*substitutions.StringOrSubstitution)({
                StringValue: (*string)((len=21) "Update Order Function"),
                SubstitutionValue: (*substitutions.Substitution)(<nil>),
                SourceMeta: (*source.Meta)({
                  Position: (source.Position) {
                    Line: (int) 219,
                    Column: (int) 24
                  },
                  EndPosition: (*source.Position)({
                    Line: (int) 219,
                    Column: (int) 46
                  })
                })
              })
            },
            SourceMeta: (*source.Meta)({
              Position: (source.Position) {
                Line: (int) 219,
                Column: (int) 22
              },
              EndPosition: (*source.Position)({
                Line: (int) 219,
                Column: (int) 47
              })
            })
          }),
          Annotations: (*schema.StringOrSubstitutionsMap)({
            Values: (map[string]*substitutions.StringOrSubstitutions) <nil>,
            SourceMeta: (map[string]*source.Meta) <nil>
          }),
          Labels: (*schema.StringMap)({
            Values: (map[string]string) (len=2) {
              (string) (len=10) "pubsubType": (string) (len=8) "consumer",
              (string) (len=8) "workflow": (string) (len=11) "orderPubSub"
            },
            SourceMeta: (map[string]*source.Meta) (len=2) {
              (string) (len=10) "pubsubType": (*source.Meta)({
                Position: (source.Position) {
                  Line: (int) 226,
                  Column: (int) 23
                },
                EndPosition: (*source.Position)({
                  Line: (int) 226,
                  Column: (int) 35
                })
              }),
              (string) (len=8) "workflow": (*source.Meta)({
                Position: (source.Position) {
                  Line: (int) 221,
                  Column: (int) 21
                },
                EndPosition: (*source.Position)({
                  Line: (int) 221,
                  Column: (int) 36
                })
              })
            }
          }),
          Custom: (*core.MappingNode)({
            Scalar: (*core.ScalarValue)(<nil>),
            Fields: (map[string]*core.MappingNode) <nil>,
            Items: ([]*core.MappingNode) <nil>,
            StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
            SourceMeta: (*source.Meta)(<nil>),
            FieldsSourceMeta: (map[string]*source.Meta) <nil>
          }),
          SourceMeta: (*source.Meta)({
            Position: (source.Position) {
              Line: (int) 218,
              Column: (int) 17
            },
            EndPosition: (*source.Position)({
              Line: (int) 228,
              Column: (int) 8
            })
          })
        }),
        DependsOn: (*schema.DependsOnList)({
          StringList: (schema.StringList) {
            Values: ([]string) <nil>,
            SourceMeta: ([]*source.Meta) <nil>
          }
        }),
        Condition: (*schema.Condition)({
          And: ([]*schema.Condition) <nil>,
          Or: ([]*schema.Condition) <nil>,
          Not: (*schema.Condition)(<nil>),
          StringValue: (*substitutions.StringOrSubstitutions)(<nil>),
          SourceMeta: (*source.Meta)(<nil>)
        }),
        Each: (*substitutions.StringOrSubstitutions)({
          Values: ([]*substitutions.StringOrSubstitution) <nil>,
          SourceMeta: (*source.Meta)(<nil>)
        }),
        LinkSelector: (*schema.LinkSelector)({
          ByLabel: (*schema.StringMap)(<nil>),
          SourceMeta: (*source.Meta)(<nil>)
        }),
        Spec: (*core.MappingNode)({
          Scalar: (*core.ScalarValue)(<nil>),
          Fields: (map[string]*core.MappingNode) (len=3) {
            (string) (len=6) "events": (*core.MappingNode)({
              Scalar: (*core.ScalarValue)(<nil>),
              Fields: (map[string]*core.MappingNode) (len=1) {
                (string) (len=10) "orderEvent": (*core.MappingNode)({
                  Scalar: (*core.ScalarValue)(<nil>),
                  Fields: (map[string]*core.MappingNode) (len=2) {
                    (string) (len=9) "batchSize": (*core.MappingNode)({
                      Scalar: (*core.ScalarValue)({
                        IntValue: (*int)(10),
                        BoolValue: (*bool)(<nil>),
                        FloatValue: (*float64)(<nil>),
                        StringValue: (*string)(<nil>),
                        SourceMeta: (*source.Meta)({
                          Position: (source.Position) {
                            Line: (int) 237,
                            Column: (int) 24
                          },
                          EndPosition: (*source.Position)({
                            Line: (int) 237,
                            Column: (int) 28
                          })
                        })
                      }),
                      Fields: (map[string]*core.MappingNode) <nil>,
                      Items: ([]*core.MappingNode) <nil>,
                      StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                      SourceMeta: (*source.Meta)({
                        Position: (source.Position) {
                          Line: (int) 237,
                          Column: (int) 24
                        },
                        EndPosition: (*source.Position)({
                          Line: (int) 237,
                          Column: (int) 28
                        })
                      }),
                      FieldsSourceMeta: (map[string]*source.Meta) <nil>
                    }),
                    (string) (len=4) "type": (*core.MappingNode)({
                      Scalar: (*core.ScalarValue)({
                        IntValue: (*int)(<nil>),
                        BoolValue: (*bool)(<nil>),
                        FloatValue: (*float64)(<nil>),
                        StringValue: (*string)((len=6) "pubsub"),
                        SourceMeta: (*source.Meta)({
                          Position: (source.Position) {
                            Line: (int) 234,
                            Column: (int) 19
                          },
                          EndPosition: (*source.Position)({
                            Line: (int) 234,
                            Column: (int) 29
                          })
                        })
                      }),
                      Fields: (map[string]*core.MappingNode) <nil>,
                      Items: ([]*core.MappingNode) <nil>,
                      StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                      SourceMeta: (*source.Meta)({
                        Position: (source.Position) {
                          Line: (int) 234,
                          Column: (int) 19
                        },
                        EndPosition: (*source.Position)({
                          Line: (int) 234,
                          Column: (int) 29
                        })
                      }),
                      FieldsSourceMeta: (map[string]*source.Meta) <nil>
                    })
                  },
                  Items: ([]*core.MappingNode) <nil>,
                  StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                  SourceMeta: (*source.Meta)({
                    Position: (source.Position) {
                      Line: (int) 233,
                      Column: (int) 23
                    },
                    EndPosition: (*source.Position)({
                      Line: (int) 238,
                      Column: (int) 12
                    })
                  }),
                  FieldsSourceMeta: (map[string]*source.Meta) (len=2) {
                    (string) (len=9) "batchSize": (*source.Meta)({
                      Position: (source.Position) {
                        Line: (int) 237,
                        Column: (int) 13
                      },
                      EndPosition: (*source.Position)({
                        Line: (int) 237,
                        Column: (int) 28
                      })
                    }),
                    (string) (len=4) "type": (*source.Meta)({
                      Position: (source.Position) {
                        Line: (int) 234,
                        Column: (int) 13
                      },
                      EndPosition: (*source.Position)({
                        Line: (int) 234,
                        Column: (int) 29
                      })
                    })
                  }
                })
              },
              Items: ([]*core.MappingNode) <nil>,
              StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
              SourceMeta: (*source.Meta)({
                Position: (source.Position) {
                  Line: (int) 232,
                  Column: (int) 17
                },
                EndPosition: (*source.Position)({
                  Line: (int) 239,
                  Column: (int) 10
                })
              }),
              FieldsSourceMeta: (map[string]*source.Meta) (len=1) {
                (string) (len=10) "orderEvent": (*source.Meta)({
                  Position: (source.Position) {
                    Line: (int) 233,
                    Column: (int) 11
                  },
                  EndPosition: (*source.Position)({
                    Line: (int) 238,
                    Column: (int) 12
                  })
                })
              }
            }),
            (string) (len=7) "handler": (*core.MappingNode)({
              Scalar: (*core.ScalarValue)({
                IntValue: (*int)(<nil>),
                BoolValue: (*bool)(<nil>),
                FloatValue: (*float64)(<nil>),
                StringValue: (*string)((len=20) "handlers.UpdateOrder"),
                SourceMeta: (*source.Meta)({
                  Position: (source.Position) {
                    Line: (int) 230,
                    Column: (int) 18
                  },
                  EndPosition: (*source.Position)({
                    Line: (int) 230,
                    Column: (int) 42
                  })
                })
              }),
              Fields: (map[string]*core.MappingNode) <nil>,
              Items: ([]*core.MappingNode) <nil>,
              StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
              SourceMeta: (*source.Meta)({
                Position: (source.Position) {
                  Line: (int) 230,
                  Column: (int) 18
                },
                EndPosition: (*source.Position)({
                  Line: (int) 230,
                  Column: (int) 42
                })
              }),
              FieldsSourceMeta: (map[string]*source.Meta) <nil>
            }),
            (string) (len=7) "timeout": (*core.MappingNode)({
              Scalar: (*core.ScalarValue)({
                IntValue: (*int)(120),
                BoolValue: (*bool)(<nil>),
                FloatValue: (*float64)(<nil>),
                StringValue: (*string)(<nil>),
                SourceMeta: (*source.Meta)({
                  Position: (source.Position) {
                    Line: (int) 231,
                    Column: (int) 18
                  },
                  EndPosition: (*source.Position)({
                    Line: (int) 231,
                    Column: (int) 23
                  })
                })
              }),
              Fields: (map[string]*core.MappingNode) <nil>,
              Items: ([]*core.MappingNode) <nil>,
              StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
              SourceMeta: (*source.Meta)({
                Position: (source.Position) {
                  Line: (int) 231,
                  Column: (int) 18
                },
                EndPosition: (*source.Position)({
                  Line: (int) 231,
                  Column: (int) 23
                })
              }),
              FieldsSourceMeta: (map[string]*source.Meta) <nil>
            })
          },
          Items: ([]*core.MappingNode) <nil>,
          StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
          SourceMeta: (*source.Meta)({
            Position: (source.Position) {
              Line: (int) 229,
              Column: (int) 13
            },
            EndPosition: (*source.Position)({
              Line: (int) 240,
              Column: (int) 8
            })
          }),
          FieldsSourceMeta: (map[string]*source.Meta) (len=3) {
            (string) (len=6) "events": (*source.Meta)({
              Position: (source.Position) {
                Line: (int) 232,
                Column: (int) 9
              },
              EndPosition: (*source.Position)({
                Line: (int) 239,
                Column: (int) 10
              })
            }),
            (string) (len=7) "handler": (*source.Meta)({
              Position: (source.Position) {
                Line: (int) 230,
                Column: (int) 9
              },
              EndPosition: (*source.Position)({
                Line: (int) 230,
                Column: (int) 42
              })
            }),
            (string) (len=7) "timeout": (*source.Meta)({
              Position: (source.Position) {
                Line: (int) 231,
                Column: (int) 9
              },
              EndPosition: (*source.Position)({
                Line: (int) 231,
                Column: (int) 23
              })
            })
          }
        }),
        SourceMeta: (*source.Meta)({
          Position: (source.Position) {
            Line: (int) 216,
            Column: (int) 26
          },
          EndPosition: (*source.Position)({
            Line: (int) 241,
            Column: (int) 6
          })
        })
      })
    },
    SourceMeta: (map[string]*source.Meta) (len=6) {
      (string) (len=10) "authoriser": (*source.Meta)({
        Position: (source.Position) {
          Line: (int) 172,
          Column: (int) 17
        },
        EndPosition: (*source.Position)({
          Line: (int) 196,
          Column: (int) 6
        })
      }),
      (string) (len=16) "getOrdersHandler": (*source.Meta)({
        Position: (source.Position) {
          Line: (int) 197,
          Column: (int) 23
        },
        EndPosition: (*source.Position)({
          Line: (int) 214,
          Column: (int) 6
        })
      }),
      (string) (len=8) "orderApi": (*source.Meta)({
        Position: (source.Position) {
          Line: (int) 113,
          Column: (int) 15
        },
        EndPosition: (*source.Position)({
          Line: (int) 166,
          Column: (int) 6
        })
      }),
      (string) (len=11) "orderPubSub": (*source.Meta)({
        Position: (source.Position) {
          Line: (int) 265,
          Column: (int) 18
        },
        EndPosition: (*source.Position)({
          Line: (int) 284,
          Column: (int) 6
        })
      }),
      (string) (len=19) "sharedPackagesLayer": (*source.Meta)({
        Position: (source.Position) {
          Line: (int) 242,
          Column: (int) 26
        },
        EndPosition: (*source.Position)({
          Line: (int) 264,
          Column: (int) 6
        })
      }),
      (string) (len=19) "updateOrderFunction": (*source.Meta)({
        Position: (source.Position) {
          Line: (int) 216,
          Column: (int) 26
        },
        EndPosition: (*source.Position)({
          Line: (int) 241,
          Column: (int) 6
        })
      })
    }
  }),
  DataSources: (*schema.DataSourceMap)({
    Values: (map[string]*schema.DataSource) (len=1) {
      (string) (len=7) "network": (*schema.DataSource)({
        Type: (*schema.DataSourceTypeWrapper)({
          Value: (string) (len=7) "aws/vpc",
          SourceMeta: (*source.Meta)({
            Position: (source.Position) {
              Line: (int) 87,
              Column: (int) 13
            },
            EndPosition: (*source.Position)({
              Line: (int) 87,
              Column: (int) 24
            })
          })
        }),
        DataSourceMetadata: (*schema.DataSourceMetadata)({
          DisplayName: (*substitutions.StringOrSubstitutions)({
            Values: ([]*substitutions.StringOrSubstitution) (len=1) {
              (*substitutions.StringOrSubstitution)({
                StringValue: (*string)((len=14) "Network source"),
                SubstitutionValue: (*substitutions.Substitution)(<nil>),
                SourceMeta: (*source.Meta)({
                  Position: (source.Position) {
                    Line: (int) 89,
                    Column: (int) 24
                  },
                  EndPosition: (*source.Position)({
                    Line: (int) 89,
                    Column: (int) 39
                  })
                })
              })
            },
            SourceMeta: (*source.Meta)({
              Position: (source.Position) {
                Line: (int) 89,
                Column: (int) 22
              },
              EndPosition: (*source.Position)({
                Line: (int) 89,
                Column: (int) 40
              })
            })
          }),
          Annotations: (*schema.StringOrSubstitutionsMap)({
            Values: (map[string]*substitutions.StringOrSubstitutions) <nil>,
            SourceMeta: (map[string]*source.Meta) <nil>
          }),
          Custom: (*core.MappingNode)({
            Scalar: (*core.ScalarValue)(<nil>),
            Fields: (map[string]*core.MappingNode) <nil>,
            Items: ([]*core.MappingNode) <nil>,
            StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
            SourceMeta: (*source.Meta)(<nil>),
            FieldsSourceMeta: (map[string]*source.Meta) <nil>
          }),
          SourceMeta: (*source.Meta)({
            Position: (source.Position) {
              Line: (int) 88,
              Column: (int) 17
            },
            EndPosition: (*source.Position)({
              Line: (int) 90,
              Column: (int) 8
            })
          })
        }),
        Filter: (*schema.DataSourceFilters)({
          Filters: ([]*schema.DataSourceFilter) (len=1) {
            (*schema.DataSourceFilter)({
              Field: (*core.ScalarValue)({
                IntValue: (*int)(<nil>),
                BoolValue: (*bool)(<nil>),
                FloatValue: (*float64)(<nil>),
                StringValue: (*string)((len=4) "tags"),
                SourceMeta: (*source.Meta)({
                  Position: (source.Position) {
                    Line: (int) 92,
                    Column: (int) 16
                  },
                  EndPosition: (*source.Position)({
                    Line: (int) 92,
                    Column: (int) 24
                  })
                })
              }),
              Operator: (*schema.DataSourceFilterOperatorWrapper)({
                Value: (schema.DataSourceFilterOperator) (len=7) "has key",
                SourceMeta: (*source.Meta)({
                  Position: (source.Position) {
                    Line: (int) 93,
                    Column: (int) 19
                  },
                  EndPosition: (*source.Position)({
                    Line: (int) 93,
                    Column: (int) 30
                  })
                })
              }),
              Search: (*schema.DataSourceFilterSearch)({
                Values: ([]*substitutions.StringOrSubstitutions) (len=1) {
                  (*substitutions.StringOrSubstitutions)({
                    Values: ([]*substitutions.StringOrSubstitution) (len=1) {
                      (*substitutions.StringOrSubstitution)({
                        StringValue: (*string)(<nil>),
                        SubstitutionValue: (*substitutions.Substitution)({
                          Function: (*substitutions.SubstitutionFunctionExpr)(<nil>),
                          Variable: (*substitutions.SubstitutionVariable)({
                            VariableName: (string) (len=11) "environment",
                            SourceMeta: (*source.Meta)({
                              Position: (source.Position) {
                                Line: (int) 94,
                                Column: (int) 22
                              },
                              EndPosition: (*source.Position)({
                                Line: (int) 94,
                                Column: (int) 43
                              })
                            })
                          }),
                          ValueReference: (*substitutions.SubstitutionValueReference)(<nil>),
                          ElemReference: (*substitutions.SubstitutionElemReference)(<nil>),
                          ElemIndexReference: (*substitutions.SubstitutionElemIndexReference)(<nil>),
                          DataSourceProperty: (*substitutions.SubstitutionDataSourceProperty)(<nil>),
                          ResourceProperty: (*substitutions.SubstitutionResourceProperty)(<nil>),
                          Child: (*substitutions.SubstitutionChild)(<nil>),
                          StringValue: (*string)(<nil>),
                          IntValue: (*int64)(<nil>),
                          FloatValue: (*float64)(<nil>),
                          BoolValue: (*bool)(<nil>),
                          SourceMeta: (*source.Meta)({
                            Position: (source.Position) {
                              Line: (int) 94,
                              Column: (int) 22
                            },
                            EndPosition: (*source.Position)({
                              Line: (int) 94,
                              Column: (int) 43
                            })
                          })
                        }),
                        SourceMeta: (*source.Meta)({
                          Position: (source.Position) {
                            Line: (int) 94,
                            Column: (int) 19
                          },
                          EndPosition: (*source.Position)({
                            Line: (int) 94,
                            Column: (int) 43
                          })
                        })
                      })
                    },
                    SourceMeta: (*source.Meta)({
                      Position: (source.Position) {
                        Line: (int) 94,
                        Column: (int) 17
                      },
                      EndPosition: (*source.Position)({
                        Line: (int) 94,
                        Column: (int) 45
                      })
                    })
                  })
                },
                SourceMeta: (*source.Meta)({
                  Position: (source.Position) {
                    Line: (int) 94,
                    Column: (int) 17
                  },
                  EndPosition: (*source.Position)({
                    Line: (int) 94,
                    Column: (int) 45
                  })
                })
              }),
              SourceMeta: (*source.Meta)({
                Position: (source.Position) {
                  Line: (int) 91,
                  Column: (int) 15
                },
                EndPosition: (*source.Position)({
                  Line: (int) 95,
                  Column: (int) 8
                })
              })
            })
          }
        }),
        Exports: (*schema.DataSourceFieldExportMap)({
          Values: (map[string]*schema.DataSourceFieldExport) (len=3) {
            (string) (len=14) "securityGroups": (*schema.DataSourceFieldExport)({
              Type: (*schema.DataSourceFieldTypeWrapper)({
                Value: (schema.DataSourceFieldType) (len=5) "array",
                SourceMeta: (*source.Meta)({
                  Position: (source.Position) {
                    Line: (int) 101,
                    Column: (int) 17
                  },
                  EndPosition: (*source.Position)({
                    Line: (int) 101,
                    Column: (int) 26
                  })
                })
              }),
              AliasFor: (*core.ScalarValue)({
                IntValue: (*int)(<nil>),
                BoolValue: (*bool)(<nil>),
                FloatValue: (*float64)(<nil>),
                StringValue: (*string)(<nil>),
                SourceMeta: (*source.Meta)(<nil>)
              }),
              Description: (*substitutions.StringOrSubstitutions)({
                Values: ([]*substitutions.StringOrSubstitution) <nil>,
                SourceMeta: (*source.Meta)(<nil>)
              }),
              SourceMeta: (*source.Meta)({
                Position: (source.Position) {
                  Line: (int) 100,
                  Column: (int) 25
                },
                EndPosition: (*source.Position)({
                  Line: (int) 102,
                  Column: (int) 10
                })
              })
            }),
            (string) (len=7) "subnets": (*schema.DataSourceFieldExport)({
              Type: (*schema.DataSourceFieldTypeWrapper)({
                Value: (schema.DataSourceFieldType) (len=5) "array",
                SourceMeta: (*source.Meta)({
                  Position: (source.Position) {
                    Line: (int) 98,
                    Column: (int) 17
                  },
                  EndPosition: (*source.Position)({
                    Line: (int) 98,
                    Column: (int) 26
                  })
                })
              }),
              AliasFor: (*core.ScalarValue)({
                IntValue: (*int)(<nil>),
                BoolValue: (*bool)(<nil>),
                FloatValue: (*float64)(<nil>),
                StringValue: (*string)(<nil>),
                SourceMeta: (*source.Meta)(<nil>)
              }),
              Description: (*substitutions.StringOrSubstitutions)({
                Values: ([]*substitutions.StringOrSubstitution) <nil>,
                SourceMeta: (*source.Meta)(<nil>)
              }),
              SourceMeta: (*source.Meta)({
                Position: (source.Position) {
                  Line: (int) 97,
                  Column: (int) 18
                },
                EndPosition: (*source.Position)({
                  Line: (int) 99,
                  Column: (int) 10
                })
              })
            }),
            (string) (len=3) "vpc": (*schema.DataSourceFieldExport)({
              Type: (*schema.DataSourceFieldTypeWrapper)({
                Value: (schema.DataSourceFieldType) (len=6) "string",
                SourceMeta: (*source.Meta)({
                  Position: (source.Position) {
                    Line: (int) 104,
                    Column: (int) 17
                  },
                  EndPosition: (*source.Position)({
                    Line: (int) 104,
                    Column: (int) 27
                  })
                })
              }),
              AliasFor: (*core.ScalarValue)({
                IntValue: (*int)(<nil>),
                BoolValue: (*bool)(<nil>),
                FloatValue: (*float64)(<nil>),
                StringValue: (*string)(<nil>),
                SourceMeta: (*source.Meta)(<nil>)
              }),
              Description: (*substitutions.StringOrSubstitutions)({
                Values: ([]*substitutions.StringOrSubstitution) <nil>,
                SourceMeta: (*source.Meta)(<nil>)
              }),
              SourceMeta: (*source.Meta)({
                Position: (source.Position) {
                  Line: (int) 103,
                  Column: (int) 14
                },
                EndPosition: (*source.Position)({
                  Line: (int) 105,
                  Column: (int) 10
                })
              })
            })
          },
          ExportAll: (bool) false,
          SourceMeta: (map[string]*source.Meta) (len=3) {
            (string) (len=14) "securityGroups": (*source.Meta)({
              Position: (source.Position) {
                Line: (int) 100,
                Column: (int) 25
              },
              EndPosition: (*source.Position)({
                Line: (int) 102,
                Column: (int) 10
              })
            }),
            (string) (len=7) "subnets": (*source.Meta)({
              Position: (source.Position) {
                Line: (int) 97,
                Column: (int) 18
              },
              EndPosition: (*source.Position)({
                Line: (int) 99,
                Column: (int) 10
              })
            }),
            (string) (len=3) "vpc": (*source.Meta)({
              Position: (source.Position) {
                Line: (int) 103,
                Column: (int) 14
              },
              EndPosition: (*source.Position)({
                Line: (int) 105,
                Column: (int) 10
              })
            })
          }
        }),
        Description: (*substitutions.StringOrSubstitutions)({
          Values: ([]*substitutions.StringOrSubstitution) <nil>,
          SourceMeta: (*source.Meta)(<nil>)
        }),
        SourceMeta: (*source.Meta)({
          Position: (source.Position) {
            Line: (int) 86,
            Column: (int) 14
          },
          EndPosition: (*source.Position)({
            Line: (int) 107,
            Column: (int) 6
          })
        })
      })
    },
    SourceMeta: (map[string]*source.Meta) (len=1) {
      (string) (len=7) "network": (*source.Meta)({
        Position: (source.Position) {
          Line: (int) 86,
          Column: (int) 14
        },
        EndPosition: (*source.Position)({
          Line: (int) 107,
          Column: (int) 6
        })
      })
    }
  }),
  Exports: (*schema.ExportMap)({
    Values: (map[string]*schema.Export) <nil>,
    SourceMeta: (map[string]*source.Meta) <nil>
  }),
  Metadata: (*core.MappingNode)({
    Scalar: (*core.ScalarValue)(<nil>),
    Fields: (map[string]*core.MappingNode) <nil>,
    Items: ([]*core.MappingNode) <nil>,
    StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
    SourceMeta: (*source.Meta)(<nil>),
    FieldsSourceMeta: (map[string]*source.Meta) <nil>
  })
})
