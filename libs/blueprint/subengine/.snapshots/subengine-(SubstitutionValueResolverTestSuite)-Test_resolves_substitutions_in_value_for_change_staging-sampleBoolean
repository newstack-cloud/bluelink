(*subengine.ResolveInValueResult)({
  ResolvedValue: (*subengine.ResolvedValue)({
    Type: (*schema.ValueTypeWrapper)({
      Value: (schema.ValueType) (len=7) "boolean",
      SourceMeta: (*source.Meta)({
        Position: (source.Position) {
          Line: (int) 54,
          Column: (int) 11
        },
        EndPosition: (*source.Position)({
          Line: (int) 54,
          Column: (int) 18
        })
      })
    }),
    Value: (*core.MappingNode)({
      Scalar: (*core.ScalarValue)({
        IntValue: (*int)(<nil>),
        BoolValue: (*bool)(true),
        FloatValue: (*float64)(<nil>),
        StringValue: (*string)(<nil>),
        SourceMeta: (*source.Meta)({
          Position: (source.Position) {
            Line: (int) 55,
            Column: (int) 12
          },
          EndPosition: (*source.Position)({
            Line: (int) 55,
            Column: (int) 16
          })
        })
      }),
      Fields: (map[string]*core.MappingNode) <nil>,
      Items: ([]*core.MappingNode) <nil>,
      StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
      SourceMeta: (*source.Meta)({
        Position: (source.Position) {
          Line: (int) 55,
          Column: (int) 12
        },
        EndPosition: (*source.Position)(<nil>)
      }),
      FieldsSourceMeta: (map[string]*source.Meta) <nil>
    }),
    Description: (*core.MappingNode)({
      Scalar: (*core.ScalarValue)({
        IntValue: (*int)(<nil>),
        BoolValue: (*bool)(<nil>),
        FloatValue: (*float64)(<nil>),
        StringValue: (*string)((len=38) "A sample boolean for testing purposes."),
        SourceMeta: (*source.Meta)(<nil>)
      }),
      Fields: (map[string]*core.MappingNode) <nil>,
      Items: ([]*core.MappingNode) <nil>,
      StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
      SourceMeta: (*source.Meta)(<nil>),
      FieldsSourceMeta: (map[string]*source.Meta) <nil>
    }),
    Secret: (*core.ScalarValue)(<nil>)
  }),
  ResolveOnDeploy: ([]string) {
  }
})
