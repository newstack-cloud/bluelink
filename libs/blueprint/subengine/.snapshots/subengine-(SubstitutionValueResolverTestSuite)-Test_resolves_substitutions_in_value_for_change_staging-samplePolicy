(*subengine.ResolveInValueResult)({
  ResolvedValue: (*subengine.ResolvedValue)({
    Type: (*schema.ValueTypeWrapper)({
      Value: (schema.ValueType) (len=6) "object",
      SourceMeta: (*source.Meta)({
        Position: (source.Position) {
          Line: (int) 32,
          Column: (int) 11
        },
        EndPosition: (*source.Position)({
          Line: (int) 32,
          Column: (int) 17
        })
      })
    }),
    Value: (*core.MappingNode)({
      Scalar: (*core.ScalarValue)(<nil>),
      Fields: (map[string]*core.MappingNode) (len=2) {
        (string) (len=14) "policyDocument": (*core.MappingNode)({
          Scalar: (*core.ScalarValue)(<nil>),
          Fields: (map[string]*core.MappingNode) (len=2) {
            (string) (len=9) "Statement": (*core.MappingNode)({
              Scalar: (*core.ScalarValue)(<nil>),
              Fields: (map[string]*core.MappingNode) <nil>,
              Items: ([]*core.MappingNode) (len=1) {
                (*core.MappingNode)({
                  Scalar: (*core.ScalarValue)(<nil>),
                  Fields: (map[string]*core.MappingNode) (len=3) {
                    (string) (len=6) "Action": (*core.MappingNode)({
                      Scalar: (*core.ScalarValue)({
                        IntValue: (*int)(<nil>),
                        BoolValue: (*bool)(<nil>),
                        FloatValue: (*float64)(<nil>),
                        StringValue: (*string)((len=16) "dynamodb:PutItem"),
                        SourceMeta: (*source.Meta)({
                          Position: (source.Position) {
                            Line: (int) 39,
                            Column: (int) 21
                          },
                          EndPosition: (*source.Position)({
                            Line: (int) 39,
                            Column: (int) 39
                          })
                        })
                      }),
                      Fields: (map[string]*core.MappingNode) <nil>,
                      Items: ([]*core.MappingNode) <nil>,
                      StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                      SourceMeta: (*source.Meta)({
                        Position: (source.Position) {
                          Line: (int) 39,
                          Column: (int) 21
                        },
                        EndPosition: (*source.Position)(<nil>)
                      }),
                      FieldsSourceMeta: (map[string]*source.Meta) <nil>
                    }),
                    (string) (len=6) "Effect": (*core.MappingNode)({
                      Scalar: (*core.ScalarValue)({
                        IntValue: (*int)(<nil>),
                        BoolValue: (*bool)(<nil>),
                        FloatValue: (*float64)(<nil>),
                        StringValue: (*string)((len=5) "Allow"),
                        SourceMeta: (*source.Meta)({
                          Position: (source.Position) {
                            Line: (int) 38,
                            Column: (int) 21
                          },
                          EndPosition: (*source.Position)({
                            Line: (int) 38,
                            Column: (int) 28
                          })
                        })
                      }),
                      Fields: (map[string]*core.MappingNode) <nil>,
                      Items: ([]*core.MappingNode) <nil>,
                      StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                      SourceMeta: (*source.Meta)({
                        Position: (source.Position) {
                          Line: (int) 38,
                          Column: (int) 21
                        },
                        EndPosition: (*source.Position)(<nil>)
                      }),
                      FieldsSourceMeta: (map[string]*source.Meta) <nil>
                    }),
                    (string) (len=8) "Resource": (*core.MappingNode)({
                      Scalar: (*core.ScalarValue)({
                        IntValue: (*int)(<nil>),
                        BoolValue: (*bool)(<nil>),
                        FloatValue: (*float64)(<nil>),
                        StringValue: (*string)((len=52) "arn:aws:dynamodb:us-west-2:123456789012:table/Orders"),
                        SourceMeta: (*source.Meta)(<nil>)
                      }),
                      Fields: (map[string]*core.MappingNode) <nil>,
                      Items: ([]*core.MappingNode) <nil>,
                      StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                      SourceMeta: (*source.Meta)(<nil>),
                      FieldsSourceMeta: (map[string]*source.Meta) <nil>
                    })
                  },
                  Items: ([]*core.MappingNode) <nil>,
                  StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                  SourceMeta: (*source.Meta)(<nil>),
                  FieldsSourceMeta: (map[string]*source.Meta) <nil>
                })
              },
              StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
              SourceMeta: (*source.Meta)(<nil>),
              FieldsSourceMeta: (map[string]*source.Meta) <nil>
            }),
            (string) (len=7) "Version": (*core.MappingNode)({
              Scalar: (*core.ScalarValue)({
                IntValue: (*int)(<nil>),
                BoolValue: (*bool)(<nil>),
                FloatValue: (*float64)(<nil>),
                StringValue: (*string)((len=10) "2012-10-17"),
                SourceMeta: (*source.Meta)({
                  Position: (source.Position) {
                    Line: (int) 36,
                    Column: (int) 18
                  },
                  EndPosition: (*source.Position)({
                    Line: (int) 36,
                    Column: (int) 30
                  })
                })
              }),
              Fields: (map[string]*core.MappingNode) <nil>,
              Items: ([]*core.MappingNode) <nil>,
              StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
              SourceMeta: (*source.Meta)({
                Position: (source.Position) {
                  Line: (int) 36,
                  Column: (int) 18
                },
                EndPosition: (*source.Position)(<nil>)
              }),
              FieldsSourceMeta: (map[string]*source.Meta) <nil>
            })
          },
          Items: ([]*core.MappingNode) <nil>,
          StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
          SourceMeta: (*source.Meta)(<nil>),
          FieldsSourceMeta: (map[string]*source.Meta) <nil>
        }),
        (string) (len=10) "policyName": (*core.MappingNode)({
          Scalar: (*core.ScalarValue)({
            IntValue: (*int)(<nil>),
            BoolValue: (*bool)(<nil>),
            FloatValue: (*float64)(<nil>),
            StringValue: (*string)((len=12) "SamplePolicy"),
            SourceMeta: (*source.Meta)({
              Position: (source.Position) {
                Line: (int) 34,
                Column: (int) 19
              },
              EndPosition: (*source.Position)({
                Line: (int) 34,
                Column: (int) 33
              })
            })
          }),
          Fields: (map[string]*core.MappingNode) <nil>,
          Items: ([]*core.MappingNode) <nil>,
          StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
          SourceMeta: (*source.Meta)({
            Position: (source.Position) {
              Line: (int) 34,
              Column: (int) 19
            },
            EndPosition: (*source.Position)(<nil>)
          }),
          FieldsSourceMeta: (map[string]*source.Meta) <nil>
        })
      },
      Items: ([]*core.MappingNode) <nil>,
      StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
      SourceMeta: (*source.Meta)(<nil>),
      FieldsSourceMeta: (map[string]*source.Meta) <nil>
    }),
    Description: (*core.MappingNode)({
      Scalar: (*core.ScalarValue)({
        IntValue: (*int)(<nil>),
        BoolValue: (*bool)(<nil>),
        FloatValue: (*float64)(<nil>),
        StringValue: (*string)((len=37) "A sample policy for testing purposes."),
        SourceMeta: (*source.Meta)(<nil>)
      }),
      Fields: (map[string]*core.MappingNode) <nil>,
      Items: ([]*core.MappingNode) <nil>,
      StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
      SourceMeta: (*source.Meta)(<nil>),
      FieldsSourceMeta: (map[string]*source.Meta) <nil>
    }),
    Secret: (*core.ScalarValue)(<nil>)
  }),
  ResolveOnDeploy: ([]string) {
  }
})
