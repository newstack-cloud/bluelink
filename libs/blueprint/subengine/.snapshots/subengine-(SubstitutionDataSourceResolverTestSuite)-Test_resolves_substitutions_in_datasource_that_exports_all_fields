(*subengine.ResolveInDataSourceResult)({
  ResolvedDataSource: (*provider.ResolvedDataSource)({
    Type: (*schema.DataSourceTypeWrapper)({
      Value: (string) (len=7) "aws/vpc",
      SourceMeta: (*source.Meta)({
        Position: (source.Position) {
          Line: (int) 29,
          Column: (int) 11
        },
        EndPosition: (*source.Position)({
          Line: (int) 29,
          Column: (int) 18
        })
      })
    }),
    DataSourceMetadata: (*provider.ResolvedDataSourceMetadata)({
      DisplayName: (*core.MappingNode)({
        Scalar: (*core.ScalarValue)({
          IntValue: (*int)(<nil>),
          BoolValue: (*bool)(<nil>),
          FloatValue: (*float64)(<nil>),
          StringValue: (*string)((len=10) "Networking"),
          SourceMeta: (*source.Meta)(<nil>)
        }),
        Fields: (map[string]*core.MappingNode) <nil>,
        Items: ([]*core.MappingNode) <nil>,
        StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
        SourceMeta: (*source.Meta)(<nil>),
        FieldsSourceMeta: (map[string]*source.Meta) <nil>
      }),
      Annotations: (*core.MappingNode)(<nil>),
      Custom: (*core.MappingNode)(<nil>)
    }),
    Filter: (*provider.ResolvedDataSourceFilters)({
      Filters: ([]*provider.ResolvedDataSourceFilter) (len=1) {
        (*provider.ResolvedDataSourceFilter)({
          Field: (*core.ScalarValue)({
            IntValue: (*int)(<nil>),
            BoolValue: (*bool)(<nil>),
            FloatValue: (*float64)(<nil>),
            StringValue: (*string)((len=4) "tags"),
            SourceMeta: (*source.Meta)({
              Position: (source.Position) {
                Line: (int) 32,
                Column: (int) 14
              },
              EndPosition: (*source.Position)({
                Line: (int) 32,
                Column: (int) 18
              })
            })
          }),
          Operator: (*schema.DataSourceFilterOperatorWrapper)({
            Value: (schema.DataSourceFilterOperator) (len=12) "not contains",
            SourceMeta: (*source.Meta)({
              Position: (source.Position) {
                Line: (int) 33,
                Column: (int) 17
              },
              EndPosition: (*source.Position)({
                Line: (int) 33,
                Column: (int) 31
              })
            })
          }),
          Search: (*provider.ResolvedDataSourceFilterSearch)({
            Values: ([]*core.MappingNode) (len=1) {
              (*core.MappingNode)(<nil>)
            }
          })
        })
      }
    }),
    Exports: (map[string]*provider.ResolvedDataSourceFieldExport) (len=2) {
      (string) (len=9) "subnetIds": (*provider.ResolvedDataSourceFieldExport)({
        Type: (*schema.DataSourceFieldTypeWrapper)({
          Value: (schema.DataSourceFieldType) (len=5) "array",
          SourceMeta: (*source.Meta)(<nil>)
        }),
        AliasFor: (*core.ScalarValue)(<nil>),
        Description: (*core.MappingNode)(<nil>)
      }),
      (string) (len=5) "vpcId": (*provider.ResolvedDataSourceFieldExport)({
        Type: (*schema.DataSourceFieldTypeWrapper)({
          Value: (schema.DataSourceFieldType) (len=6) "string",
          SourceMeta: (*source.Meta)(<nil>)
        }),
        AliasFor: (*core.ScalarValue)(<nil>),
        Description: (*core.MappingNode)(<nil>)
      })
    },
    Description: (*core.MappingNode)({
      Scalar: (*core.ScalarValue)({
        IntValue: (*int)(<nil>),
        BoolValue: (*bool)(<nil>),
        FloatValue: (*float64)(<nil>),
        StringValue: (*string)((len=41) "Networking resources for the application."),
        SourceMeta: (*source.Meta)(<nil>)
      }),
      Fields: (map[string]*core.MappingNode) <nil>,
      Items: ([]*core.MappingNode) <nil>,
      StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
      SourceMeta: (*source.Meta)(<nil>),
      FieldsSourceMeta: (map[string]*source.Meta) <nil>
    })
  }),
  ResolveOnDeploy: ([]string) (len=1) {
    (string) (len=33) "datasources.network.filter.search"
  }
})
