(*subengine.ResolveInIncludeResult)({
  ResolvedInclude: (*subengine.ResolvedInclude)({
    Path: (*core.MappingNode)({
      Scalar: (*core.ScalarValue)({
        IntValue: (*int)(<nil>),
        BoolValue: (*bool)(<nil>),
        FloatValue: (*float64)(<nil>),
        StringValue: (*string)((len=15) "core-infra.yaml"),
        SourceMeta: (*source.Meta)(<nil>)
      }),
      Fields: (map[string]*core.MappingNode) <nil>,
      Items: ([]*core.MappingNode) <nil>,
      StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
      SourceMeta: (*source.Meta)(<nil>),
      FieldsSourceMeta: (map[string]*source.Meta) <nil>
    }),
    Variables: (*core.MappingNode)({
      Scalar: (*core.ScalarValue)(<nil>),
      Fields: (map[string]*core.MappingNode) (len=1) {
        (string) (len=6) "region": (*core.MappingNode)({
          Scalar: (*core.ScalarValue)({
            IntValue: (*int)(<nil>),
            BoolValue: (*bool)(<nil>),
            FloatValue: (*float64)(<nil>),
            StringValue: (*string)((len=9) "us-west-2"),
            SourceMeta: (*source.Meta)(<nil>)
          }),
          Fields: (map[string]*core.MappingNode) <nil>,
          Items: ([]*core.MappingNode) <nil>,
          StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
          SourceMeta: (*source.Meta)(<nil>),
          FieldsSourceMeta: (map[string]*source.Meta) <nil>
        })
      },
      Items: ([]*core.MappingNode) <nil>,
      StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
      SourceMeta: (*source.Meta)(<nil>),
      FieldsSourceMeta: (map[string]*source.Meta) <nil>
    }),
    Metadata: (*core.MappingNode)({
      Scalar: (*core.ScalarValue)(<nil>),
      Fields: (map[string]*core.MappingNode) (len=3) {
        (string) (len=6) "bucket": (*core.MappingNode)({
          Scalar: (*core.ScalarValue)({
            IntValue: (*int)(<nil>),
            BoolValue: (*bool)(<nil>),
            FloatValue: (*float64)(<nil>),
            StringValue: (*string)((len=23) "order-system-blueprints"),
            SourceMeta: (*source.Meta)({
              Position: (source.Position) {
                Line: (int) 84,
                Column: (int) 15
              },
              EndPosition: (*source.Position)({
                Line: (int) 84,
                Column: (int) 38
              })
            })
          }),
          Fields: (map[string]*core.MappingNode) <nil>,
          Items: ([]*core.MappingNode) <nil>,
          StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
          SourceMeta: (*source.Meta)({
            Position: (source.Position) {
              Line: (int) 84,
              Column: (int) 15
            },
            EndPosition: (*source.Position)(<nil>)
          }),
          FieldsSourceMeta: (map[string]*source.Meta) <nil>
        }),
        (string) (len=6) "region": (*core.MappingNode)({
          Scalar: (*core.ScalarValue)({
            IntValue: (*int)(<nil>),
            BoolValue: (*bool)(<nil>),
            FloatValue: (*float64)(<nil>),
            StringValue: (*string)((len=9) "eu-west-1"),
            SourceMeta: (*source.Meta)({
              Position: (source.Position) {
                Line: (int) 85,
                Column: (int) 15
              },
              EndPosition: (*source.Position)({
                Line: (int) 85,
                Column: (int) 24
              })
            })
          }),
          Fields: (map[string]*core.MappingNode) <nil>,
          Items: ([]*core.MappingNode) <nil>,
          StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
          SourceMeta: (*source.Meta)({
            Position: (source.Position) {
              Line: (int) 85,
              Column: (int) 15
            },
            EndPosition: (*source.Position)(<nil>)
          }),
          FieldsSourceMeta: (map[string]*source.Meta) <nil>
        }),
        (string) (len=10) "sourceType": (*core.MappingNode)({
          Scalar: (*core.ScalarValue)({
            IntValue: (*int)(<nil>),
            BoolValue: (*bool)(<nil>),
            FloatValue: (*float64)(<nil>),
            StringValue: (*string)((len=6) "aws/s3"),
            SourceMeta: (*source.Meta)({
              Position: (source.Position) {
                Line: (int) 83,
                Column: (int) 19
              },
              EndPosition: (*source.Position)({
                Line: (int) 83,
                Column: (int) 25
              })
            })
          }),
          Fields: (map[string]*core.MappingNode) <nil>,
          Items: ([]*core.MappingNode) <nil>,
          StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
          SourceMeta: (*source.Meta)({
            Position: (source.Position) {
              Line: (int) 83,
              Column: (int) 19
            },
            EndPosition: (*source.Position)(<nil>)
          }),
          FieldsSourceMeta: (map[string]*source.Meta) <nil>
        })
      },
      Items: ([]*core.MappingNode) <nil>,
      StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
      SourceMeta: (*source.Meta)(<nil>),
      FieldsSourceMeta: (map[string]*source.Meta) <nil>
    }),
    Description: (*core.MappingNode)({
      Scalar: (*core.ScalarValue)({
        IntValue: (*int)(<nil>),
        BoolValue: (*bool)(<nil>),
        FloatValue: (*float64)(<nil>),
        StringValue: (*string)((len=38) "core infrastructure for the Orders API"),
        SourceMeta: (*source.Meta)(<nil>)
      }),
      Fields: (map[string]*core.MappingNode) <nil>,
      Items: ([]*core.MappingNode) <nil>,
      StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
      SourceMeta: (*source.Meta)(<nil>),
      FieldsSourceMeta: (map[string]*source.Meta) <nil>
    })
  }),
  ResolveOnDeploy: ([]string) {
  }
})
