(*schema.Blueprint)({
  Version: (string) (len=10) "2021-12-18",
  Transform: (*schema.TransformValueWrapper)({
    Values: ([]string) (len=1) {
      (string) (len=19) "celerity-2022-01-22"
    },
    SourceMeta: ([]*source.Meta) (len=1) {
      (*source.Meta)({
        Line: (int) 3,
        Column: (int) 5
      })
    }
  }),
  Variables: (map[string]*schema.Variable) (len=3) {
    (string) (len=13) "dynamoDBTable": (*schema.Variable)({
      Type: (schema.VariableType) (len=6) "string",
      Description: (string) (len=25) "The Orders DynamoDB Table",
      Secret: (bool) false,
      Default: (*core.ScalarValue)(<nil>),
      AllowedValues: ([]*core.ScalarValue) <nil>,
      SourceMeta: (*source.Meta)({
        Line: (int) 6,
        Column: (int) 5
      })
    }),
    (string) (len=11) "environment": (*schema.Variable)({
      Type: (schema.VariableType) (len=6) "string",
      Description: (string) "",
      Secret: (bool) false,
      Default: (*core.ScalarValue)(<nil>),
      AllowedValues: ([]*core.ScalarValue) <nil>,
      SourceMeta: (*source.Meta)({
        Line: (int) 12,
        Column: (int) 5
      })
    }),
    (string) (len=15) "ordersTopicName": (*schema.Variable)({
      Type: (schema.VariableType) (len=6) "string",
      Description: (string) (len=22) "The Orders Event Topic",
      Secret: (bool) false,
      Default: (*core.ScalarValue)(<nil>),
      AllowedValues: ([]*core.ScalarValue) <nil>,
      SourceMeta: (*source.Meta)({
        Line: (int) 9,
        Column: (int) 5
      })
    })
  },
  Include: (map[string]*schema.Include) <nil>,
  Resources: (map[string]*schema.Resource) (len=6) {
    (string) (len=10) "authoriser": (*schema.Resource)({
      Type: (string) (len=16) "celerity/handler",
      Description: (*substitutions.StringOrSubstitutions)(<nil>),
      Metadata: (*schema.Metadata)({
        DisplayName: (*substitutions.StringOrSubstitutions)({
          Values: ([]*substitutions.StringOrSubstitution) (len=1) {
            (*substitutions.StringOrSubstitution)({
              StringValue: (*string)((len=10) "Authoriser"),
              SubstitutionValue: (*substitutions.Substitution)(<nil>),
              SourceMeta: (*source.Meta)(<nil>)
            })
          },
          SourceMeta: (*source.Meta)(<nil>)
        }),
        Annotations: (map[string]*substitutions.StringOrSubstitutions) (len=4) {
          (string) (len=10) "authoriser": (*substitutions.StringOrSubstitutions)({
            Values: ([]*substitutions.StringOrSubstitution) (len=1) {
              (*substitutions.StringOrSubstitution)({
                StringValue: (*string)((len=4) "true"),
                SubstitutionValue: (*substitutions.Substitution)(<nil>),
                SourceMeta: (*source.Meta)(<nil>)
              })
            },
            SourceMeta: (*source.Meta)(<nil>)
          }),
          (string) (len=26) "authoriser.identity.header": (*substitutions.StringOrSubstitutions)({
            Values: ([]*substitutions.StringOrSubstitution) (len=1) {
              (*substitutions.StringOrSubstitution)({
                StringValue: (*string)((len=18) "MyCustomAuthHeader"),
                SubstitutionValue: (*substitutions.Substitution)(<nil>),
                SourceMeta: (*source.Meta)(<nil>)
              })
            },
            SourceMeta: (*source.Meta)(<nil>)
          }),
          (string) (len=36) "authoriser.identity.reauthoriseEvery": (*substitutions.StringOrSubstitutions)({
            Values: ([]*substitutions.StringOrSubstitution) (len=1) {
              (*substitutions.StringOrSubstitution)({
                StringValue: (*string)((len=2) "20"),
                SubstitutionValue: (*substitutions.Substitution)(<nil>),
                SourceMeta: (*source.Meta)(<nil>)
              })
            },
            SourceMeta: (*source.Meta)(<nil>)
          }),
          (string) (len=40) "authoriser.identity.validationExpression": (*substitutions.StringOrSubstitutions)({
            Values: ([]*substitutions.StringOrSubstitution) (len=1) {
              (*substitutions.StringOrSubstitution)({
                StringValue: (*string)((len=9) "Bearer .*"),
                SubstitutionValue: (*substitutions.Substitution)(<nil>),
                SourceMeta: (*source.Meta)(<nil>)
              })
            },
            SourceMeta: (*source.Meta)(<nil>)
          })
        },
        Labels: (map[string]string) (len=1) {
          (string) (len=3) "app": (string) (len=8) "orderApi"
        },
        Custom: (*core.MappingNode)(<nil>)
      }),
      LinkSelector: (*schema.LinkSelector)(<nil>),
      Spec: (*core.MappingNode)({
        Literal: (*core.ScalarValue)(<nil>),
        Fields: (map[string]*core.MappingNode) (len=2) {
          (string) (len=7) "handler": (*core.MappingNode)({
            Literal: (*core.ScalarValue)({
              IntValue: (*int)(<nil>),
              BoolValue: (*bool)(<nil>),
              FloatValue: (*float64)(<nil>),
              StringValue: (*string)((len=19) "handlers.Authoriser"),
              SourceMeta: (*source.Meta)({
                Line: (int) 99,
                Column: (int) 16
              })
            }),
            Fields: (map[string]*core.MappingNode) <nil>,
            Items: ([]*core.MappingNode) <nil>,
            StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
            SourceMeta: (*source.Meta)(<nil>)
          }),
          (string) (len=7) "timeout": (*core.MappingNode)({
            Literal: (*core.ScalarValue)({
              IntValue: (*int)(120),
              BoolValue: (*bool)(<nil>),
              FloatValue: (*float64)(<nil>),
              StringValue: (*string)(<nil>),
              SourceMeta: (*source.Meta)({
                Line: (int) 100,
                Column: (int) 16
              })
            }),
            Fields: (map[string]*core.MappingNode) <nil>,
            Items: ([]*core.MappingNode) <nil>,
            StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
            SourceMeta: (*source.Meta)(<nil>)
          })
        },
        Items: ([]*core.MappingNode) <nil>,
        StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
        SourceMeta: (*source.Meta)(<nil>)
      })
    }),
    (string) (len=16) "getOrdersHandler": (*schema.Resource)({
      Type: (string) (len=16) "celerity/handler",
      Description: (*substitutions.StringOrSubstitutions)(<nil>),
      Metadata: (*schema.Metadata)({
        DisplayName: (*substitutions.StringOrSubstitutions)({
          Values: ([]*substitutions.StringOrSubstitution) (len=1) {
            (*substitutions.StringOrSubstitution)({
              StringValue: (*string)((len=18) "Get Orders Handler"),
              SubstitutionValue: (*substitutions.Substitution)(<nil>),
              SourceMeta: (*source.Meta)(<nil>)
            })
          },
          SourceMeta: (*source.Meta)(<nil>)
        }),
        Annotations: (map[string]*substitutions.StringOrSubstitutions) <nil>,
        Labels: (map[string]string) (len=1) {
          (string) (len=3) "app": (string) (len=8) "orderApi"
        },
        Custom: (*core.MappingNode)(<nil>)
      }),
      LinkSelector: (*schema.LinkSelector)(<nil>),
      Spec: (*core.MappingNode)({
        Literal: (*core.ScalarValue)(<nil>),
        Fields: (map[string]*core.MappingNode) (len=3) {
          (string) (len=8) "endpoint": (*core.MappingNode)({
            Literal: (*core.ScalarValue)(<nil>),
            Fields: (map[string]*core.MappingNode) (len=3) {
              (string) (len=10) "authoriser": (*core.MappingNode)({
                Literal: (*core.ScalarValue)(<nil>),
                Fields: (map[string]*core.MappingNode) <nil>,
                Items: ([]*core.MappingNode) <nil>,
                StringWithSubstitutions: (*substitutions.StringOrSubstitutions)({
                  Values: ([]*substitutions.StringOrSubstitution) (len=1) {
                    (*substitutions.StringOrSubstitution)({
                      StringValue: (*string)(<nil>),
                      SubstitutionValue: (*substitutions.Substitution)({
                        Function: (*substitutions.SubstitutionFunction)(<nil>),
                        Variable: (*substitutions.SubstitutionVariable)(<nil>),
                        DataSourceProperty: (*substitutions.SubstitutionDataSourceProperty)(<nil>),
                        ResourceProperty: (*substitutions.SubstitutionResourceProperty)({
                          ResourceName: (string) (len=10) "authoriser",
                          Path: ([]*substitutions.SubstitutionPathItem) {
                          },
                          SourceMeta: (*source.Meta)(<nil>)
                        }),
                        Child: (*substitutions.SubstitutionChild)(<nil>),
                        StringValue: (*string)(<nil>),
                        IntValue: (*int64)(<nil>),
                        FloatValue: (*float64)(<nil>),
                        BoolValue: (*bool)(<nil>),
                        SourceMeta: (*source.Meta)(<nil>)
                      }),
                      SourceMeta: (*source.Meta)(<nil>)
                    })
                  },
                  SourceMeta: (*source.Meta)(<nil>)
                }),
                SourceMeta: (*source.Meta)(<nil>)
              }),
              (string) (len=6) "method": (*core.MappingNode)({
                Literal: (*core.ScalarValue)({
                  IntValue: (*int)(<nil>),
                  BoolValue: (*bool)(<nil>),
                  FloatValue: (*float64)(<nil>),
                  StringValue: (*string)((len=3) "get"),
                  SourceMeta: (*source.Meta)({
                    Line: (int) 112,
                    Column: (int) 17
                  })
                }),
                Fields: (map[string]*core.MappingNode) <nil>,
                Items: ([]*core.MappingNode) <nil>,
                StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                SourceMeta: (*source.Meta)(<nil>)
              }),
              (string) (len=4) "path": (*core.MappingNode)({
                Literal: (*core.ScalarValue)({
                  IntValue: (*int)(<nil>),
                  BoolValue: (*bool)(<nil>),
                  FloatValue: (*float64)(<nil>),
                  StringValue: (*string)((len=7) "/orders"),
                  SourceMeta: (*source.Meta)({
                    Line: (int) 113,
                    Column: (int) 15
                  })
                }),
                Fields: (map[string]*core.MappingNode) <nil>,
                Items: ([]*core.MappingNode) <nil>,
                StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                SourceMeta: (*source.Meta)(<nil>)
              })
            },
            Items: ([]*core.MappingNode) <nil>,
            StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
            SourceMeta: (*source.Meta)(<nil>)
          }),
          (string) (len=7) "handler": (*core.MappingNode)({
            Literal: (*core.ScalarValue)({
              IntValue: (*int)(<nil>),
              BoolValue: (*bool)(<nil>),
              FloatValue: (*float64)(<nil>),
              StringValue: (*string)((len=18) "handlers.GetOrders"),
              SourceMeta: (*source.Meta)({
                Line: (int) 109,
                Column: (int) 16
              })
            }),
            Fields: (map[string]*core.MappingNode) <nil>,
            Items: ([]*core.MappingNode) <nil>,
            StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
            SourceMeta: (*source.Meta)(<nil>)
          }),
          (string) (len=7) "timeout": (*core.MappingNode)({
            Literal: (*core.ScalarValue)({
              IntValue: (*int)(120),
              BoolValue: (*bool)(<nil>),
              FloatValue: (*float64)(<nil>),
              StringValue: (*string)(<nil>),
              SourceMeta: (*source.Meta)({
                Line: (int) 110,
                Column: (int) 16
              })
            }),
            Fields: (map[string]*core.MappingNode) <nil>,
            Items: ([]*core.MappingNode) <nil>,
            StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
            SourceMeta: (*source.Meta)(<nil>)
          })
        },
        Items: ([]*core.MappingNode) <nil>,
        StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
        SourceMeta: (*source.Meta)(<nil>)
      })
    }),
    (string) (len=8) "orderApi": (*schema.Resource)({
      Type: (string) (len=12) "celerity/api",
      Description: (*substitutions.StringOrSubstitutions)(<nil>),
      Metadata: (*schema.Metadata)({
        DisplayName: (*substitutions.StringOrSubstitutions)({
          Values: ([]*substitutions.StringOrSubstitution) (len=1) {
            (*substitutions.StringOrSubstitution)({
              StringValue: (*string)((len=9) "Order API"),
              SubstitutionValue: (*substitutions.Substitution)(<nil>),
              SourceMeta: (*source.Meta)(<nil>)
            })
          },
          SourceMeta: (*source.Meta)(<nil>)
        }),
        Annotations: (map[string]*substitutions.StringOrSubstitutions) <nil>,
        Labels: (map[string]string) (len=1) {
          (string) (len=3) "app": (string) (len=8) "orderApi"
        },
        Custom: (*core.MappingNode)({
          Literal: (*core.ScalarValue)(<nil>),
          Fields: (map[string]*core.MappingNode) (len=1) {
            (string) (len=6) "visual": (*core.MappingNode)({
              Literal: (*core.ScalarValue)(<nil>),
              Fields: (map[string]*core.MappingNode) (len=4) {
                (string) (len=6) "height": (*core.MappingNode)({
                  Literal: (*core.ScalarValue)({
                    IntValue: (*int)(50),
                    BoolValue: (*bool)(<nil>),
                    FloatValue: (*float64)(<nil>),
                    StringValue: (*string)(<nil>),
                    SourceMeta: (*source.Meta)({
                      Line: (int) 46,
                      Column: (int) 19
                    })
                  }),
                  Fields: (map[string]*core.MappingNode) <nil>,
                  Items: ([]*core.MappingNode) <nil>,
                  StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                  SourceMeta: (*source.Meta)(<nil>)
                }),
                (string) (len=9) "linkPorts": (*core.MappingNode)({
                  Literal: (*core.ScalarValue)(<nil>),
                  Fields: (map[string]*core.MappingNode) <nil>,
                  Items: ([]*core.MappingNode) (len=1) {
                    (*core.MappingNode)({
                      Literal: (*core.ScalarValue)(<nil>),
                      Fields: (map[string]*core.MappingNode) (len=3) {
                        (string) (len=10) "annotation": (*core.MappingNode)({
                          Literal: (*core.ScalarValue)({
                            IntValue: (*int)(<nil>),
                            BoolValue: (*bool)(<nil>),
                            FloatValue: (*float64)(<nil>),
                            StringValue: (*string)((len=10) "Orders API"),
                            SourceMeta: (*source.Meta)({
                              Line: (int) 50,
                              Column: (int) 27
                            })
                          }),
                          Fields: (map[string]*core.MappingNode) <nil>,
                          Items: ([]*core.MappingNode) <nil>,
                          StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                          SourceMeta: (*source.Meta)(<nil>)
                        }),
                        (string) (len=9) "connectAt": (*core.MappingNode)({
                          Literal: (*core.ScalarValue)({
                            IntValue: (*int)(<nil>),
                            BoolValue: (*bool)(<nil>),
                            FloatValue: (*float64)(<nil>),
                            StringValue: (*string)((len=6) "70 100"),
                            SourceMeta: (*source.Meta)({
                              Line: (int) 49,
                              Column: (int) 26
                            })
                          }),
                          Fields: (map[string]*core.MappingNode) <nil>,
                          Items: ([]*core.MappingNode) <nil>,
                          StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                          SourceMeta: (*source.Meta)(<nil>)
                        }),
                        (string) (len=6) "linkTo": (*core.MappingNode)({
                          Literal: (*core.ScalarValue)({
                            IntValue: (*int)(<nil>),
                            BoolValue: (*bool)(<nil>),
                            FloatValue: (*float64)(<nil>),
                            StringValue: (*string)((len=16) "getOrderEndpoint"),
                            SourceMeta: (*source.Meta)({
                              Line: (int) 48,
                              Column: (int) 23
                            })
                          }),
                          Fields: (map[string]*core.MappingNode) <nil>,
                          Items: ([]*core.MappingNode) <nil>,
                          StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                          SourceMeta: (*source.Meta)(<nil>)
                        })
                      },
                      Items: ([]*core.MappingNode) <nil>,
                      StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                      SourceMeta: (*source.Meta)(<nil>)
                    })
                  },
                  StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                  SourceMeta: (*source.Meta)(<nil>)
                }),
                (string) (len=5) "point": (*core.MappingNode)({
                  Literal: (*core.ScalarValue)({
                    IntValue: (*int)(<nil>),
                    BoolValue: (*bool)(<nil>),
                    FloatValue: (*float64)(<nil>),
                    StringValue: (*string)((len=6) "20 100"),
                    SourceMeta: (*source.Meta)({
                      Line: (int) 44,
                      Column: (int) 18
                    })
                  }),
                  Fields: (map[string]*core.MappingNode) <nil>,
                  Items: ([]*core.MappingNode) <nil>,
                  StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                  SourceMeta: (*source.Meta)(<nil>)
                }),
                (string) (len=5) "width": (*core.MappingNode)({
                  Literal: (*core.ScalarValue)({
                    IntValue: (*int)(50),
                    BoolValue: (*bool)(<nil>),
                    FloatValue: (*float64)(<nil>),
                    StringValue: (*string)(<nil>),
                    SourceMeta: (*source.Meta)({
                      Line: (int) 45,
                      Column: (int) 18
                    })
                  }),
                  Fields: (map[string]*core.MappingNode) <nil>,
                  Items: ([]*core.MappingNode) <nil>,
                  StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                  SourceMeta: (*source.Meta)(<nil>)
                })
              },
              Items: ([]*core.MappingNode) <nil>,
              StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
              SourceMeta: (*source.Meta)(<nil>)
            })
          },
          Items: ([]*core.MappingNode) <nil>,
          StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
          SourceMeta: (*source.Meta)(<nil>)
        })
      }),
      LinkSelector: (*schema.LinkSelector)({
        ByLabel: (map[string]string) (len=1) {
          (string) (len=3) "app": (string) (len=8) "orderApi"
        }
      }),
      Spec: (*core.MappingNode)({
        Literal: (*core.ScalarValue)(<nil>),
        Fields: (map[string]*core.MappingNode) (len=3) {
          (string) (len=11) "environment": (*core.MappingNode)({
            Literal: (*core.ScalarValue)(<nil>),
            Fields: (map[string]*core.MappingNode) (len=1) {
              (string) (len=9) "variables": (*core.MappingNode)({
                Literal: (*core.ScalarValue)(<nil>),
                Fields: (map[string]*core.MappingNode) (len=1) {
                  (string) (len=14) "DYNAMODB_TABLE": (*core.MappingNode)({
                    Literal: (*core.ScalarValue)(<nil>),
                    Fields: (map[string]*core.MappingNode) <nil>,
                    Items: ([]*core.MappingNode) <nil>,
                    StringWithSubstitutions: (*substitutions.StringOrSubstitutions)({
                      Values: ([]*substitutions.StringOrSubstitution) (len=1) {
                        (*substitutions.StringOrSubstitution)({
                          StringValue: (*string)(<nil>),
                          SubstitutionValue: (*substitutions.Substitution)({
                            Function: (*substitutions.SubstitutionFunction)(<nil>),
                            Variable: (*substitutions.SubstitutionVariable)({
                              VariableName: (string) (len=13) "dynamoDBTable",
                              SourceMeta: (*source.Meta)(<nil>)
                            }),
                            DataSourceProperty: (*substitutions.SubstitutionDataSourceProperty)(<nil>),
                            ResourceProperty: (*substitutions.SubstitutionResourceProperty)(<nil>),
                            Child: (*substitutions.SubstitutionChild)(<nil>),
                            StringValue: (*string)(<nil>),
                            IntValue: (*int64)(<nil>),
                            FloatValue: (*float64)(<nil>),
                            BoolValue: (*bool)(<nil>),
                            SourceMeta: (*source.Meta)(<nil>)
                          }),
                          SourceMeta: (*source.Meta)(<nil>)
                        })
                      },
                      SourceMeta: (*source.Meta)(<nil>)
                    }),
                    SourceMeta: (*source.Meta)(<nil>)
                  })
                },
                Items: ([]*core.MappingNode) <nil>,
                StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                SourceMeta: (*source.Meta)(<nil>)
              })
            },
            Items: ([]*core.MappingNode) <nil>,
            StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
            SourceMeta: (*source.Meta)(<nil>)
          }),
          (string) (len=7) "runtime": (*core.MappingNode)({
            Literal: (*core.ScalarValue)({
              IntValue: (*int)(<nil>),
              BoolValue: (*bool)(<nil>),
              FloatValue: (*float64)(<nil>),
              StringValue: (*string)((len=5) "go1.x"),
              SourceMeta: (*source.Meta)({
                Line: (int) 71,
                Column: (int) 16
              })
            }),
            Fields: (map[string]*core.MappingNode) <nil>,
            Items: ([]*core.MappingNode) <nil>,
            StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
            SourceMeta: (*source.Meta)(<nil>)
          }),
          (string) (len=14) "tracingEnabled": (*core.MappingNode)({
            Literal: (*core.ScalarValue)({
              IntValue: (*int)(<nil>),
              BoolValue: (*bool)(true),
              FloatValue: (*float64)(<nil>),
              StringValue: (*string)(<nil>),
              SourceMeta: (*source.Meta)({
                Line: (int) 74,
                Column: (int) 23
              })
            }),
            Fields: (map[string]*core.MappingNode) <nil>,
            Items: ([]*core.MappingNode) <nil>,
            StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
            SourceMeta: (*source.Meta)(<nil>)
          })
        },
        Items: ([]*core.MappingNode) <nil>,
        StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
        SourceMeta: (*source.Meta)(<nil>)
      })
    }),
    (string) (len=11) "orderPubSub": (*schema.Resource)({
      Type: (string) (len=15) "celerity/pubsub",
      Description: (*substitutions.StringOrSubstitutions)(<nil>),
      Metadata: (*schema.Metadata)({
        DisplayName: (*substitutions.StringOrSubstitutions)({
          Values: ([]*substitutions.StringOrSubstitution) (len=1) {
            (*substitutions.StringOrSubstitution)({
              StringValue: (*string)((len=13) "Order Pub/Sub"),
              SubstitutionValue: (*substitutions.Substitution)(<nil>),
              SourceMeta: (*source.Meta)(<nil>)
            })
          },
          SourceMeta: (*source.Meta)(<nil>)
        }),
        Annotations: (map[string]*substitutions.StringOrSubstitutions) <nil>,
        Labels: (map[string]string) (len=1) {
          (string) (len=8) "workflow": (string) (len=11) "orderPubSub"
        },
        Custom: (*core.MappingNode)(<nil>)
      }),
      LinkSelector: (*schema.LinkSelector)({
        ByLabel: (map[string]string) (len=1) {
          (string) (len=8) "workflow": (string) (len=11) "orderPubSub"
        }
      }),
      Spec: (*core.MappingNode)({
        Literal: (*core.ScalarValue)(<nil>),
        Fields: (map[string]*core.MappingNode) (len=1) {
          (string) (len=9) "topicName": (*core.MappingNode)({
            Literal: (*core.ScalarValue)(<nil>),
            Fields: (map[string]*core.MappingNode) <nil>,
            Items: ([]*core.MappingNode) <nil>,
            StringWithSubstitutions: (*substitutions.StringOrSubstitutions)({
              Values: ([]*substitutions.StringOrSubstitution) (len=1) {
                (*substitutions.StringOrSubstitution)({
                  StringValue: (*string)(<nil>),
                  SubstitutionValue: (*substitutions.Substitution)({
                    Function: (*substitutions.SubstitutionFunction)(<nil>),
                    Variable: (*substitutions.SubstitutionVariable)({
                      VariableName: (string) (len=15) "ordersTopicName",
                      SourceMeta: (*source.Meta)(<nil>)
                    }),
                    DataSourceProperty: (*substitutions.SubstitutionDataSourceProperty)(<nil>),
                    ResourceProperty: (*substitutions.SubstitutionResourceProperty)(<nil>),
                    Child: (*substitutions.SubstitutionChild)(<nil>),
                    StringValue: (*string)(<nil>),
                    IntValue: (*int64)(<nil>),
                    FloatValue: (*float64)(<nil>),
                    BoolValue: (*bool)(<nil>),
                    SourceMeta: (*source.Meta)(<nil>)
                  }),
                  SourceMeta: (*source.Meta)(<nil>)
                })
              },
              SourceMeta: (*source.Meta)(<nil>)
            }),
            SourceMeta: (*source.Meta)(<nil>)
          })
        },
        Items: ([]*core.MappingNode) <nil>,
        StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
        SourceMeta: (*source.Meta)(<nil>)
      })
    }),
    (string) (len=19) "sharedPackagesLayer": (*schema.Resource)({
      Type: (string) (len=21) "celerity/layerVersion",
      Description: (*substitutions.StringOrSubstitutions)(<nil>),
      Metadata: (*schema.Metadata)({
        DisplayName: (*substitutions.StringOrSubstitutions)({
          Values: ([]*substitutions.StringOrSubstitution) (len=1) {
            (*substitutions.StringOrSubstitution)({
              StringValue: (*string)((len=21) "Shared Packages Layer"),
              SubstitutionValue: (*substitutions.Substitution)(<nil>),
              SourceMeta: (*source.Meta)(<nil>)
            })
          },
          SourceMeta: (*source.Meta)(<nil>)
        }),
        Annotations: (map[string]*substitutions.StringOrSubstitutions) <nil>,
        Labels: (map[string]string) (len=2) {
          (string) (len=3) "app": (string) (len=8) "orderApi",
          (string) (len=8) "workflow": (string) (len=11) "orderPubSub"
        },
        Custom: (*core.MappingNode)(<nil>)
      }),
      LinkSelector: (*schema.LinkSelector)(<nil>),
      Spec: (*core.MappingNode)({
        Literal: (*core.ScalarValue)(<nil>),
        Fields: (map[string]*core.MappingNode) (len=3) {
          (string) (len=18) "compatibleRuntimes": (*core.MappingNode)({
            Literal: (*core.ScalarValue)(<nil>),
            Fields: (map[string]*core.MappingNode) <nil>,
            Items: ([]*core.MappingNode) (len=1) {
              (*core.MappingNode)({
                Literal: (*core.ScalarValue)({
                  IntValue: (*int)(<nil>),
                  BoolValue: (*bool)(<nil>),
                  FloatValue: (*float64)(<nil>),
                  StringValue: (*string)((len=5) "go1.x"),
                  SourceMeta: (*source.Meta)({
                    Line: (int) 152,
                    Column: (int) 28
                  })
                }),
                Fields: (map[string]*core.MappingNode) <nil>,
                Items: ([]*core.MappingNode) <nil>,
                StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                SourceMeta: (*source.Meta)(<nil>)
              })
            },
            StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
            SourceMeta: (*source.Meta)(<nil>)
          }),
          (string) (len=7) "content": (*core.MappingNode)({
            Literal: (*core.ScalarValue)({
              IntValue: (*int)(<nil>),
              BoolValue: (*bool)(<nil>),
              FloatValue: (*float64)(<nil>),
              StringValue: (*string)((len=27) "build/shared-packages-layer"),
              SourceMeta: (*source.Meta)({
                Line: (int) 155,
                Column: (int) 16
              })
            }),
            Fields: (map[string]*core.MappingNode) <nil>,
            Items: ([]*core.MappingNode) <nil>,
            StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
            SourceMeta: (*source.Meta)(<nil>)
          }),
          (string) (len=9) "layerName": (*core.MappingNode)({
            Literal: (*core.ScalarValue)({
              IntValue: (*int)(<nil>),
              BoolValue: (*bool)(<nil>),
              FloatValue: (*float64)(<nil>),
              StringValue: (*string)((len=19) "sharedPackagesLayer"),
              SourceMeta: (*source.Meta)({
                Line: (int) 156,
                Column: (int) 18
              })
            }),
            Fields: (map[string]*core.MappingNode) <nil>,
            Items: ([]*core.MappingNode) <nil>,
            StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
            SourceMeta: (*source.Meta)(<nil>)
          })
        },
        Items: ([]*core.MappingNode) <nil>,
        StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
        SourceMeta: (*source.Meta)(<nil>)
      })
    }),
    (string) (len=19) "updateOrderFunction": (*schema.Resource)({
      Type: (string) (len=16) "celerity/handler",
      Description: (*substitutions.StringOrSubstitutions)(<nil>),
      Metadata: (*schema.Metadata)({
        DisplayName: (*substitutions.StringOrSubstitutions)({
          Values: ([]*substitutions.StringOrSubstitution) (len=1) {
            (*substitutions.StringOrSubstitution)({
              StringValue: (*string)((len=21) "Update Order Function"),
              SubstitutionValue: (*substitutions.Substitution)(<nil>),
              SourceMeta: (*source.Meta)(<nil>)
            })
          },
          SourceMeta: (*source.Meta)(<nil>)
        }),
        Annotations: (map[string]*substitutions.StringOrSubstitutions) <nil>,
        Labels: (map[string]string) (len=2) {
          (string) (len=10) "pubsubType": (string) (len=8) "consumer",
          (string) (len=8) "workflow": (string) (len=11) "orderPubSub"
        },
        Custom: (*core.MappingNode)(<nil>)
      }),
      LinkSelector: (*schema.LinkSelector)(<nil>),
      Spec: (*core.MappingNode)({
        Literal: (*core.ScalarValue)(<nil>),
        Fields: (map[string]*core.MappingNode) (len=3) {
          (string) (len=6) "events": (*core.MappingNode)({
            Literal: (*core.ScalarValue)(<nil>),
            Fields: (map[string]*core.MappingNode) (len=1) {
              (string) (len=10) "orderEvent": (*core.MappingNode)({
                Literal: (*core.ScalarValue)(<nil>),
                Fields: (map[string]*core.MappingNode) (len=2) {
                  (string) (len=9) "batchSize": (*core.MappingNode)({
                    Literal: (*core.ScalarValue)({
                      IntValue: (*int)(10),
                      BoolValue: (*bool)(<nil>),
                      FloatValue: (*float64)(<nil>),
                      StringValue: (*string)(<nil>),
                      SourceMeta: (*source.Meta)({
                        Line: (int) 136,
                        Column: (int) 22
                      })
                    }),
                    Fields: (map[string]*core.MappingNode) <nil>,
                    Items: ([]*core.MappingNode) <nil>,
                    StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                    SourceMeta: (*source.Meta)(<nil>)
                  }),
                  (string) (len=4) "type": (*core.MappingNode)({
                    Literal: (*core.ScalarValue)({
                      IntValue: (*int)(<nil>),
                      BoolValue: (*bool)(<nil>),
                      FloatValue: (*float64)(<nil>),
                      StringValue: (*string)((len=6) "pubsub"),
                      SourceMeta: (*source.Meta)({
                        Line: (int) 133,
                        Column: (int) 17
                      })
                    }),
                    Fields: (map[string]*core.MappingNode) <nil>,
                    Items: ([]*core.MappingNode) <nil>,
                    StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                    SourceMeta: (*source.Meta)(<nil>)
                  })
                },
                Items: ([]*core.MappingNode) <nil>,
                StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                SourceMeta: (*source.Meta)(<nil>)
              })
            },
            Items: ([]*core.MappingNode) <nil>,
            StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
            SourceMeta: (*source.Meta)(<nil>)
          }),
          (string) (len=7) "handler": (*core.MappingNode)({
            Literal: (*core.ScalarValue)({
              IntValue: (*int)(<nil>),
              BoolValue: (*bool)(<nil>),
              FloatValue: (*float64)(<nil>),
              StringValue: (*string)((len=20) "handlers.UpdateOrder"),
              SourceMeta: (*source.Meta)({
                Line: (int) 129,
                Column: (int) 16
              })
            }),
            Fields: (map[string]*core.MappingNode) <nil>,
            Items: ([]*core.MappingNode) <nil>,
            StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
            SourceMeta: (*source.Meta)(<nil>)
          }),
          (string) (len=7) "timeout": (*core.MappingNode)({
            Literal: (*core.ScalarValue)({
              IntValue: (*int)(120),
              BoolValue: (*bool)(<nil>),
              FloatValue: (*float64)(<nil>),
              StringValue: (*string)(<nil>),
              SourceMeta: (*source.Meta)({
                Line: (int) 130,
                Column: (int) 16
              })
            }),
            Fields: (map[string]*core.MappingNode) <nil>,
            Items: ([]*core.MappingNode) <nil>,
            StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
            SourceMeta: (*source.Meta)(<nil>)
          })
        },
        Items: ([]*core.MappingNode) <nil>,
        StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
        SourceMeta: (*source.Meta)(<nil>)
      })
    })
  },
  DataSources: (map[string]*schema.DataSource) (len=1) {
    (string) (len=7) "network": (*schema.DataSource)({
      Type: (string) (len=7) "aws/vpc",
      DataSourceMetadata: (*schema.DataSourceMetadata)({
        DisplayName: (*substitutions.StringOrSubstitutions)({
          Values: ([]*substitutions.StringOrSubstitution) (len=1) {
            (*substitutions.StringOrSubstitution)({
              StringValue: (*string)((len=14) "Network source"),
              SubstitutionValue: (*substitutions.Substitution)(<nil>),
              SourceMeta: (*source.Meta)(<nil>)
            })
          },
          SourceMeta: (*source.Meta)(<nil>)
        }),
        Annotations: (map[string]*substitutions.StringOrSubstitutions) <nil>,
        Custom: (*core.MappingNode)(<nil>)
      }),
      Filter: (*schema.DataSourceFilter)({
        Field: (string) (len=4) "tags",
        Operator: (*schema.DataSourceFilterOperatorWrapper)({
          Value: (schema.DataSourceFilterOperator) (len=7) "has key"
        }),
        Search: (*schema.DataSourceFilterSearch)({
          Values: ([]*substitutions.StringOrSubstitutions) (len=1) {
            (*substitutions.StringOrSubstitutions)({
              Values: ([]*substitutions.StringOrSubstitution) (len=1) {
                (*substitutions.StringOrSubstitution)({
                  StringValue: (*string)(<nil>),
                  SubstitutionValue: (*substitutions.Substitution)({
                    Function: (*substitutions.SubstitutionFunction)(<nil>),
                    Variable: (*substitutions.SubstitutionVariable)({
                      VariableName: (string) (len=11) "environment",
                      SourceMeta: (*source.Meta)(<nil>)
                    }),
                    DataSourceProperty: (*substitutions.SubstitutionDataSourceProperty)(<nil>),
                    ResourceProperty: (*substitutions.SubstitutionResourceProperty)(<nil>),
                    Child: (*substitutions.SubstitutionChild)(<nil>),
                    StringValue: (*string)(<nil>),
                    IntValue: (*int64)(<nil>),
                    FloatValue: (*float64)(<nil>),
                    BoolValue: (*bool)(<nil>),
                    SourceMeta: (*source.Meta)(<nil>)
                  }),
                  SourceMeta: (*source.Meta)(<nil>)
                })
              },
              SourceMeta: (*source.Meta)(<nil>)
            })
          }
        })
      }),
      Exports: (map[string]*schema.DataSourceFieldExport) (len=3) {
        (string) (len=14) "securityGroups": (*schema.DataSourceFieldExport)({
          Type: (*schema.DataSourceFieldTypeWrapper)({
            Value: (schema.DataSourceFieldType) (len=5) "array"
          }),
          AliasFor: (string) "",
          Description: (*substitutions.StringOrSubstitutions)(<nil>)
        }),
        (string) (len=7) "subnets": (*schema.DataSourceFieldExport)({
          Type: (*schema.DataSourceFieldTypeWrapper)({
            Value: (schema.DataSourceFieldType) (len=5) "array"
          }),
          AliasFor: (string) "",
          Description: (*substitutions.StringOrSubstitutions)(<nil>)
        }),
        (string) (len=3) "vpc": (*schema.DataSourceFieldExport)({
          Type: (*schema.DataSourceFieldTypeWrapper)({
            Value: (schema.DataSourceFieldType) (len=6) "string"
          }),
          AliasFor: (string) "",
          Description: (*substitutions.StringOrSubstitutions)(<nil>)
        })
      },
      Description: (*substitutions.StringOrSubstitutions)(<nil>)
    })
  },
  Exports: (map[string]*schema.Export) <nil>,
  Metadata: (*core.MappingNode)(<nil>)
})
