(*schema.Blueprint)({
  Version: (string) (len=10) "2021-12-18",
  Transform: (*schema.TransformValueWrapper)({
    Values: ([]string) (len=1) {
      (string) (len=19) "celerity-2022-01-22"
    }
  }),
  Variables: (map[string]*schema.Variable) (len=2) {
    (string) (len=13) "dynamoDBTable": (*schema.Variable)({
      Type: (schema.VariableType) (len=6) "string",
      Description: (string) (len=25) "The Orders DynamoDB Table",
      Secret: (bool) false,
      Default: (*core.ScalarValue)(<nil>),
      AllowedValues: ([]*core.ScalarValue) <nil>
    }),
    (string) (len=15) "ordersTopicName": (*schema.Variable)({
      Type: (schema.VariableType) (len=6) "string",
      Description: (string) (len=22) "The Orders Event Topic",
      Secret: (bool) false,
      Default: (*core.ScalarValue)(<nil>),
      AllowedValues: ([]*core.ScalarValue) <nil>
    })
  },
  Include: (map[string]*schema.Include) (len=1) {
    (string) (len=9) "coreInfra": (*schema.Include)({
      Path: (*substitutions.StringOrSubstitutions)({
        Values: ([]*substitutions.StringOrSubstitution) (len=1) {
          (*substitutions.StringOrSubstitution)({
            StringValue: (*string)((len=17) "\"core-infra.yaml\""),
            SubstitutionValue: (*substitutions.Substitution)(<nil>)
          })
        }
      }),
      Variables: (*core.MappingNode)({
        Literal: (*core.ScalarValue)(<nil>),
        Fields: (map[string]*core.MappingNode) <nil>,
        Items: ([]*core.MappingNode) <nil>,
        StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>)
      }),
      Metadata: (*core.MappingNode)({
        Literal: (*core.ScalarValue)(<nil>),
        Fields: (map[string]*core.MappingNode) <nil>,
        Items: ([]*core.MappingNode) <nil>,
        StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>)
      }),
      Description: (*substitutions.StringOrSubstitutions)({
        Values: ([]*substitutions.StringOrSubstitution) (len=1) {
          (*substitutions.StringOrSubstitution)({
            StringValue: (*string)((len=40) "\"core infrastructure for the Orders API\""),
            SubstitutionValue: (*substitutions.Substitution)(<nil>)
          })
        }
      })
    })
  },
  Resources: (map[string]*schema.Resource) (len=6) {
    (string) (len=10) "authoriser": (*schema.Resource)({
      Type: (string) (len=16) "celerity/handler",
      Description: (*substitutions.StringOrSubstitutions)(<nil>),
      Metadata: (*schema.Metadata)({
        DisplayName: (*substitutions.StringOrSubstitutions)({
          Values: ([]*substitutions.StringOrSubstitution) (len=1) {
            (*substitutions.StringOrSubstitution)({
              StringValue: (*string)((len=12) "\"Authoriser\""),
              SubstitutionValue: (*substitutions.Substitution)(<nil>)
            })
          }
        }),
        Annotations: (map[string]*substitutions.StringOrSubstitutions) (len=4) {
          (string) (len=10) "authoriser": (*substitutions.StringOrSubstitutions)({
            Values: ([]*substitutions.StringOrSubstitution) (len=1) {
              (*substitutions.StringOrSubstitution)({
                StringValue: (*string)((len=4) "true"),
                SubstitutionValue: (*substitutions.Substitution)(<nil>)
              })
            }
          }),
          (string) (len=26) "authoriser.identity.header": (*substitutions.StringOrSubstitutions)({
            Values: ([]*substitutions.StringOrSubstitution) (len=1) {
              (*substitutions.StringOrSubstitution)({
                StringValue: (*string)((len=20) "\"MyCustomAuthHeader\""),
                SubstitutionValue: (*substitutions.Substitution)(<nil>)
              })
            }
          }),
          (string) (len=36) "authoriser.identity.reauthoriseEvery": (*substitutions.StringOrSubstitutions)({
            Values: ([]*substitutions.StringOrSubstitution) (len=1) {
              (*substitutions.StringOrSubstitution)({
                StringValue: (*string)((len=2) "20"),
                SubstitutionValue: (*substitutions.Substitution)(<nil>)
              })
            }
          }),
          (string) (len=40) "authoriser.identity.validationExpression": (*substitutions.StringOrSubstitutions)({
            Values: ([]*substitutions.StringOrSubstitution) (len=1) {
              (*substitutions.StringOrSubstitution)({
                StringValue: (*string)((len=11) "\"Bearer .*\""),
                SubstitutionValue: (*substitutions.Substitution)(<nil>)
              })
            }
          })
        },
        Labels: (map[string]string) (len=1) {
          (string) (len=3) "app": (string) (len=8) "orderApi"
        },
        Custom: (*core.MappingNode)(<nil>)
      }),
      LinkSelector: (*schema.LinkSelector)(<nil>),
      Spec: (*core.MappingNode)({
        Literal: (*core.ScalarValue)(<nil>),
        Fields: (map[string]*core.MappingNode) <nil>,
        Items: ([]*core.MappingNode) <nil>,
        StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>)
      })
    }),
    (string) (len=16) "getOrdersHandler": (*schema.Resource)({
      Type: (string) (len=16) "celerity/handler",
      Description: (*substitutions.StringOrSubstitutions)(<nil>),
      Metadata: (*schema.Metadata)({
        DisplayName: (*substitutions.StringOrSubstitutions)({
          Values: ([]*substitutions.StringOrSubstitution) (len=1) {
            (*substitutions.StringOrSubstitution)({
              StringValue: (*string)((len=20) "\"Get Orders Handler\""),
              SubstitutionValue: (*substitutions.Substitution)(<nil>)
            })
          }
        }),
        Annotations: (map[string]*substitutions.StringOrSubstitutions) <nil>,
        Labels: (map[string]string) (len=1) {
          (string) (len=3) "app": (string) (len=8) "orderApi"
        },
        Custom: (*core.MappingNode)(<nil>)
      }),
      LinkSelector: (*schema.LinkSelector)(<nil>),
      Spec: (*core.MappingNode)({
        Literal: (*core.ScalarValue)(<nil>),
        Fields: (map[string]*core.MappingNode) <nil>,
        Items: ([]*core.MappingNode) <nil>,
        StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>)
      })
    }),
    (string) (len=8) "orderApi": (*schema.Resource)({
      Type: (string) (len=12) "celerity/api",
      Description: (*substitutions.StringOrSubstitutions)(<nil>),
      Metadata: (*schema.Metadata)({
        DisplayName: (*substitutions.StringOrSubstitutions)({
          Values: ([]*substitutions.StringOrSubstitution) (len=1) {
            (*substitutions.StringOrSubstitution)({
              StringValue: (*string)((len=11) "\"Order API\""),
              SubstitutionValue: (*substitutions.Substitution)(<nil>)
            })
          }
        }),
        Annotations: (map[string]*substitutions.StringOrSubstitutions) <nil>,
        Labels: (map[string]string) (len=1) {
          (string) (len=3) "app": (string) (len=8) "orderApi"
        },
        Custom: (*core.MappingNode)(<nil>)
      }),
      LinkSelector: (*schema.LinkSelector)({
        ByLabel: (map[string]string) (len=1) {
          (string) (len=3) "app": (string) (len=8) "orderApi"
        }
      }),
      Spec: (*core.MappingNode)({
        Literal: (*core.ScalarValue)(<nil>),
        Fields: (map[string]*core.MappingNode) <nil>,
        Items: ([]*core.MappingNode) <nil>,
        StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>)
      })
    }),
    (string) (len=11) "orderPubSub": (*schema.Resource)({
      Type: (string) (len=15) "celerity/pubsub",
      Description: (*substitutions.StringOrSubstitutions)(<nil>),
      Metadata: (*schema.Metadata)({
        DisplayName: (*substitutions.StringOrSubstitutions)({
          Values: ([]*substitutions.StringOrSubstitution) (len=1) {
            (*substitutions.StringOrSubstitution)({
              StringValue: (*string)((len=15) "\"Order Pub/Sub\""),
              SubstitutionValue: (*substitutions.Substitution)(<nil>)
            })
          }
        }),
        Annotations: (map[string]*substitutions.StringOrSubstitutions) <nil>,
        Labels: (map[string]string) (len=1) {
          (string) (len=8) "workflow": (string) (len=11) "orderPubSub"
        },
        Custom: (*core.MappingNode)(<nil>)
      }),
      LinkSelector: (*schema.LinkSelector)({
        ByLabel: (map[string]string) (len=1) {
          (string) (len=8) "workflow": (string) (len=11) "orderPubSub"
        }
      }),
      Spec: (*core.MappingNode)({
        Literal: (*core.ScalarValue)(<nil>),
        Fields: (map[string]*core.MappingNode) <nil>,
        Items: ([]*core.MappingNode) <nil>,
        StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>)
      })
    }),
    (string) (len=19) "sharedPackagesLayer": (*schema.Resource)({
      Type: (string) (len=21) "celerity/layerVersion",
      Description: (*substitutions.StringOrSubstitutions)(<nil>),
      Metadata: (*schema.Metadata)({
        DisplayName: (*substitutions.StringOrSubstitutions)({
          Values: ([]*substitutions.StringOrSubstitution) (len=1) {
            (*substitutions.StringOrSubstitution)({
              StringValue: (*string)((len=23) "\"Shared Packages Layer\""),
              SubstitutionValue: (*substitutions.Substitution)(<nil>)
            })
          }
        }),
        Annotations: (map[string]*substitutions.StringOrSubstitutions) <nil>,
        Labels: (map[string]string) (len=2) {
          (string) (len=3) "app": (string) (len=8) "orderApi",
          (string) (len=8) "workflow": (string) (len=11) "orderPubSub"
        },
        Custom: (*core.MappingNode)(<nil>)
      }),
      LinkSelector: (*schema.LinkSelector)(<nil>),
      Spec: (*core.MappingNode)({
        Literal: (*core.ScalarValue)(<nil>),
        Fields: (map[string]*core.MappingNode) <nil>,
        Items: ([]*core.MappingNode) <nil>,
        StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>)
      })
    }),
    (string) (len=19) "updateOrderFunction": (*schema.Resource)({
      Type: (string) (len=16) "celerity/handler",
      Description: (*substitutions.StringOrSubstitutions)(<nil>),
      Metadata: (*schema.Metadata)({
        DisplayName: (*substitutions.StringOrSubstitutions)({
          Values: ([]*substitutions.StringOrSubstitution) (len=1) {
            (*substitutions.StringOrSubstitution)({
              StringValue: (*string)((len=23) "\"Update Order Function\""),
              SubstitutionValue: (*substitutions.Substitution)(<nil>)
            })
          }
        }),
        Annotations: (map[string]*substitutions.StringOrSubstitutions) <nil>,
        Labels: (map[string]string) (len=2) {
          (string) (len=10) "pubsubType": (string) (len=8) "consumer",
          (string) (len=8) "workflow": (string) (len=11) "orderPubSub"
        },
        Custom: (*core.MappingNode)(<nil>)
      }),
      LinkSelector: (*schema.LinkSelector)(<nil>),
      Spec: (*core.MappingNode)({
        Literal: (*core.ScalarValue)(<nil>),
        Fields: (map[string]*core.MappingNode) <nil>,
        Items: ([]*core.MappingNode) <nil>,
        StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>)
      })
    })
  },
  DataSources: (map[string]*schema.DataSource) (len=1) {
    (string) (len=7) "network": (*schema.DataSource)({
      Type: (string) (len=7) "aws/vpc",
      DataSourceMetadata: (*schema.DataSourceMetadata)({
        DisplayName: (string) (len=14) "Network source",
        Annotations: (map[string]core.ScalarValue) <nil>,
        Custom: (map[string]interface {}) <nil>
      }),
      Filter: (*schema.DataSourceFilter)(<nil>),
      Exports: (map[string]*schema.DataSourceFieldExport) (len=3) {
        (string) (len=14) "securityGroups": (*schema.DataSourceFieldExport)({
          Type: (*schema.DataSourceFieldTypeWrapper)({
            Value: (schema.DataSourceFieldType) (len=5) "array"
          }),
          AliasFor: (string) "",
          Description: (string) ""
        }),
        (string) (len=7) "subnets": (*schema.DataSourceFieldExport)({
          Type: (*schema.DataSourceFieldTypeWrapper)({
            Value: (schema.DataSourceFieldType) (len=5) "array"
          }),
          AliasFor: (string) "",
          Description: (string) ""
        }),
        (string) (len=3) "vpc": (*schema.DataSourceFieldExport)({
          Type: (*schema.DataSourceFieldTypeWrapper)({
            Value: (schema.DataSourceFieldType) (len=6) "string"
          }),
          AliasFor: (string) "",
          Description: (string) ""
        })
      },
      Description: (string) ""
    })
  },
  Exports: (map[string]*schema.Export) <nil>,
  Metadata: (*core.MappingNode)(<nil>)
})
