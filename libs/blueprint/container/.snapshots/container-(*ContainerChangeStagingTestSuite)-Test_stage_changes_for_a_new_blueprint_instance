(*container.BlueprintChanges)({
  NewResources: (map[string]provider.Changes) (len=6) {
    (string) (len=13) "invoiceStream": (provider.Changes) {
      AppliedResourceInfo: (provider.ResourceInfo) {
        ResourceID: (string) "",
        ResourceName: (string) (len=13) "invoiceStream",
        InstanceID: (string) (len=20) "blueprint-instance-2",
        CurrentResourceState: (*state.ResourceState)(<nil>),
        ResourceWithResolvedSubs: (*provider.ResolvedResource)({
          Type: (*schema.ResourceTypeWrapper)({
            Value: (string) (len=19) "aws/dynamodb/stream",
            SourceMeta: (*source.Meta)({
              Position: (source.Position) {
                Line: (int) 99,
                Column: (int) 11
              },
              EndPosition: (*source.Position)({
                Line: (int) 99,
                Column: (int) 30
              })
            })
          }),
          Description: (*core.MappingNode)({
            Scalar: (*core.ScalarValue)({
              IntValue: (*int)(<nil>),
              BoolValue: (*bool)(<nil>),
              FloatValue: (*float64)(<nil>),
              StringValue: (*string)((len=51) "Stream that captures changes to the invoices table."),
              SourceMeta: (*source.Meta)(<nil>)
            }),
            Fields: (map[string]*core.MappingNode) <nil>,
            Items: ([]*core.MappingNode) <nil>,
            StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
            SourceMeta: (*source.Meta)(<nil>),
            FieldsSourceMeta: (map[string]*source.Meta) <nil>
          }),
          Metadata: (*provider.ResolvedResourceMetadata)({
            DisplayName: (*core.MappingNode)({
              Scalar: (*core.ScalarValue)({
                IntValue: (*int)(<nil>),
                BoolValue: (*bool)(<nil>),
                FloatValue: (*float64)(<nil>),
                StringValue: (*string)((len=30) "production-env Invoices Stream"),
                SourceMeta: (*source.Meta)(<nil>)
              }),
              Fields: (map[string]*core.MappingNode) <nil>,
              Items: ([]*core.MappingNode) <nil>,
              StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
              SourceMeta: (*source.Meta)(<nil>),
              FieldsSourceMeta: (map[string]*source.Meta) <nil>
            }),
            Annotations: (*core.MappingNode)(<nil>),
            Labels: (*schema.StringMap)({
              Values: (map[string]string) (len=1) {
                (string) (len=3) "app": (string) (len=8) "invoices"
              },
              SourceMeta: (map[string]*source.Meta) (len=1) {
                (string) (len=3) "app": (*source.Meta)({
                  Position: (source.Position) {
                    Line: (int) 104,
                    Column: (int) 9
                  },
                  EndPosition: (*source.Position)(<nil>)
                })
              }
            }),
            Custom: (*core.MappingNode)(<nil>)
          }),
          Condition: (*provider.ResolvedResourceCondition)(<nil>),
          LinkSelector: (*schema.LinkSelector)({
            ByLabel: (*schema.StringMap)({
              Values: (map[string]string) (len=1) {
                (string) (len=3) "app": (string) (len=8) "invoices"
              },
              SourceMeta: (map[string]*source.Meta) (len=1) {
                (string) (len=3) "app": (*source.Meta)({
                  Position: (source.Position) {
                    Line: (int) 107,
                    Column: (int) 9
                  },
                  EndPosition: (*source.Position)(<nil>)
                })
              }
            }),
            SourceMeta: (*source.Meta)({
              Position: (source.Position) {
                Line: (int) 106,
                Column: (int) 7
              },
              EndPosition: (*source.Position)(<nil>)
            })
          }),
          Spec: (*core.MappingNode)({
            Scalar: (*core.ScalarValue)(<nil>),
            Fields: (map[string]*core.MappingNode) (len=2) {
              (string) (len=5) "label": (*core.MappingNode)({
                Scalar: (*core.ScalarValue)({
                  IntValue: (*int)(<nil>),
                  BoolValue: (*bool)(<nil>),
                  FloatValue: (*float64)(<nil>),
                  StringValue: (*string)((len=30) "production-env Invoices Stream"),
                  SourceMeta: (*source.Meta)(<nil>)
                }),
                Fields: (map[string]*core.MappingNode) <nil>,
                Items: ([]*core.MappingNode) <nil>,
                StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                SourceMeta: (*source.Meta)(<nil>),
                FieldsSourceMeta: (map[string]*source.Meta) <nil>
              }),
              (string) (len=6) "region": (*core.MappingNode)({
                Scalar: (*core.ScalarValue)({
                  IntValue: (*int)(<nil>),
                  BoolValue: (*bool)(<nil>),
                  FloatValue: (*float64)(<nil>),
                  StringValue: (*string)((len=9) "US-WEST-2"),
                  SourceMeta: (*source.Meta)(<nil>)
                }),
                Fields: (map[string]*core.MappingNode) <nil>,
                Items: ([]*core.MappingNode) <nil>,
                StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                SourceMeta: (*source.Meta)(<nil>),
                FieldsSourceMeta: (map[string]*source.Meta) <nil>
              })
            },
            Items: ([]*core.MappingNode) <nil>,
            StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
            SourceMeta: (*source.Meta)(<nil>),
            FieldsSourceMeta: (map[string]*source.Meta) <nil>
          })
        })
      },
      MustRecreate: (bool) false,
      ModifiedFields: ([]provider.FieldChange) {
      },
      NewFields: ([]provider.FieldChange) (len=4) {
        (provider.FieldChange) {
          FieldPath: (string) (len=20) "metadata.displayName",
          PrevValue: (*core.MappingNode)(<nil>),
          NewValue: (*core.MappingNode)({
            Scalar: (*core.ScalarValue)({
              IntValue: (*int)(<nil>),
              BoolValue: (*bool)(<nil>),
              FloatValue: (*float64)(<nil>),
              StringValue: (*string)((len=30) "production-env Invoices Stream"),
              SourceMeta: (*source.Meta)(<nil>)
            }),
            Fields: (map[string]*core.MappingNode) <nil>,
            Items: ([]*core.MappingNode) <nil>,
            StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
            SourceMeta: (*source.Meta)(<nil>),
            FieldsSourceMeta: (map[string]*source.Meta) <nil>
          }),
          MustRecreate: (bool) false
        },
        (provider.FieldChange) {
          FieldPath: (string) (len=22) "metadata.labels[\"app\"]",
          PrevValue: (*core.MappingNode)(<nil>),
          NewValue: (*core.MappingNode)({
            Scalar: (*core.ScalarValue)({
              IntValue: (*int)(<nil>),
              BoolValue: (*bool)(<nil>),
              FloatValue: (*float64)(<nil>),
              StringValue: (*string)((len=8) "invoices"),
              SourceMeta: (*source.Meta)(<nil>)
            }),
            Fields: (map[string]*core.MappingNode) <nil>,
            Items: ([]*core.MappingNode) <nil>,
            StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
            SourceMeta: (*source.Meta)(<nil>),
            FieldsSourceMeta: (map[string]*source.Meta) <nil>
          }),
          MustRecreate: (bool) false
        },
        (provider.FieldChange) {
          FieldPath: (string) (len=10) "spec.label",
          PrevValue: (*core.MappingNode)(<nil>),
          NewValue: (*core.MappingNode)({
            Scalar: (*core.ScalarValue)({
              IntValue: (*int)(<nil>),
              BoolValue: (*bool)(<nil>),
              FloatValue: (*float64)(<nil>),
              StringValue: (*string)((len=30) "production-env Invoices Stream"),
              SourceMeta: (*source.Meta)(<nil>)
            }),
            Fields: (map[string]*core.MappingNode) <nil>,
            Items: ([]*core.MappingNode) <nil>,
            StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
            SourceMeta: (*source.Meta)(<nil>),
            FieldsSourceMeta: (map[string]*source.Meta) <nil>
          }),
          MustRecreate: (bool) false
        },
        (provider.FieldChange) {
          FieldPath: (string) (len=11) "spec.region",
          PrevValue: (*core.MappingNode)(<nil>),
          NewValue: (*core.MappingNode)({
            Scalar: (*core.ScalarValue)({
              IntValue: (*int)(<nil>),
              BoolValue: (*bool)(<nil>),
              FloatValue: (*float64)(<nil>),
              StringValue: (*string)((len=9) "US-WEST-2"),
              SourceMeta: (*source.Meta)(<nil>)
            }),
            Fields: (map[string]*core.MappingNode) <nil>,
            Items: ([]*core.MappingNode) <nil>,
            StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
            SourceMeta: (*source.Meta)(<nil>),
            FieldsSourceMeta: (map[string]*source.Meta) <nil>
          }),
          MustRecreate: (bool) false
        }
      },
      RemovedFields: ([]string) {
      },
      UnchangedFields: ([]string) {
      },
      ComputedFields: ([]string) (len=1) {
        (string) (len=7) "spec.id"
      },
      FieldChangesKnownOnDeploy: ([]string) {
      },
      ConditionKnownOnDeploy: (bool) false,
      NewOutboundLinks: (map[string]provider.LinkChanges) (len=1) {
        (string) (len=22) "processInvoiceFunction": (provider.LinkChanges) {
          ModifiedFields: ([]*provider.FieldChange) <nil>,
          NewFields: ([]*provider.FieldChange) <nil>,
          RemovedFields: ([]string) <nil>,
          UnchangedFields: ([]string) <nil>,
          FieldChangesKnownOnDeploy: ([]string) <nil>
        }
      },
      OutboundLinkChanges: (map[string]provider.LinkChanges) <nil>,
      RemovedOutboundLinks: ([]string) <nil>
    },
    (string) (len=13) "invoicesTable": (provider.Changes) {
      AppliedResourceInfo: (provider.ResourceInfo) {
        ResourceID: (string) "",
        ResourceName: (string) (len=13) "invoicesTable",
        InstanceID: (string) (len=20) "blueprint-instance-2",
        CurrentResourceState: (*state.ResourceState)(<nil>),
        ResourceWithResolvedSubs: (*provider.ResolvedResource)({
          Type: (*schema.ResourceTypeWrapper)({
            Value: (string) (len=18) "aws/dynamodb/table",
            SourceMeta: (*source.Meta)({
              Position: (source.Position) {
                Line: (int) 84,
                Column: (int) 11
              },
              EndPosition: (*source.Position)({
                Line: (int) 84,
                Column: (int) 29
              })
            })
          }),
          Description: (*core.MappingNode)({
            Scalar: (*core.ScalarValue)({
              IntValue: (*int)(<nil>),
              BoolValue: (*bool)(<nil>),
              FloatValue: (*float64)(<nil>),
              StringValue: (*string)((len=46) "Table that stores invoices for an application."),
              SourceMeta: (*source.Meta)(<nil>)
            }),
            Fields: (map[string]*core.MappingNode) <nil>,
            Items: ([]*core.MappingNode) <nil>,
            StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
            SourceMeta: (*source.Meta)(<nil>),
            FieldsSourceMeta: (map[string]*source.Meta) <nil>
          }),
          Metadata: (*provider.ResolvedResourceMetadata)({
            DisplayName: (*core.MappingNode)({
              Scalar: (*core.ScalarValue)({
                IntValue: (*int)(<nil>),
                BoolValue: (*bool)(<nil>),
                FloatValue: (*float64)(<nil>),
                StringValue: (*string)((len=29) "production-env Invoices Table"),
                SourceMeta: (*source.Meta)(<nil>)
              }),
              Fields: (map[string]*core.MappingNode) <nil>,
              Items: ([]*core.MappingNode) <nil>,
              StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
              SourceMeta: (*source.Meta)(<nil>),
              FieldsSourceMeta: (map[string]*source.Meta) <nil>
            }),
            Annotations: (*core.MappingNode)(<nil>),
            Labels: (*schema.StringMap)({
              Values: (map[string]string) (len=1) {
                (string) (len=3) "app": (string) (len=8) "invoices"
              },
              SourceMeta: (map[string]*source.Meta) (len=1) {
                (string) (len=3) "app": (*source.Meta)({
                  Position: (source.Position) {
                    Line: (int) 90,
                    Column: (int) 9
                  },
                  EndPosition: (*source.Position)(<nil>)
                })
              }
            }),
            Custom: (*core.MappingNode)(<nil>)
          }),
          Condition: (*provider.ResolvedResourceCondition)({
            And: ([]*provider.ResolvedResourceCondition) <nil>,
            Or: ([]*provider.ResolvedResourceCondition) <nil>,
            Not: (*provider.ResolvedResourceCondition)(<nil>),
            StringValue: (*core.MappingNode)({
              Scalar: (*core.ScalarValue)({
                IntValue: (*int)(<nil>),
                BoolValue: (*bool)(true),
                FloatValue: (*float64)(<nil>),
                StringValue: (*string)(<nil>),
                SourceMeta: (*source.Meta)(<nil>)
              }),
              Fields: (map[string]*core.MappingNode) <nil>,
              Items: ([]*core.MappingNode) <nil>,
              StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
              SourceMeta: (*source.Meta)(<nil>),
              FieldsSourceMeta: (map[string]*source.Meta) <nil>
            })
          }),
          LinkSelector: (*schema.LinkSelector)({
            ByLabel: (*schema.StringMap)({
              Values: (map[string]string) (len=1) {
                (string) (len=3) "app": (string) (len=8) "invoices"
              },
              SourceMeta: (map[string]*source.Meta) (len=1) {
                (string) (len=3) "app": (*source.Meta)({
                  Position: (source.Position) {
                    Line: (int) 93,
                    Column: (int) 9
                  },
                  EndPosition: (*source.Position)(<nil>)
                })
              }
            }),
            SourceMeta: (*source.Meta)({
              Position: (source.Position) {
                Line: (int) 92,
                Column: (int) 7
              },
              EndPosition: (*source.Position)(<nil>)
            })
          }),
          Spec: (*core.MappingNode)({
            Scalar: (*core.ScalarValue)(<nil>),
            Fields: (map[string]*core.MappingNode) (len=3) {
              (string) (len=6) "global": (*core.MappingNode)({
                Scalar: (*core.ScalarValue)({
                  IntValue: (*int)(<nil>),
                  BoolValue: (*bool)(false),
                  FloatValue: (*float64)(<nil>),
                  StringValue: (*string)(<nil>),
                  SourceMeta: (*source.Meta)(<nil>)
                }),
                Fields: (map[string]*core.MappingNode) <nil>,
                Items: ([]*core.MappingNode) <nil>,
                StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                SourceMeta: (*source.Meta)(<nil>),
                FieldsSourceMeta: (map[string]*source.Meta) <nil>
              }),
              (string) (len=6) "region": (*core.MappingNode)({
                Scalar: (*core.ScalarValue)({
                  IntValue: (*int)(<nil>),
                  BoolValue: (*bool)(<nil>),
                  FloatValue: (*float64)(<nil>),
                  StringValue: (*string)((len=9) "US-WEST-2"),
                  SourceMeta: (*source.Meta)(<nil>)
                }),
                Fields: (map[string]*core.MappingNode) <nil>,
                Items: ([]*core.MappingNode) <nil>,
                StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                SourceMeta: (*source.Meta)(<nil>),
                FieldsSourceMeta: (map[string]*source.Meta) <nil>
              }),
              (string) (len=9) "tableName": (*core.MappingNode)({
                Scalar: (*core.ScalarValue)({
                  IntValue: (*int)(<nil>),
                  BoolValue: (*bool)(<nil>),
                  FloatValue: (*float64)(<nil>),
                  StringValue: (*string)((len=19) "production-invoices"),
                  SourceMeta: (*source.Meta)(<nil>)
                }),
                Fields: (map[string]*core.MappingNode) <nil>,
                Items: ([]*core.MappingNode) <nil>,
                StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                SourceMeta: (*source.Meta)(<nil>),
                FieldsSourceMeta: (map[string]*source.Meta) <nil>
              })
            },
            Items: ([]*core.MappingNode) <nil>,
            StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
            SourceMeta: (*source.Meta)(<nil>),
            FieldsSourceMeta: (map[string]*source.Meta) <nil>
          })
        })
      },
      MustRecreate: (bool) false,
      ModifiedFields: ([]provider.FieldChange) {
      },
      NewFields: ([]provider.FieldChange) (len=5) {
        (provider.FieldChange) {
          FieldPath: (string) (len=20) "metadata.displayName",
          PrevValue: (*core.MappingNode)(<nil>),
          NewValue: (*core.MappingNode)({
            Scalar: (*core.ScalarValue)({
              IntValue: (*int)(<nil>),
              BoolValue: (*bool)(<nil>),
              FloatValue: (*float64)(<nil>),
              StringValue: (*string)((len=29) "production-env Invoices Table"),
              SourceMeta: (*source.Meta)(<nil>)
            }),
            Fields: (map[string]*core.MappingNode) <nil>,
            Items: ([]*core.MappingNode) <nil>,
            StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
            SourceMeta: (*source.Meta)(<nil>),
            FieldsSourceMeta: (map[string]*source.Meta) <nil>
          }),
          MustRecreate: (bool) false
        },
        (provider.FieldChange) {
          FieldPath: (string) (len=22) "metadata.labels[\"app\"]",
          PrevValue: (*core.MappingNode)(<nil>),
          NewValue: (*core.MappingNode)({
            Scalar: (*core.ScalarValue)({
              IntValue: (*int)(<nil>),
              BoolValue: (*bool)(<nil>),
              FloatValue: (*float64)(<nil>),
              StringValue: (*string)((len=8) "invoices"),
              SourceMeta: (*source.Meta)(<nil>)
            }),
            Fields: (map[string]*core.MappingNode) <nil>,
            Items: ([]*core.MappingNode) <nil>,
            StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
            SourceMeta: (*source.Meta)(<nil>),
            FieldsSourceMeta: (map[string]*source.Meta) <nil>
          }),
          MustRecreate: (bool) false
        },
        (provider.FieldChange) {
          FieldPath: (string) (len=11) "spec.global",
          PrevValue: (*core.MappingNode)(<nil>),
          NewValue: (*core.MappingNode)({
            Scalar: (*core.ScalarValue)({
              IntValue: (*int)(<nil>),
              BoolValue: (*bool)(false),
              FloatValue: (*float64)(<nil>),
              StringValue: (*string)(<nil>),
              SourceMeta: (*source.Meta)(<nil>)
            }),
            Fields: (map[string]*core.MappingNode) <nil>,
            Items: ([]*core.MappingNode) <nil>,
            StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
            SourceMeta: (*source.Meta)(<nil>),
            FieldsSourceMeta: (map[string]*source.Meta) <nil>
          }),
          MustRecreate: (bool) false
        },
        (provider.FieldChange) {
          FieldPath: (string) (len=11) "spec.region",
          PrevValue: (*core.MappingNode)(<nil>),
          NewValue: (*core.MappingNode)({
            Scalar: (*core.ScalarValue)({
              IntValue: (*int)(<nil>),
              BoolValue: (*bool)(<nil>),
              FloatValue: (*float64)(<nil>),
              StringValue: (*string)((len=9) "US-WEST-2"),
              SourceMeta: (*source.Meta)(<nil>)
            }),
            Fields: (map[string]*core.MappingNode) <nil>,
            Items: ([]*core.MappingNode) <nil>,
            StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
            SourceMeta: (*source.Meta)(<nil>),
            FieldsSourceMeta: (map[string]*source.Meta) <nil>
          }),
          MustRecreate: (bool) false
        },
        (provider.FieldChange) {
          FieldPath: (string) (len=14) "spec.tableName",
          PrevValue: (*core.MappingNode)(<nil>),
          NewValue: (*core.MappingNode)({
            Scalar: (*core.ScalarValue)({
              IntValue: (*int)(<nil>),
              BoolValue: (*bool)(<nil>),
              FloatValue: (*float64)(<nil>),
              StringValue: (*string)((len=19) "production-invoices"),
              SourceMeta: (*source.Meta)(<nil>)
            }),
            Fields: (map[string]*core.MappingNode) <nil>,
            Items: ([]*core.MappingNode) <nil>,
            StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
            SourceMeta: (*source.Meta)(<nil>),
            FieldsSourceMeta: (map[string]*source.Meta) <nil>
          }),
          MustRecreate: (bool) false
        }
      },
      RemovedFields: ([]string) {
      },
      UnchangedFields: ([]string) {
      },
      ComputedFields: ([]string) (len=1) {
        (string) (len=7) "spec.id"
      },
      FieldChangesKnownOnDeploy: ([]string) {
      },
      ConditionKnownOnDeploy: (bool) false,
      NewOutboundLinks: (map[string]provider.LinkChanges) (len=2) {
        (string) (len=13) "invoiceStream": (provider.LinkChanges) {
          ModifiedFields: ([]*provider.FieldChange) <nil>,
          NewFields: ([]*provider.FieldChange) <nil>,
          RemovedFields: ([]string) <nil>,
          UnchangedFields: ([]string) <nil>,
          FieldChangesKnownOnDeploy: ([]string) <nil>
        },
        (string) (len=22) "processInvoiceFunction": (provider.LinkChanges) {
          ModifiedFields: ([]*provider.FieldChange) <nil>,
          NewFields: ([]*provider.FieldChange) <nil>,
          RemovedFields: ([]string) <nil>,
          UnchangedFields: ([]string) <nil>,
          FieldChangesKnownOnDeploy: ([]string) <nil>
        }
      },
      OutboundLinkChanges: (map[string]provider.LinkChanges) <nil>,
      RemovedOutboundLinks: ([]string) <nil>
    },
    (string) (len=13) "ordersTable_0": (provider.Changes) {
      AppliedResourceInfo: (provider.ResourceInfo) {
        ResourceID: (string) "",
        ResourceName: (string) (len=13) "ordersTable_0",
        InstanceID: (string) (len=20) "blueprint-instance-2",
        CurrentResourceState: (*state.ResourceState)(<nil>),
        ResourceWithResolvedSubs: (*provider.ResolvedResource)({
          Type: (*schema.ResourceTypeWrapper)({
            Value: (string) (len=18) "aws/dynamodb/table",
            SourceMeta: (*source.Meta)({
              Position: (source.Position) {
                Line: (int) 57,
                Column: (int) 11
              },
              EndPosition: (*source.Position)({
                Line: (int) 57,
                Column: (int) 29
              })
            })
          }),
          Description: (*core.MappingNode)({
            Scalar: (*core.ScalarValue)({
              IntValue: (*int)(<nil>),
              BoolValue: (*bool)(<nil>),
              FloatValue: (*float64)(<nil>),
              StringValue: (*string)((len=44) "Table that stores orders for an application."),
              SourceMeta: (*source.Meta)(<nil>)
            }),
            Fields: (map[string]*core.MappingNode) <nil>,
            Items: ([]*core.MappingNode) <nil>,
            StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
            SourceMeta: (*source.Meta)(<nil>),
            FieldsSourceMeta: (map[string]*source.Meta) <nil>
          }),
          Metadata: (*provider.ResolvedResourceMetadata)({
            DisplayName: (*core.MappingNode)({
              Scalar: (*core.ScalarValue)({
                IntValue: (*int)(<nil>),
                BoolValue: (*bool)(<nil>),
                FloatValue: (*float64)(<nil>),
                StringValue: (*string)((len=27) "production-env Orders Table"),
                SourceMeta: (*source.Meta)(<nil>)
              }),
              Fields: (map[string]*core.MappingNode) <nil>,
              Items: ([]*core.MappingNode) <nil>,
              StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
              SourceMeta: (*source.Meta)(<nil>),
              FieldsSourceMeta: (map[string]*source.Meta) <nil>
            }),
            Annotations: (*core.MappingNode)({
              Scalar: (*core.ScalarValue)(<nil>),
              Fields: (map[string]*core.MappingNode) (len=3) {
                (string) (len=20) "aws.dynamodb.trigger": (*core.MappingNode)({
                  Scalar: (*core.ScalarValue)({
                    IntValue: (*int)(<nil>),
                    BoolValue: (*bool)(true),
                    FloatValue: (*float64)(<nil>),
                    StringValue: (*string)(<nil>),
                    SourceMeta: (*source.Meta)(<nil>)
                  }),
                  Fields: (map[string]*core.MappingNode) <nil>,
                  Items: ([]*core.MappingNode) <nil>,
                  StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                  SourceMeta: (*source.Meta)(<nil>),
                  FieldsSourceMeta: (map[string]*source.Meta) <nil>
                }),
                (string) (len=16) "aws.dynamodb.vpc": (*core.MappingNode)(<nil>),
                (string) (len=22) "custom.coreInfraRegion": (*core.MappingNode)(<nil>)
              },
              Items: ([]*core.MappingNode) <nil>,
              StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
              SourceMeta: (*source.Meta)(<nil>),
              FieldsSourceMeta: (map[string]*source.Meta) <nil>
            }),
            Labels: (*schema.StringMap)({
              Values: (map[string]string) (len=1) {
                (string) (len=3) "app": (string) (len=6) "orders"
              },
              SourceMeta: (map[string]*source.Meta) <nil>
            }),
            Custom: (*core.MappingNode)({
              Scalar: (*core.ScalarValue)(<nil>),
              Fields: (map[string]*core.MappingNode) (len=1) {
                (string) (len=6) "visual": (*core.MappingNode)({
                  Scalar: (*core.ScalarValue)(<nil>),
                  Fields: (map[string]*core.MappingNode) (len=3) {
                    (string) (len=5) "label": (*core.MappingNode)({
                      Scalar: (*core.ScalarValue)({
                        IntValue: (*int)(<nil>),
                        BoolValue: (*bool)(<nil>),
                        FloatValue: (*float64)(<nil>),
                        StringValue: (*string)((len=27) "production-env Orders Table"),
                        SourceMeta: (*source.Meta)(<nil>)
                      }),
                      Fields: (map[string]*core.MappingNode) <nil>,
                      Items: ([]*core.MappingNode) <nil>,
                      StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                      SourceMeta: (*source.Meta)(<nil>),
                      FieldsSourceMeta: (map[string]*source.Meta) <nil>
                    }),
                    (string) (len=1) "x": (*core.MappingNode)({
                      Scalar: (*core.ScalarValue)({
                        IntValue: (*int)(100),
                        BoolValue: (*bool)(<nil>),
                        FloatValue: (*float64)(<nil>),
                        StringValue: (*string)(<nil>),
                        SourceMeta: (*source.Meta)({
                          Position: (source.Position) {
                            Line: (int) 75,
                            Column: (int) 14
                          },
                          EndPosition: (*source.Position)({
                            Line: (int) 75,
                            Column: (int) 17
                          })
                        })
                      }),
                      Fields: (map[string]*core.MappingNode) <nil>,
                      Items: ([]*core.MappingNode) <nil>,
                      StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                      SourceMeta: (*source.Meta)({
                        Position: (source.Position) {
                          Line: (int) 75,
                          Column: (int) 14
                        },
                        EndPosition: (*source.Position)(<nil>)
                      }),
                      FieldsSourceMeta: (map[string]*source.Meta) <nil>
                    }),
                    (string) (len=1) "y": (*core.MappingNode)({
                      Scalar: (*core.ScalarValue)({
                        IntValue: (*int)(200),
                        BoolValue: (*bool)(<nil>),
                        FloatValue: (*float64)(<nil>),
                        StringValue: (*string)(<nil>),
                        SourceMeta: (*source.Meta)({
                          Position: (source.Position) {
                            Line: (int) 76,
                            Column: (int) 14
                          },
                          EndPosition: (*source.Position)({
                            Line: (int) 76,
                            Column: (int) 17
                          })
                        })
                      }),
                      Fields: (map[string]*core.MappingNode) <nil>,
                      Items: ([]*core.MappingNode) <nil>,
                      StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                      SourceMeta: (*source.Meta)({
                        Position: (source.Position) {
                          Line: (int) 76,
                          Column: (int) 14
                        },
                        EndPosition: (*source.Position)(<nil>)
                      }),
                      FieldsSourceMeta: (map[string]*source.Meta) <nil>
                    })
                  },
                  Items: ([]*core.MappingNode) <nil>,
                  StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                  SourceMeta: (*source.Meta)(<nil>),
                  FieldsSourceMeta: (map[string]*source.Meta) <nil>
                })
              },
              Items: ([]*core.MappingNode) <nil>,
              StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
              SourceMeta: (*source.Meta)(<nil>),
              FieldsSourceMeta: (map[string]*source.Meta) <nil>
            })
          }),
          Condition: (*provider.ResolvedResourceCondition)({
            And: ([]*provider.ResolvedResourceCondition) (len=2) {
              (*provider.ResolvedResourceCondition)({
                And: ([]*provider.ResolvedResourceCondition) <nil>,
                Or: ([]*provider.ResolvedResourceCondition) <nil>,
                Not: (*provider.ResolvedResourceCondition)(<nil>),
                StringValue: (*core.MappingNode)({
                  Scalar: (*core.ScalarValue)({
                    IntValue: (*int)(<nil>),
                    BoolValue: (*bool)(true),
                    FloatValue: (*float64)(<nil>),
                    StringValue: (*string)(<nil>),
                    SourceMeta: (*source.Meta)(<nil>)
                  }),
                  Fields: (map[string]*core.MappingNode) <nil>,
                  Items: ([]*core.MappingNode) <nil>,
                  StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                  SourceMeta: (*source.Meta)(<nil>),
                  FieldsSourceMeta: (map[string]*source.Meta) <nil>
                })
              }),
              (*provider.ResolvedResourceCondition)({
                And: ([]*provider.ResolvedResourceCondition) <nil>,
                Or: ([]*provider.ResolvedResourceCondition) (len=2) {
                  (*provider.ResolvedResourceCondition)({
                    And: ([]*provider.ResolvedResourceCondition) <nil>,
                    Or: ([]*provider.ResolvedResourceCondition) <nil>,
                    Not: (*provider.ResolvedResourceCondition)(<nil>),
                    StringValue: (*core.MappingNode)({
                      Scalar: (*core.ScalarValue)({
                        IntValue: (*int)(<nil>),
                        BoolValue: (*bool)(true),
                        FloatValue: (*float64)(<nil>),
                        StringValue: (*string)(<nil>),
                        SourceMeta: (*source.Meta)(<nil>)
                      }),
                      Fields: (map[string]*core.MappingNode) <nil>,
                      Items: ([]*core.MappingNode) <nil>,
                      StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                      SourceMeta: (*source.Meta)(<nil>),
                      FieldsSourceMeta: (map[string]*source.Meta) <nil>
                    })
                  }),
                  (*provider.ResolvedResourceCondition)({
                    And: ([]*provider.ResolvedResourceCondition) <nil>,
                    Or: ([]*provider.ResolvedResourceCondition) <nil>,
                    Not: (*provider.ResolvedResourceCondition)(<nil>),
                    StringValue: (*core.MappingNode)({
                      Scalar: (*core.ScalarValue)({
                        IntValue: (*int)(<nil>),
                        BoolValue: (*bool)(false),
                        FloatValue: (*float64)(<nil>),
                        StringValue: (*string)(<nil>),
                        SourceMeta: (*source.Meta)(<nil>)
                      }),
                      Fields: (map[string]*core.MappingNode) <nil>,
                      Items: ([]*core.MappingNode) <nil>,
                      StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                      SourceMeta: (*source.Meta)(<nil>),
                      FieldsSourceMeta: (map[string]*source.Meta) <nil>
                    })
                  })
                },
                Not: (*provider.ResolvedResourceCondition)(<nil>),
                StringValue: (*core.MappingNode)(<nil>)
              })
            },
            Or: ([]*provider.ResolvedResourceCondition) <nil>,
            Not: (*provider.ResolvedResourceCondition)(<nil>),
            StringValue: (*core.MappingNode)(<nil>)
          }),
          LinkSelector: (*schema.LinkSelector)(<nil>),
          Spec: (*core.MappingNode)({
            Scalar: (*core.ScalarValue)(<nil>),
            Fields: (map[string]*core.MappingNode) (len=3) {
              (string) (len=6) "global": (*core.MappingNode)({
                Scalar: (*core.ScalarValue)({
                  IntValue: (*int)(<nil>),
                  BoolValue: (*bool)(false),
                  FloatValue: (*float64)(<nil>),
                  StringValue: (*string)(<nil>),
                  SourceMeta: (*source.Meta)(<nil>)
                }),
                Fields: (map[string]*core.MappingNode) <nil>,
                Items: ([]*core.MappingNode) <nil>,
                StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                SourceMeta: (*source.Meta)(<nil>),
                FieldsSourceMeta: (map[string]*source.Meta) <nil>
              }),
              (string) (len=6) "region": (*core.MappingNode)({
                Scalar: (*core.ScalarValue)({
                  IntValue: (*int)(<nil>),
                  BoolValue: (*bool)(<nil>),
                  FloatValue: (*float64)(<nil>),
                  StringValue: (*string)((len=9) "US-WEST-2"),
                  SourceMeta: (*source.Meta)(<nil>)
                }),
                Fields: (map[string]*core.MappingNode) <nil>,
                Items: ([]*core.MappingNode) <nil>,
                StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                SourceMeta: (*source.Meta)(<nil>),
                FieldsSourceMeta: (map[string]*source.Meta) <nil>
              }),
              (string) (len=9) "tableName": (*core.MappingNode)({
                Scalar: (*core.ScalarValue)({
                  IntValue: (*int)(<nil>),
                  BoolValue: (*bool)(<nil>),
                  FloatValue: (*float64)(<nil>),
                  StringValue: (*string)((len=19) "production-orders-1"),
                  SourceMeta: (*source.Meta)(<nil>)
                }),
                Fields: (map[string]*core.MappingNode) <nil>,
                Items: ([]*core.MappingNode) <nil>,
                StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                SourceMeta: (*source.Meta)(<nil>),
                FieldsSourceMeta: (map[string]*source.Meta) <nil>
              })
            },
            Items: ([]*core.MappingNode) <nil>,
            StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
            SourceMeta: (*source.Meta)(<nil>),
            FieldsSourceMeta: (map[string]*source.Meta) <nil>
          })
        })
      },
      MustRecreate: (bool) false,
      ModifiedFields: ([]provider.FieldChange) {
      },
      NewFields: ([]provider.FieldChange) (len=11) {
        (provider.FieldChange) {
          FieldPath: (string) (len=44) "metadata.annotations[\"aws.dynamodb.trigger\"]",
          PrevValue: (*core.MappingNode)(<nil>),
          NewValue: (*core.MappingNode)({
            Scalar: (*core.ScalarValue)({
              IntValue: (*int)(<nil>),
              BoolValue: (*bool)(true),
              FloatValue: (*float64)(<nil>),
              StringValue: (*string)(<nil>),
              SourceMeta: (*source.Meta)(<nil>)
            }),
            Fields: (map[string]*core.MappingNode) <nil>,
            Items: ([]*core.MappingNode) <nil>,
            StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
            SourceMeta: (*source.Meta)(<nil>),
            FieldsSourceMeta: (map[string]*source.Meta) <nil>
          }),
          MustRecreate: (bool) false
        },
        (provider.FieldChange) {
          FieldPath: (string) (len=40) "metadata.annotations[\"aws.dynamodb.vpc\"]",
          PrevValue: (*core.MappingNode)(<nil>),
          NewValue: (*core.MappingNode)(<nil>),
          MustRecreate: (bool) false
        },
        (provider.FieldChange) {
          FieldPath: (string) (len=46) "metadata.annotations[\"custom.coreInfraRegion\"]",
          PrevValue: (*core.MappingNode)(<nil>),
          NewValue: (*core.MappingNode)(<nil>),
          MustRecreate: (bool) false
        },
        (provider.FieldChange) {
          FieldPath: (string) (len=28) "metadata.custom.visual.label",
          PrevValue: (*core.MappingNode)(<nil>),
          NewValue: (*core.MappingNode)({
            Scalar: (*core.ScalarValue)({
              IntValue: (*int)(<nil>),
              BoolValue: (*bool)(<nil>),
              FloatValue: (*float64)(<nil>),
              StringValue: (*string)((len=27) "production-env Orders Table"),
              SourceMeta: (*source.Meta)(<nil>)
            }),
            Fields: (map[string]*core.MappingNode) <nil>,
            Items: ([]*core.MappingNode) <nil>,
            StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
            SourceMeta: (*source.Meta)(<nil>),
            FieldsSourceMeta: (map[string]*source.Meta) <nil>
          }),
          MustRecreate: (bool) false
        },
        (provider.FieldChange) {
          FieldPath: (string) (len=27) "metadata.custom.visual[\"x\"]",
          PrevValue: (*core.MappingNode)(<nil>),
          NewValue: (*core.MappingNode)({
            Scalar: (*core.ScalarValue)({
              IntValue: (*int)(100),
              BoolValue: (*bool)(<nil>),
              FloatValue: (*float64)(<nil>),
              StringValue: (*string)(<nil>),
              SourceMeta: (*source.Meta)({
                Position: (source.Position) {
                  Line: (int) 75,
                  Column: (int) 14
                },
                EndPosition: (*source.Position)({
                  Line: (int) 75,
                  Column: (int) 17
                })
              })
            }),
            Fields: (map[string]*core.MappingNode) <nil>,
            Items: ([]*core.MappingNode) <nil>,
            StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
            SourceMeta: (*source.Meta)({
              Position: (source.Position) {
                Line: (int) 75,
                Column: (int) 14
              },
              EndPosition: (*source.Position)(<nil>)
            }),
            FieldsSourceMeta: (map[string]*source.Meta) <nil>
          }),
          MustRecreate: (bool) false
        },
        (provider.FieldChange) {
          FieldPath: (string) (len=27) "metadata.custom.visual[\"y\"]",
          PrevValue: (*core.MappingNode)(<nil>),
          NewValue: (*core.MappingNode)({
            Scalar: (*core.ScalarValue)({
              IntValue: (*int)(200),
              BoolValue: (*bool)(<nil>),
              FloatValue: (*float64)(<nil>),
              StringValue: (*string)(<nil>),
              SourceMeta: (*source.Meta)({
                Position: (source.Position) {
                  Line: (int) 76,
                  Column: (int) 14
                },
                EndPosition: (*source.Position)({
                  Line: (int) 76,
                  Column: (int) 17
                })
              })
            }),
            Fields: (map[string]*core.MappingNode) <nil>,
            Items: ([]*core.MappingNode) <nil>,
            StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
            SourceMeta: (*source.Meta)({
              Position: (source.Position) {
                Line: (int) 76,
                Column: (int) 14
              },
              EndPosition: (*source.Position)(<nil>)
            }),
            FieldsSourceMeta: (map[string]*source.Meta) <nil>
          }),
          MustRecreate: (bool) false
        },
        (provider.FieldChange) {
          FieldPath: (string) (len=20) "metadata.displayName",
          PrevValue: (*core.MappingNode)(<nil>),
          NewValue: (*core.MappingNode)({
            Scalar: (*core.ScalarValue)({
              IntValue: (*int)(<nil>),
              BoolValue: (*bool)(<nil>),
              FloatValue: (*float64)(<nil>),
              StringValue: (*string)((len=27) "production-env Orders Table"),
              SourceMeta: (*source.Meta)(<nil>)
            }),
            Fields: (map[string]*core.MappingNode) <nil>,
            Items: ([]*core.MappingNode) <nil>,
            StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
            SourceMeta: (*source.Meta)(<nil>),
            FieldsSourceMeta: (map[string]*source.Meta) <nil>
          }),
          MustRecreate: (bool) false
        },
        (provider.FieldChange) {
          FieldPath: (string) (len=22) "metadata.labels[\"app\"]",
          PrevValue: (*core.MappingNode)(<nil>),
          NewValue: (*core.MappingNode)({
            Scalar: (*core.ScalarValue)({
              IntValue: (*int)(<nil>),
              BoolValue: (*bool)(<nil>),
              FloatValue: (*float64)(<nil>),
              StringValue: (*string)((len=6) "orders"),
              SourceMeta: (*source.Meta)(<nil>)
            }),
            Fields: (map[string]*core.MappingNode) <nil>,
            Items: ([]*core.MappingNode) <nil>,
            StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
            SourceMeta: (*source.Meta)(<nil>),
            FieldsSourceMeta: (map[string]*source.Meta) <nil>
          }),
          MustRecreate: (bool) false
        },
        (provider.FieldChange) {
          FieldPath: (string) (len=11) "spec.global",
          PrevValue: (*core.MappingNode)(<nil>),
          NewValue: (*core.MappingNode)({
            Scalar: (*core.ScalarValue)({
              IntValue: (*int)(<nil>),
              BoolValue: (*bool)(false),
              FloatValue: (*float64)(<nil>),
              StringValue: (*string)(<nil>),
              SourceMeta: (*source.Meta)(<nil>)
            }),
            Fields: (map[string]*core.MappingNode) <nil>,
            Items: ([]*core.MappingNode) <nil>,
            StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
            SourceMeta: (*source.Meta)(<nil>),
            FieldsSourceMeta: (map[string]*source.Meta) <nil>
          }),
          MustRecreate: (bool) false
        },
        (provider.FieldChange) {
          FieldPath: (string) (len=11) "spec.region",
          PrevValue: (*core.MappingNode)(<nil>),
          NewValue: (*core.MappingNode)({
            Scalar: (*core.ScalarValue)({
              IntValue: (*int)(<nil>),
              BoolValue: (*bool)(<nil>),
              FloatValue: (*float64)(<nil>),
              StringValue: (*string)((len=9) "US-WEST-2"),
              SourceMeta: (*source.Meta)(<nil>)
            }),
            Fields: (map[string]*core.MappingNode) <nil>,
            Items: ([]*core.MappingNode) <nil>,
            StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
            SourceMeta: (*source.Meta)(<nil>),
            FieldsSourceMeta: (map[string]*source.Meta) <nil>
          }),
          MustRecreate: (bool) false
        },
        (provider.FieldChange) {
          FieldPath: (string) (len=14) "spec.tableName",
          PrevValue: (*core.MappingNode)(<nil>),
          NewValue: (*core.MappingNode)({
            Scalar: (*core.ScalarValue)({
              IntValue: (*int)(<nil>),
              BoolValue: (*bool)(<nil>),
              FloatValue: (*float64)(<nil>),
              StringValue: (*string)((len=19) "production-orders-1"),
              SourceMeta: (*source.Meta)(<nil>)
            }),
            Fields: (map[string]*core.MappingNode) <nil>,
            Items: ([]*core.MappingNode) <nil>,
            StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
            SourceMeta: (*source.Meta)(<nil>),
            FieldsSourceMeta: (map[string]*source.Meta) <nil>
          }),
          MustRecreate: (bool) false
        }
      },
      RemovedFields: ([]string) {
      },
      UnchangedFields: ([]string) {
      },
      ComputedFields: ([]string) (len=1) {
        (string) (len=7) "spec.id"
      },
      FieldChangesKnownOnDeploy: ([]string) {
      },
      ConditionKnownOnDeploy: (bool) false,
      NewOutboundLinks: (map[string]provider.LinkChanges) <nil>,
      OutboundLinkChanges: (map[string]provider.LinkChanges) <nil>,
      RemovedOutboundLinks: ([]string) <nil>
    },
    (string) (len=13) "ordersTable_1": (provider.Changes) {
      AppliedResourceInfo: (provider.ResourceInfo) {
        ResourceID: (string) "",
        ResourceName: (string) (len=13) "ordersTable_1",
        InstanceID: (string) (len=20) "blueprint-instance-2",
        CurrentResourceState: (*state.ResourceState)(<nil>),
        ResourceWithResolvedSubs: (*provider.ResolvedResource)({
          Type: (*schema.ResourceTypeWrapper)({
            Value: (string) (len=18) "aws/dynamodb/table",
            SourceMeta: (*source.Meta)({
              Position: (source.Position) {
                Line: (int) 57,
                Column: (int) 11
              },
              EndPosition: (*source.Position)({
                Line: (int) 57,
                Column: (int) 29
              })
            })
          }),
          Description: (*core.MappingNode)({
            Scalar: (*core.ScalarValue)({
              IntValue: (*int)(<nil>),
              BoolValue: (*bool)(<nil>),
              FloatValue: (*float64)(<nil>),
              StringValue: (*string)((len=44) "Table that stores orders for an application."),
              SourceMeta: (*source.Meta)(<nil>)
            }),
            Fields: (map[string]*core.MappingNode) <nil>,
            Items: ([]*core.MappingNode) <nil>,
            StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
            SourceMeta: (*source.Meta)(<nil>),
            FieldsSourceMeta: (map[string]*source.Meta) <nil>
          }),
          Metadata: (*provider.ResolvedResourceMetadata)({
            DisplayName: (*core.MappingNode)({
              Scalar: (*core.ScalarValue)({
                IntValue: (*int)(<nil>),
                BoolValue: (*bool)(<nil>),
                FloatValue: (*float64)(<nil>),
                StringValue: (*string)((len=27) "production-env Orders Table"),
                SourceMeta: (*source.Meta)(<nil>)
              }),
              Fields: (map[string]*core.MappingNode) <nil>,
              Items: ([]*core.MappingNode) <nil>,
              StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
              SourceMeta: (*source.Meta)(<nil>),
              FieldsSourceMeta: (map[string]*source.Meta) <nil>
            }),
            Annotations: (*core.MappingNode)({
              Scalar: (*core.ScalarValue)(<nil>),
              Fields: (map[string]*core.MappingNode) (len=3) {
                (string) (len=20) "aws.dynamodb.trigger": (*core.MappingNode)({
                  Scalar: (*core.ScalarValue)({
                    IntValue: (*int)(<nil>),
                    BoolValue: (*bool)(true),
                    FloatValue: (*float64)(<nil>),
                    StringValue: (*string)(<nil>),
                    SourceMeta: (*source.Meta)(<nil>)
                  }),
                  Fields: (map[string]*core.MappingNode) <nil>,
                  Items: ([]*core.MappingNode) <nil>,
                  StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                  SourceMeta: (*source.Meta)(<nil>),
                  FieldsSourceMeta: (map[string]*source.Meta) <nil>
                }),
                (string) (len=16) "aws.dynamodb.vpc": (*core.MappingNode)(<nil>),
                (string) (len=22) "custom.coreInfraRegion": (*core.MappingNode)(<nil>)
              },
              Items: ([]*core.MappingNode) <nil>,
              StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
              SourceMeta: (*source.Meta)(<nil>),
              FieldsSourceMeta: (map[string]*source.Meta) <nil>
            }),
            Labels: (*schema.StringMap)({
              Values: (map[string]string) (len=1) {
                (string) (len=3) "app": (string) (len=6) "orders"
              },
              SourceMeta: (map[string]*source.Meta) <nil>
            }),
            Custom: (*core.MappingNode)({
              Scalar: (*core.ScalarValue)(<nil>),
              Fields: (map[string]*core.MappingNode) (len=1) {
                (string) (len=6) "visual": (*core.MappingNode)({
                  Scalar: (*core.ScalarValue)(<nil>),
                  Fields: (map[string]*core.MappingNode) (len=3) {
                    (string) (len=5) "label": (*core.MappingNode)({
                      Scalar: (*core.ScalarValue)({
                        IntValue: (*int)(<nil>),
                        BoolValue: (*bool)(<nil>),
                        FloatValue: (*float64)(<nil>),
                        StringValue: (*string)((len=27) "production-env Orders Table"),
                        SourceMeta: (*source.Meta)(<nil>)
                      }),
                      Fields: (map[string]*core.MappingNode) <nil>,
                      Items: ([]*core.MappingNode) <nil>,
                      StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                      SourceMeta: (*source.Meta)(<nil>),
                      FieldsSourceMeta: (map[string]*source.Meta) <nil>
                    }),
                    (string) (len=1) "x": (*core.MappingNode)({
                      Scalar: (*core.ScalarValue)({
                        IntValue: (*int)(100),
                        BoolValue: (*bool)(<nil>),
                        FloatValue: (*float64)(<nil>),
                        StringValue: (*string)(<nil>),
                        SourceMeta: (*source.Meta)({
                          Position: (source.Position) {
                            Line: (int) 75,
                            Column: (int) 14
                          },
                          EndPosition: (*source.Position)({
                            Line: (int) 75,
                            Column: (int) 17
                          })
                        })
                      }),
                      Fields: (map[string]*core.MappingNode) <nil>,
                      Items: ([]*core.MappingNode) <nil>,
                      StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                      SourceMeta: (*source.Meta)({
                        Position: (source.Position) {
                          Line: (int) 75,
                          Column: (int) 14
                        },
                        EndPosition: (*source.Position)(<nil>)
                      }),
                      FieldsSourceMeta: (map[string]*source.Meta) <nil>
                    }),
                    (string) (len=1) "y": (*core.MappingNode)({
                      Scalar: (*core.ScalarValue)({
                        IntValue: (*int)(200),
                        BoolValue: (*bool)(<nil>),
                        FloatValue: (*float64)(<nil>),
                        StringValue: (*string)(<nil>),
                        SourceMeta: (*source.Meta)({
                          Position: (source.Position) {
                            Line: (int) 76,
                            Column: (int) 14
                          },
                          EndPosition: (*source.Position)({
                            Line: (int) 76,
                            Column: (int) 17
                          })
                        })
                      }),
                      Fields: (map[string]*core.MappingNode) <nil>,
                      Items: ([]*core.MappingNode) <nil>,
                      StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                      SourceMeta: (*source.Meta)({
                        Position: (source.Position) {
                          Line: (int) 76,
                          Column: (int) 14
                        },
                        EndPosition: (*source.Position)(<nil>)
                      }),
                      FieldsSourceMeta: (map[string]*source.Meta) <nil>
                    })
                  },
                  Items: ([]*core.MappingNode) <nil>,
                  StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                  SourceMeta: (*source.Meta)(<nil>),
                  FieldsSourceMeta: (map[string]*source.Meta) <nil>
                })
              },
              Items: ([]*core.MappingNode) <nil>,
              StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
              SourceMeta: (*source.Meta)(<nil>),
              FieldsSourceMeta: (map[string]*source.Meta) <nil>
            })
          }),
          Condition: (*provider.ResolvedResourceCondition)({
            And: ([]*provider.ResolvedResourceCondition) (len=2) {
              (*provider.ResolvedResourceCondition)({
                And: ([]*provider.ResolvedResourceCondition) <nil>,
                Or: ([]*provider.ResolvedResourceCondition) <nil>,
                Not: (*provider.ResolvedResourceCondition)(<nil>),
                StringValue: (*core.MappingNode)({
                  Scalar: (*core.ScalarValue)({
                    IntValue: (*int)(<nil>),
                    BoolValue: (*bool)(true),
                    FloatValue: (*float64)(<nil>),
                    StringValue: (*string)(<nil>),
                    SourceMeta: (*source.Meta)(<nil>)
                  }),
                  Fields: (map[string]*core.MappingNode) <nil>,
                  Items: ([]*core.MappingNode) <nil>,
                  StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                  SourceMeta: (*source.Meta)(<nil>),
                  FieldsSourceMeta: (map[string]*source.Meta) <nil>
                })
              }),
              (*provider.ResolvedResourceCondition)({
                And: ([]*provider.ResolvedResourceCondition) <nil>,
                Or: ([]*provider.ResolvedResourceCondition) (len=2) {
                  (*provider.ResolvedResourceCondition)({
                    And: ([]*provider.ResolvedResourceCondition) <nil>,
                    Or: ([]*provider.ResolvedResourceCondition) <nil>,
                    Not: (*provider.ResolvedResourceCondition)(<nil>),
                    StringValue: (*core.MappingNode)({
                      Scalar: (*core.ScalarValue)({
                        IntValue: (*int)(<nil>),
                        BoolValue: (*bool)(true),
                        FloatValue: (*float64)(<nil>),
                        StringValue: (*string)(<nil>),
                        SourceMeta: (*source.Meta)(<nil>)
                      }),
                      Fields: (map[string]*core.MappingNode) <nil>,
                      Items: ([]*core.MappingNode) <nil>,
                      StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                      SourceMeta: (*source.Meta)(<nil>),
                      FieldsSourceMeta: (map[string]*source.Meta) <nil>
                    })
                  }),
                  (*provider.ResolvedResourceCondition)({
                    And: ([]*provider.ResolvedResourceCondition) <nil>,
                    Or: ([]*provider.ResolvedResourceCondition) <nil>,
                    Not: (*provider.ResolvedResourceCondition)(<nil>),
                    StringValue: (*core.MappingNode)({
                      Scalar: (*core.ScalarValue)({
                        IntValue: (*int)(<nil>),
                        BoolValue: (*bool)(false),
                        FloatValue: (*float64)(<nil>),
                        StringValue: (*string)(<nil>),
                        SourceMeta: (*source.Meta)(<nil>)
                      }),
                      Fields: (map[string]*core.MappingNode) <nil>,
                      Items: ([]*core.MappingNode) <nil>,
                      StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                      SourceMeta: (*source.Meta)(<nil>),
                      FieldsSourceMeta: (map[string]*source.Meta) <nil>
                    })
                  })
                },
                Not: (*provider.ResolvedResourceCondition)(<nil>),
                StringValue: (*core.MappingNode)(<nil>)
              })
            },
            Or: ([]*provider.ResolvedResourceCondition) <nil>,
            Not: (*provider.ResolvedResourceCondition)(<nil>),
            StringValue: (*core.MappingNode)(<nil>)
          }),
          LinkSelector: (*schema.LinkSelector)(<nil>),
          Spec: (*core.MappingNode)({
            Scalar: (*core.ScalarValue)(<nil>),
            Fields: (map[string]*core.MappingNode) (len=3) {
              (string) (len=6) "global": (*core.MappingNode)({
                Scalar: (*core.ScalarValue)({
                  IntValue: (*int)(<nil>),
                  BoolValue: (*bool)(false),
                  FloatValue: (*float64)(<nil>),
                  StringValue: (*string)(<nil>),
                  SourceMeta: (*source.Meta)(<nil>)
                }),
                Fields: (map[string]*core.MappingNode) <nil>,
                Items: ([]*core.MappingNode) <nil>,
                StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                SourceMeta: (*source.Meta)(<nil>),
                FieldsSourceMeta: (map[string]*source.Meta) <nil>
              }),
              (string) (len=6) "region": (*core.MappingNode)({
                Scalar: (*core.ScalarValue)({
                  IntValue: (*int)(<nil>),
                  BoolValue: (*bool)(<nil>),
                  FloatValue: (*float64)(<nil>),
                  StringValue: (*string)((len=9) "US-WEST-2"),
                  SourceMeta: (*source.Meta)(<nil>)
                }),
                Fields: (map[string]*core.MappingNode) <nil>,
                Items: ([]*core.MappingNode) <nil>,
                StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                SourceMeta: (*source.Meta)(<nil>),
                FieldsSourceMeta: (map[string]*source.Meta) <nil>
              }),
              (string) (len=9) "tableName": (*core.MappingNode)({
                Scalar: (*core.ScalarValue)({
                  IntValue: (*int)(<nil>),
                  BoolValue: (*bool)(<nil>),
                  FloatValue: (*float64)(<nil>),
                  StringValue: (*string)((len=19) "production-orders-2"),
                  SourceMeta: (*source.Meta)(<nil>)
                }),
                Fields: (map[string]*core.MappingNode) <nil>,
                Items: ([]*core.MappingNode) <nil>,
                StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                SourceMeta: (*source.Meta)(<nil>),
                FieldsSourceMeta: (map[string]*source.Meta) <nil>
              })
            },
            Items: ([]*core.MappingNode) <nil>,
            StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
            SourceMeta: (*source.Meta)(<nil>),
            FieldsSourceMeta: (map[string]*source.Meta) <nil>
          })
        })
      },
      MustRecreate: (bool) false,
      ModifiedFields: ([]provider.FieldChange) {
      },
      NewFields: ([]provider.FieldChange) (len=11) {
        (provider.FieldChange) {
          FieldPath: (string) (len=44) "metadata.annotations[\"aws.dynamodb.trigger\"]",
          PrevValue: (*core.MappingNode)(<nil>),
          NewValue: (*core.MappingNode)({
            Scalar: (*core.ScalarValue)({
              IntValue: (*int)(<nil>),
              BoolValue: (*bool)(true),
              FloatValue: (*float64)(<nil>),
              StringValue: (*string)(<nil>),
              SourceMeta: (*source.Meta)(<nil>)
            }),
            Fields: (map[string]*core.MappingNode) <nil>,
            Items: ([]*core.MappingNode) <nil>,
            StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
            SourceMeta: (*source.Meta)(<nil>),
            FieldsSourceMeta: (map[string]*source.Meta) <nil>
          }),
          MustRecreate: (bool) false
        },
        (provider.FieldChange) {
          FieldPath: (string) (len=40) "metadata.annotations[\"aws.dynamodb.vpc\"]",
          PrevValue: (*core.MappingNode)(<nil>),
          NewValue: (*core.MappingNode)(<nil>),
          MustRecreate: (bool) false
        },
        (provider.FieldChange) {
          FieldPath: (string) (len=46) "metadata.annotations[\"custom.coreInfraRegion\"]",
          PrevValue: (*core.MappingNode)(<nil>),
          NewValue: (*core.MappingNode)(<nil>),
          MustRecreate: (bool) false
        },
        (provider.FieldChange) {
          FieldPath: (string) (len=28) "metadata.custom.visual.label",
          PrevValue: (*core.MappingNode)(<nil>),
          NewValue: (*core.MappingNode)({
            Scalar: (*core.ScalarValue)({
              IntValue: (*int)(<nil>),
              BoolValue: (*bool)(<nil>),
              FloatValue: (*float64)(<nil>),
              StringValue: (*string)((len=27) "production-env Orders Table"),
              SourceMeta: (*source.Meta)(<nil>)
            }),
            Fields: (map[string]*core.MappingNode) <nil>,
            Items: ([]*core.MappingNode) <nil>,
            StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
            SourceMeta: (*source.Meta)(<nil>),
            FieldsSourceMeta: (map[string]*source.Meta) <nil>
          }),
          MustRecreate: (bool) false
        },
        (provider.FieldChange) {
          FieldPath: (string) (len=27) "metadata.custom.visual[\"x\"]",
          PrevValue: (*core.MappingNode)(<nil>),
          NewValue: (*core.MappingNode)({
            Scalar: (*core.ScalarValue)({
              IntValue: (*int)(100),
              BoolValue: (*bool)(<nil>),
              FloatValue: (*float64)(<nil>),
              StringValue: (*string)(<nil>),
              SourceMeta: (*source.Meta)({
                Position: (source.Position) {
                  Line: (int) 75,
                  Column: (int) 14
                },
                EndPosition: (*source.Position)({
                  Line: (int) 75,
                  Column: (int) 17
                })
              })
            }),
            Fields: (map[string]*core.MappingNode) <nil>,
            Items: ([]*core.MappingNode) <nil>,
            StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
            SourceMeta: (*source.Meta)({
              Position: (source.Position) {
                Line: (int) 75,
                Column: (int) 14
              },
              EndPosition: (*source.Position)(<nil>)
            }),
            FieldsSourceMeta: (map[string]*source.Meta) <nil>
          }),
          MustRecreate: (bool) false
        },
        (provider.FieldChange) {
          FieldPath: (string) (len=27) "metadata.custom.visual[\"y\"]",
          PrevValue: (*core.MappingNode)(<nil>),
          NewValue: (*core.MappingNode)({
            Scalar: (*core.ScalarValue)({
              IntValue: (*int)(200),
              BoolValue: (*bool)(<nil>),
              FloatValue: (*float64)(<nil>),
              StringValue: (*string)(<nil>),
              SourceMeta: (*source.Meta)({
                Position: (source.Position) {
                  Line: (int) 76,
                  Column: (int) 14
                },
                EndPosition: (*source.Position)({
                  Line: (int) 76,
                  Column: (int) 17
                })
              })
            }),
            Fields: (map[string]*core.MappingNode) <nil>,
            Items: ([]*core.MappingNode) <nil>,
            StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
            SourceMeta: (*source.Meta)({
              Position: (source.Position) {
                Line: (int) 76,
                Column: (int) 14
              },
              EndPosition: (*source.Position)(<nil>)
            }),
            FieldsSourceMeta: (map[string]*source.Meta) <nil>
          }),
          MustRecreate: (bool) false
        },
        (provider.FieldChange) {
          FieldPath: (string) (len=20) "metadata.displayName",
          PrevValue: (*core.MappingNode)(<nil>),
          NewValue: (*core.MappingNode)({
            Scalar: (*core.ScalarValue)({
              IntValue: (*int)(<nil>),
              BoolValue: (*bool)(<nil>),
              FloatValue: (*float64)(<nil>),
              StringValue: (*string)((len=27) "production-env Orders Table"),
              SourceMeta: (*source.Meta)(<nil>)
            }),
            Fields: (map[string]*core.MappingNode) <nil>,
            Items: ([]*core.MappingNode) <nil>,
            StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
            SourceMeta: (*source.Meta)(<nil>),
            FieldsSourceMeta: (map[string]*source.Meta) <nil>
          }),
          MustRecreate: (bool) false
        },
        (provider.FieldChange) {
          FieldPath: (string) (len=22) "metadata.labels[\"app\"]",
          PrevValue: (*core.MappingNode)(<nil>),
          NewValue: (*core.MappingNode)({
            Scalar: (*core.ScalarValue)({
              IntValue: (*int)(<nil>),
              BoolValue: (*bool)(<nil>),
              FloatValue: (*float64)(<nil>),
              StringValue: (*string)((len=6) "orders"),
              SourceMeta: (*source.Meta)(<nil>)
            }),
            Fields: (map[string]*core.MappingNode) <nil>,
            Items: ([]*core.MappingNode) <nil>,
            StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
            SourceMeta: (*source.Meta)(<nil>),
            FieldsSourceMeta: (map[string]*source.Meta) <nil>
          }),
          MustRecreate: (bool) false
        },
        (provider.FieldChange) {
          FieldPath: (string) (len=11) "spec.global",
          PrevValue: (*core.MappingNode)(<nil>),
          NewValue: (*core.MappingNode)({
            Scalar: (*core.ScalarValue)({
              IntValue: (*int)(<nil>),
              BoolValue: (*bool)(false),
              FloatValue: (*float64)(<nil>),
              StringValue: (*string)(<nil>),
              SourceMeta: (*source.Meta)(<nil>)
            }),
            Fields: (map[string]*core.MappingNode) <nil>,
            Items: ([]*core.MappingNode) <nil>,
            StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
            SourceMeta: (*source.Meta)(<nil>),
            FieldsSourceMeta: (map[string]*source.Meta) <nil>
          }),
          MustRecreate: (bool) false
        },
        (provider.FieldChange) {
          FieldPath: (string) (len=11) "spec.region",
          PrevValue: (*core.MappingNode)(<nil>),
          NewValue: (*core.MappingNode)({
            Scalar: (*core.ScalarValue)({
              IntValue: (*int)(<nil>),
              BoolValue: (*bool)(<nil>),
              FloatValue: (*float64)(<nil>),
              StringValue: (*string)((len=9) "US-WEST-2"),
              SourceMeta: (*source.Meta)(<nil>)
            }),
            Fields: (map[string]*core.MappingNode) <nil>,
            Items: ([]*core.MappingNode) <nil>,
            StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
            SourceMeta: (*source.Meta)(<nil>),
            FieldsSourceMeta: (map[string]*source.Meta) <nil>
          }),
          MustRecreate: (bool) false
        },
        (provider.FieldChange) {
          FieldPath: (string) (len=14) "spec.tableName",
          PrevValue: (*core.MappingNode)(<nil>),
          NewValue: (*core.MappingNode)({
            Scalar: (*core.ScalarValue)({
              IntValue: (*int)(<nil>),
              BoolValue: (*bool)(<nil>),
              FloatValue: (*float64)(<nil>),
              StringValue: (*string)((len=19) "production-orders-2"),
              SourceMeta: (*source.Meta)(<nil>)
            }),
            Fields: (map[string]*core.MappingNode) <nil>,
            Items: ([]*core.MappingNode) <nil>,
            StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
            SourceMeta: (*source.Meta)(<nil>),
            FieldsSourceMeta: (map[string]*source.Meta) <nil>
          }),
          MustRecreate: (bool) false
        }
      },
      RemovedFields: ([]string) {
      },
      UnchangedFields: ([]string) {
      },
      ComputedFields: ([]string) (len=1) {
        (string) (len=7) "spec.id"
      },
      FieldChangesKnownOnDeploy: ([]string) {
      },
      ConditionKnownOnDeploy: (bool) false,
      NewOutboundLinks: (map[string]provider.LinkChanges) <nil>,
      OutboundLinkChanges: (map[string]provider.LinkChanges) <nil>,
      RemovedOutboundLinks: ([]string) <nil>
    },
    (string) (len=22) "processInvoiceFunction": (provider.Changes) {
      AppliedResourceInfo: (provider.ResourceInfo) {
        ResourceID: (string) "",
        ResourceName: (string) (len=22) "processInvoiceFunction",
        InstanceID: (string) (len=20) "blueprint-instance-2",
        CurrentResourceState: (*state.ResourceState)(<nil>),
        ResourceWithResolvedSubs: (*provider.ResolvedResource)({
          Type: (*schema.ResourceTypeWrapper)({
            Value: (string) (len=19) "aws/lambda/function",
            SourceMeta: (*source.Meta)({
              Position: (source.Position) {
                Line: (int) 113,
                Column: (int) 11
              },
              EndPosition: (*source.Position)({
                Line: (int) 113,
                Column: (int) 30
              })
            })
          }),
          Description: (*core.MappingNode)({
            Scalar: (*core.ScalarValue)({
              IntValue: (*int)(<nil>),
              BoolValue: (*bool)(<nil>),
              FloatValue: (*float64)(<nil>),
              StringValue: (*string)((len=35) "Function that processes an invoice."),
              SourceMeta: (*source.Meta)(<nil>)
            }),
            Fields: (map[string]*core.MappingNode) <nil>,
            Items: ([]*core.MappingNode) <nil>,
            StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
            SourceMeta: (*source.Meta)(<nil>),
            FieldsSourceMeta: (map[string]*source.Meta) <nil>
          }),
          Metadata: (*provider.ResolvedResourceMetadata)({
            DisplayName: (*core.MappingNode)(<nil>),
            Annotations: (*core.MappingNode)(<nil>),
            Labels: (*schema.StringMap)({
              Values: (map[string]string) (len=1) {
                (string) (len=3) "app": (string) (len=8) "invoices"
              },
              SourceMeta: (map[string]*source.Meta) (len=1) {
                (string) (len=3) "app": (*source.Meta)({
                  Position: (source.Position) {
                    Line: (int) 117,
                    Column: (int) 9
                  },
                  EndPosition: (*source.Position)(<nil>)
                })
              }
            }),
            Custom: (*core.MappingNode)(<nil>)
          }),
          Condition: (*provider.ResolvedResourceCondition)(<nil>),
          LinkSelector: (*schema.LinkSelector)(<nil>),
          Spec: (*core.MappingNode)({
            Scalar: (*core.ScalarValue)(<nil>),
            Fields: (map[string]*core.MappingNode) (len=1) {
              (string) (len=7) "handler": (*core.MappingNode)({
                Scalar: (*core.ScalarValue)({
                  IntValue: (*int)(<nil>),
                  BoolValue: (*bool)(<nil>),
                  FloatValue: (*float64)(<nil>),
                  StringValue: (*string)((len=26) "src/processInvoice.handler"),
                  SourceMeta: (*source.Meta)({
                    Position: (source.Position) {
                      Line: (int) 119,
                      Column: (int) 16
                    },
                    EndPosition: (*source.Position)({
                      Line: (int) 119,
                      Column: (int) 44
                    })
                  })
                }),
                Fields: (map[string]*core.MappingNode) <nil>,
                Items: ([]*core.MappingNode) <nil>,
                StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                SourceMeta: (*source.Meta)({
                  Position: (source.Position) {
                    Line: (int) 119,
                    Column: (int) 16
                  },
                  EndPosition: (*source.Position)(<nil>)
                }),
                FieldsSourceMeta: (map[string]*source.Meta) <nil>
              })
            },
            Items: ([]*core.MappingNode) <nil>,
            StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
            SourceMeta: (*source.Meta)(<nil>),
            FieldsSourceMeta: (map[string]*source.Meta) <nil>
          })
        })
      },
      MustRecreate: (bool) false,
      ModifiedFields: ([]provider.FieldChange) {
      },
      NewFields: ([]provider.FieldChange) (len=2) {
        (provider.FieldChange) {
          FieldPath: (string) (len=22) "metadata.labels[\"app\"]",
          PrevValue: (*core.MappingNode)(<nil>),
          NewValue: (*core.MappingNode)({
            Scalar: (*core.ScalarValue)({
              IntValue: (*int)(<nil>),
              BoolValue: (*bool)(<nil>),
              FloatValue: (*float64)(<nil>),
              StringValue: (*string)((len=8) "invoices"),
              SourceMeta: (*source.Meta)(<nil>)
            }),
            Fields: (map[string]*core.MappingNode) <nil>,
            Items: ([]*core.MappingNode) <nil>,
            StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
            SourceMeta: (*source.Meta)(<nil>),
            FieldsSourceMeta: (map[string]*source.Meta) <nil>
          }),
          MustRecreate: (bool) false
        },
        (provider.FieldChange) {
          FieldPath: (string) (len=12) "spec.handler",
          PrevValue: (*core.MappingNode)(<nil>),
          NewValue: (*core.MappingNode)({
            Scalar: (*core.ScalarValue)({
              IntValue: (*int)(<nil>),
              BoolValue: (*bool)(<nil>),
              FloatValue: (*float64)(<nil>),
              StringValue: (*string)((len=26) "src/processInvoice.handler"),
              SourceMeta: (*source.Meta)({
                Position: (source.Position) {
                  Line: (int) 119,
                  Column: (int) 16
                },
                EndPosition: (*source.Position)({
                  Line: (int) 119,
                  Column: (int) 44
                })
              })
            }),
            Fields: (map[string]*core.MappingNode) <nil>,
            Items: ([]*core.MappingNode) <nil>,
            StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
            SourceMeta: (*source.Meta)({
              Position: (source.Position) {
                Line: (int) 119,
                Column: (int) 16
              },
              EndPosition: (*source.Position)(<nil>)
            }),
            FieldsSourceMeta: (map[string]*source.Meta) <nil>
          }),
          MustRecreate: (bool) false
        }
      },
      RemovedFields: ([]string) {
      },
      UnchangedFields: ([]string) (len=1) {
        (string) (len=7) "spec.id"
      },
      ComputedFields: ([]string) {
      },
      FieldChangesKnownOnDeploy: ([]string) {
      },
      ConditionKnownOnDeploy: (bool) false,
      NewOutboundLinks: (map[string]provider.LinkChanges) <nil>,
      OutboundLinkChanges: (map[string]provider.LinkChanges) <nil>,
      RemovedOutboundLinks: ([]string) <nil>
    },
    (string) (len=17) "saveOrderFunction": (provider.Changes) {
      AppliedResourceInfo: (provider.ResourceInfo) {
        ResourceID: (string) "",
        ResourceName: (string) (len=17) "saveOrderFunction",
        InstanceID: (string) (len=20) "blueprint-instance-2",
        CurrentResourceState: (*state.ResourceState)(<nil>),
        ResourceWithResolvedSubs: (*provider.ResolvedResource)({
          Type: (*schema.ResourceTypeWrapper)({
            Value: (string) (len=19) "aws/lambda/function",
            SourceMeta: (*source.Meta)({
              Position: (source.Position) {
                Line: (int) 122,
                Column: (int) 11
              },
              EndPosition: (*source.Position)({
                Line: (int) 122,
                Column: (int) 30
              })
            })
          }),
          Description: (*core.MappingNode)({
            Scalar: (*core.ScalarValue)({
              IntValue: (*int)(<nil>),
              BoolValue: (*bool)(<nil>),
              FloatValue: (*float64)(<nil>),
              StringValue: (*string)((len=45) "Function that saves an order to the database."),
              SourceMeta: (*source.Meta)(<nil>)
            }),
            Fields: (map[string]*core.MappingNode) <nil>,
            Items: ([]*core.MappingNode) <nil>,
            StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
            SourceMeta: (*source.Meta)(<nil>),
            FieldsSourceMeta: (map[string]*source.Meta) <nil>
          }),
          Metadata: (*provider.ResolvedResourceMetadata)(<nil>),
          Condition: (*provider.ResolvedResourceCondition)(<nil>),
          LinkSelector: (*schema.LinkSelector)({
            ByLabel: (*schema.StringMap)({
              Values: (map[string]string) (len=1) {
                (string) (len=3) "app": (string) (len=6) "orders"
              },
              SourceMeta: (map[string]*source.Meta) (len=1) {
                (string) (len=3) "app": (*source.Meta)({
                  Position: (source.Position) {
                    Line: (int) 126,
                    Column: (int) 9
                  },
                  EndPosition: (*source.Position)(<nil>)
                })
              }
            }),
            SourceMeta: (*source.Meta)({
              Position: (source.Position) {
                Line: (int) 125,
                Column: (int) 7
              },
              EndPosition: (*source.Position)(<nil>)
            })
          }),
          Spec: (*core.MappingNode)({
            Scalar: (*core.ScalarValue)(<nil>),
            Fields: (map[string]*core.MappingNode) (len=1) {
              (string) (len=7) "handler": (*core.MappingNode)({
                Scalar: (*core.ScalarValue)({
                  IntValue: (*int)(<nil>),
                  BoolValue: (*bool)(<nil>),
                  FloatValue: (*float64)(<nil>),
                  StringValue: (*string)((len=21) "src/saveOrder.handler"),
                  SourceMeta: (*source.Meta)({
                    Position: (source.Position) {
                      Line: (int) 128,
                      Column: (int) 16
                    },
                    EndPosition: (*source.Position)({
                      Line: (int) 128,
                      Column: (int) 39
                    })
                  })
                }),
                Fields: (map[string]*core.MappingNode) <nil>,
                Items: ([]*core.MappingNode) <nil>,
                StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                SourceMeta: (*source.Meta)({
                  Position: (source.Position) {
                    Line: (int) 128,
                    Column: (int) 16
                  },
                  EndPosition: (*source.Position)(<nil>)
                }),
                FieldsSourceMeta: (map[string]*source.Meta) <nil>
              })
            },
            Items: ([]*core.MappingNode) <nil>,
            StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
            SourceMeta: (*source.Meta)(<nil>),
            FieldsSourceMeta: (map[string]*source.Meta) <nil>
          })
        })
      },
      MustRecreate: (bool) false,
      ModifiedFields: ([]provider.FieldChange) {
      },
      NewFields: ([]provider.FieldChange) (len=1) {
        (provider.FieldChange) {
          FieldPath: (string) (len=12) "spec.handler",
          PrevValue: (*core.MappingNode)(<nil>),
          NewValue: (*core.MappingNode)({
            Scalar: (*core.ScalarValue)({
              IntValue: (*int)(<nil>),
              BoolValue: (*bool)(<nil>),
              FloatValue: (*float64)(<nil>),
              StringValue: (*string)((len=21) "src/saveOrder.handler"),
              SourceMeta: (*source.Meta)({
                Position: (source.Position) {
                  Line: (int) 128,
                  Column: (int) 16
                },
                EndPosition: (*source.Position)({
                  Line: (int) 128,
                  Column: (int) 39
                })
              })
            }),
            Fields: (map[string]*core.MappingNode) <nil>,
            Items: ([]*core.MappingNode) <nil>,
            StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
            SourceMeta: (*source.Meta)({
              Position: (source.Position) {
                Line: (int) 128,
                Column: (int) 16
              },
              EndPosition: (*source.Position)(<nil>)
            }),
            FieldsSourceMeta: (map[string]*source.Meta) <nil>
          }),
          MustRecreate: (bool) false
        }
      },
      RemovedFields: ([]string) {
      },
      UnchangedFields: ([]string) (len=1) {
        (string) (len=7) "spec.id"
      },
      ComputedFields: ([]string) {
      },
      FieldChangesKnownOnDeploy: ([]string) {
      },
      ConditionKnownOnDeploy: (bool) false,
      NewOutboundLinks: (map[string]provider.LinkChanges) (len=2) {
        (string) (len=13) "ordersTable_0": (provider.LinkChanges) {
          ModifiedFields: ([]*provider.FieldChange) <nil>,
          NewFields: ([]*provider.FieldChange) (len=4) {
            (*provider.FieldChange)({
              FieldPath: (string) (len=63) "saveOrderFunction.environmentVariables.TABLE_NAME_ordersTable_0",
              PrevValue: (*core.MappingNode)(<nil>),
              NewValue: (*core.MappingNode)({
                Scalar: (*core.ScalarValue)({
                  IntValue: (*int)(<nil>),
                  BoolValue: (*bool)(<nil>),
                  FloatValue: (*float64)(<nil>),
                  StringValue: (*string)((len=19) "production-orders-1"),
                  SourceMeta: (*source.Meta)(<nil>)
                }),
                Fields: (map[string]*core.MappingNode) <nil>,
                Items: ([]*core.MappingNode) <nil>,
                StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                SourceMeta: (*source.Meta)(<nil>),
                FieldsSourceMeta: (map[string]*source.Meta) <nil>
              }),
              MustRecreate: (bool) false
            }),
            (*provider.FieldChange)({
              FieldPath: (string) (len=65) "saveOrderFunction.environmentVariables.TABLE_REGION_ordersTable_0",
              PrevValue: (*core.MappingNode)(<nil>),
              NewValue: (*core.MappingNode)({
                Scalar: (*core.ScalarValue)({
                  IntValue: (*int)(<nil>),
                  BoolValue: (*bool)(<nil>),
                  FloatValue: (*float64)(<nil>),
                  StringValue: (*string)((len=9) "US-WEST-2"),
                  SourceMeta: (*source.Meta)(<nil>)
                }),
                Fields: (map[string]*core.MappingNode) <nil>,
                Items: ([]*core.MappingNode) <nil>,
                StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                SourceMeta: (*source.Meta)(<nil>),
                FieldsSourceMeta: (map[string]*source.Meta) <nil>
              }),
              MustRecreate: (bool) false
            }),
            (*provider.FieldChange)({
              FieldPath: (string) (len=50) "saveOrderFunction[\"iam.policyStatements\"].0.action",
              PrevValue: (*core.MappingNode)(<nil>),
              NewValue: (*core.MappingNode)({
                Scalar: (*core.ScalarValue)(<nil>),
                Fields: (map[string]*core.MappingNode) <nil>,
                Items: ([]*core.MappingNode) (len=1) {
                  (*core.MappingNode)({
                    Scalar: (*core.ScalarValue)({
                      IntValue: (*int)(<nil>),
                      BoolValue: (*bool)(<nil>),
                      FloatValue: (*float64)(<nil>),
                      StringValue: (*string)((len=16) "dynamodb:GetItem"),
                      SourceMeta: (*source.Meta)(<nil>)
                    }),
                    Fields: (map[string]*core.MappingNode) <nil>,
                    Items: ([]*core.MappingNode) <nil>,
                    StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                    SourceMeta: (*source.Meta)(<nil>),
                    FieldsSourceMeta: (map[string]*source.Meta) <nil>
                  })
                },
                StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                SourceMeta: (*source.Meta)(<nil>),
                FieldsSourceMeta: (map[string]*source.Meta) <nil>
              }),
              MustRecreate: (bool) false
            }),
            (*provider.FieldChange)({
              FieldPath: (string) (len=50) "saveOrderFunction[\"iam.policyStatements\"].0.effect",
              PrevValue: (*core.MappingNode)(<nil>),
              NewValue: (*core.MappingNode)({
                Scalar: (*core.ScalarValue)({
                  IntValue: (*int)(<nil>),
                  BoolValue: (*bool)(<nil>),
                  FloatValue: (*float64)(<nil>),
                  StringValue: (*string)((len=5) "Allow"),
                  SourceMeta: (*source.Meta)(<nil>)
                }),
                Fields: (map[string]*core.MappingNode) <nil>,
                Items: ([]*core.MappingNode) <nil>,
                StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                SourceMeta: (*source.Meta)(<nil>),
                FieldsSourceMeta: (map[string]*source.Meta) <nil>
              }),
              MustRecreate: (bool) false
            })
          },
          RemovedFields: ([]string) <nil>,
          UnchangedFields: ([]string) <nil>,
          FieldChangesKnownOnDeploy: ([]string) (len=1) {
            (string) (len=52) "saveOrderFunction[\"iam.policyStatements\"].0.resource"
          }
        },
        (string) (len=13) "ordersTable_1": (provider.LinkChanges) {
          ModifiedFields: ([]*provider.FieldChange) <nil>,
          NewFields: ([]*provider.FieldChange) (len=4) {
            (*provider.FieldChange)({
              FieldPath: (string) (len=63) "saveOrderFunction.environmentVariables.TABLE_NAME_ordersTable_1",
              PrevValue: (*core.MappingNode)(<nil>),
              NewValue: (*core.MappingNode)({
                Scalar: (*core.ScalarValue)({
                  IntValue: (*int)(<nil>),
                  BoolValue: (*bool)(<nil>),
                  FloatValue: (*float64)(<nil>),
                  StringValue: (*string)((len=19) "production-orders-2"),
                  SourceMeta: (*source.Meta)(<nil>)
                }),
                Fields: (map[string]*core.MappingNode) <nil>,
                Items: ([]*core.MappingNode) <nil>,
                StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                SourceMeta: (*source.Meta)(<nil>),
                FieldsSourceMeta: (map[string]*source.Meta) <nil>
              }),
              MustRecreate: (bool) false
            }),
            (*provider.FieldChange)({
              FieldPath: (string) (len=65) "saveOrderFunction.environmentVariables.TABLE_REGION_ordersTable_1",
              PrevValue: (*core.MappingNode)(<nil>),
              NewValue: (*core.MappingNode)({
                Scalar: (*core.ScalarValue)({
                  IntValue: (*int)(<nil>),
                  BoolValue: (*bool)(<nil>),
                  FloatValue: (*float64)(<nil>),
                  StringValue: (*string)((len=9) "US-WEST-2"),
                  SourceMeta: (*source.Meta)(<nil>)
                }),
                Fields: (map[string]*core.MappingNode) <nil>,
                Items: ([]*core.MappingNode) <nil>,
                StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                SourceMeta: (*source.Meta)(<nil>),
                FieldsSourceMeta: (map[string]*source.Meta) <nil>
              }),
              MustRecreate: (bool) false
            }),
            (*provider.FieldChange)({
              FieldPath: (string) (len=50) "saveOrderFunction[\"iam.policyStatements\"].0.action",
              PrevValue: (*core.MappingNode)(<nil>),
              NewValue: (*core.MappingNode)({
                Scalar: (*core.ScalarValue)(<nil>),
                Fields: (map[string]*core.MappingNode) <nil>,
                Items: ([]*core.MappingNode) (len=1) {
                  (*core.MappingNode)({
                    Scalar: (*core.ScalarValue)({
                      IntValue: (*int)(<nil>),
                      BoolValue: (*bool)(<nil>),
                      FloatValue: (*float64)(<nil>),
                      StringValue: (*string)((len=16) "dynamodb:GetItem"),
                      SourceMeta: (*source.Meta)(<nil>)
                    }),
                    Fields: (map[string]*core.MappingNode) <nil>,
                    Items: ([]*core.MappingNode) <nil>,
                    StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                    SourceMeta: (*source.Meta)(<nil>),
                    FieldsSourceMeta: (map[string]*source.Meta) <nil>
                  })
                },
                StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                SourceMeta: (*source.Meta)(<nil>),
                FieldsSourceMeta: (map[string]*source.Meta) <nil>
              }),
              MustRecreate: (bool) false
            }),
            (*provider.FieldChange)({
              FieldPath: (string) (len=50) "saveOrderFunction[\"iam.policyStatements\"].0.effect",
              PrevValue: (*core.MappingNode)(<nil>),
              NewValue: (*core.MappingNode)({
                Scalar: (*core.ScalarValue)({
                  IntValue: (*int)(<nil>),
                  BoolValue: (*bool)(<nil>),
                  FloatValue: (*float64)(<nil>),
                  StringValue: (*string)((len=5) "Allow"),
                  SourceMeta: (*source.Meta)(<nil>)
                }),
                Fields: (map[string]*core.MappingNode) <nil>,
                Items: ([]*core.MappingNode) <nil>,
                StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                SourceMeta: (*source.Meta)(<nil>),
                FieldsSourceMeta: (map[string]*source.Meta) <nil>
              }),
              MustRecreate: (bool) false
            })
          },
          RemovedFields: ([]string) <nil>,
          UnchangedFields: ([]string) <nil>,
          FieldChangesKnownOnDeploy: ([]string) (len=1) {
            (string) (len=52) "saveOrderFunction[\"iam.policyStatements\"].0.resource"
          }
        }
      },
      OutboundLinkChanges: (map[string]provider.LinkChanges) <nil>,
      RemovedOutboundLinks: ([]string) <nil>
    }
  },
  ResourceChanges: (map[string]provider.Changes) {
  },
  RemovedResources: ([]string) {
  },
  RemovedLinks: ([]string) {
  },
  NewChildren: (map[string]container.NewBlueprintDefinition) (len=1) {
    (string) (len=9) "coreInfra": (container.NewBlueprintDefinition) {
      NewResources: (map[string]provider.Changes) (len=1) {
        (string) (len=15) "complexResource": (provider.Changes) {
          AppliedResourceInfo: (provider.ResourceInfo) {
            ResourceID: (string) "",
            ResourceName: (string) (len=15) "complexResource",
            InstanceID: (string) "",
            CurrentResourceState: (*state.ResourceState)(<nil>),
            ResourceWithResolvedSubs: (*provider.ResolvedResource)({
              Type: (*schema.ResourceTypeWrapper)({
                Value: (string) (len=15) "example/complex",
                SourceMeta: (*source.Meta)({
                  Position: (source.Position) {
                    Line: (int) 15,
                    Column: (int) 11
                  },
                  EndPosition: (*source.Position)({
                    Line: (int) 15,
                    Column: (int) 26
                  })
                })
              }),
              Description: (*core.MappingNode)({
                Scalar: (*core.ScalarValue)({
                  IntValue: (*int)(<nil>),
                  BoolValue: (*bool)(<nil>),
                  FloatValue: (*float64)(<nil>),
                  StringValue: (*string)((len=24) "A complex resource type."),
                  SourceMeta: (*source.Meta)(<nil>)
                }),
                Fields: (map[string]*core.MappingNode) <nil>,
                Items: ([]*core.MappingNode) <nil>,
                StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                SourceMeta: (*source.Meta)(<nil>),
                FieldsSourceMeta: (map[string]*source.Meta) <nil>
              }),
              Metadata: (*provider.ResolvedResourceMetadata)(<nil>),
              Condition: (*provider.ResolvedResourceCondition)(<nil>),
              LinkSelector: (*schema.LinkSelector)(<nil>),
              Spec: (*core.MappingNode)({
                Scalar: (*core.ScalarValue)(<nil>),
                Fields: (map[string]*core.MappingNode) (len=3) {
                  (string) (len=10) "itemConfig": (*core.MappingNode)({
                    Scalar: (*core.ScalarValue)(<nil>),
                    Fields: (map[string]*core.MappingNode) (len=4) {
                      (string) (len=9) "endpoints": (*core.MappingNode)({
                        Scalar: (*core.ScalarValue)(<nil>),
                        Fields: (map[string]*core.MappingNode) <nil>,
                        Items: ([]*core.MappingNode) (len=2) {
                          (*core.MappingNode)({
                            Scalar: (*core.ScalarValue)({
                              IntValue: (*int)(<nil>),
                              BoolValue: (*bool)(<nil>),
                              FloatValue: (*float64)(<nil>),
                              StringValue: (*string)((len=21) "https://example.com/1"),
                              SourceMeta: (*source.Meta)({
                                Position: (source.Position) {
                                  Line: (int) 20,
                                  Column: (int) 13
                                },
                                EndPosition: (*source.Position)({
                                  Line: (int) 20,
                                  Column: (int) 36
                                })
                              })
                            }),
                            Fields: (map[string]*core.MappingNode) <nil>,
                            Items: ([]*core.MappingNode) <nil>,
                            StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                            SourceMeta: (*source.Meta)({
                              Position: (source.Position) {
                                Line: (int) 20,
                                Column: (int) 13
                              },
                              EndPosition: (*source.Position)(<nil>)
                            }),
                            FieldsSourceMeta: (map[string]*source.Meta) <nil>
                          }),
                          (*core.MappingNode)({
                            Scalar: (*core.ScalarValue)({
                              IntValue: (*int)(<nil>),
                              BoolValue: (*bool)(<nil>),
                              FloatValue: (*float64)(<nil>),
                              StringValue: (*string)((len=21) "https://example.com/2"),
                              SourceMeta: (*source.Meta)({
                                Position: (source.Position) {
                                  Line: (int) 21,
                                  Column: (int) 13
                                },
                                EndPosition: (*source.Position)({
                                  Line: (int) 21,
                                  Column: (int) 36
                                })
                              })
                            }),
                            Fields: (map[string]*core.MappingNode) <nil>,
                            Items: ([]*core.MappingNode) <nil>,
                            StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                            SourceMeta: (*source.Meta)({
                              Position: (source.Position) {
                                Line: (int) 21,
                                Column: (int) 13
                              },
                              EndPosition: (*source.Position)(<nil>)
                            }),
                            FieldsSourceMeta: (map[string]*source.Meta) <nil>
                          })
                        },
                        StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                        SourceMeta: (*source.Meta)(<nil>),
                        FieldsSourceMeta: (map[string]*source.Meta) <nil>
                      }),
                      (string) (len=4) "ipv4": (*core.MappingNode)({
                        Scalar: (*core.ScalarValue)({
                          IntValue: (*int)(<nil>),
                          BoolValue: (*bool)(true),
                          FloatValue: (*float64)(<nil>),
                          StringValue: (*string)(<nil>),
                          SourceMeta: (*source.Meta)({
                            Position: (source.Position) {
                              Line: (int) 22,
                              Column: (int) 15
                            },
                            EndPosition: (*source.Position)({
                              Line: (int) 22,
                              Column: (int) 19
                            })
                          })
                        }),
                        Fields: (map[string]*core.MappingNode) <nil>,
                        Items: ([]*core.MappingNode) <nil>,
                        StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                        SourceMeta: (*source.Meta)({
                          Position: (source.Position) {
                            Line: (int) 22,
                            Column: (int) 15
                          },
                          EndPosition: (*source.Position)(<nil>)
                        }),
                        FieldsSourceMeta: (map[string]*source.Meta) <nil>
                      }),
                      (string) (len=8) "metadata": (*core.MappingNode)({
                        Scalar: (*core.ScalarValue)(<nil>),
                        Fields: (map[string]*core.MappingNode) (len=2) {
                          (string) (len=11) "environment": (*core.MappingNode)({
                            Scalar: (*core.ScalarValue)({
                              IntValue: (*int)(<nil>),
                              BoolValue: (*bool)(<nil>),
                              FloatValue: (*float64)(<nil>),
                              StringValue: (*string)((len=14) "production-env"),
                              SourceMeta: (*source.Meta)(<nil>)
                            }),
                            Fields: (map[string]*core.MappingNode) <nil>,
                            Items: ([]*core.MappingNode) <nil>,
                            StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                            SourceMeta: (*source.Meta)(<nil>),
                            FieldsSourceMeta: (map[string]*source.Meta) <nil>
                          }),
                          (string) (len=6) "region": (*core.MappingNode)({
                            Scalar: (*core.ScalarValue)({
                              IntValue: (*int)(<nil>),
                              BoolValue: (*bool)(<nil>),
                              FloatValue: (*float64)(<nil>),
                              StringValue: (*string)((len=9) "us-west-2"),
                              SourceMeta: (*source.Meta)(<nil>)
                            }),
                            Fields: (map[string]*core.MappingNode) <nil>,
                            Items: ([]*core.MappingNode) <nil>,
                            StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                            SourceMeta: (*source.Meta)(<nil>),
                            FieldsSourceMeta: (map[string]*source.Meta) <nil>
                          })
                        },
                        Items: ([]*core.MappingNode) <nil>,
                        StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                        SourceMeta: (*source.Meta)(<nil>),
                        FieldsSourceMeta: (map[string]*source.Meta) <nil>
                      }),
                      (string) (len=11) "primaryPort": (*core.MappingNode)({
                        Scalar: (*core.ScalarValue)({
                          IntValue: (*int)(80),
                          BoolValue: (*bool)(<nil>),
                          FloatValue: (*float64)(<nil>),
                          StringValue: (*string)(<nil>),
                          SourceMeta: (*source.Meta)(<nil>)
                        }),
                        Fields: (map[string]*core.MappingNode) <nil>,
                        Items: ([]*core.MappingNode) <nil>,
                        StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                        SourceMeta: (*source.Meta)(<nil>),
                        FieldsSourceMeta: (map[string]*source.Meta) <nil>
                      })
                    },
                    Items: ([]*core.MappingNode) <nil>,
                    StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                    SourceMeta: (*source.Meta)(<nil>),
                    FieldsSourceMeta: (map[string]*source.Meta) <nil>
                  }),
                  (string) (len=15) "otherItemConfig": (*core.MappingNode)({
                    Scalar: (*core.ScalarValue)(<nil>),
                    Fields: (map[string]*core.MappingNode) (len=1) {
                      (string) (len=7) "default": (*core.MappingNode)({
                        Scalar: (*core.ScalarValue)(<nil>),
                        Fields: (map[string]*core.MappingNode) (len=2) {
                          (string) (len=6) "value1": (*core.MappingNode)({
                            Scalar: (*core.ScalarValue)({
                              IntValue: (*int)(<nil>),
                              BoolValue: (*bool)(<nil>),
                              FloatValue: (*float64)(<nil>),
                              StringValue: (*string)((len=19) "Contents of value 1"),
                              SourceMeta: (*source.Meta)(<nil>)
                            }),
                            Fields: (map[string]*core.MappingNode) <nil>,
                            Items: ([]*core.MappingNode) <nil>,
                            StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                            SourceMeta: (*source.Meta)(<nil>),
                            FieldsSourceMeta: (map[string]*source.Meta) <nil>
                          }),
                          (string) (len=6) "value2": (*core.MappingNode)({
                            Scalar: (*core.ScalarValue)({
                              IntValue: (*int)(<nil>),
                              BoolValue: (*bool)(<nil>),
                              FloatValue: (*float64)(<nil>),
                              StringValue: (*string)((len=19) "Contents of value 2"),
                              SourceMeta: (*source.Meta)(<nil>)
                            }),
                            Fields: (map[string]*core.MappingNode) <nil>,
                            Items: ([]*core.MappingNode) <nil>,
                            StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                            SourceMeta: (*source.Meta)(<nil>),
                            FieldsSourceMeta: (map[string]*source.Meta) <nil>
                          })
                        },
                        Items: ([]*core.MappingNode) <nil>,
                        StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                        SourceMeta: (*source.Meta)(<nil>),
                        FieldsSourceMeta: (map[string]*source.Meta) <nil>
                      })
                    },
                    Items: ([]*core.MappingNode) <nil>,
                    StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                    SourceMeta: (*source.Meta)(<nil>),
                    FieldsSourceMeta: (map[string]*source.Meta) <nil>
                  }),
                  (string) (len=12) "vendorConfig": (*core.MappingNode)({
                    Scalar: (*core.ScalarValue)(<nil>),
                    Fields: (map[string]*core.MappingNode) <nil>,
                    Items: ([]*core.MappingNode) (len=1) {
                      (*core.MappingNode)({
                        Scalar: (*core.ScalarValue)(<nil>),
                        Fields: (map[string]*core.MappingNode) (len=2) {
                          (string) (len=8) "vendorId": (*core.MappingNode)({
                            Scalar: (*core.ScalarValue)({
                              IntValue: (*int)(<nil>),
                              BoolValue: (*bool)(<nil>),
                              FloatValue: (*float64)(<nil>),
                              StringValue: (*string)((len=17) "example-vendor-id"),
                              SourceMeta: (*source.Meta)({
                                Position: (source.Position) {
                                  Line: (int) 28,
                                  Column: (int) 21
                                },
                                EndPosition: (*source.Position)({
                                  Line: (int) 28,
                                  Column: (int) 40
                                })
                              })
                            }),
                            Fields: (map[string]*core.MappingNode) <nil>,
                            Items: ([]*core.MappingNode) <nil>,
                            StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                            SourceMeta: (*source.Meta)({
                              Position: (source.Position) {
                                Line: (int) 28,
                                Column: (int) 21
                              },
                              EndPosition: (*source.Position)(<nil>)
                            }),
                            FieldsSourceMeta: (map[string]*source.Meta) <nil>
                          }),
                          (string) (len=15) "vendorNamespace": (*core.MappingNode)({
                            Scalar: (*core.ScalarValue)({
                              IntValue: (*int)(<nil>),
                              BoolValue: (*bool)(<nil>),
                              FloatValue: (*float64)(<nil>),
                              StringValue: (*string)((len=24) "example-vendor-namespace"),
                              SourceMeta: (*source.Meta)({
                                Position: (source.Position) {
                                  Line: (int) 27,
                                  Column: (int) 28
                                },
                                EndPosition: (*source.Position)({
                                  Line: (int) 27,
                                  Column: (int) 54
                                })
                              })
                            }),
                            Fields: (map[string]*core.MappingNode) <nil>,
                            Items: ([]*core.MappingNode) <nil>,
                            StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                            SourceMeta: (*source.Meta)({
                              Position: (source.Position) {
                                Line: (int) 27,
                                Column: (int) 28
                              },
                              EndPosition: (*source.Position)(<nil>)
                            }),
                            FieldsSourceMeta: (map[string]*source.Meta) <nil>
                          })
                        },
                        Items: ([]*core.MappingNode) <nil>,
                        StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                        SourceMeta: (*source.Meta)(<nil>),
                        FieldsSourceMeta: (map[string]*source.Meta) <nil>
                      })
                    },
                    StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                    SourceMeta: (*source.Meta)(<nil>),
                    FieldsSourceMeta: (map[string]*source.Meta) <nil>
                  })
                },
                Items: ([]*core.MappingNode) <nil>,
                StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                SourceMeta: (*source.Meta)(<nil>),
                FieldsSourceMeta: (map[string]*source.Meta) <nil>
              })
            })
          },
          MustRecreate: (bool) false,
          ModifiedFields: ([]provider.FieldChange) {
          },
          NewFields: ([]provider.FieldChange) (len=10) {
            (provider.FieldChange) {
              FieldPath: (string) (len=28) "spec.itemConfig.endpoints[0]",
              PrevValue: (*core.MappingNode)(<nil>),
              NewValue: (*core.MappingNode)({
                Scalar: (*core.ScalarValue)({
                  IntValue: (*int)(<nil>),
                  BoolValue: (*bool)(<nil>),
                  FloatValue: (*float64)(<nil>),
                  StringValue: (*string)((len=21) "https://example.com/1"),
                  SourceMeta: (*source.Meta)({
                    Position: (source.Position) {
                      Line: (int) 20,
                      Column: (int) 13
                    },
                    EndPosition: (*source.Position)({
                      Line: (int) 20,
                      Column: (int) 36
                    })
                  })
                }),
                Fields: (map[string]*core.MappingNode) <nil>,
                Items: ([]*core.MappingNode) <nil>,
                StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                SourceMeta: (*source.Meta)({
                  Position: (source.Position) {
                    Line: (int) 20,
                    Column: (int) 13
                  },
                  EndPosition: (*source.Position)(<nil>)
                }),
                FieldsSourceMeta: (map[string]*source.Meta) <nil>
              }),
              MustRecreate: (bool) true
            },
            (provider.FieldChange) {
              FieldPath: (string) (len=28) "spec.itemConfig.endpoints[1]",
              PrevValue: (*core.MappingNode)(<nil>),
              NewValue: (*core.MappingNode)({
                Scalar: (*core.ScalarValue)({
                  IntValue: (*int)(<nil>),
                  BoolValue: (*bool)(<nil>),
                  FloatValue: (*float64)(<nil>),
                  StringValue: (*string)((len=21) "https://example.com/2"),
                  SourceMeta: (*source.Meta)({
                    Position: (source.Position) {
                      Line: (int) 21,
                      Column: (int) 13
                    },
                    EndPosition: (*source.Position)({
                      Line: (int) 21,
                      Column: (int) 36
                    })
                  })
                }),
                Fields: (map[string]*core.MappingNode) <nil>,
                Items: ([]*core.MappingNode) <nil>,
                StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                SourceMeta: (*source.Meta)({
                  Position: (source.Position) {
                    Line: (int) 21,
                    Column: (int) 13
                  },
                  EndPosition: (*source.Position)(<nil>)
                }),
                FieldsSourceMeta: (map[string]*source.Meta) <nil>
              }),
              MustRecreate: (bool) true
            },
            (provider.FieldChange) {
              FieldPath: (string) (len=20) "spec.itemConfig.ipv4",
              PrevValue: (*core.MappingNode)(<nil>),
              NewValue: (*core.MappingNode)({
                Scalar: (*core.ScalarValue)({
                  IntValue: (*int)(<nil>),
                  BoolValue: (*bool)(true),
                  FloatValue: (*float64)(<nil>),
                  StringValue: (*string)(<nil>),
                  SourceMeta: (*source.Meta)({
                    Position: (source.Position) {
                      Line: (int) 22,
                      Column: (int) 15
                    },
                    EndPosition: (*source.Position)({
                      Line: (int) 22,
                      Column: (int) 19
                    })
                  })
                }),
                Fields: (map[string]*core.MappingNode) <nil>,
                Items: ([]*core.MappingNode) <nil>,
                StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                SourceMeta: (*source.Meta)({
                  Position: (source.Position) {
                    Line: (int) 22,
                    Column: (int) 15
                  },
                  EndPosition: (*source.Position)(<nil>)
                }),
                FieldsSourceMeta: (map[string]*source.Meta) <nil>
              }),
              MustRecreate: (bool) true
            },
            (provider.FieldChange) {
              FieldPath: (string) (len=36) "spec.itemConfig.metadata.environment",
              PrevValue: (*core.MappingNode)(<nil>),
              NewValue: (*core.MappingNode)({
                Scalar: (*core.ScalarValue)({
                  IntValue: (*int)(<nil>),
                  BoolValue: (*bool)(<nil>),
                  FloatValue: (*float64)(<nil>),
                  StringValue: (*string)((len=14) "production-env"),
                  SourceMeta: (*source.Meta)(<nil>)
                }),
                Fields: (map[string]*core.MappingNode) <nil>,
                Items: ([]*core.MappingNode) <nil>,
                StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                SourceMeta: (*source.Meta)(<nil>),
                FieldsSourceMeta: (map[string]*source.Meta) <nil>
              }),
              MustRecreate: (bool) true
            },
            (provider.FieldChange) {
              FieldPath: (string) (len=31) "spec.itemConfig.metadata.region",
              PrevValue: (*core.MappingNode)(<nil>),
              NewValue: (*core.MappingNode)({
                Scalar: (*core.ScalarValue)({
                  IntValue: (*int)(<nil>),
                  BoolValue: (*bool)(<nil>),
                  FloatValue: (*float64)(<nil>),
                  StringValue: (*string)((len=9) "us-west-2"),
                  SourceMeta: (*source.Meta)(<nil>)
                }),
                Fields: (map[string]*core.MappingNode) <nil>,
                Items: ([]*core.MappingNode) <nil>,
                StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                SourceMeta: (*source.Meta)(<nil>),
                FieldsSourceMeta: (map[string]*source.Meta) <nil>
              }),
              MustRecreate: (bool) true
            },
            (provider.FieldChange) {
              FieldPath: (string) (len=27) "spec.itemConfig.primaryPort",
              PrevValue: (*core.MappingNode)(<nil>),
              NewValue: (*core.MappingNode)({
                Scalar: (*core.ScalarValue)({
                  IntValue: (*int)(80),
                  BoolValue: (*bool)(<nil>),
                  FloatValue: (*float64)(<nil>),
                  StringValue: (*string)(<nil>),
                  SourceMeta: (*source.Meta)(<nil>)
                }),
                Fields: (map[string]*core.MappingNode) <nil>,
                Items: ([]*core.MappingNode) <nil>,
                StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                SourceMeta: (*source.Meta)(<nil>),
                FieldsSourceMeta: (map[string]*source.Meta) <nil>
              }),
              MustRecreate: (bool) true
            },
            (provider.FieldChange) {
              FieldPath: (string) (len=35) "spec.otherItemConfig.default.value1",
              PrevValue: (*core.MappingNode)(<nil>),
              NewValue: (*core.MappingNode)({
                Scalar: (*core.ScalarValue)({
                  IntValue: (*int)(<nil>),
                  BoolValue: (*bool)(<nil>),
                  FloatValue: (*float64)(<nil>),
                  StringValue: (*string)((len=19) "Contents of value 1"),
                  SourceMeta: (*source.Meta)(<nil>)
                }),
                Fields: (map[string]*core.MappingNode) <nil>,
                Items: ([]*core.MappingNode) <nil>,
                StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                SourceMeta: (*source.Meta)(<nil>),
                FieldsSourceMeta: (map[string]*source.Meta) <nil>
              }),
              MustRecreate: (bool) false
            },
            (provider.FieldChange) {
              FieldPath: (string) (len=35) "spec.otherItemConfig.default.value2",
              PrevValue: (*core.MappingNode)(<nil>),
              NewValue: (*core.MappingNode)({
                Scalar: (*core.ScalarValue)({
                  IntValue: (*int)(<nil>),
                  BoolValue: (*bool)(<nil>),
                  FloatValue: (*float64)(<nil>),
                  StringValue: (*string)((len=19) "Contents of value 2"),
                  SourceMeta: (*source.Meta)(<nil>)
                }),
                Fields: (map[string]*core.MappingNode) <nil>,
                Items: ([]*core.MappingNode) <nil>,
                StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                SourceMeta: (*source.Meta)(<nil>),
                FieldsSourceMeta: (map[string]*source.Meta) <nil>
              }),
              MustRecreate: (bool) false
            },
            (provider.FieldChange) {
              FieldPath: (string) (len=29) "spec.vendorConfig[0].vendorId",
              PrevValue: (*core.MappingNode)(<nil>),
              NewValue: (*core.MappingNode)({
                Scalar: (*core.ScalarValue)({
                  IntValue: (*int)(<nil>),
                  BoolValue: (*bool)(<nil>),
                  FloatValue: (*float64)(<nil>),
                  StringValue: (*string)((len=17) "example-vendor-id"),
                  SourceMeta: (*source.Meta)({
                    Position: (source.Position) {
                      Line: (int) 28,
                      Column: (int) 21
                    },
                    EndPosition: (*source.Position)({
                      Line: (int) 28,
                      Column: (int) 40
                    })
                  })
                }),
                Fields: (map[string]*core.MappingNode) <nil>,
                Items: ([]*core.MappingNode) <nil>,
                StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                SourceMeta: (*source.Meta)({
                  Position: (source.Position) {
                    Line: (int) 28,
                    Column: (int) 21
                  },
                  EndPosition: (*source.Position)(<nil>)
                }),
                FieldsSourceMeta: (map[string]*source.Meta) <nil>
              }),
              MustRecreate: (bool) false
            },
            (provider.FieldChange) {
              FieldPath: (string) (len=36) "spec.vendorConfig[0].vendorNamespace",
              PrevValue: (*core.MappingNode)(<nil>),
              NewValue: (*core.MappingNode)({
                Scalar: (*core.ScalarValue)({
                  IntValue: (*int)(<nil>),
                  BoolValue: (*bool)(<nil>),
                  FloatValue: (*float64)(<nil>),
                  StringValue: (*string)((len=24) "example-vendor-namespace"),
                  SourceMeta: (*source.Meta)({
                    Position: (source.Position) {
                      Line: (int) 27,
                      Column: (int) 28
                    },
                    EndPosition: (*source.Position)({
                      Line: (int) 27,
                      Column: (int) 54
                    })
                  })
                }),
                Fields: (map[string]*core.MappingNode) <nil>,
                Items: ([]*core.MappingNode) <nil>,
                StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                SourceMeta: (*source.Meta)({
                  Position: (source.Position) {
                    Line: (int) 27,
                    Column: (int) 28
                  },
                  EndPosition: (*source.Position)(<nil>)
                }),
                FieldsSourceMeta: (map[string]*source.Meta) <nil>
              }),
              MustRecreate: (bool) false
            }
          },
          RemovedFields: ([]string) {
          },
          UnchangedFields: ([]string) (len=2) {
            (string) (len=21) "spec.itemConfig.score",
            (string) (len=15) "spec.vendorTags"
          },
          ComputedFields: ([]string) (len=1) {
            (string) (len=7) "spec.id"
          },
          FieldChangesKnownOnDeploy: ([]string) {
          },
          ConditionKnownOnDeploy: (bool) false,
          NewOutboundLinks: (map[string]provider.LinkChanges) <nil>,
          OutboundLinkChanges: (map[string]provider.LinkChanges) <nil>,
          RemovedOutboundLinks: ([]string) <nil>
        }
      },
      NewChildren: (map[string]container.NewBlueprintDefinition) {
      },
      NewExports: (map[string]provider.FieldChange) (len=2) {
        (string) (len=11) "environment": (provider.FieldChange) {
          FieldPath: (string) (len=19) "exports.environment",
          PrevValue: (*core.MappingNode)(<nil>),
          NewValue: (*core.MappingNode)({
            Scalar: (*core.ScalarValue)({
              IntValue: (*int)(<nil>),
              BoolValue: (*bool)(<nil>),
              FloatValue: (*float64)(<nil>),
              StringValue: (*string)((len=14) "production-env"),
              SourceMeta: (*source.Meta)(<nil>)
            }),
            Fields: (map[string]*core.MappingNode) <nil>,
            Items: ([]*core.MappingNode) <nil>,
            StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
            SourceMeta: (*source.Meta)(<nil>),
            FieldsSourceMeta: (map[string]*source.Meta) <nil>
          }),
          MustRecreate: (bool) false
        },
        (string) (len=6) "region": (provider.FieldChange) {
          FieldPath: (string) (len=14) "exports.region",
          PrevValue: (*core.MappingNode)(<nil>),
          NewValue: (*core.MappingNode)({
            Scalar: (*core.ScalarValue)({
              IntValue: (*int)(<nil>),
              BoolValue: (*bool)(<nil>),
              FloatValue: (*float64)(<nil>),
              StringValue: (*string)((len=9) "US-WEST-2"),
              SourceMeta: (*source.Meta)(<nil>)
            }),
            Fields: (map[string]*core.MappingNode) <nil>,
            Items: ([]*core.MappingNode) <nil>,
            StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
            SourceMeta: (*source.Meta)(<nil>),
            FieldsSourceMeta: (map[string]*source.Meta) <nil>
          }),
          MustRecreate: (bool) false
        }
      }
    }
  },
  ChildChanges: (map[string]container.BlueprintChanges) {
  },
  RecreateChildren: ([]string) {
  },
  RemovedChildren: ([]string) {
  },
  NewExports: (map[string]provider.FieldChange) (len=1) {
    (string) (len=11) "environment": (provider.FieldChange) {
      FieldPath: (string) (len=19) "exports.environment",
      PrevValue: (*core.MappingNode)(<nil>),
      NewValue: (*core.MappingNode)({
        Scalar: (*core.ScalarValue)({
          IntValue: (*int)(<nil>),
          BoolValue: (*bool)(<nil>),
          FloatValue: (*float64)(<nil>),
          StringValue: (*string)((len=14) "production-env"),
          SourceMeta: (*source.Meta)(<nil>)
        }),
        Fields: (map[string]*core.MappingNode) <nil>,
        Items: ([]*core.MappingNode) <nil>,
        StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
        SourceMeta: (*source.Meta)(<nil>),
        FieldsSourceMeta: (map[string]*source.Meta) <nil>
      }),
      MustRecreate: (bool) false
    }
  },
  ExportChanges: (map[string]provider.FieldChange) {
  },
  UnchangedExports: ([]string) {
  },
  RemovedExports: ([]string) {
  },
  ResolveOnDeploy: ([]string) (len=2) {
    (string) (len=91) "link(saveOrderFunction::ordersTable_0).saveOrderFunction[\"iam.policyStatements\"].0.resource",
    (string) (len=91) "link(saveOrderFunction::ordersTable_1).saveOrderFunction[\"iam.policyStatements\"].0.resource"
  }
})
