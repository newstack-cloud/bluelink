(*provider.Changes)({
  AppliedResourceInfo: (provider.ResourceInfo) {
    ResourceID: (string) (len=15) "test-resource-4",
    ResourceName: (string) (len=15) "complexResource",
    InstanceID: (string) (len=15) "test-instance-1",
    CurrentResourceState: (*state.ResourceState)({
      ResourceID: (string) (len=15) "test-resource-1",
      Name: (string) (len=15) "complexResource",
      Type: (string) (len=19) "example/old-complex",
      TemplateName: (string) "",
      InstanceID: (string) "",
      Status: (core.ResourceStatus) 2,
      PreciseStatus: (core.PreciseResourceStatus) 3,
      LastStatusUpdateTimestamp: (int) 0,
      LastDeployedTimestamp: (int) 1732969676,
      LastDeployAttemptTimestamp: (int) 1732969676,
      SpecData: (*core.MappingNode)({
        Scalar: (*core.ScalarValue)(<nil>),
        Fields: (map[string]*core.MappingNode) <nil>,
        Items: ([]*core.MappingNode) <nil>,
        StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
        SourceMeta: (*source.Meta)(<nil>),
        FieldsSourceMeta: (map[string]*source.Meta) <nil>
      }),
      Description: (string) "",
      Metadata: (*state.ResourceMetadataState)({
        DisplayName: (string) "",
        Annotations: (map[string]*core.MappingNode) <nil>,
        Labels: (map[string]string) <nil>,
        Custom: (*core.MappingNode)(<nil>)
      }),
      DependsOnResources: ([]string) <nil>,
      DependsOnChildren: ([]string) <nil>,
      FailureReasons: ([]string) <nil>,
      Drifted: (bool) false,
      LastDriftDetectedTimestamp: (*int)(<nil>),
      Durations: (*state.ResourceCompletionDurations)(<nil>)
    }),
    ResourceWithResolvedSubs: (*provider.ResolvedResource)({
      Type: (*schema.ResourceTypeWrapper)({
        Value: (string) (len=15) "example/complex",
        SourceMeta: (*source.Meta)(<nil>)
      }),
      Description: (*core.MappingNode)(<nil>),
      Metadata: (*provider.ResolvedResourceMetadata)({
        DisplayName: (*core.MappingNode)({
          Scalar: (*core.ScalarValue)({
            IntValue: (*int)(<nil>),
            BoolValue: (*bool)(<nil>),
            FloatValue: (*float64)(<nil>),
            StringValue: (*string)((len=29) "Test Complex Resource Updated"),
            SourceMeta: (*source.Meta)(<nil>)
          }),
          Fields: (map[string]*core.MappingNode) <nil>,
          Items: ([]*core.MappingNode) <nil>,
          StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
          SourceMeta: (*source.Meta)(<nil>),
          FieldsSourceMeta: (map[string]*source.Meta) <nil>
        }),
        Annotations: (*core.MappingNode)({
          Scalar: (*core.ScalarValue)(<nil>),
          Fields: (map[string]*core.MappingNode) (len=3) {
            (string) (len=18) "test.annotation.v1": (*core.MappingNode)(<nil>),
            (string) (len=18) "test.annotation.v2": (*core.MappingNode)({
              Scalar: (*core.ScalarValue)({
                IntValue: (*int)(<nil>),
                BoolValue: (*bool)(<nil>),
                FloatValue: (*float64)(<nil>),
                StringValue: (*string)((len=23) "second-annotation-value"),
                SourceMeta: (*source.Meta)(<nil>)
              }),
              Fields: (map[string]*core.MappingNode) <nil>,
              Items: ([]*core.MappingNode) <nil>,
              StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
              SourceMeta: (*source.Meta)(<nil>),
              FieldsSourceMeta: (map[string]*source.Meta) <nil>
            }),
            (string) (len=18) "test.annotation.v3": (*core.MappingNode)({
              Scalar: (*core.ScalarValue)({
                IntValue: (*int)(<nil>),
                BoolValue: (*bool)(<nil>),
                FloatValue: (*float64)(<nil>),
                StringValue: (*string)((len=22) "third-annotation-value"),
                SourceMeta: (*source.Meta)(<nil>)
              }),
              Fields: (map[string]*core.MappingNode) <nil>,
              Items: ([]*core.MappingNode) <nil>,
              StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
              SourceMeta: (*source.Meta)(<nil>),
              FieldsSourceMeta: (map[string]*source.Meta) <nil>
            })
          },
          Items: ([]*core.MappingNode) <nil>,
          StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
          SourceMeta: (*source.Meta)(<nil>),
          FieldsSourceMeta: (map[string]*source.Meta) <nil>
        }),
        Labels: (*schema.StringMap)({
          Values: (map[string]string) (len=2) {
            (string) (len=3) "app": (string) (len=11) "test-app-v2",
            (string) (len=3) "env": (string) (len=10) "production"
          },
          SourceMeta: (map[string]*source.Meta) <nil>
        }),
        Custom: (*core.MappingNode)({
          Scalar: (*core.ScalarValue)(<nil>),
          Fields: (map[string]*core.MappingNode) (len=3) {
            (string) (len=9) "localTags": (*core.MappingNode)({
              Scalar: (*core.ScalarValue)(<nil>),
              Fields: (map[string]*core.MappingNode) <nil>,
              Items: ([]*core.MappingNode) (len=1) {
                (*core.MappingNode)({
                  Scalar: (*core.ScalarValue)({
                    IntValue: (*int)(<nil>),
                    BoolValue: (*bool)(<nil>),
                    FloatValue: (*float64)(<nil>),
                    StringValue: (*string)((len=11) "local-tag-1"),
                    SourceMeta: (*source.Meta)(<nil>)
                  }),
                  Fields: (map[string]*core.MappingNode) <nil>,
                  Items: ([]*core.MappingNode) <nil>,
                  StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                  SourceMeta: (*source.Meta)(<nil>),
                  FieldsSourceMeta: (map[string]*source.Meta) <nil>
                })
              },
              StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
              SourceMeta: (*source.Meta)(<nil>),
              FieldsSourceMeta: (map[string]*source.Meta) <nil>
            }),
            (string) (len=8) "protocol": (*core.MappingNode)({
              Scalar: (*core.ScalarValue)({
                IntValue: (*int)(<nil>),
                BoolValue: (*bool)(<nil>),
                FloatValue: (*float64)(<nil>),
                StringValue: (*string)((len=5) "https"),
                SourceMeta: (*source.Meta)(<nil>)
              }),
              Fields: (map[string]*core.MappingNode) <nil>,
              Items: ([]*core.MappingNode) <nil>,
              StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
              SourceMeta: (*source.Meta)(<nil>),
              FieldsSourceMeta: (map[string]*source.Meta) <nil>
            }),
            (string) (len=3) "url": (*core.MappingNode)(<nil>)
          },
          Items: ([]*core.MappingNode) <nil>,
          StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
          SourceMeta: (*source.Meta)(<nil>),
          FieldsSourceMeta: (map[string]*source.Meta) <nil>
        })
      }),
      Condition: (*provider.ResolvedResourceCondition)(<nil>),
      LinkSelector: (*schema.LinkSelector)(<nil>),
      Spec: (*core.MappingNode)({
        Scalar: (*core.ScalarValue)(<nil>),
        Fields: (map[string]*core.MappingNode) (len=4) {
          (string) (len=23) "computedFieldTrackDrift": (*core.MappingNode)({
            Scalar: (*core.ScalarValue)({
              IntValue: (*int)(<nil>),
              BoolValue: (*bool)(<nil>),
              FloatValue: (*float64)(<nil>),
              StringValue: (*string)((len=24) "computed-field-new-value"),
              SourceMeta: (*source.Meta)(<nil>)
            }),
            Fields: (map[string]*core.MappingNode) <nil>,
            Items: ([]*core.MappingNode) <nil>,
            StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
            SourceMeta: (*source.Meta)(<nil>),
            FieldsSourceMeta: (map[string]*source.Meta) <nil>
          }),
          (string) (len=10) "itemConfig": (*core.MappingNode)({
            Scalar: (*core.ScalarValue)(<nil>),
            Fields: (map[string]*core.MappingNode) (len=5) {
              (string) (len=9) "endpoints": (*core.MappingNode)({
                Scalar: (*core.ScalarValue)(<nil>),
                Fields: (map[string]*core.MappingNode) <nil>,
                Items: ([]*core.MappingNode) (len=5) {
                  (*core.MappingNode)({
                    Scalar: (*core.ScalarValue)({
                      IntValue: (*int)(<nil>),
                      BoolValue: (*bool)(<nil>),
                      FloatValue: (*float64)(<nil>),
                      StringValue: (*string)((len=24) "http://example.com/new/1"),
                      SourceMeta: (*source.Meta)(<nil>)
                    }),
                    Fields: (map[string]*core.MappingNode) <nil>,
                    Items: ([]*core.MappingNode) <nil>,
                    StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                    SourceMeta: (*source.Meta)(<nil>),
                    FieldsSourceMeta: (map[string]*source.Meta) <nil>
                  }),
                  (*core.MappingNode)({
                    Scalar: (*core.ScalarValue)({
                      IntValue: (*int)(<nil>),
                      BoolValue: (*bool)(<nil>),
                      FloatValue: (*float64)(<nil>),
                      StringValue: (*string)((len=24) "http://example.com/new/2"),
                      SourceMeta: (*source.Meta)(<nil>)
                    }),
                    Fields: (map[string]*core.MappingNode) <nil>,
                    Items: ([]*core.MappingNode) <nil>,
                    StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                    SourceMeta: (*source.Meta)(<nil>),
                    FieldsSourceMeta: (map[string]*source.Meta) <nil>
                  }),
                  (*core.MappingNode)(<nil>),
                  (*core.MappingNode)({
                    Scalar: (*core.ScalarValue)({
                      IntValue: (*int)(<nil>),
                      BoolValue: (*bool)(<nil>),
                      FloatValue: (*float64)(<nil>),
                      StringValue: (*string)((len=20) "http://example.com/4"),
                      SourceMeta: (*source.Meta)(<nil>)
                    }),
                    Fields: (map[string]*core.MappingNode) <nil>,
                    Items: ([]*core.MappingNode) <nil>,
                    StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                    SourceMeta: (*source.Meta)(<nil>),
                    FieldsSourceMeta: (map[string]*source.Meta) <nil>
                  }),
                  (*core.MappingNode)(<nil>)
                },
                StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                SourceMeta: (*source.Meta)(<nil>),
                FieldsSourceMeta: (map[string]*source.Meta) <nil>
              }),
              (string) (len=4) "ipv4": (*core.MappingNode)({
                Scalar: (*core.ScalarValue)({
                  IntValue: (*int)(<nil>),
                  BoolValue: (*bool)(false),
                  FloatValue: (*float64)(<nil>),
                  StringValue: (*string)(<nil>),
                  SourceMeta: (*source.Meta)(<nil>)
                }),
                Fields: (map[string]*core.MappingNode) <nil>,
                Items: ([]*core.MappingNode) <nil>,
                StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                SourceMeta: (*source.Meta)(<nil>),
                FieldsSourceMeta: (map[string]*source.Meta) <nil>
              }),
              (string) (len=8) "metadata": (*core.MappingNode)({
                Scalar: (*core.ScalarValue)(<nil>),
                Fields: (map[string]*core.MappingNode) (len=1) {
                  (string) (len=6) "value1": (*core.MappingNode)({
                    Scalar: (*core.ScalarValue)({
                      IntValue: (*int)(<nil>),
                      BoolValue: (*bool)(<nil>),
                      FloatValue: (*float64)(<nil>),
                      StringValue: (*string)((len=10) "new-value1"),
                      SourceMeta: (*source.Meta)(<nil>)
                    }),
                    Fields: (map[string]*core.MappingNode) <nil>,
                    Items: ([]*core.MappingNode) <nil>,
                    StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                    SourceMeta: (*source.Meta)(<nil>),
                    FieldsSourceMeta: (map[string]*source.Meta) <nil>
                  })
                },
                Items: ([]*core.MappingNode) <nil>,
                StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                SourceMeta: (*source.Meta)(<nil>),
                FieldsSourceMeta: (map[string]*source.Meta) <nil>
              }),
              (string) (len=11) "primaryPort": (*core.MappingNode)({
                Scalar: (*core.ScalarValue)({
                  IntValue: (*int)(8081),
                  BoolValue: (*bool)(<nil>),
                  FloatValue: (*float64)(<nil>),
                  StringValue: (*string)(<nil>),
                  SourceMeta: (*source.Meta)(<nil>)
                }),
                Fields: (map[string]*core.MappingNode) <nil>,
                Items: ([]*core.MappingNode) <nil>,
                StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                SourceMeta: (*source.Meta)(<nil>),
                FieldsSourceMeta: (map[string]*source.Meta) <nil>
              }),
              (string) (len=5) "score": (*core.MappingNode)({
                Scalar: (*core.ScalarValue)({
                  IntValue: (*int)(<nil>),
                  BoolValue: (*bool)(<nil>),
                  FloatValue: (*float64)(1.309),
                  StringValue: (*string)(<nil>),
                  SourceMeta: (*source.Meta)(<nil>)
                }),
                Fields: (map[string]*core.MappingNode) <nil>,
                Items: ([]*core.MappingNode) <nil>,
                StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                SourceMeta: (*source.Meta)(<nil>),
                FieldsSourceMeta: (map[string]*source.Meta) <nil>
              })
            },
            Items: ([]*core.MappingNode) <nil>,
            StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
            SourceMeta: (*source.Meta)(<nil>),
            FieldsSourceMeta: (map[string]*source.Meta) <nil>
          }),
          (string) (len=15) "otherItemConfig": (*core.MappingNode)({
            Scalar: (*core.ScalarValue)(<nil>),
            Fields: (map[string]*core.MappingNode) (len=2) {
              (string) (len=6) "value1": (*core.MappingNode)({
                Scalar: (*core.ScalarValue)({
                  IntValue: (*int)(<nil>),
                  BoolValue: (*bool)(<nil>),
                  FloatValue: (*float64)(<nil>),
                  StringValue: (*string)((len=18) "other-item-value-1"),
                  SourceMeta: (*source.Meta)(<nil>)
                }),
                Fields: (map[string]*core.MappingNode) <nil>,
                Items: ([]*core.MappingNode) <nil>,
                StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                SourceMeta: (*source.Meta)(<nil>),
                FieldsSourceMeta: (map[string]*source.Meta) <nil>
              }),
              (string) (len=6) "value2": (*core.MappingNode)({
                Scalar: (*core.ScalarValue)({
                  IntValue: (*int)(<nil>),
                  BoolValue: (*bool)(<nil>),
                  FloatValue: (*float64)(<nil>),
                  StringValue: (*string)((len=18) "other-item-value-2"),
                  SourceMeta: (*source.Meta)(<nil>)
                }),
                Fields: (map[string]*core.MappingNode) <nil>,
                Items: ([]*core.MappingNode) <nil>,
                StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                SourceMeta: (*source.Meta)(<nil>),
                FieldsSourceMeta: (map[string]*source.Meta) <nil>
              })
            },
            Items: ([]*core.MappingNode) <nil>,
            StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
            SourceMeta: (*source.Meta)(<nil>),
            FieldsSourceMeta: (map[string]*source.Meta) <nil>
          }),
          (string) (len=10) "vendorTags": (*core.MappingNode)({
            Scalar: (*core.ScalarValue)(<nil>),
            Fields: (map[string]*core.MappingNode) <nil>,
            Items: ([]*core.MappingNode) (len=1) {
              (*core.MappingNode)({
                Scalar: (*core.ScalarValue)({
                  IntValue: (*int)(<nil>),
                  BoolValue: (*bool)(<nil>),
                  FloatValue: (*float64)(<nil>),
                  StringValue: (*string)((len=12) "vendor-tag-1"),
                  SourceMeta: (*source.Meta)(<nil>)
                }),
                Fields: (map[string]*core.MappingNode) <nil>,
                Items: ([]*core.MappingNode) <nil>,
                StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
                SourceMeta: (*source.Meta)(<nil>),
                FieldsSourceMeta: (map[string]*source.Meta) <nil>
              })
            },
            StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
            SourceMeta: (*source.Meta)(<nil>),
            FieldsSourceMeta: (map[string]*source.Meta) <nil>
          })
        },
        Items: ([]*core.MappingNode) <nil>,
        StringWithSubstitutions: (*substitutions.StringOrSubstitutions)(<nil>),
        SourceMeta: (*source.Meta)(<nil>),
        FieldsSourceMeta: (map[string]*source.Meta) <nil>
      })
    })
  },
  MustRecreate: (bool) true,
  ModifiedFields: ([]provider.FieldChange) {
  },
  NewFields: ([]provider.FieldChange) {
  },
  RemovedFields: ([]string) {
  },
  UnchangedFields: ([]string) {
  },
  ComputedFields: ([]string) {
  },
  FieldChangesKnownOnDeploy: ([]string) {
  },
  ConditionKnownOnDeploy: (bool) false,
  NewOutboundLinks: (map[string]provider.LinkChanges) <nil>,
  OutboundLinkChanges: (map[string]provider.LinkChanges) <nil>,
  RemovedOutboundLinks: ([]string) <nil>
})
