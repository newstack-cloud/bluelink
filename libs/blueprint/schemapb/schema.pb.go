// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.27.0
// source: schema.proto

package schemapb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Blueprint struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Version       *ScalarValue           `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	Transform     []string               `protobuf:"bytes,2,rep,name=transform,proto3" json:"transform,omitempty"`
	Variables     map[string]*Variable   `protobuf:"bytes,3,rep,name=variables,proto3" json:"variables,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Values        map[string]*Value      `protobuf:"bytes,4,rep,name=values,proto3" json:"values,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Include       map[string]*Include    `protobuf:"bytes,5,rep,name=include,proto3" json:"include,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Resources     map[string]*Resource   `protobuf:"bytes,6,rep,name=resources,proto3" json:"resources,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	DataSources   map[string]*DataSource `protobuf:"bytes,7,rep,name=data_sources,json=dataSources,proto3" json:"data_sources,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Exports       map[string]*Export     `protobuf:"bytes,8,rep,name=exports,proto3" json:"exports,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Metadata      *MappingNode           `protobuf:"bytes,9,opt,name=metadata,proto3,oneof" json:"metadata,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Blueprint) Reset() {
	*x = Blueprint{}
	mi := &file_schema_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Blueprint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Blueprint) ProtoMessage() {}

func (x *Blueprint) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Blueprint.ProtoReflect.Descriptor instead.
func (*Blueprint) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{0}
}

func (x *Blueprint) GetVersion() *ScalarValue {
	if x != nil {
		return x.Version
	}
	return nil
}

func (x *Blueprint) GetTransform() []string {
	if x != nil {
		return x.Transform
	}
	return nil
}

func (x *Blueprint) GetVariables() map[string]*Variable {
	if x != nil {
		return x.Variables
	}
	return nil
}

func (x *Blueprint) GetValues() map[string]*Value {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *Blueprint) GetInclude() map[string]*Include {
	if x != nil {
		return x.Include
	}
	return nil
}

func (x *Blueprint) GetResources() map[string]*Resource {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *Blueprint) GetDataSources() map[string]*DataSource {
	if x != nil {
		return x.DataSources
	}
	return nil
}

func (x *Blueprint) GetExports() map[string]*Export {
	if x != nil {
		return x.Exports
	}
	return nil
}

func (x *Blueprint) GetMetadata() *MappingNode {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type Export struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Type          string                 `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Field         *ScalarValue           `protobuf:"bytes,2,opt,name=field,proto3" json:"field,omitempty"`
	Description   *StringOrSubstitutions `protobuf:"bytes,3,opt,name=description,proto3,oneof" json:"description,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Export) Reset() {
	*x = Export{}
	mi := &file_schema_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Export) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Export) ProtoMessage() {}

func (x *Export) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Export.ProtoReflect.Descriptor instead.
func (*Export) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{1}
}

func (x *Export) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Export) GetField() *ScalarValue {
	if x != nil {
		return x.Field
	}
	return nil
}

func (x *Export) GetDescription() *StringOrSubstitutions {
	if x != nil {
		return x.Description
	}
	return nil
}

type Variable struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Type          string                 `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Description   *ScalarValue           `protobuf:"bytes,2,opt,name=description,proto3,oneof" json:"description,omitempty"`
	Secret        *ScalarValue           `protobuf:"bytes,3,opt,name=secret,proto3" json:"secret,omitempty"`
	Default       *ScalarValue           `protobuf:"bytes,4,opt,name=default,proto3" json:"default,omitempty"`
	AllowedValues []*ScalarValue         `protobuf:"bytes,5,rep,name=allowed_values,json=allowedValues,proto3" json:"allowed_values,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Variable) Reset() {
	*x = Variable{}
	mi := &file_schema_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Variable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Variable) ProtoMessage() {}

func (x *Variable) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Variable.ProtoReflect.Descriptor instead.
func (*Variable) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{2}
}

func (x *Variable) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Variable) GetDescription() *ScalarValue {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *Variable) GetSecret() *ScalarValue {
	if x != nil {
		return x.Secret
	}
	return nil
}

func (x *Variable) GetDefault() *ScalarValue {
	if x != nil {
		return x.Default
	}
	return nil
}

func (x *Variable) GetAllowedValues() []*ScalarValue {
	if x != nil {
		return x.AllowedValues
	}
	return nil
}

type Value struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Type          string                 `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Value         *MappingNode           `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	Description   *StringOrSubstitutions `protobuf:"bytes,3,opt,name=description,proto3,oneof" json:"description,omitempty"`
	Secret        *ScalarValue           `protobuf:"bytes,4,opt,name=secret,proto3" json:"secret,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Value) Reset() {
	*x = Value{}
	mi := &file_schema_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Value) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Value) ProtoMessage() {}

func (x *Value) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Value.ProtoReflect.Descriptor instead.
func (*Value) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{3}
}

func (x *Value) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Value) GetValue() *MappingNode {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *Value) GetDescription() *StringOrSubstitutions {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *Value) GetSecret() *ScalarValue {
	if x != nil {
		return x.Secret
	}
	return nil
}

type ScalarValue struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Value:
	//
	//	*ScalarValue_IntValue
	//	*ScalarValue_BoolValue
	//	*ScalarValue_FloatValue
	//	*ScalarValue_StringValue
	Value         isScalarValue_Value `protobuf_oneof:"value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ScalarValue) Reset() {
	*x = ScalarValue{}
	mi := &file_schema_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ScalarValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScalarValue) ProtoMessage() {}

func (x *ScalarValue) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScalarValue.ProtoReflect.Descriptor instead.
func (*ScalarValue) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{4}
}

func (x *ScalarValue) GetValue() isScalarValue_Value {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *ScalarValue) GetIntValue() int64 {
	if x != nil {
		if x, ok := x.Value.(*ScalarValue_IntValue); ok {
			return x.IntValue
		}
	}
	return 0
}

func (x *ScalarValue) GetBoolValue() bool {
	if x != nil {
		if x, ok := x.Value.(*ScalarValue_BoolValue); ok {
			return x.BoolValue
		}
	}
	return false
}

func (x *ScalarValue) GetFloatValue() float64 {
	if x != nil {
		if x, ok := x.Value.(*ScalarValue_FloatValue); ok {
			return x.FloatValue
		}
	}
	return 0
}

func (x *ScalarValue) GetStringValue() string {
	if x != nil {
		if x, ok := x.Value.(*ScalarValue_StringValue); ok {
			return x.StringValue
		}
	}
	return ""
}

type isScalarValue_Value interface {
	isScalarValue_Value()
}

type ScalarValue_IntValue struct {
	IntValue int64 `protobuf:"varint,1,opt,name=int_value,json=intValue,proto3,oneof"`
}

type ScalarValue_BoolValue struct {
	BoolValue bool `protobuf:"varint,2,opt,name=bool_value,json=boolValue,proto3,oneof"`
}

type ScalarValue_FloatValue struct {
	FloatValue float64 `protobuf:"fixed64,3,opt,name=float_value,json=floatValue,proto3,oneof"`
}

type ScalarValue_StringValue struct {
	StringValue string `protobuf:"bytes,4,opt,name=string_value,json=stringValue,proto3,oneof"`
}

func (*ScalarValue_IntValue) isScalarValue_Value() {}

func (*ScalarValue_BoolValue) isScalarValue_Value() {}

func (*ScalarValue_FloatValue) isScalarValue_Value() {}

func (*ScalarValue_StringValue) isScalarValue_Value() {}

type Include struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Path          *StringOrSubstitutions `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	Variables     *MappingNode           `protobuf:"bytes,2,opt,name=variables,proto3" json:"variables,omitempty"`
	Metadata      *MappingNode           `protobuf:"bytes,3,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Description   *StringOrSubstitutions `protobuf:"bytes,4,opt,name=description,proto3,oneof" json:"description,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Include) Reset() {
	*x = Include{}
	mi := &file_schema_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Include) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Include) ProtoMessage() {}

func (x *Include) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Include.ProtoReflect.Descriptor instead.
func (*Include) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{5}
}

func (x *Include) GetPath() *StringOrSubstitutions {
	if x != nil {
		return x.Path
	}
	return nil
}

func (x *Include) GetVariables() *MappingNode {
	if x != nil {
		return x.Variables
	}
	return nil
}

func (x *Include) GetMetadata() *MappingNode {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Include) GetDescription() *StringOrSubstitutions {
	if x != nil {
		return x.Description
	}
	return nil
}

type Resource struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Type          string                 `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Description   *StringOrSubstitutions `protobuf:"bytes,2,opt,name=description,proto3,oneof" json:"description,omitempty"`
	Metadata      *ResourceMetadata      `protobuf:"bytes,3,opt,name=metadata,proto3" json:"metadata,omitempty"`
	DependsOn     []string               `protobuf:"bytes,4,rep,name=depends_on,json=dependsOn,proto3" json:"depends_on,omitempty"`
	Condition     *ResourceCondition     `protobuf:"bytes,5,opt,name=condition,proto3,oneof" json:"condition,omitempty"`
	Each          *StringOrSubstitutions `protobuf:"bytes,6,opt,name=each,proto3,oneof" json:"each,omitempty"`
	LinkSelector  *LinkSelector          `protobuf:"bytes,7,opt,name=link_selector,json=linkSelector,proto3,oneof" json:"link_selector,omitempty"`
	Spec          *MappingNode           `protobuf:"bytes,8,opt,name=spec,proto3" json:"spec,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Resource) Reset() {
	*x = Resource{}
	mi := &file_schema_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Resource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Resource) ProtoMessage() {}

func (x *Resource) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Resource.ProtoReflect.Descriptor instead.
func (*Resource) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{6}
}

func (x *Resource) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Resource) GetDescription() *StringOrSubstitutions {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *Resource) GetMetadata() *ResourceMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Resource) GetDependsOn() []string {
	if x != nil {
		return x.DependsOn
	}
	return nil
}

func (x *Resource) GetCondition() *ResourceCondition {
	if x != nil {
		return x.Condition
	}
	return nil
}

func (x *Resource) GetEach() *StringOrSubstitutions {
	if x != nil {
		return x.Each
	}
	return nil
}

func (x *Resource) GetLinkSelector() *LinkSelector {
	if x != nil {
		return x.LinkSelector
	}
	return nil
}

func (x *Resource) GetSpec() *MappingNode {
	if x != nil {
		return x.Spec
	}
	return nil
}

type LinkSelector struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ByLabel       map[string]string      `protobuf:"bytes,1,rep,name=by_label,json=byLabel,proto3" json:"by_label,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LinkSelector) Reset() {
	*x = LinkSelector{}
	mi := &file_schema_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LinkSelector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinkSelector) ProtoMessage() {}

func (x *LinkSelector) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinkSelector.ProtoReflect.Descriptor instead.
func (*LinkSelector) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{7}
}

func (x *LinkSelector) GetByLabel() map[string]string {
	if x != nil {
		return x.ByLabel
	}
	return nil
}

type ResourceMetadata struct {
	state         protoimpl.MessageState            `protogen:"open.v1"`
	DisplayName   *StringOrSubstitutions            `protobuf:"bytes,1,opt,name=display_name,json=displayName,proto3,oneof" json:"display_name,omitempty"`
	Annotations   map[string]*StringOrSubstitutions `protobuf:"bytes,2,rep,name=annotations,proto3" json:"annotations,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Labels        map[string]string                 `protobuf:"bytes,3,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Custom        *MappingNode                      `protobuf:"bytes,4,opt,name=custom,proto3,oneof" json:"custom,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResourceMetadata) Reset() {
	*x = ResourceMetadata{}
	mi := &file_schema_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResourceMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceMetadata) ProtoMessage() {}

func (x *ResourceMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceMetadata.ProtoReflect.Descriptor instead.
func (*ResourceMetadata) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{8}
}

func (x *ResourceMetadata) GetDisplayName() *StringOrSubstitutions {
	if x != nil {
		return x.DisplayName
	}
	return nil
}

func (x *ResourceMetadata) GetAnnotations() map[string]*StringOrSubstitutions {
	if x != nil {
		return x.Annotations
	}
	return nil
}

func (x *ResourceMetadata) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *ResourceMetadata) GetCustom() *MappingNode {
	if x != nil {
		return x.Custom
	}
	return nil
}

type ResourceCondition struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	StringValue   *StringOrSubstitutions `protobuf:"bytes,1,opt,name=string_value,json=stringValue,proto3" json:"string_value,omitempty"`
	And           []*ResourceCondition   `protobuf:"bytes,2,rep,name=and,proto3" json:"and,omitempty"`
	Or            []*ResourceCondition   `protobuf:"bytes,3,rep,name=or,proto3" json:"or,omitempty"`
	Not           *ResourceCondition     `protobuf:"bytes,4,opt,name=not,proto3" json:"not,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResourceCondition) Reset() {
	*x = ResourceCondition{}
	mi := &file_schema_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResourceCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceCondition) ProtoMessage() {}

func (x *ResourceCondition) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceCondition.ProtoReflect.Descriptor instead.
func (*ResourceCondition) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{9}
}

func (x *ResourceCondition) GetStringValue() *StringOrSubstitutions {
	if x != nil {
		return x.StringValue
	}
	return nil
}

func (x *ResourceCondition) GetAnd() []*ResourceCondition {
	if x != nil {
		return x.And
	}
	return nil
}

func (x *ResourceCondition) GetOr() []*ResourceCondition {
	if x != nil {
		return x.Or
	}
	return nil
}

func (x *ResourceCondition) GetNot() *ResourceCondition {
	if x != nil {
		return x.Not
	}
	return nil
}

type DataSource struct {
	state           protoimpl.MessageState            `protogen:"open.v1"`
	Type            string                            `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Metadata        *DataSourceMetadata               `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Filter          []*DataSourceFilter               `protobuf:"bytes,3,rep,name=filter,proto3" json:"filter,omitempty"`
	ExportAllFields bool                              `protobuf:"varint,4,opt,name=export_all_fields,json=exportAllFields,proto3" json:"export_all_fields,omitempty"`
	Exports         map[string]*DataSourceFieldExport `protobuf:"bytes,5,rep,name=exports,proto3" json:"exports,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Description     *StringOrSubstitutions            `protobuf:"bytes,6,opt,name=description,proto3,oneof" json:"description,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *DataSource) Reset() {
	*x = DataSource{}
	mi := &file_schema_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DataSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataSource) ProtoMessage() {}

func (x *DataSource) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataSource.ProtoReflect.Descriptor instead.
func (*DataSource) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{10}
}

func (x *DataSource) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *DataSource) GetMetadata() *DataSourceMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *DataSource) GetFilter() []*DataSourceFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *DataSource) GetExportAllFields() bool {
	if x != nil {
		return x.ExportAllFields
	}
	return false
}

func (x *DataSource) GetExports() map[string]*DataSourceFieldExport {
	if x != nil {
		return x.Exports
	}
	return nil
}

func (x *DataSource) GetDescription() *StringOrSubstitutions {
	if x != nil {
		return x.Description
	}
	return nil
}

type DataSourceMetadata struct {
	state         protoimpl.MessageState            `protogen:"open.v1"`
	DisplayName   *StringOrSubstitutions            `protobuf:"bytes,1,opt,name=display_name,json=displayName,proto3,oneof" json:"display_name,omitempty"`
	Annotations   map[string]*StringOrSubstitutions `protobuf:"bytes,2,rep,name=annotations,proto3" json:"annotations,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Custom        *MappingNode                      `protobuf:"bytes,3,opt,name=custom,proto3,oneof" json:"custom,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DataSourceMetadata) Reset() {
	*x = DataSourceMetadata{}
	mi := &file_schema_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DataSourceMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataSourceMetadata) ProtoMessage() {}

func (x *DataSourceMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataSourceMetadata.ProtoReflect.Descriptor instead.
func (*DataSourceMetadata) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{11}
}

func (x *DataSourceMetadata) GetDisplayName() *StringOrSubstitutions {
	if x != nil {
		return x.DisplayName
	}
	return nil
}

func (x *DataSourceMetadata) GetAnnotations() map[string]*StringOrSubstitutions {
	if x != nil {
		return x.Annotations
	}
	return nil
}

func (x *DataSourceMetadata) GetCustom() *MappingNode {
	if x != nil {
		return x.Custom
	}
	return nil
}

type DataSourceFilter struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Field         *ScalarValue            `protobuf:"bytes,1,opt,name=field,proto3" json:"field,omitempty"`
	Operator      string                  `protobuf:"bytes,2,opt,name=operator,proto3" json:"operator,omitempty"`
	Search        *DataSourceFilterSearch `protobuf:"bytes,3,opt,name=search,proto3" json:"search,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DataSourceFilter) Reset() {
	*x = DataSourceFilter{}
	mi := &file_schema_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DataSourceFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataSourceFilter) ProtoMessage() {}

func (x *DataSourceFilter) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataSourceFilter.ProtoReflect.Descriptor instead.
func (*DataSourceFilter) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{12}
}

func (x *DataSourceFilter) GetField() *ScalarValue {
	if x != nil {
		return x.Field
	}
	return nil
}

func (x *DataSourceFilter) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

func (x *DataSourceFilter) GetSearch() *DataSourceFilterSearch {
	if x != nil {
		return x.Search
	}
	return nil
}

type DataSourceFilterSearch struct {
	state         protoimpl.MessageState   `protogen:"open.v1"`
	Values        []*StringOrSubstitutions `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DataSourceFilterSearch) Reset() {
	*x = DataSourceFilterSearch{}
	mi := &file_schema_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DataSourceFilterSearch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataSourceFilterSearch) ProtoMessage() {}

func (x *DataSourceFilterSearch) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataSourceFilterSearch.ProtoReflect.Descriptor instead.
func (*DataSourceFilterSearch) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{13}
}

func (x *DataSourceFilterSearch) GetValues() []*StringOrSubstitutions {
	if x != nil {
		return x.Values
	}
	return nil
}

type DataSourceFieldExport struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Type          string                 `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	AliasFor      *ScalarValue           `protobuf:"bytes,2,opt,name=alias_for,json=aliasFor,proto3" json:"alias_for,omitempty"`
	Description   *StringOrSubstitutions `protobuf:"bytes,3,opt,name=description,proto3,oneof" json:"description,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DataSourceFieldExport) Reset() {
	*x = DataSourceFieldExport{}
	mi := &file_schema_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DataSourceFieldExport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataSourceFieldExport) ProtoMessage() {}

func (x *DataSourceFieldExport) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataSourceFieldExport.ProtoReflect.Descriptor instead.
func (*DataSourceFieldExport) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{14}
}

func (x *DataSourceFieldExport) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *DataSourceFieldExport) GetAliasFor() *ScalarValue {
	if x != nil {
		return x.AliasFor
	}
	return nil
}

func (x *DataSourceFieldExport) GetDescription() *StringOrSubstitutions {
	if x != nil {
		return x.Description
	}
	return nil
}

type MappingNode struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// repeated fields and maps are not supported in oneof so it's better
	// to have a separate field for each type of value
	// and check at runtime during deserialisation.
	Scalar                  *ScalarValue            `protobuf:"bytes,1,opt,name=scalar,proto3" json:"scalar,omitempty"`
	Fields                  map[string]*MappingNode `protobuf:"bytes,2,rep,name=fields,proto3" json:"fields,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Items                   []*MappingNode          `protobuf:"bytes,3,rep,name=items,proto3" json:"items,omitempty"`
	StringWithSubstitutions *StringOrSubstitutions  `protobuf:"bytes,4,opt,name=string_with_substitutions,json=stringWithSubstitutions,proto3" json:"string_with_substitutions,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *MappingNode) Reset() {
	*x = MappingNode{}
	mi := &file_schema_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MappingNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MappingNode) ProtoMessage() {}

func (x *MappingNode) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MappingNode.ProtoReflect.Descriptor instead.
func (*MappingNode) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{15}
}

func (x *MappingNode) GetScalar() *ScalarValue {
	if x != nil {
		return x.Scalar
	}
	return nil
}

func (x *MappingNode) GetFields() map[string]*MappingNode {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *MappingNode) GetItems() []*MappingNode {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *MappingNode) GetStringWithSubstitutions() *StringOrSubstitutions {
	if x != nil {
		return x.StringWithSubstitutions
	}
	return nil
}

type StringOrSubstitutions struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Values        []*StringOrSubstitution `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StringOrSubstitutions) Reset() {
	*x = StringOrSubstitutions{}
	mi := &file_schema_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StringOrSubstitutions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StringOrSubstitutions) ProtoMessage() {}

func (x *StringOrSubstitutions) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StringOrSubstitutions.ProtoReflect.Descriptor instead.
func (*StringOrSubstitutions) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{16}
}

func (x *StringOrSubstitutions) GetValues() []*StringOrSubstitution {
	if x != nil {
		return x.Values
	}
	return nil
}

type StringOrSubstitution struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Value:
	//
	//	*StringOrSubstitution_StringValue
	//	*StringOrSubstitution_SubstitutionValue
	Value         isStringOrSubstitution_Value `protobuf_oneof:"value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StringOrSubstitution) Reset() {
	*x = StringOrSubstitution{}
	mi := &file_schema_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StringOrSubstitution) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StringOrSubstitution) ProtoMessage() {}

func (x *StringOrSubstitution) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StringOrSubstitution.ProtoReflect.Descriptor instead.
func (*StringOrSubstitution) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{17}
}

func (x *StringOrSubstitution) GetValue() isStringOrSubstitution_Value {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *StringOrSubstitution) GetStringValue() string {
	if x != nil {
		if x, ok := x.Value.(*StringOrSubstitution_StringValue); ok {
			return x.StringValue
		}
	}
	return ""
}

func (x *StringOrSubstitution) GetSubstitutionValue() *Substitution {
	if x != nil {
		if x, ok := x.Value.(*StringOrSubstitution_SubstitutionValue); ok {
			return x.SubstitutionValue
		}
	}
	return nil
}

type isStringOrSubstitution_Value interface {
	isStringOrSubstitution_Value()
}

type StringOrSubstitution_StringValue struct {
	StringValue string `protobuf:"bytes,1,opt,name=string_value,json=stringValue,proto3,oneof"`
}

type StringOrSubstitution_SubstitutionValue struct {
	SubstitutionValue *Substitution `protobuf:"bytes,2,opt,name=substitution_value,json=substitutionValue,proto3,oneof"`
}

func (*StringOrSubstitution_StringValue) isStringOrSubstitution_Value() {}

func (*StringOrSubstitution_SubstitutionValue) isStringOrSubstitution_Value() {}

type Substitution struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Sub:
	//
	//	*Substitution_FunctionExpr
	//	*Substitution_Variable
	//	*Substitution_Value
	//	*Substitution_Elem
	//	*Substitution_ElemIndex
	//	*Substitution_DataSourceProperty
	//	*Substitution_ResourceProperty
	//	*Substitution_Child
	//	*Substitution_StringValue
	//	*Substitution_IntValue
	//	*Substitution_FloatValue
	//	*Substitution_BoolValue
	Sub           isSubstitution_Sub `protobuf_oneof:"sub"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Substitution) Reset() {
	*x = Substitution{}
	mi := &file_schema_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Substitution) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Substitution) ProtoMessage() {}

func (x *Substitution) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Substitution.ProtoReflect.Descriptor instead.
func (*Substitution) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{18}
}

func (x *Substitution) GetSub() isSubstitution_Sub {
	if x != nil {
		return x.Sub
	}
	return nil
}

func (x *Substitution) GetFunctionExpr() *SubstitutionFunctionExpr {
	if x != nil {
		if x, ok := x.Sub.(*Substitution_FunctionExpr); ok {
			return x.FunctionExpr
		}
	}
	return nil
}

func (x *Substitution) GetVariable() *SubstitutionVariable {
	if x != nil {
		if x, ok := x.Sub.(*Substitution_Variable); ok {
			return x.Variable
		}
	}
	return nil
}

func (x *Substitution) GetValue() *SubstitutionValue {
	if x != nil {
		if x, ok := x.Sub.(*Substitution_Value); ok {
			return x.Value
		}
	}
	return nil
}

func (x *Substitution) GetElem() *SubstitutionElem {
	if x != nil {
		if x, ok := x.Sub.(*Substitution_Elem); ok {
			return x.Elem
		}
	}
	return nil
}

func (x *Substitution) GetElemIndex() *SubstitutionElemIndex {
	if x != nil {
		if x, ok := x.Sub.(*Substitution_ElemIndex); ok {
			return x.ElemIndex
		}
	}
	return nil
}

func (x *Substitution) GetDataSourceProperty() *SubstitutionDataSourceProperty {
	if x != nil {
		if x, ok := x.Sub.(*Substitution_DataSourceProperty); ok {
			return x.DataSourceProperty
		}
	}
	return nil
}

func (x *Substitution) GetResourceProperty() *SubstitutionResourceProperty {
	if x != nil {
		if x, ok := x.Sub.(*Substitution_ResourceProperty); ok {
			return x.ResourceProperty
		}
	}
	return nil
}

func (x *Substitution) GetChild() *SubstitutionChild {
	if x != nil {
		if x, ok := x.Sub.(*Substitution_Child); ok {
			return x.Child
		}
	}
	return nil
}

func (x *Substitution) GetStringValue() string {
	if x != nil {
		if x, ok := x.Sub.(*Substitution_StringValue); ok {
			return x.StringValue
		}
	}
	return ""
}

func (x *Substitution) GetIntValue() int64 {
	if x != nil {
		if x, ok := x.Sub.(*Substitution_IntValue); ok {
			return x.IntValue
		}
	}
	return 0
}

func (x *Substitution) GetFloatValue() float64 {
	if x != nil {
		if x, ok := x.Sub.(*Substitution_FloatValue); ok {
			return x.FloatValue
		}
	}
	return 0
}

func (x *Substitution) GetBoolValue() bool {
	if x != nil {
		if x, ok := x.Sub.(*Substitution_BoolValue); ok {
			return x.BoolValue
		}
	}
	return false
}

type isSubstitution_Sub interface {
	isSubstitution_Sub()
}

type Substitution_FunctionExpr struct {
	FunctionExpr *SubstitutionFunctionExpr `protobuf:"bytes,1,opt,name=function_expr,json=functionExpr,proto3,oneof"`
}

type Substitution_Variable struct {
	Variable *SubstitutionVariable `protobuf:"bytes,2,opt,name=variable,proto3,oneof"`
}

type Substitution_Value struct {
	Value *SubstitutionValue `protobuf:"bytes,3,opt,name=value,proto3,oneof"`
}

type Substitution_Elem struct {
	Elem *SubstitutionElem `protobuf:"bytes,4,opt,name=elem,proto3,oneof"`
}

type Substitution_ElemIndex struct {
	ElemIndex *SubstitutionElemIndex `protobuf:"bytes,5,opt,name=elem_index,json=elemIndex,proto3,oneof"`
}

type Substitution_DataSourceProperty struct {
	DataSourceProperty *SubstitutionDataSourceProperty `protobuf:"bytes,6,opt,name=data_source_property,json=dataSourceProperty,proto3,oneof"`
}

type Substitution_ResourceProperty struct {
	ResourceProperty *SubstitutionResourceProperty `protobuf:"bytes,7,opt,name=resource_property,json=resourceProperty,proto3,oneof"`
}

type Substitution_Child struct {
	Child *SubstitutionChild `protobuf:"bytes,8,opt,name=child,proto3,oneof"`
}

type Substitution_StringValue struct {
	StringValue string `protobuf:"bytes,9,opt,name=string_value,json=stringValue,proto3,oneof"`
}

type Substitution_IntValue struct {
	IntValue int64 `protobuf:"varint,10,opt,name=int_value,json=intValue,proto3,oneof"`
}

type Substitution_FloatValue struct {
	FloatValue float64 `protobuf:"fixed64,11,opt,name=float_value,json=floatValue,proto3,oneof"`
}

type Substitution_BoolValue struct {
	BoolValue bool `protobuf:"varint,12,opt,name=bool_value,json=boolValue,proto3,oneof"`
}

func (*Substitution_FunctionExpr) isSubstitution_Sub() {}

func (*Substitution_Variable) isSubstitution_Sub() {}

func (*Substitution_Value) isSubstitution_Sub() {}

func (*Substitution_Elem) isSubstitution_Sub() {}

func (*Substitution_ElemIndex) isSubstitution_Sub() {}

func (*Substitution_DataSourceProperty) isSubstitution_Sub() {}

func (*Substitution_ResourceProperty) isSubstitution_Sub() {}

func (*Substitution_Child) isSubstitution_Sub() {}

func (*Substitution_StringValue) isSubstitution_Sub() {}

func (*Substitution_IntValue) isSubstitution_Sub() {}

func (*Substitution_FloatValue) isSubstitution_Sub() {}

func (*Substitution_BoolValue) isSubstitution_Sub() {}

type SubstitutionFunctionExpr struct {
	state         protoimpl.MessageState     `protogen:"open.v1"`
	FunctionName  string                     `protobuf:"bytes,1,opt,name=function_name,json=functionName,proto3" json:"function_name,omitempty"`
	Arguments     []*SubstitutionFunctionArg `protobuf:"bytes,2,rep,name=arguments,proto3" json:"arguments,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubstitutionFunctionExpr) Reset() {
	*x = SubstitutionFunctionExpr{}
	mi := &file_schema_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubstitutionFunctionExpr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubstitutionFunctionExpr) ProtoMessage() {}

func (x *SubstitutionFunctionExpr) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubstitutionFunctionExpr.ProtoReflect.Descriptor instead.
func (*SubstitutionFunctionExpr) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{19}
}

func (x *SubstitutionFunctionExpr) GetFunctionName() string {
	if x != nil {
		return x.FunctionName
	}
	return ""
}

func (x *SubstitutionFunctionExpr) GetArguments() []*SubstitutionFunctionArg {
	if x != nil {
		return x.Arguments
	}
	return nil
}

type SubstitutionFunctionArg struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          *string                `protobuf:"bytes,1,opt,name=name,proto3,oneof" json:"name,omitempty"`
	Value         *Substitution          `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubstitutionFunctionArg) Reset() {
	*x = SubstitutionFunctionArg{}
	mi := &file_schema_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubstitutionFunctionArg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubstitutionFunctionArg) ProtoMessage() {}

func (x *SubstitutionFunctionArg) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubstitutionFunctionArg.ProtoReflect.Descriptor instead.
func (*SubstitutionFunctionArg) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{20}
}

func (x *SubstitutionFunctionArg) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *SubstitutionFunctionArg) GetValue() *Substitution {
	if x != nil {
		return x.Value
	}
	return nil
}

type SubstitutionVariable struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	VariableName  string                 `protobuf:"bytes,1,opt,name=variable_name,json=variableName,proto3" json:"variable_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubstitutionVariable) Reset() {
	*x = SubstitutionVariable{}
	mi := &file_schema_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubstitutionVariable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubstitutionVariable) ProtoMessage() {}

func (x *SubstitutionVariable) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubstitutionVariable.ProtoReflect.Descriptor instead.
func (*SubstitutionVariable) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{21}
}

func (x *SubstitutionVariable) GetVariableName() string {
	if x != nil {
		return x.VariableName
	}
	return ""
}

type SubstitutionValue struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	ValueName     string                  `protobuf:"bytes,1,opt,name=value_name,json=valueName,proto3" json:"value_name,omitempty"`
	Path          []*SubstitutionPathItem `protobuf:"bytes,2,rep,name=path,proto3" json:"path,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubstitutionValue) Reset() {
	*x = SubstitutionValue{}
	mi := &file_schema_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubstitutionValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubstitutionValue) ProtoMessage() {}

func (x *SubstitutionValue) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubstitutionValue.ProtoReflect.Descriptor instead.
func (*SubstitutionValue) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{22}
}

func (x *SubstitutionValue) GetValueName() string {
	if x != nil {
		return x.ValueName
	}
	return ""
}

func (x *SubstitutionValue) GetPath() []*SubstitutionPathItem {
	if x != nil {
		return x.Path
	}
	return nil
}

type SubstitutionElem struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Path          []*SubstitutionPathItem `protobuf:"bytes,1,rep,name=path,proto3" json:"path,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubstitutionElem) Reset() {
	*x = SubstitutionElem{}
	mi := &file_schema_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubstitutionElem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubstitutionElem) ProtoMessage() {}

func (x *SubstitutionElem) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubstitutionElem.ProtoReflect.Descriptor instead.
func (*SubstitutionElem) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{23}
}

func (x *SubstitutionElem) GetPath() []*SubstitutionPathItem {
	if x != nil {
		return x.Path
	}
	return nil
}

type SubstitutionElemIndex struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	IsIndex       bool                   `protobuf:"varint,1,opt,name=is_index,json=isIndex,proto3" json:"is_index,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubstitutionElemIndex) Reset() {
	*x = SubstitutionElemIndex{}
	mi := &file_schema_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubstitutionElemIndex) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubstitutionElemIndex) ProtoMessage() {}

func (x *SubstitutionElemIndex) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubstitutionElemIndex.ProtoReflect.Descriptor instead.
func (*SubstitutionElemIndex) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{24}
}

func (x *SubstitutionElemIndex) GetIsIndex() bool {
	if x != nil {
		return x.IsIndex
	}
	return false
}

type SubstitutionDataSourceProperty struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	DataSourceName    string                 `protobuf:"bytes,1,opt,name=data_source_name,json=dataSourceName,proto3" json:"data_source_name,omitempty"`
	FieldName         string                 `protobuf:"bytes,2,opt,name=field_name,json=fieldName,proto3" json:"field_name,omitempty"`
	PrimitiveArrIndex *int64                 `protobuf:"varint,3,opt,name=primitive_arr_index,json=primitiveArrIndex,proto3,oneof" json:"primitive_arr_index,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *SubstitutionDataSourceProperty) Reset() {
	*x = SubstitutionDataSourceProperty{}
	mi := &file_schema_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubstitutionDataSourceProperty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubstitutionDataSourceProperty) ProtoMessage() {}

func (x *SubstitutionDataSourceProperty) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubstitutionDataSourceProperty.ProtoReflect.Descriptor instead.
func (*SubstitutionDataSourceProperty) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{25}
}

func (x *SubstitutionDataSourceProperty) GetDataSourceName() string {
	if x != nil {
		return x.DataSourceName
	}
	return ""
}

func (x *SubstitutionDataSourceProperty) GetFieldName() string {
	if x != nil {
		return x.FieldName
	}
	return ""
}

func (x *SubstitutionDataSourceProperty) GetPrimitiveArrIndex() int64 {
	if x != nil && x.PrimitiveArrIndex != nil {
		return *x.PrimitiveArrIndex
	}
	return 0
}

type SubstitutionResourceProperty struct {
	state             protoimpl.MessageState  `protogen:"open.v1"`
	ResourceName      string                  `protobuf:"bytes,1,opt,name=resource_name,json=resourceName,proto3" json:"resource_name,omitempty"`
	EachTemplateIndex *int64                  `protobuf:"varint,2,opt,name=each_template_index,json=eachTemplateIndex,proto3,oneof" json:"each_template_index,omitempty"`
	Path              []*SubstitutionPathItem `protobuf:"bytes,3,rep,name=path,proto3" json:"path,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *SubstitutionResourceProperty) Reset() {
	*x = SubstitutionResourceProperty{}
	mi := &file_schema_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubstitutionResourceProperty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubstitutionResourceProperty) ProtoMessage() {}

func (x *SubstitutionResourceProperty) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubstitutionResourceProperty.ProtoReflect.Descriptor instead.
func (*SubstitutionResourceProperty) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{26}
}

func (x *SubstitutionResourceProperty) GetResourceName() string {
	if x != nil {
		return x.ResourceName
	}
	return ""
}

func (x *SubstitutionResourceProperty) GetEachTemplateIndex() int64 {
	if x != nil && x.EachTemplateIndex != nil {
		return *x.EachTemplateIndex
	}
	return 0
}

func (x *SubstitutionResourceProperty) GetPath() []*SubstitutionPathItem {
	if x != nil {
		return x.Path
	}
	return nil
}

type SubstitutionChild struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	ChildName     string                  `protobuf:"bytes,1,opt,name=child_name,json=childName,proto3" json:"child_name,omitempty"`
	Path          []*SubstitutionPathItem `protobuf:"bytes,3,rep,name=path,proto3" json:"path,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubstitutionChild) Reset() {
	*x = SubstitutionChild{}
	mi := &file_schema_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubstitutionChild) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubstitutionChild) ProtoMessage() {}

func (x *SubstitutionChild) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubstitutionChild.ProtoReflect.Descriptor instead.
func (*SubstitutionChild) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{27}
}

func (x *SubstitutionChild) GetChildName() string {
	if x != nil {
		return x.ChildName
	}
	return ""
}

func (x *SubstitutionChild) GetPath() []*SubstitutionPathItem {
	if x != nil {
		return x.Path
	}
	return nil
}

type SubstitutionPathItem struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Item:
	//
	//	*SubstitutionPathItem_FieldName
	//	*SubstitutionPathItem_ArrayIndex
	Item          isSubstitutionPathItem_Item `protobuf_oneof:"item"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubstitutionPathItem) Reset() {
	*x = SubstitutionPathItem{}
	mi := &file_schema_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubstitutionPathItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubstitutionPathItem) ProtoMessage() {}

func (x *SubstitutionPathItem) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubstitutionPathItem.ProtoReflect.Descriptor instead.
func (*SubstitutionPathItem) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{28}
}

func (x *SubstitutionPathItem) GetItem() isSubstitutionPathItem_Item {
	if x != nil {
		return x.Item
	}
	return nil
}

func (x *SubstitutionPathItem) GetFieldName() string {
	if x != nil {
		if x, ok := x.Item.(*SubstitutionPathItem_FieldName); ok {
			return x.FieldName
		}
	}
	return ""
}

func (x *SubstitutionPathItem) GetArrayIndex() int64 {
	if x != nil {
		if x, ok := x.Item.(*SubstitutionPathItem_ArrayIndex); ok {
			return x.ArrayIndex
		}
	}
	return 0
}

type isSubstitutionPathItem_Item interface {
	isSubstitutionPathItem_Item()
}

type SubstitutionPathItem_FieldName struct {
	FieldName string `protobuf:"bytes,1,opt,name=field_name,json=fieldName,proto3,oneof"`
}

type SubstitutionPathItem_ArrayIndex struct {
	ArrayIndex int64 `protobuf:"varint,2,opt,name=array_index,json=arrayIndex,proto3,oneof"`
}

func (*SubstitutionPathItem_FieldName) isSubstitutionPathItem_Item() {}

func (*SubstitutionPathItem_ArrayIndex) isSubstitutionPathItem_Item() {}

var File_schema_proto protoreflect.FileDescriptor

var file_schema_proto_rawDesc = string([]byte{
	0x0a, 0x0c, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x22, 0xe4, 0x07, 0x0a, 0x09, 0x42, 0x6c, 0x75, 0x65, 0x70,
	0x72, 0x69, 0x6e, 0x74, 0x12, 0x2d, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x53,
	0x63, 0x61, 0x6c, 0x61, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72,
	0x6d, 0x12, 0x3e, 0x0a, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x42, 0x6c,
	0x75, 0x65, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65,
	0x73, 0x12, 0x35, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x42, 0x6c, 0x75, 0x65, 0x70,
	0x72, 0x69, 0x6e, 0x74, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x07, 0x69, 0x6e, 0x63, 0x6c,
	0x75, 0x64, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x2e, 0x42, 0x6c, 0x75, 0x65, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x2e, 0x49, 0x6e, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x69, 0x6e, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x12, 0x3e, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x42,
	0x6c, 0x75, 0x65, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x12, 0x45, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x2e, 0x42, 0x6c, 0x75, 0x65, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x2e, 0x44, 0x61, 0x74, 0x61,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x64, 0x61,
	0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x07, 0x65, 0x78, 0x70,
	0x6f, 0x72, 0x74, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x2e, 0x42, 0x6c, 0x75, 0x65, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x2e, 0x45, 0x78,
	0x70, 0x6f, 0x72, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x65, 0x78, 0x70, 0x6f,
	0x72, 0x74, 0x73, 0x12, 0x34, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x4d,
	0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x88, 0x01, 0x01, 0x1a, 0x4e, 0x0a, 0x0e, 0x56, 0x61, 0x72,
	0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x26, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x48, 0x0a, 0x0b, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x23, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x4b, 0x0a, 0x0c, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x25, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x49, 0x6e,
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x4e, 0x0a, 0x0e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x26, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x52, 0x0a, 0x10, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x28, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x44,
	0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x4a, 0x0a, 0x0c, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x24, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x45,
	0x78, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x9d, 0x01,
	0x0a, 0x06, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x29, 0x0a, 0x05,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x44, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4f, 0x72, 0x53, 0x75,
	0x62, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x00, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x82, 0x02,
	0x0a, 0x08, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3a,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x53, 0x63, 0x61,
	0x6c, 0x61, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x06, 0x73, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x2d, 0x0a, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x3a, 0x0a, 0x0e, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65,
	0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0d, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0xc9, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x29, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67,
	0x4e, 0x6f, 0x64, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x44, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x4f, 0x72, 0x53, 0x75, 0x62, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48,
	0x00, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01,
	0x01, 0x12, 0x2b, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x61,
	0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x9e,
	0x01, 0x0a, 0x0b, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1d,
	0x0a, 0x09, 0x69, 0x6e, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x48, 0x00, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1f, 0x0a,
	0x0a, 0x62, 0x6f, 0x6f, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x00, 0x52, 0x09, 0x62, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x21,
	0x0a, 0x0b, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x23, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0xf6, 0x01, 0x0a, 0x07, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x12, 0x31, 0x0a, 0x04, 0x70,
	0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4f, 0x72, 0x53, 0x75, 0x62, 0x73, 0x74,
	0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x31,
	0x0a, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x4d, 0x61, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65,
	0x73, 0x12, 0x2f, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x4d, 0x61, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x44, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4f, 0x72, 0x53, 0x75, 0x62, 0x73, 0x74, 0x69, 0x74,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x00, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xd1, 0x03, 0x0a, 0x08, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x44, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4f, 0x72,
	0x53, 0x75, 0x62, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x00, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12,
	0x34, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x73,
	0x5f, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x64, 0x65, 0x70, 0x65, 0x6e,
	0x64, 0x73, 0x4f, 0x6e, 0x12, 0x3c, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x01, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x88,
	0x01, 0x01, 0x12, 0x36, 0x0a, 0x04, 0x65, 0x61, 0x63, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x4f, 0x72, 0x53, 0x75, 0x62, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48,
	0x02, 0x52, 0x04, 0x65, 0x61, 0x63, 0x68, 0x88, 0x01, 0x01, 0x12, 0x3e, 0x0a, 0x0d, 0x6c, 0x69,
	0x6e, 0x6b, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x48, 0x03, 0x52, 0x0c, 0x6c, 0x69, 0x6e, 0x6b, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x04, 0x73, 0x70,
	0x65, 0x63, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x2e, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x73,
	0x70, 0x65, 0x63, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x65, 0x61, 0x63, 0x68, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6c,
	0x69, 0x6e, 0x6b, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x22, 0x88, 0x01, 0x0a,
	0x0c, 0x4c, 0x69, 0x6e, 0x6b, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x3c, 0x0a,
	0x08, 0x62, 0x79, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x42, 0x79, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x07, 0x62, 0x79, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x1a, 0x3a, 0x0a, 0x0c, 0x42,
	0x79, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xcc, 0x03, 0x0a, 0x10, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x45, 0x0a, 0x0c,
	0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x4f, 0x72, 0x53, 0x75, 0x62, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x48, 0x00, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x4b, 0x0a, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x3c, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x30,
	0x0a, 0x06, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x4e,
	0x6f, 0x64, 0x65, 0x48, 0x01, 0x52, 0x06, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x88, 0x01, 0x01,
	0x1a, 0x5d, 0x0a, 0x10, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x33, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x4f, 0x72, 0x53, 0x75, 0x62, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x64,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x22, 0xda, 0x01, 0x0a, 0x11, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x0c,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x4f, 0x72, 0x53, 0x75, 0x62, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b,
	0x0a, 0x03, 0x61, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x03, 0x61, 0x6e, 0x64, 0x12, 0x29, 0x0a, 0x02, 0x6f,
	0x72, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x02, 0x6f, 0x72, 0x12, 0x2b, 0x0a, 0x03, 0x6e, 0x6f, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x03,
	0x6e, 0x6f, 0x74, 0x22, 0xa2, 0x03, 0x0a, 0x0a, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x36, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x30,
	0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x12, 0x2a, 0x0a, 0x11, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x65, 0x78, 0x70,
	0x6f, 0x72, 0x74, 0x41, 0x6c, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x39, 0x0a, 0x07,
	0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07,
	0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x44, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4f, 0x72, 0x53, 0x75,
	0x62, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x00, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x1a, 0x59, 0x0a,
	0x0c, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x33, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xd7, 0x02, 0x0a, 0x12, 0x44, 0x61, 0x74,
	0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x45, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x4f, 0x72, 0x53, 0x75, 0x62, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x48, 0x00, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x4d, 0x0a, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x30, 0x0a, 0x06, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x4d,
	0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x01, 0x52, 0x06, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x88, 0x01, 0x01, 0x1a, 0x5d, 0x0a, 0x10, 0x41, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x33, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4f, 0x72, 0x53, 0x75,
	0x62, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x22, 0x91, 0x01, 0x0a, 0x10, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e,
	0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x36,
	0x0a, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x06,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x22, 0x4f, 0x0a, 0x16, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x12, 0x35, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x4f, 0x72, 0x53, 0x75, 0x62, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0xb3, 0x01, 0x0a, 0x15, 0x44, 0x61, 0x74, 0x61,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x45, 0x78, 0x70, 0x6f, 0x72,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x09, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x5f, 0x66,
	0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x61,
	0x6c, 0x69, 0x61, 0x73, 0x46, 0x6f, 0x72, 0x12, 0x44, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4f, 0x72, 0x53, 0x75,
	0x62, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x00, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xc9, 0x02,
	0x0a, 0x0b, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x2b, 0x0a,
	0x06, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x06, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x12, 0x37, 0x0a, 0x06, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x2e, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x64, 0x65, 0x2e,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x12, 0x29, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x4d, 0x61, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x59,
	0x0a, 0x19, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x73, 0x75,
	0x62, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x4f, 0x72, 0x53, 0x75, 0x62, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x17, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x57, 0x69, 0x74, 0x68, 0x53, 0x75, 0x62, 0x73,
	0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x4e, 0x0a, 0x0b, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x29, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x2e, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x4d, 0x0a, 0x15, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x4f, 0x72, 0x53, 0x75, 0x62, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x34, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x4f, 0x72, 0x53, 0x75, 0x62, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x8b, 0x01, 0x0a, 0x14, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x4f, 0x72, 0x53, 0x75, 0x62, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x23, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x45, 0x0a, 0x12, 0x73, 0x75, 0x62, 0x73, 0x74, 0x69,
	0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x53, 0x75, 0x62, 0x73,
	0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x11, 0x73, 0x75, 0x62, 0x73,
	0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x07, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xa9, 0x05, 0x0a, 0x0c, 0x53, 0x75, 0x62, 0x73, 0x74,
	0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x47, 0x0a, 0x0d, 0x66, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x74, 0x69, 0x74, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x72,
	0x48, 0x00, 0x52, 0x0c, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x72,
	0x12, 0x3a, 0x0a, 0x08, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x53, 0x75, 0x62, 0x73,
	0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65,
	0x48, 0x00, 0x52, 0x08, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x31, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x2e, 0x0a, 0x04, 0x65, 0x6c, 0x65, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x45, 0x6c, 0x65, 0x6d, 0x48, 0x00, 0x52, 0x04, 0x65, 0x6c, 0x65, 0x6d, 0x12,
	0x3e, 0x0a, 0x0a, 0x65, 0x6c, 0x65, 0x6d, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x53, 0x75, 0x62,
	0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6c, 0x65, 0x6d, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x48, 0x00, 0x52, 0x09, 0x65, 0x6c, 0x65, 0x6d, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x5a, 0x0a, 0x14, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x70,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x79, 0x48, 0x00, 0x52, 0x12, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12, 0x53, 0x0a, 0x11, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e,
	0x53, 0x75, 0x62, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x48, 0x00, 0x52, 0x10,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79,
	0x12, 0x31, 0x0a, 0x05, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x74, 0x69, 0x74,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x48, 0x00, 0x52, 0x05, 0x63, 0x68,
	0x69, 0x6c, 0x64, 0x12, 0x23, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1d, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x08, 0x69,
	0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x21, 0x0a, 0x0b, 0x66, 0x6c, 0x6f, 0x61, 0x74,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x0a,
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1f, 0x0a, 0x0a, 0x62, 0x6f,
	0x6f, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00,
	0x52, 0x09, 0x62, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x05, 0x0a, 0x03, 0x73,
	0x75, 0x62, 0x22, 0x7e, 0x0a, 0x18, 0x53, 0x75, 0x62, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x72, 0x12, 0x23,
	0x0a, 0x0d, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x09, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e,
	0x53, 0x75, 0x62, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x41, 0x72, 0x67, 0x52, 0x09, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x22, 0x67, 0x0a, 0x17, 0x53, 0x75, 0x62, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x72, 0x67, 0x12, 0x17, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x53,
	0x75, 0x62, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x3b, 0x0a, 0x14, 0x53,
	0x75, 0x62, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x72, 0x69, 0x61,
	0x62, 0x6c, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x76, 0x61, 0x72, 0x69,
	0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x64, 0x0a, 0x11, 0x53, 0x75, 0x62, 0x73,
	0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x04,
	0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x61, 0x74, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x22, 0x44,
	0x0a, 0x10, 0x53, 0x75, 0x62, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6c,
	0x65, 0x6d, 0x12, 0x30, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x74, 0x69,
	0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x04,
	0x70, 0x61, 0x74, 0x68, 0x22, 0x32, 0x0a, 0x15, 0x53, 0x75, 0x62, 0x73, 0x74, 0x69, 0x74, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6c, 0x65, 0x6d, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x19, 0x0a,
	0x08, 0x69, 0x73, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x69, 0x73, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0xb6, 0x01, 0x0a, 0x1e, 0x53, 0x75, 0x62,
	0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12, 0x28, 0x0a, 0x10, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x13, 0x70, 0x72, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x76,
	0x65, 0x5f, 0x61, 0x72, 0x72, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x48, 0x00, 0x52, 0x11, 0x70, 0x72, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x76, 0x65, 0x41, 0x72,
	0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x88, 0x01, 0x01, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x70, 0x72,
	0x69, 0x6d, 0x69, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x61, 0x72, 0x72, 0x5f, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x22, 0xc2, 0x01, 0x0a, 0x1c, 0x53, 0x75, 0x62, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x13, 0x65, 0x61, 0x63, 0x68, 0x5f,
	0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x11, 0x65, 0x61, 0x63, 0x68, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x04,
	0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x61, 0x74, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x42, 0x16,
	0x0a, 0x14, 0x5f, 0x65, 0x61, 0x63, 0x68, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x64, 0x0a, 0x11, 0x53, 0x75, 0x62, 0x73, 0x74, 0x69,
	0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x68, 0x69, 0x6c, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x04, 0x70, 0x61,
	0x74, 0x68, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61,
	0x74, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x22, 0x62, 0x0a, 0x14,
	0x53, 0x75, 0x62, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x74, 0x68,
	0x49, 0x74, 0x65, 0x6d, 0x12, 0x1f, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0b, 0x61, 0x72, 0x72, 0x61, 0x79, 0x5f, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x0a, 0x61, 0x72,
	0x72, 0x61, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x42, 0x06, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d,
	0x42, 0x3c, 0x5a, 0x3a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6e,
	0x65, 0x77, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x63, 0x65,
	0x6c, 0x65, 0x72, 0x69, 0x74, 0x79, 0x2f, 0x6c, 0x69, 0x62, 0x73, 0x2f, 0x62, 0x6c, 0x75, 0x65,
	0x70, 0x72, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x70, 0x62, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_schema_proto_rawDescOnce sync.Once
	file_schema_proto_rawDescData []byte
)

func file_schema_proto_rawDescGZIP() []byte {
	file_schema_proto_rawDescOnce.Do(func() {
		file_schema_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_schema_proto_rawDesc), len(file_schema_proto_rawDesc)))
	})
	return file_schema_proto_rawDescData
}

var file_schema_proto_msgTypes = make([]protoimpl.MessageInfo, 41)
var file_schema_proto_goTypes = []any{
	(*Blueprint)(nil),                      // 0: schema.Blueprint
	(*Export)(nil),                         // 1: schema.Export
	(*Variable)(nil),                       // 2: schema.Variable
	(*Value)(nil),                          // 3: schema.Value
	(*ScalarValue)(nil),                    // 4: schema.ScalarValue
	(*Include)(nil),                        // 5: schema.Include
	(*Resource)(nil),                       // 6: schema.Resource
	(*LinkSelector)(nil),                   // 7: schema.LinkSelector
	(*ResourceMetadata)(nil),               // 8: schema.ResourceMetadata
	(*ResourceCondition)(nil),              // 9: schema.ResourceCondition
	(*DataSource)(nil),                     // 10: schema.DataSource
	(*DataSourceMetadata)(nil),             // 11: schema.DataSourceMetadata
	(*DataSourceFilter)(nil),               // 12: schema.DataSourceFilter
	(*DataSourceFilterSearch)(nil),         // 13: schema.DataSourceFilterSearch
	(*DataSourceFieldExport)(nil),          // 14: schema.DataSourceFieldExport
	(*MappingNode)(nil),                    // 15: schema.MappingNode
	(*StringOrSubstitutions)(nil),          // 16: schema.StringOrSubstitutions
	(*StringOrSubstitution)(nil),           // 17: schema.StringOrSubstitution
	(*Substitution)(nil),                   // 18: schema.Substitution
	(*SubstitutionFunctionExpr)(nil),       // 19: schema.SubstitutionFunctionExpr
	(*SubstitutionFunctionArg)(nil),        // 20: schema.SubstitutionFunctionArg
	(*SubstitutionVariable)(nil),           // 21: schema.SubstitutionVariable
	(*SubstitutionValue)(nil),              // 22: schema.SubstitutionValue
	(*SubstitutionElem)(nil),               // 23: schema.SubstitutionElem
	(*SubstitutionElemIndex)(nil),          // 24: schema.SubstitutionElemIndex
	(*SubstitutionDataSourceProperty)(nil), // 25: schema.SubstitutionDataSourceProperty
	(*SubstitutionResourceProperty)(nil),   // 26: schema.SubstitutionResourceProperty
	(*SubstitutionChild)(nil),              // 27: schema.SubstitutionChild
	(*SubstitutionPathItem)(nil),           // 28: schema.SubstitutionPathItem
	nil,                                    // 29: schema.Blueprint.VariablesEntry
	nil,                                    // 30: schema.Blueprint.ValuesEntry
	nil,                                    // 31: schema.Blueprint.IncludeEntry
	nil,                                    // 32: schema.Blueprint.ResourcesEntry
	nil,                                    // 33: schema.Blueprint.DataSourcesEntry
	nil,                                    // 34: schema.Blueprint.ExportsEntry
	nil,                                    // 35: schema.LinkSelector.ByLabelEntry
	nil,                                    // 36: schema.ResourceMetadata.AnnotationsEntry
	nil,                                    // 37: schema.ResourceMetadata.LabelsEntry
	nil,                                    // 38: schema.DataSource.ExportsEntry
	nil,                                    // 39: schema.DataSourceMetadata.AnnotationsEntry
	nil,                                    // 40: schema.MappingNode.FieldsEntry
}
var file_schema_proto_depIdxs = []int32{
	4,  // 0: schema.Blueprint.version:type_name -> schema.ScalarValue
	29, // 1: schema.Blueprint.variables:type_name -> schema.Blueprint.VariablesEntry
	30, // 2: schema.Blueprint.values:type_name -> schema.Blueprint.ValuesEntry
	31, // 3: schema.Blueprint.include:type_name -> schema.Blueprint.IncludeEntry
	32, // 4: schema.Blueprint.resources:type_name -> schema.Blueprint.ResourcesEntry
	33, // 5: schema.Blueprint.data_sources:type_name -> schema.Blueprint.DataSourcesEntry
	34, // 6: schema.Blueprint.exports:type_name -> schema.Blueprint.ExportsEntry
	15, // 7: schema.Blueprint.metadata:type_name -> schema.MappingNode
	4,  // 8: schema.Export.field:type_name -> schema.ScalarValue
	16, // 9: schema.Export.description:type_name -> schema.StringOrSubstitutions
	4,  // 10: schema.Variable.description:type_name -> schema.ScalarValue
	4,  // 11: schema.Variable.secret:type_name -> schema.ScalarValue
	4,  // 12: schema.Variable.default:type_name -> schema.ScalarValue
	4,  // 13: schema.Variable.allowed_values:type_name -> schema.ScalarValue
	15, // 14: schema.Value.value:type_name -> schema.MappingNode
	16, // 15: schema.Value.description:type_name -> schema.StringOrSubstitutions
	4,  // 16: schema.Value.secret:type_name -> schema.ScalarValue
	16, // 17: schema.Include.path:type_name -> schema.StringOrSubstitutions
	15, // 18: schema.Include.variables:type_name -> schema.MappingNode
	15, // 19: schema.Include.metadata:type_name -> schema.MappingNode
	16, // 20: schema.Include.description:type_name -> schema.StringOrSubstitutions
	16, // 21: schema.Resource.description:type_name -> schema.StringOrSubstitutions
	8,  // 22: schema.Resource.metadata:type_name -> schema.ResourceMetadata
	9,  // 23: schema.Resource.condition:type_name -> schema.ResourceCondition
	16, // 24: schema.Resource.each:type_name -> schema.StringOrSubstitutions
	7,  // 25: schema.Resource.link_selector:type_name -> schema.LinkSelector
	15, // 26: schema.Resource.spec:type_name -> schema.MappingNode
	35, // 27: schema.LinkSelector.by_label:type_name -> schema.LinkSelector.ByLabelEntry
	16, // 28: schema.ResourceMetadata.display_name:type_name -> schema.StringOrSubstitutions
	36, // 29: schema.ResourceMetadata.annotations:type_name -> schema.ResourceMetadata.AnnotationsEntry
	37, // 30: schema.ResourceMetadata.labels:type_name -> schema.ResourceMetadata.LabelsEntry
	15, // 31: schema.ResourceMetadata.custom:type_name -> schema.MappingNode
	16, // 32: schema.ResourceCondition.string_value:type_name -> schema.StringOrSubstitutions
	9,  // 33: schema.ResourceCondition.and:type_name -> schema.ResourceCondition
	9,  // 34: schema.ResourceCondition.or:type_name -> schema.ResourceCondition
	9,  // 35: schema.ResourceCondition.not:type_name -> schema.ResourceCondition
	11, // 36: schema.DataSource.metadata:type_name -> schema.DataSourceMetadata
	12, // 37: schema.DataSource.filter:type_name -> schema.DataSourceFilter
	38, // 38: schema.DataSource.exports:type_name -> schema.DataSource.ExportsEntry
	16, // 39: schema.DataSource.description:type_name -> schema.StringOrSubstitutions
	16, // 40: schema.DataSourceMetadata.display_name:type_name -> schema.StringOrSubstitutions
	39, // 41: schema.DataSourceMetadata.annotations:type_name -> schema.DataSourceMetadata.AnnotationsEntry
	15, // 42: schema.DataSourceMetadata.custom:type_name -> schema.MappingNode
	4,  // 43: schema.DataSourceFilter.field:type_name -> schema.ScalarValue
	13, // 44: schema.DataSourceFilter.search:type_name -> schema.DataSourceFilterSearch
	16, // 45: schema.DataSourceFilterSearch.values:type_name -> schema.StringOrSubstitutions
	4,  // 46: schema.DataSourceFieldExport.alias_for:type_name -> schema.ScalarValue
	16, // 47: schema.DataSourceFieldExport.description:type_name -> schema.StringOrSubstitutions
	4,  // 48: schema.MappingNode.scalar:type_name -> schema.ScalarValue
	40, // 49: schema.MappingNode.fields:type_name -> schema.MappingNode.FieldsEntry
	15, // 50: schema.MappingNode.items:type_name -> schema.MappingNode
	16, // 51: schema.MappingNode.string_with_substitutions:type_name -> schema.StringOrSubstitutions
	17, // 52: schema.StringOrSubstitutions.values:type_name -> schema.StringOrSubstitution
	18, // 53: schema.StringOrSubstitution.substitution_value:type_name -> schema.Substitution
	19, // 54: schema.Substitution.function_expr:type_name -> schema.SubstitutionFunctionExpr
	21, // 55: schema.Substitution.variable:type_name -> schema.SubstitutionVariable
	22, // 56: schema.Substitution.value:type_name -> schema.SubstitutionValue
	23, // 57: schema.Substitution.elem:type_name -> schema.SubstitutionElem
	24, // 58: schema.Substitution.elem_index:type_name -> schema.SubstitutionElemIndex
	25, // 59: schema.Substitution.data_source_property:type_name -> schema.SubstitutionDataSourceProperty
	26, // 60: schema.Substitution.resource_property:type_name -> schema.SubstitutionResourceProperty
	27, // 61: schema.Substitution.child:type_name -> schema.SubstitutionChild
	20, // 62: schema.SubstitutionFunctionExpr.arguments:type_name -> schema.SubstitutionFunctionArg
	18, // 63: schema.SubstitutionFunctionArg.value:type_name -> schema.Substitution
	28, // 64: schema.SubstitutionValue.path:type_name -> schema.SubstitutionPathItem
	28, // 65: schema.SubstitutionElem.path:type_name -> schema.SubstitutionPathItem
	28, // 66: schema.SubstitutionResourceProperty.path:type_name -> schema.SubstitutionPathItem
	28, // 67: schema.SubstitutionChild.path:type_name -> schema.SubstitutionPathItem
	2,  // 68: schema.Blueprint.VariablesEntry.value:type_name -> schema.Variable
	3,  // 69: schema.Blueprint.ValuesEntry.value:type_name -> schema.Value
	5,  // 70: schema.Blueprint.IncludeEntry.value:type_name -> schema.Include
	6,  // 71: schema.Blueprint.ResourcesEntry.value:type_name -> schema.Resource
	10, // 72: schema.Blueprint.DataSourcesEntry.value:type_name -> schema.DataSource
	1,  // 73: schema.Blueprint.ExportsEntry.value:type_name -> schema.Export
	16, // 74: schema.ResourceMetadata.AnnotationsEntry.value:type_name -> schema.StringOrSubstitutions
	14, // 75: schema.DataSource.ExportsEntry.value:type_name -> schema.DataSourceFieldExport
	16, // 76: schema.DataSourceMetadata.AnnotationsEntry.value:type_name -> schema.StringOrSubstitutions
	15, // 77: schema.MappingNode.FieldsEntry.value:type_name -> schema.MappingNode
	78, // [78:78] is the sub-list for method output_type
	78, // [78:78] is the sub-list for method input_type
	78, // [78:78] is the sub-list for extension type_name
	78, // [78:78] is the sub-list for extension extendee
	0,  // [0:78] is the sub-list for field type_name
}

func init() { file_schema_proto_init() }
func file_schema_proto_init() {
	if File_schema_proto != nil {
		return
	}
	file_schema_proto_msgTypes[0].OneofWrappers = []any{}
	file_schema_proto_msgTypes[1].OneofWrappers = []any{}
	file_schema_proto_msgTypes[2].OneofWrappers = []any{}
	file_schema_proto_msgTypes[3].OneofWrappers = []any{}
	file_schema_proto_msgTypes[4].OneofWrappers = []any{
		(*ScalarValue_IntValue)(nil),
		(*ScalarValue_BoolValue)(nil),
		(*ScalarValue_FloatValue)(nil),
		(*ScalarValue_StringValue)(nil),
	}
	file_schema_proto_msgTypes[5].OneofWrappers = []any{}
	file_schema_proto_msgTypes[6].OneofWrappers = []any{}
	file_schema_proto_msgTypes[8].OneofWrappers = []any{}
	file_schema_proto_msgTypes[10].OneofWrappers = []any{}
	file_schema_proto_msgTypes[11].OneofWrappers = []any{}
	file_schema_proto_msgTypes[14].OneofWrappers = []any{}
	file_schema_proto_msgTypes[17].OneofWrappers = []any{
		(*StringOrSubstitution_StringValue)(nil),
		(*StringOrSubstitution_SubstitutionValue)(nil),
	}
	file_schema_proto_msgTypes[18].OneofWrappers = []any{
		(*Substitution_FunctionExpr)(nil),
		(*Substitution_Variable)(nil),
		(*Substitution_Value)(nil),
		(*Substitution_Elem)(nil),
		(*Substitution_ElemIndex)(nil),
		(*Substitution_DataSourceProperty)(nil),
		(*Substitution_ResourceProperty)(nil),
		(*Substitution_Child)(nil),
		(*Substitution_StringValue)(nil),
		(*Substitution_IntValue)(nil),
		(*Substitution_FloatValue)(nil),
		(*Substitution_BoolValue)(nil),
	}
	file_schema_proto_msgTypes[20].OneofWrappers = []any{}
	file_schema_proto_msgTypes[25].OneofWrappers = []any{}
	file_schema_proto_msgTypes[26].OneofWrappers = []any{}
	file_schema_proto_msgTypes[28].OneofWrappers = []any{
		(*SubstitutionPathItem_FieldName)(nil),
		(*SubstitutionPathItem_ArrayIndex)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_schema_proto_rawDesc), len(file_schema_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   41,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_schema_proto_goTypes,
		DependencyIndexes: file_schema_proto_depIdxs,
		MessageInfos:      file_schema_proto_msgTypes,
	}.Build()
	File_schema_proto = out.File
	file_schema_proto_goTypes = nil
	file_schema_proto_depIdxs = nil
}
