openapi: 3.1.0
info:
  title: Workflow Local Runtime API
  description: |-
    This is the HTTP API that allows a handlers executable to retrieve workflow state trigger messages for a workflow and send responses to the runtime when running in `http` mode for handlers written in ahead-of-time compiled languages.

    This API is designed for inter-process communication within an isolated environment such as a container or VM that must **not** be exposed to the outside world.
  version: 1.0.0
tags:
  - name: events
    description: Endpoints for retrieving and processing messages received by the runtime.
  - name: runtime
    description: Runtime-specific endpoints for tasks like retrieving configuration for the current workflow application.

paths:
  /events/next:
    post:
      tags:
        - events
      summary: Retrieves the next event received by the runtime.
      description: |
        Retrieves the next available message received by the runtime.
        An event is a trigger message to execute a handler for a specific `executeStep` state type in a workflow, this will contain the input payload for the handler along with additional metadata.

        Retrieving the next event will consume it from the runtime queue and move it into a "processing" status immediately,
        on receiving a result for the event it will be removed completely.

        If a deadline is exceeded while waiting for a result,
        a timeout error will be returned to the caller of the runtime in the appropriate form and the event will be removed.
        Retry behaviour is expected to be configured in the workflow.

      operationId: takeNextEvent
      responses:
        "200":
          description: |
            The next available event in the queue received by the runtime.
            This will return `null` if there are currently no events to process.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Event"
        "500":
          description: |
            A server error occurred when trying to retrieve next event.
          content:
            applicatoin/json:
              schema:
                $ref: "#/components/schemas/ServerErrorResponse"

  /events/result:
    post:
      tags:
        - events
      summary: Send a result of processing an event.
      description: |
        Send a result of processing an event.
        This should be used to return the output of the step that will be used as the input for the next state in the workflow.

        Upon receiving a result, the event will be removed from the runtime's in-memory queue.

      operationId: postResult
      requestBody:
        $ref: "#/requestBodies/EventResultBody"
      responses:
        "200":
          description: |
            The event result has been successfully processed,
            meaning the workflow has moved on to the next state without any issues.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EventResultResponse"
        "404":
          description: |
            The event with the provided ID was not found in the runtime.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EventNotFoundErrorResponse"
        "500":
          description: |
            A server error occurred when trying to process the event result.
          content:
            applicatoin/json:
              schema:
                $ref: "#/components/schemas/ServerErrorResponse"

  /runtime/config:
    get:
      tags:
        - runtime
      summary: Retrieves runtime configuration including the handler definitions for the current application.
      description: |
        Retrieves runtime configuration for the current application.
        The primary use case for this endpoint is to allow the handlers executable to retrieve during initialisation.
        The config contains the handler definitions including the `handlerTag` that can be used to wire up handlers to be trigerred on a matching handlerTag for events retrieved from the runtime queue.
      responses:
        "200":
          description: |
            The runtime configuration for the current application.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RuntimeConfigurationResponse"
        "500":
          description: |
            A server error occurred when trying to retrieve runtime configuration.
          content:
            applicatoin/json:
              schema:
                $ref: "#/components/schemas/ServerErrorResponse"

requestBodies:
  EventResultBody:
    content:
      application/json:
        schema:
          type: object
          required: ["eventId", "data"]
          properties:
            eventId:
              type: string
              format: uuid
              description: |
                The unique identifier of the event that the result is for.
            data:
              oneOf:
                - $ref: "#/components/schemas/ExecuteStepEventResultPayload"
            context:
              type: object
              description: |
                Extra context that can provide additional information to the runtime in determining how to proceed with the result.
              additionalProperties: true

components:
  schemas:
    RuntimeConfigurationResponse:
      type: object
      required: ["appConfig"]
      properties:
        appConfig:
          $ref: "#/components/schemas/ApplicationConfiguration"

    ApplicationConfiguration:
      type: object
      required:
        - tracingEnabled
      properties:
        tracingEnabled:
          type: boolean
          description: Whether or not tracing is enabled at the application level.
        workflow:
          $ref: "#/components/schemas/WorkflowConfiguration"

    WorkflowConfiguration:
      type: object
      required:
        - handlers
      properties:
        handlers:
          type: array
          items:
            $ref: "#/components/schemas/WorkflowHandlerConfiguration"

    WorkflowHandlerConfiguration:
      type: object
      required:
        - handlerName
        - handlerTag
        - state
        - timeout
        - tracingEnabled
      properties:
        handlerName:
          type: string
          description: The unique name of the handler in this application.
          examples: ["ProcessDocument-v1"]
        handlerTag:
          type: string
          description: |
            The unique tag assigned to the handler derived from the workflow state that triggers the handler.
          examples: ["state::processDocument"]
        state:
          type: string
          examples: ["processDocument"]
        timeout:
          type: integer
          description: The maximum time in seconds that the handler is allowed to run.
        tracingEnabled:
          type: boolean
          description: Whether or not tracing is enabled for the handler.

    ExecuteStepEventResultPayload:
      type: object
      additionalProperties: true

    Event:
      type: object
      required: ["id", "event", "handlerTag", "timestamp", "data"]
      properties:
        id:
          type: string
          format: uuid
          description: |
            The unique identifier of the event assigned by the runtime.
        eventType:
          type: string
          description: |
            The type of event.
            The only supported event type is `executeStep`.
          enum:
            - executeStep
          examples: ["executeStep"]
        handlerTag:
          type: string
          description: |
            A unique tag for the handler that should process this message. This is determined at startup where the runtime assigns and returns tags for specific handlers during handler initialisation. This allows the handler executable to do a simple lookup by string instead of using the event data to figure out which handler should be called.
          examples: ["state::processDocument"]
        timestamp:
          type: number
          description: The unix timestamp in seconds for when the event was received.
          examples: [1715045992]
        data:
          type: object
          description: An object containing the event data.
          oneOf:
            - $ref: "#/components/schemas/ExecuteStepEventData"
        context:
          type: object
          description: |
            Shared context for the current environment.
          additionalProperties: true

    EventResultResponse:
      type: object
      required:
        - message
      properties:
        message:
          type: string
          examples: ["The result has been successfully processed"]

    ExecuteStepEventData:
      type: object
      additionalProperties: true

    ServerErrorResponse:
      type: object
      properties:
        message:
          type: string
          examples: ["An unexpected error occurred"]

    EventNotFoundErrorResponse:
      type: object
      properties:
        message:
          type: string
          examples: ["Event with provided ID was not found"]
