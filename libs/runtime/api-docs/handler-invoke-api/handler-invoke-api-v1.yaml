openapi: 3.1.0
info:
  title: Handler Invoke API
  description: |-
    This is the HTTP API that allows direct invocation
    of handlers running in the Celerity runtime.

    This API is designed for testing and debugging purposes in local development environments. This must **not** be enabled in production environments.
  version: 1.0.0

paths:
  /runtime/handlers/invoke:
    post:
      summary: Invoke a handler
      description: |
        Allows direct invocation of Celerity handler running in the Celerity runtime.

        This endpoint is useful for local testing allowing developers to bypass API or queue layers that trigger handlers.
      operationId: invokeHandler
      requestBody:
        $ref: "#/requestBodies/InvokeHandlerBody"
      responses:
        "200":
          description: |
            The response from the handler.
            For the `requestResponse` invocation type, this would be the response returned after the handler has completed processing.
            For the `async` invocation type, this an object with a message indicating that the handler has been invoked.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvokeHandlerResponse"
        "400":
          description: |
            Invalid request parameters provided in payload, most likely an unsupported `invocationType`.
          content:
            applicatoin/json:
              schema:
                $ref: "#/components/schemas/BadRequestResponse"
        "404":
          description: |
            The handler could not be found in the current runtime.
          content:
            applicatoin/json:
              schema:
                $ref: "#/components/schemas/NotFoundResponse"
        "500":
          description: |
            A server error occurred when trying to retrieve next event.
          content:
            applicatoin/json:
              schema:
                $ref: "#/components/schemas/ServerErrorResponse"

requestBodies:
  InvokeHandlerBody:
    content:
      application/json:
        schema:
          type: object
          required:
            - handlerName
            - invocationType
          properties:
            handlerName:
              type: string
              description: The unique name for the handler as defined in the `spec.handlerName` field of a handler definition in a blueprint specification.
              examples: ["Orders-GetOrder-v1"]
            invocationType:
              type: string
              description: |
                The type of invocation, can be one of `requestResponse` or `async`.
                Use `requestResponse` to wait for the handler to complete and return a response and `async` to return immediately without waiting for a response.
              enum:
                - requestResponse
                - async

components:
  schemas:
    InvokeHandlerResponse:
      type: object
      required:
        - message
      properties:
        message:
          type: string
          description: A message indicating that the handler has been invoked.
          examples: ["The handler has been invoked"]
        data:
          type: string
          description: |
            An optional string containing the response data returned from the invoked handler.
            In most cases this will be a serialised JSON object.
          examples:
            - "{\"status\":200,\"headers\":{\"Content-Type\":\"application/json\"},\"body\":{\\\"id\\\":40392}}"

    ServerErrorResponse:
      type: object
      properties:
        message:
          type: string
          examples: ["An unexpected error occurred"]

    NotFoundResponse:
      type: object
      properties:
        message:
          type: string
          examples: ["Handler not found"]

    BadRequestResponse:
      type: object
      properties:
        message:
          type: string
          examples: ["Invalid parameters in invoke payload"]
