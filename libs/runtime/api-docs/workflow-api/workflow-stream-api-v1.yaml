asyncapi: 3.0.0
info:
  title: Workflow Stream API
  version: 1.0.0
  description: |
    The workflow stream API for streaming events for an active workflow execution.
    This uses Server-Sent Events to stream events to client.
  license:
    name: Apache 2.0
    url: 'https://www.apache.org/licenses/LICENSE-2.0'
defaultContentType: application/json
servers:
  workflow-stream-server:
    host: 'api.workflow.example.com'
    protocol: https
    description: |
      Workflow engine API server to stream workflow execution events from.
      The host specified in this server is nothing more than a placeholder, the actual base URL will be unique for each deployment of a Celerity workflow application.

      In addition to the API Key and JWT Token security schemes defined for the server, the [Celerity Signature v1](https://www.celerityframework.com/docs/auth/signature-v1) authentication method is also supported for streaming workflow execution events, it is not listed in the security section as AsyncAPI lacks a way to document custom authentication methods.
    security:
      - $ref: '#/components/securitySchemes/api_key'
      - $ref: '#/components/securitySchemes/jwt_token'

channels:
  executions:
    address: '/executions/{id}/stream'
    messages:
      stateTransitionEvent:
        $ref: '#/components/messages/stateTransitionEvent'
      stateRetryEvent:
        $ref: "#/components/messages/stateRetryEvent"
      stateFailEvent:
        $ref: "#/components/messages/stateFailEvent"
      workflowExecutionCompleteEvent:
        $ref: "#/components/messages/workflowExecutionCompleteEvent"
    description: |
      Begins a stream of events for the provided execution if the execution is not complete. The client initiates a request to stream with a HTTP GET request and receives the stream of events as JSON objects on the HTTP response stream.
    parameters:
      id:
        $ref: '#/components/parameters/executionId'

operations:
  streamExecutionEvents:
    action: receive
    channel:
      $ref: '#/channels/executions'
    description: |
      Events are streamed to the client using [SSE](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events) over HTTP.
    traits:
      - $ref: '#/components/operationTraits/http'

components:
  messages:
    stateTransitionEvent:
      name: stateTransitionEvent
      title: State Transition Event
      summary: >-
        An event that represents a transition between states in an active workflow execution.
      contentType: application/json
      payload:
        $ref: '#/components/schemas/stateTransitionEventPayload'
    
    stateFailEvent:
      name: stateFailEvent
      title: State Fail Event
      summary: >-
        An event that represents a failure for a state in an active workflow execution.
      contentType: application/json
      payload:
        $ref: "#/components/schemas/stateFailEventPayload"

    stateRetryEvent:
      name: stateRetryEvent
      title: State Retry Event
      summary: >-
        An event that represents a retry attempt for a failed state in an active workflow execution.
      contentType: application/json
      payload:
        $ref: "#/components/schemas/stateRetryEventPayload"

    workflowExecutionCompleteEvent:
      name: workflowExecutionCompleteEvent
      title: Workflow Execution Complete Event
      summary: >-
        An event that represents a workflow execution completion for both failure and success.
      contentType: application/json
      payload:
        $ref: "#/components/schemas/workflowExecutionCompletePayload"

  schemas:
    stateTransitionEventPayload:
      type: object
      properties:
        event:
          type: string
          const: "stateTransition"
        prevState:
          oneOf:
            - $ref: "#/components/schemas/executionState"
            - type: "null"
        newState:
          $ref: "#/components/schemas/executionState"

    stateRetryEventPayload:
      type: object
      properties:
        event:
          type: string
          const: "stateRetry"
        retryState:
          $ref: "#/components/schemas/executionState"
        prevAttemptStates:
          type: array
          description: The execution states for the previous attempts of the state being retried.
          items:
            $ref: "#/components/schemas/executionState"

    stateFailEventPayload:
      type: object
      properties:
        event:
          type: string
          const: "stateFailed"
        failedState:
          $ref: "#/components/schemas/executionState"

    workflowExecutionCompletePayload:
      type: object
      properties:
        event:
          type: string
          const: "workflowExecutionComplete"
        completeExecution:
          $ref: "#/components/schemas/execution"

    execution:
      type: object
      required:
        - id
        - input
        - started
        - completed
        - duration
        - status
        - statusDetail
        - currentState
        - states
      properties:
        id:
          type: string
          description: The ID of the Execution
        input:
          type: ["object", "array", "string", "number", "null"]
          description: The input data fed into the state.
          examples:
            - data:
                timestamp: 0
        started:
          type: number
          description: A unix timestamp in milliseconds for when the execution was started.
          examples: [1727825249000]
        completed:
          type: ["number", "null"]
          description: |
            A unix timestamp in milliseconds for when the execution was completed. This is `null` until the execution fails or succeeds.
          examples: [1727825250747]
        duration:
          type: ["number", "null"]
          description: |
            A floating point number holding the duration it took to complete execution to millisecond precision.
          examples: [1.747]
        status:
          type: string
          enum: ["PREPARING", "IN_PROGRESS", "FAILED", "SUCCEEDED"]
          description: The current status of the execution.
        statusDetail:
          type: string
          description: A description of the current status of the execution.
          examples: ["The execution is currently in the \"handleError\" state"]
        currentState:
          type: ["string", "null"]
          description: the ID of the current state that the workflow is running.
        states:
          type: array
          items:
              $ref: "#/components/schemas/executionState"
        output:
          type: ["object", "array", "string", "number", "null"]
          description: The output data for the state, if there is a subsequent state, this will be fed in as its input. This will be null until the state execution has been completed.
          examples:
            - data:
                timestamp: 0
                uploadedProcessedDocId: 1001

    executionState:
      type: object
      required:
        - name
        - type
        - input
        - started
        - status
        - completed
        - duration
        - attempt
        - output
      properties:
        name:
          type: string
          description: The unique Id of the state in the Workflow
          examples: ["processDocument"]
        type:
          type: string
          description: The type of the executed state.
          enum:
            - executeStep
            - pass
            - parallel
            - wait
            - decision
            - failure
            - success
        parent:
          type: ["string", "null"]
          description: The parent state name if the state is a child of a parallel state.
        input:
          type: ["object", "array", "string", "number", "null"]
          description: The input data fed into the state.
          examples:
            - data:
                timestamp: 0
        started:
          type: number
          description: A unix timestamp in milliseconds for when the state execution was started.
          examples: [1727825249000]
        completed:
          type: ["number", "null"]
          description: |
            A unix timestamp in milliseconds for when the state step was completed. This is `null` until the state execution is complete.
          examples: [1727825250747]
        duration:
          type: ["number", "null"]
          description: |
            A floating point number holding the duration it took to complete executing the state.
          examples: [1.747]
        status:
          type: string
          enum: ["PREPARING", "IN_PROGRESS", "FAILED", "SUCCEEDED"]
          description: The current status of the state.
        attempt:
          type: number
          description: |
            When a state is retried multiple times based on a policy defined in the workflow, multiple entries can appear in an execution for the same state, this field is used to identify each attempt.
        error:
          type: string
          description: Details of an error that occurred in the state.
          examples:
            - A timeout ocurred after exhausting retry attempts"
        parallel:
          type: array
          description: |
            A 2-dimensional array of execution states for a `parallel` state, each entry in the array a parallel branch containing child state execution information.
          items:
            type: array
            items:
              $ref: "#/components/schemas/executionState"
        output:
          type: ["object", "array", "string", "number", "null"]
          description: The output data for the state, if there is a subsequent state, this will be fed in as its input. This will be null until the state execution has been completed.
          examples:
            - data:
                timestamp: 0
                uploadedProcessedDocId: 1001

    sentAt:
      type: string
      format: date-time
      description: Date and time when the message was sent.

  securitySchemes:
    api_key:
      type: httpApiKey
      in: header
      name: Celerity-Api-Key
      description: |
        A header that holds an API key that will be verified by the Workflow server. This is a shared secret that is only known by the caller and the Workflow application.
    jwt_token:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: |
        A JWT bearer token issued by an OAuth2/OIDC identity provider configured for the Workflow application.
        This is expected to be in the `Authorization` header in the format `Bearer {token}`.
        The workflow runtime will verify the token against the JWKS (JSON Web Key Set) containing public keys. The JWKS URL is expected to be published as a part of a discovery document on the configured issuer domain, this discovery document is expected to be located at `{issuer}/.well-known/openid-configuration` or `{issuer}/.well-known/oauth-authorization-server`.

  parameters:
    executionId:
      description: The ID of the execution to stream events for.

  operationTraits:
    http:
      bindings:
        http:
          method: GET
