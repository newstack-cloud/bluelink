//lint:file-ignore SA1019 Ignore as this is generated code

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.0
// source: deploy-engine/plugin/providerserverv1/provider.proto

package providerserverv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Provider_GetNamespace_FullMethodName     = "/providerserverv1.Provider/GetNamespace"
	Provider_ValidateResource_FullMethodName = "/providerserverv1.Provider/ValidateResource"
	Provider_CanLinkTo_FullMethodName        = "/providerserverv1.Provider/CanLinkTo"
)

// ProviderClient is the client API for Provider service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Interface exported by a provider plugin server.
type ProviderClient interface {
	// GetNamespace returns the namespace of the provider
	// used to route resource and data source types
	// to the correct provider.
	GetNamespace(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Namespace, error)
	// ValidateResource deals with validating a resource
	// against the provider's schema/specification.
	ValidateResource(ctx context.Context, in *ValidateResourceRequest, opts ...grpc.CallOption) (*ValidateResourceResponse, error)
	// CanLinkTo produces a list of all the resource types
	// that the given resource type can link to.
	CanLinkTo(ctx context.Context, in *ResourceType, opts ...grpc.CallOption) (*CanLinkToResponse, error)
}

type providerClient struct {
	cc grpc.ClientConnInterface
}

func NewProviderClient(cc grpc.ClientConnInterface) ProviderClient {
	return &providerClient{cc}
}

func (c *providerClient) GetNamespace(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Namespace, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Namespace)
	err := c.cc.Invoke(ctx, Provider_GetNamespace_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerClient) ValidateResource(ctx context.Context, in *ValidateResourceRequest, opts ...grpc.CallOption) (*ValidateResourceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ValidateResourceResponse)
	err := c.cc.Invoke(ctx, Provider_ValidateResource_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerClient) CanLinkTo(ctx context.Context, in *ResourceType, opts ...grpc.CallOption) (*CanLinkToResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CanLinkToResponse)
	err := c.cc.Invoke(ctx, Provider_CanLinkTo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProviderServer is the server API for Provider service.
// All implementations must embed UnimplementedProviderServer
// for forward compatibility.
//
// Interface exported by a provider plugin server.
type ProviderServer interface {
	// GetNamespace returns the namespace of the provider
	// used to route resource and data source types
	// to the correct provider.
	GetNamespace(context.Context, *emptypb.Empty) (*Namespace, error)
	// ValidateResource deals with validating a resource
	// against the provider's schema/specification.
	ValidateResource(context.Context, *ValidateResourceRequest) (*ValidateResourceResponse, error)
	// CanLinkTo produces a list of all the resource types
	// that the given resource type can link to.
	CanLinkTo(context.Context, *ResourceType) (*CanLinkToResponse, error)
	mustEmbedUnimplementedProviderServer()
}

// UnimplementedProviderServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedProviderServer struct{}

func (UnimplementedProviderServer) GetNamespace(context.Context, *emptypb.Empty) (*Namespace, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNamespace not implemented")
}
func (UnimplementedProviderServer) ValidateResource(context.Context, *ValidateResourceRequest) (*ValidateResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateResource not implemented")
}
func (UnimplementedProviderServer) CanLinkTo(context.Context, *ResourceType) (*CanLinkToResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CanLinkTo not implemented")
}
func (UnimplementedProviderServer) mustEmbedUnimplementedProviderServer() {}
func (UnimplementedProviderServer) testEmbeddedByValue()                  {}

// UnsafeProviderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProviderServer will
// result in compilation errors.
type UnsafeProviderServer interface {
	mustEmbedUnimplementedProviderServer()
}

func RegisterProviderServer(s grpc.ServiceRegistrar, srv ProviderServer) {
	// If the following call pancis, it indicates UnimplementedProviderServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Provider_ServiceDesc, srv)
}

func _Provider_GetNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServer).GetNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Provider_GetNamespace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServer).GetNamespace(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Provider_ValidateResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServer).ValidateResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Provider_ValidateResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServer).ValidateResource(ctx, req.(*ValidateResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Provider_CanLinkTo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceType)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServer).CanLinkTo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Provider_CanLinkTo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServer).CanLinkTo(ctx, req.(*ResourceType))
	}
	return interceptor(ctx, in, info, handler)
}

// Provider_ServiceDesc is the grpc.ServiceDesc for Provider service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Provider_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "providerserverv1.Provider",
	HandlerType: (*ProviderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetNamespace",
			Handler:    _Provider_GetNamespace_Handler,
		},
		{
			MethodName: "ValidateResource",
			Handler:    _Provider_ValidateResource_Handler,
		},
		{
			MethodName: "CanLinkTo",
			Handler:    _Provider_CanLinkTo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "deploy-engine/plugin/providerserverv1/provider.proto",
}
