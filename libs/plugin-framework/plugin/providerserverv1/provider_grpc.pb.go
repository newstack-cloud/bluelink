// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.0
// source: plugin-framework/plugin/providerserverv1/provider.proto

package providerserverv1

import (
	context "context"
	sharedtypesv1 "github.com/two-hundred/celerity/libs/plugin-framework/plugin/sharedtypesv1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Provider_GetNamespace_FullMethodName                     = "/providerserverv1.Provider/GetNamespace"
	Provider_GetConfigDefinition_FullMethodName              = "/providerserverv1.Provider/GetConfigDefinition"
	Provider_ListResourceTypes_FullMethodName                = "/providerserverv1.Provider/ListResourceTypes"
	Provider_ListDataSourceTypes_FullMethodName              = "/providerserverv1.Provider/ListDataSourceTypes"
	Provider_ListCustomVariableTypes_FullMethodName          = "/providerserverv1.Provider/ListCustomVariableTypes"
	Provider_ListFunctions_FullMethodName                    = "/providerserverv1.Provider/ListFunctions"
	Provider_GetRetryPolicy_FullMethodName                   = "/providerserverv1.Provider/GetRetryPolicy"
	Provider_CustomValidateResource_FullMethodName           = "/providerserverv1.Provider/CustomValidateResource"
	Provider_GetResourceSpecDefinition_FullMethodName        = "/providerserverv1.Provider/GetResourceSpecDefinition"
	Provider_CanResourceLinkTo_FullMethodName                = "/providerserverv1.Provider/CanResourceLinkTo"
	Provider_GetResourceStabilisedDeps_FullMethodName        = "/providerserverv1.Provider/GetResourceStabilisedDeps"
	Provider_IsResourceCommonTerminal_FullMethodName         = "/providerserverv1.Provider/IsResourceCommonTerminal"
	Provider_GetResourceType_FullMethodName                  = "/providerserverv1.Provider/GetResourceType"
	Provider_GetResourceTypeDescription_FullMethodName       = "/providerserverv1.Provider/GetResourceTypeDescription"
	Provider_GetResourceExamples_FullMethodName              = "/providerserverv1.Provider/GetResourceExamples"
	Provider_DeployResource_FullMethodName                   = "/providerserverv1.Provider/DeployResource"
	Provider_ResourceHasStabilised_FullMethodName            = "/providerserverv1.Provider/ResourceHasStabilised"
	Provider_GetResourceExternalState_FullMethodName         = "/providerserverv1.Provider/GetResourceExternalState"
	Provider_DestroyResource_FullMethodName                  = "/providerserverv1.Provider/DestroyResource"
	Provider_StageLinkChanges_FullMethodName                 = "/providerserverv1.Provider/StageLinkChanges"
	Provider_UpdateLinkResourceA_FullMethodName              = "/providerserverv1.Provider/UpdateLinkResourceA"
	Provider_UpdateLinkResourceB_FullMethodName              = "/providerserverv1.Provider/UpdateLinkResourceB"
	Provider_UpdateLinkIntermediaryResources_FullMethodName  = "/providerserverv1.Provider/UpdateLinkIntermediaryResources"
	Provider_GetLinkPriorityResource_FullMethodName          = "/providerserverv1.Provider/GetLinkPriorityResource"
	Provider_GetLinkTypeDescription_FullMethodName           = "/providerserverv1.Provider/GetLinkTypeDescription"
	Provider_GetLinkAnnotationDefinitions_FullMethodName     = "/providerserverv1.Provider/GetLinkAnnotationDefinitions"
	Provider_GetLinkKind_FullMethodName                      = "/providerserverv1.Provider/GetLinkKind"
	Provider_GetDataSourceType_FullMethodName                = "/providerserverv1.Provider/GetDataSourceType"
	Provider_GetDataSourceTypeDescription_FullMethodName     = "/providerserverv1.Provider/GetDataSourceTypeDescription"
	Provider_GetDataSourceExamples_FullMethodName            = "/providerserverv1.Provider/GetDataSourceExamples"
	Provider_CustomValidateDataSource_FullMethodName         = "/providerserverv1.Provider/CustomValidateDataSource"
	Provider_GetDataSourceSpecDefinition_FullMethodName      = "/providerserverv1.Provider/GetDataSourceSpecDefinition"
	Provider_GetDataSourceFilterFields_FullMethodName        = "/providerserverv1.Provider/GetDataSourceFilterFields"
	Provider_FetchDataSource_FullMethodName                  = "/providerserverv1.Provider/FetchDataSource"
	Provider_GetCustomVariableType_FullMethodName            = "/providerserverv1.Provider/GetCustomVariableType"
	Provider_GetCustomVariableTypeDescription_FullMethodName = "/providerserverv1.Provider/GetCustomVariableTypeDescription"
	Provider_GetCustomVariableTypeOptions_FullMethodName     = "/providerserverv1.Provider/GetCustomVariableTypeOptions"
	Provider_GetCustomVariableTypeExamples_FullMethodName    = "/providerserverv1.Provider/GetCustomVariableTypeExamples"
	Provider_GetFunctionDefinition_FullMethodName            = "/providerserverv1.Provider/GetFunctionDefinition"
	Provider_CallFunction_FullMethodName                     = "/providerserverv1.Provider/CallFunction"
)

// ProviderClient is the client API for Provider service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Interface exported by a provider plugin server.
type ProviderClient interface {
	// GetNamespace returns the namespace of the provider
	// used to route resource and data source types
	// to the correct provider.
	GetNamespace(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*NamespaceResponse, error)
	// ConfigDefinition retrieves a detailed definition of the configuration
	// that is required for the provider.
	GetConfigDefinition(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*sharedtypesv1.ConfigDefinitionResponse, error)
	// ListResourceTypes retrieves a list of all the resource types
	// that are implemented by the provider.
	// This is primarily used in tools and documentation to provide
	// a list of available resource types.
	ListResourceTypes(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ResourceTypesResponse, error)
	// ListDataSourceTypes retrieves a list of all the data source types
	// that are implemented by the provider.
	// This is primarily used in tools and documentation to provide a list of
	// available data source types.
	ListDataSourceTypes(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*DataSourceTypesResponse, error)
	// ListCustomVariableTypes retrieves a list of all the custom variable types
	// that are implemented by the provider.
	// This is primarily used in tools and documentation to provide a list of
	// available custom variable types.
	ListCustomVariableTypes(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*CustomVariableTypesResponse, error)
	// ListFunctions retrieves a list of all the functions that are implemented by the provider.
	// This is primarily used to assign the correct provider to a function
	// as functions are globally named. When multiple providers provide the same function,
	// an error is reported during initialisation.
	ListFunctions(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*FunctionListResponse, error)
	// GetRetryPolicy retrieves the retry policy that should be used for the provider
	// for resource, link and data source operations.
	// The retry policy will be applied for resources when deploying, updating and removing
	// resources, for links when creating and removing links and for data sources when
	// querying the upstream data source.
	// The retry behaviour only kicks in when the provider resource, data source or link
	// implementation returns an error response with the `TRANSIENT` error code,
	// in which case the retry policy will be applied.
	// A retry policy is optional and if not provided, a default retry policy
	// provided by the host tool will be used.
	GetRetryPolicy(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*RetryPolicyResponse, error)
	// CustomValidateResource deals with carrying out custom validation for
	// a resource that goes beyond the built-in resource spec validation.
	CustomValidateResource(ctx context.Context, in *CustomValidateResourceRequest, opts ...grpc.CallOption) (*CustomValidateResourceResponse, error)
	// GetResourceSpecDefinition retrieves the spec definition for a resource,
	// this is used as the first line of validation for a resource in a blueprint
	// and is also useful for validating references to a resource instance
	// in a blueprint and for providing definitions for docs and tooling.
	// The spec defines both the schema for the resource spec fields that can be defined
	// by users in a blueprint and computed fields that are derived from the deployed
	// resource in the external provider (e.g. Lambda ARN in AWS).
	GetResourceSpecDefinition(ctx context.Context, in *ResourceRequest, opts ...grpc.CallOption) (*ResourceSpecDefinitionResponse, error)
	// CanResourceLinkTo produces a list of all the resource types
	// that the given resource type can link to.
	CanResourceLinkTo(ctx context.Context, in *ResourceRequest, opts ...grpc.CallOption) (*CanResourceLinkToResponse, error)
	// GetResourceStabilisedDeps retrieves a list of resource types
	// that must be stabilised before the current resource can be deployed when
	// another resource of one of the specified types is a dependency of
	// the current resource in a blueprint.
	GetResourceStabilisedDeps(ctx context.Context, in *ResourceRequest, opts ...grpc.CallOption) (*ResourceStabilisedDepsResponse, error)
	// IsResourceCommonTerminal specifies whether the given resource type is expected
	// to have a common use-case as a terminal resource that does not link out to other resources.
	// This is useful for providing warnings to users about their blueprints
	// without overloading them with warnings for all resources that don't have any outbound
	// links that could have.
	IsResourceCommonTerminal(ctx context.Context, in *ResourceRequest, opts ...grpc.CallOption) (*IsResourceCommonTerminalResponse, error)
	// GetResourceType retrieves the type of a resource in a blueprint spec
	// that can be used for documentation and tooling.
	// This allows callers to get a human-readable label for the already known
	// resource type.
	GetResourceType(ctx context.Context, in *ResourceRequest, opts ...grpc.CallOption) (*sharedtypesv1.ResourceTypeResponse, error)
	// GetResourceTypeDescription retrieves the description for a resource type
	// in a blueprint spec that can be used for documentation and tooling.
	// Markdown and plain text formats are supported.
	GetResourceTypeDescription(ctx context.Context, in *ResourceRequest, opts ...grpc.CallOption) (*sharedtypesv1.TypeDescriptionResponse, error)
	// GetResourceExamples deals with retrieving a list of examples for a resource type
	// in a blueprint spec that can be used for documentation and tooling.
	// Markdown and plain text formats are supported.
	GetResourceExamples(ctx context.Context, in *ResourceRequest, opts ...grpc.CallOption) (*sharedtypesv1.ExamplesResponse, error)
	// DeployResource deals with deploying a resource with the upstream resource provider.
	// THe behaviour of deploy is to create or update the resource configuration and return
	// the resource spec state once the configuration has been created or updated.
	// DeployResource should not wait for the resource to be in a stable state before returning,
	// the framework will call the HasStabilised method periodically when waiting for a resource
	// to stabilise.
	// Parameters are passed into DeployResource for extra context, blueprint variables will have already
	// been substituted at this stage and must be used instead of the passed in params argument
	// to ensure consistency between the staged changes that are reviewed and the deployment itself.
	DeployResource(ctx context.Context, in *sharedtypesv1.DeployResourceRequest, opts ...grpc.CallOption) (*sharedtypesv1.DeployResourceResponse, error)
	// ResourceHasStabilised deals with checking if a resource has stabilised after being deployed.
	// This is important for resources that require a stable state before other resources can be deployed.
	// This is only used when creating or updating a resource, not when destroying a resource.
	ResourceHasStabilised(ctx context.Context, in *sharedtypesv1.ResourceHasStabilisedRequest, opts ...grpc.CallOption) (*sharedtypesv1.ResourceHasStabilisedResponse, error)
	// GetResourceExternalState deals with getting the state of the resource from the resource provider.
	// (e.g. AWS or Google Cloud)
	GetResourceExternalState(ctx context.Context, in *GetResourceExternalStateRequest, opts ...grpc.CallOption) (*GetResourceExternalStateResponse, error)
	// DestroyResource deals with destroying a resource instance if its current
	// state is successfully deployed or cleaning up a corrupt or partially deployed
	// resource instance.
	// The resource instance should be completely removed from the external provider
	// as a result of this operation; this is essential for when
	// another element to be removed from a blueprint
	// requires a resource to be completely removed from the external provider.
	// There is no "config complete" equivalent for destroying a resource and
	// "HasStabilised" is designed to be used for resources being created or
	// updated.
	DestroyResource(ctx context.Context, in *sharedtypesv1.DestroyResourceRequest, opts ...grpc.CallOption) (*sharedtypesv1.DestroyResourceResponse, error)
	// StageLinkChanges details the changes that will be made to a link between
	// two resources in a blueprint deployment.
	// Unlike resources, links do not map to a specification for a single deployable unit,
	// so link implementations must specify the changes that will be made across multiple resources.
	StageLinkChanges(ctx context.Context, in *StageLinkChangesRequest, opts ...grpc.CallOption) (*StageLinkChangesResponse, error)
	// UpdateLinkResourceA deals with applying the changes to the first of the two linked resources
	// for the creation or removal of a link between two resources.
	// The value of the `link_data` field returned in the response will be combined
	// with the link data output from updating resource B and intermediary resources
	// to form the final link data that will be persisted in the state of the blueprint instance.
	// Parameters are passed into UpdateLinkResourceA for extra context, blueprint variables will have already
	// been substituted at this stage and must be used instead of the passed in params argument
	// to ensure consistency between the staged changes that are reviewed and the deployment itself.
	UpdateLinkResourceA(ctx context.Context, in *UpdateLinkResourceRequest, opts ...grpc.CallOption) (*UpdateLinkResourceResponse, error)
	// UpdateLinkResourceB deals with applying the changes to the second of the two linked resources
	// for the creation or removal of a link between two resources.
	// The value of the `link_data` field returned in the output will be combined
	// with the link data output from updating resource A and intermediary resources
	// to form the final link data that will be persisted in the state of the blueprint instance.
	// Parameters are passed into UpdateResourceB for extra context, blueprint variables will have already
	// been substituted at this stage and must be used instead of the passed in params argument
	// to ensure consistency between the staged changes that are reviewed and the deployment itself.
	UpdateLinkResourceB(ctx context.Context, in *UpdateLinkResourceRequest, opts ...grpc.CallOption) (*UpdateLinkResourceResponse, error)
	// UpdateLinkIntermediaryResources deals with creating, updating or deleting intermediary resources
	// that are required for the link between two resources.
	// This is called for both the creation and removal of a link between two resources.
	// The value of the `link_data` field returned in the output will be combined
	// with the link data output from updating resource A and B
	// to form the final link data that will be persisted in the state of the blueprint instance.
	// Parameters are passed into UpdateIntermediaryResources for extra context, blueprint variables will have already
	// been substituted at this stage and must be used instead of the passed in params argument
	// to ensure consistency between the staged changes that are reviewed and the deployment itself.
	UpdateLinkIntermediaryResources(ctx context.Context, in *UpdateLinkIntermediaryResourcesRequest, opts ...grpc.CallOption) (*UpdateLinkIntermediaryResourcesResponse, error)
	// GetLinkPriorityResource retrieves the resource in the relationship
	// that must be deployed first. This will be empty for links where one resource does not
	// need to be deployed before the other.
	GetLinkPriorityResource(ctx context.Context, in *LinkRequest, opts ...grpc.CallOption) (*LinkPriorityResourceResponse, error)
	// GetLinkTypeDescription deals with retrieving the description for a link type in a blueprint spec
	// that can be used for documentation and tooling.
	// Markdown and plain text formats are supported.
	GetLinkTypeDescription(ctx context.Context, in *LinkRequest, opts ...grpc.CallOption) (*sharedtypesv1.TypeDescriptionResponse, error)
	// GetLinkAnnotationDefinitions retrieves the annotation definitions for the link type.
	// Annotations provide a way to fine tune the behaviour of a link in a blueprint spec
	// in the linked resource metadata sections.
	GetLinkAnnotationDefinitions(ctx context.Context, in *LinkRequest, opts ...grpc.CallOption) (*LinkAnnotationDefinitionsResponse, error)
	// GetKind tells us whether the link is a "hard" or "soft" link.
	// A hard link is where the priority resource type must be created first.
	// A soft link is where it does not matter which resource type in the relationship
	// is created first.
	GetLinkKind(ctx context.Context, in *LinkRequest, opts ...grpc.CallOption) (*LinkKindResponse, error)
	// GetDataSourceType retrieves the type of a data source in a blueprint spec
	// that can be used for documentation and tooling.
	// This allows callers to get a human-readable label for the already known
	// data source type.
	GetDataSourceType(ctx context.Context, in *DataSourceRequest, opts ...grpc.CallOption) (*DataSourceTypeResponse, error)
	// GetDataSourceTypeDescription deals with retrieving the description for a data source type in a blueprint spec
	// that can be used for documentation and tooling.
	// Markdown and plain text formats are supported.
	GetDataSourceTypeDescription(ctx context.Context, in *DataSourceRequest, opts ...grpc.CallOption) (*sharedtypesv1.TypeDescriptionResponse, error)
	// GetDataSourceExamples deals with retrieving a list of examples for a data source type
	// in a blueprint spec that can be used for documentation and tooling.
	// Markdown and plain text formats are supported.
	GetDataSourceExamples(ctx context.Context, in *DataSourceRequest, opts ...grpc.CallOption) (*sharedtypesv1.ExamplesResponse, error)
	// CustomValidateDataSource provides support for custom validation that goes beyond
	// the spec schema validation provided by the data source's spec definition.
	CustomValidateDataSource(ctx context.Context, in *CustomValidateDataSourceRequest, opts ...grpc.CallOption) (*CustomValidateDataSourceResponse, error)
	// GetDataSourceSpecDefinition retrieves the spec definition for a data source.
	// This definition specifies all the fields that can be exported from a data source
	// to be used in a blueprint.
	// This is the first line of validation for a data source in a blueprint and is also
	// useful for validating references to a data source instance
	// in a blueprint and for providing definitions for docs and tooling.
	GetDataSourceSpecDefinition(ctx context.Context, in *DataSourceRequest, opts ...grpc.CallOption) (*DataSourceSpecDefinitionResponse, error)
	// GetDataSourceFilterFields provides the fields that can be used in a filter when querying
	// a data source.
	GetDataSourceFilterFields(ctx context.Context, in *DataSourceRequest, opts ...grpc.CallOption) (*DataSourceFilterFieldsResponse, error)
	// FetchDataSource deals with loading the data from the upstream data source
	// and returning the exported fields defined in the spec.
	FetchDataSource(ctx context.Context, in *FetchDataSourceRequest, opts ...grpc.CallOption) (*FetchDataSourceResponse, error)
	// GetCustomVariableType retrieves the type of a custom variable type in a blueprint spec
	// that can be used for documentation and tooling.
	// This allows callers to get a human-readable label for the already known
	// custom variable type.
	GetCustomVariableType(ctx context.Context, in *CustomVariableTypeRequest, opts ...grpc.CallOption) (*CustomVariableTypeResponse, error)
	// GetCustomVariableTypeDescription deals with retrieving the description
	// for a custom variable type in a blueprint spec that can be used for
	// documentation and tooling.
	// Markdown and plain text formats are supported.
	GetCustomVariableTypeDescription(ctx context.Context, in *CustomVariableTypeRequest, opts ...grpc.CallOption) (*sharedtypesv1.TypeDescriptionResponse, error)
	// GetCustomVariableTypeOptions loads a set of fixed possible values available
	// for the custom variable type.
	// In the returned options, each one is keyed by a label, essentially
	// behaving as a runtime enum.
	GetCustomVariableTypeOptions(ctx context.Context, in *CustomVariableTypeRequest, opts ...grpc.CallOption) (*CustomVariableTypeOptionsResponse, error)
	// GetCustomVariableTypeExamples deals with retrieving a list of examples for a custom
	// variable type in a blueprint spec that can be used for documentation and tooling.
	// Markdown and plain text formats are supported.
	GetCustomVariableTypeExamples(ctx context.Context, in *CustomVariableTypeRequest, opts ...grpc.CallOption) (*sharedtypesv1.ExamplesResponse, error)
	// GetFunctionDefinition returns the definition of the function
	// that includes allowed parameters and return types.
	// This would usually be called during initialisation of a provider
	// to pre-fetch function definitions and cache them to validate
	// the returned values from plugin function calls.
	GetFunctionDefinition(ctx context.Context, in *sharedtypesv1.FunctionDefinitionRequest, opts ...grpc.CallOption) (*sharedtypesv1.FunctionDefinitionResponse, error)
	// CallFunction is called when a function is used in a blueprint.
	CallFunction(ctx context.Context, in *sharedtypesv1.FunctionCallRequest, opts ...grpc.CallOption) (*sharedtypesv1.FunctionCallResponse, error)
}

type providerClient struct {
	cc grpc.ClientConnInterface
}

func NewProviderClient(cc grpc.ClientConnInterface) ProviderClient {
	return &providerClient{cc}
}

func (c *providerClient) GetNamespace(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*NamespaceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NamespaceResponse)
	err := c.cc.Invoke(ctx, Provider_GetNamespace_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerClient) GetConfigDefinition(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*sharedtypesv1.ConfigDefinitionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(sharedtypesv1.ConfigDefinitionResponse)
	err := c.cc.Invoke(ctx, Provider_GetConfigDefinition_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerClient) ListResourceTypes(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ResourceTypesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResourceTypesResponse)
	err := c.cc.Invoke(ctx, Provider_ListResourceTypes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerClient) ListDataSourceTypes(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*DataSourceTypesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DataSourceTypesResponse)
	err := c.cc.Invoke(ctx, Provider_ListDataSourceTypes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerClient) ListCustomVariableTypes(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*CustomVariableTypesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CustomVariableTypesResponse)
	err := c.cc.Invoke(ctx, Provider_ListCustomVariableTypes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerClient) ListFunctions(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*FunctionListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FunctionListResponse)
	err := c.cc.Invoke(ctx, Provider_ListFunctions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerClient) GetRetryPolicy(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*RetryPolicyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RetryPolicyResponse)
	err := c.cc.Invoke(ctx, Provider_GetRetryPolicy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerClient) CustomValidateResource(ctx context.Context, in *CustomValidateResourceRequest, opts ...grpc.CallOption) (*CustomValidateResourceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CustomValidateResourceResponse)
	err := c.cc.Invoke(ctx, Provider_CustomValidateResource_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerClient) GetResourceSpecDefinition(ctx context.Context, in *ResourceRequest, opts ...grpc.CallOption) (*ResourceSpecDefinitionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResourceSpecDefinitionResponse)
	err := c.cc.Invoke(ctx, Provider_GetResourceSpecDefinition_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerClient) CanResourceLinkTo(ctx context.Context, in *ResourceRequest, opts ...grpc.CallOption) (*CanResourceLinkToResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CanResourceLinkToResponse)
	err := c.cc.Invoke(ctx, Provider_CanResourceLinkTo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerClient) GetResourceStabilisedDeps(ctx context.Context, in *ResourceRequest, opts ...grpc.CallOption) (*ResourceStabilisedDepsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResourceStabilisedDepsResponse)
	err := c.cc.Invoke(ctx, Provider_GetResourceStabilisedDeps_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerClient) IsResourceCommonTerminal(ctx context.Context, in *ResourceRequest, opts ...grpc.CallOption) (*IsResourceCommonTerminalResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IsResourceCommonTerminalResponse)
	err := c.cc.Invoke(ctx, Provider_IsResourceCommonTerminal_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerClient) GetResourceType(ctx context.Context, in *ResourceRequest, opts ...grpc.CallOption) (*sharedtypesv1.ResourceTypeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(sharedtypesv1.ResourceTypeResponse)
	err := c.cc.Invoke(ctx, Provider_GetResourceType_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerClient) GetResourceTypeDescription(ctx context.Context, in *ResourceRequest, opts ...grpc.CallOption) (*sharedtypesv1.TypeDescriptionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(sharedtypesv1.TypeDescriptionResponse)
	err := c.cc.Invoke(ctx, Provider_GetResourceTypeDescription_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerClient) GetResourceExamples(ctx context.Context, in *ResourceRequest, opts ...grpc.CallOption) (*sharedtypesv1.ExamplesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(sharedtypesv1.ExamplesResponse)
	err := c.cc.Invoke(ctx, Provider_GetResourceExamples_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerClient) DeployResource(ctx context.Context, in *sharedtypesv1.DeployResourceRequest, opts ...grpc.CallOption) (*sharedtypesv1.DeployResourceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(sharedtypesv1.DeployResourceResponse)
	err := c.cc.Invoke(ctx, Provider_DeployResource_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerClient) ResourceHasStabilised(ctx context.Context, in *sharedtypesv1.ResourceHasStabilisedRequest, opts ...grpc.CallOption) (*sharedtypesv1.ResourceHasStabilisedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(sharedtypesv1.ResourceHasStabilisedResponse)
	err := c.cc.Invoke(ctx, Provider_ResourceHasStabilised_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerClient) GetResourceExternalState(ctx context.Context, in *GetResourceExternalStateRequest, opts ...grpc.CallOption) (*GetResourceExternalStateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetResourceExternalStateResponse)
	err := c.cc.Invoke(ctx, Provider_GetResourceExternalState_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerClient) DestroyResource(ctx context.Context, in *sharedtypesv1.DestroyResourceRequest, opts ...grpc.CallOption) (*sharedtypesv1.DestroyResourceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(sharedtypesv1.DestroyResourceResponse)
	err := c.cc.Invoke(ctx, Provider_DestroyResource_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerClient) StageLinkChanges(ctx context.Context, in *StageLinkChangesRequest, opts ...grpc.CallOption) (*StageLinkChangesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StageLinkChangesResponse)
	err := c.cc.Invoke(ctx, Provider_StageLinkChanges_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerClient) UpdateLinkResourceA(ctx context.Context, in *UpdateLinkResourceRequest, opts ...grpc.CallOption) (*UpdateLinkResourceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateLinkResourceResponse)
	err := c.cc.Invoke(ctx, Provider_UpdateLinkResourceA_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerClient) UpdateLinkResourceB(ctx context.Context, in *UpdateLinkResourceRequest, opts ...grpc.CallOption) (*UpdateLinkResourceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateLinkResourceResponse)
	err := c.cc.Invoke(ctx, Provider_UpdateLinkResourceB_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerClient) UpdateLinkIntermediaryResources(ctx context.Context, in *UpdateLinkIntermediaryResourcesRequest, opts ...grpc.CallOption) (*UpdateLinkIntermediaryResourcesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateLinkIntermediaryResourcesResponse)
	err := c.cc.Invoke(ctx, Provider_UpdateLinkIntermediaryResources_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerClient) GetLinkPriorityResource(ctx context.Context, in *LinkRequest, opts ...grpc.CallOption) (*LinkPriorityResourceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LinkPriorityResourceResponse)
	err := c.cc.Invoke(ctx, Provider_GetLinkPriorityResource_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerClient) GetLinkTypeDescription(ctx context.Context, in *LinkRequest, opts ...grpc.CallOption) (*sharedtypesv1.TypeDescriptionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(sharedtypesv1.TypeDescriptionResponse)
	err := c.cc.Invoke(ctx, Provider_GetLinkTypeDescription_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerClient) GetLinkAnnotationDefinitions(ctx context.Context, in *LinkRequest, opts ...grpc.CallOption) (*LinkAnnotationDefinitionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LinkAnnotationDefinitionsResponse)
	err := c.cc.Invoke(ctx, Provider_GetLinkAnnotationDefinitions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerClient) GetLinkKind(ctx context.Context, in *LinkRequest, opts ...grpc.CallOption) (*LinkKindResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LinkKindResponse)
	err := c.cc.Invoke(ctx, Provider_GetLinkKind_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerClient) GetDataSourceType(ctx context.Context, in *DataSourceRequest, opts ...grpc.CallOption) (*DataSourceTypeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DataSourceTypeResponse)
	err := c.cc.Invoke(ctx, Provider_GetDataSourceType_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerClient) GetDataSourceTypeDescription(ctx context.Context, in *DataSourceRequest, opts ...grpc.CallOption) (*sharedtypesv1.TypeDescriptionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(sharedtypesv1.TypeDescriptionResponse)
	err := c.cc.Invoke(ctx, Provider_GetDataSourceTypeDescription_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerClient) GetDataSourceExamples(ctx context.Context, in *DataSourceRequest, opts ...grpc.CallOption) (*sharedtypesv1.ExamplesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(sharedtypesv1.ExamplesResponse)
	err := c.cc.Invoke(ctx, Provider_GetDataSourceExamples_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerClient) CustomValidateDataSource(ctx context.Context, in *CustomValidateDataSourceRequest, opts ...grpc.CallOption) (*CustomValidateDataSourceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CustomValidateDataSourceResponse)
	err := c.cc.Invoke(ctx, Provider_CustomValidateDataSource_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerClient) GetDataSourceSpecDefinition(ctx context.Context, in *DataSourceRequest, opts ...grpc.CallOption) (*DataSourceSpecDefinitionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DataSourceSpecDefinitionResponse)
	err := c.cc.Invoke(ctx, Provider_GetDataSourceSpecDefinition_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerClient) GetDataSourceFilterFields(ctx context.Context, in *DataSourceRequest, opts ...grpc.CallOption) (*DataSourceFilterFieldsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DataSourceFilterFieldsResponse)
	err := c.cc.Invoke(ctx, Provider_GetDataSourceFilterFields_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerClient) FetchDataSource(ctx context.Context, in *FetchDataSourceRequest, opts ...grpc.CallOption) (*FetchDataSourceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FetchDataSourceResponse)
	err := c.cc.Invoke(ctx, Provider_FetchDataSource_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerClient) GetCustomVariableType(ctx context.Context, in *CustomVariableTypeRequest, opts ...grpc.CallOption) (*CustomVariableTypeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CustomVariableTypeResponse)
	err := c.cc.Invoke(ctx, Provider_GetCustomVariableType_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerClient) GetCustomVariableTypeDescription(ctx context.Context, in *CustomVariableTypeRequest, opts ...grpc.CallOption) (*sharedtypesv1.TypeDescriptionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(sharedtypesv1.TypeDescriptionResponse)
	err := c.cc.Invoke(ctx, Provider_GetCustomVariableTypeDescription_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerClient) GetCustomVariableTypeOptions(ctx context.Context, in *CustomVariableTypeRequest, opts ...grpc.CallOption) (*CustomVariableTypeOptionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CustomVariableTypeOptionsResponse)
	err := c.cc.Invoke(ctx, Provider_GetCustomVariableTypeOptions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerClient) GetCustomVariableTypeExamples(ctx context.Context, in *CustomVariableTypeRequest, opts ...grpc.CallOption) (*sharedtypesv1.ExamplesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(sharedtypesv1.ExamplesResponse)
	err := c.cc.Invoke(ctx, Provider_GetCustomVariableTypeExamples_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerClient) GetFunctionDefinition(ctx context.Context, in *sharedtypesv1.FunctionDefinitionRequest, opts ...grpc.CallOption) (*sharedtypesv1.FunctionDefinitionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(sharedtypesv1.FunctionDefinitionResponse)
	err := c.cc.Invoke(ctx, Provider_GetFunctionDefinition_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerClient) CallFunction(ctx context.Context, in *sharedtypesv1.FunctionCallRequest, opts ...grpc.CallOption) (*sharedtypesv1.FunctionCallResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(sharedtypesv1.FunctionCallResponse)
	err := c.cc.Invoke(ctx, Provider_CallFunction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProviderServer is the server API for Provider service.
// All implementations must embed UnimplementedProviderServer
// for forward compatibility.
//
// Interface exported by a provider plugin server.
type ProviderServer interface {
	// GetNamespace returns the namespace of the provider
	// used to route resource and data source types
	// to the correct provider.
	GetNamespace(context.Context, *emptypb.Empty) (*NamespaceResponse, error)
	// ConfigDefinition retrieves a detailed definition of the configuration
	// that is required for the provider.
	GetConfigDefinition(context.Context, *emptypb.Empty) (*sharedtypesv1.ConfigDefinitionResponse, error)
	// ListResourceTypes retrieves a list of all the resource types
	// that are implemented by the provider.
	// This is primarily used in tools and documentation to provide
	// a list of available resource types.
	ListResourceTypes(context.Context, *emptypb.Empty) (*ResourceTypesResponse, error)
	// ListDataSourceTypes retrieves a list of all the data source types
	// that are implemented by the provider.
	// This is primarily used in tools and documentation to provide a list of
	// available data source types.
	ListDataSourceTypes(context.Context, *emptypb.Empty) (*DataSourceTypesResponse, error)
	// ListCustomVariableTypes retrieves a list of all the custom variable types
	// that are implemented by the provider.
	// This is primarily used in tools and documentation to provide a list of
	// available custom variable types.
	ListCustomVariableTypes(context.Context, *emptypb.Empty) (*CustomVariableTypesResponse, error)
	// ListFunctions retrieves a list of all the functions that are implemented by the provider.
	// This is primarily used to assign the correct provider to a function
	// as functions are globally named. When multiple providers provide the same function,
	// an error is reported during initialisation.
	ListFunctions(context.Context, *emptypb.Empty) (*FunctionListResponse, error)
	// GetRetryPolicy retrieves the retry policy that should be used for the provider
	// for resource, link and data source operations.
	// The retry policy will be applied for resources when deploying, updating and removing
	// resources, for links when creating and removing links and for data sources when
	// querying the upstream data source.
	// The retry behaviour only kicks in when the provider resource, data source or link
	// implementation returns an error response with the `TRANSIENT` error code,
	// in which case the retry policy will be applied.
	// A retry policy is optional and if not provided, a default retry policy
	// provided by the host tool will be used.
	GetRetryPolicy(context.Context, *emptypb.Empty) (*RetryPolicyResponse, error)
	// CustomValidateResource deals with carrying out custom validation for
	// a resource that goes beyond the built-in resource spec validation.
	CustomValidateResource(context.Context, *CustomValidateResourceRequest) (*CustomValidateResourceResponse, error)
	// GetResourceSpecDefinition retrieves the spec definition for a resource,
	// this is used as the first line of validation for a resource in a blueprint
	// and is also useful for validating references to a resource instance
	// in a blueprint and for providing definitions for docs and tooling.
	// The spec defines both the schema for the resource spec fields that can be defined
	// by users in a blueprint and computed fields that are derived from the deployed
	// resource in the external provider (e.g. Lambda ARN in AWS).
	GetResourceSpecDefinition(context.Context, *ResourceRequest) (*ResourceSpecDefinitionResponse, error)
	// CanResourceLinkTo produces a list of all the resource types
	// that the given resource type can link to.
	CanResourceLinkTo(context.Context, *ResourceRequest) (*CanResourceLinkToResponse, error)
	// GetResourceStabilisedDeps retrieves a list of resource types
	// that must be stabilised before the current resource can be deployed when
	// another resource of one of the specified types is a dependency of
	// the current resource in a blueprint.
	GetResourceStabilisedDeps(context.Context, *ResourceRequest) (*ResourceStabilisedDepsResponse, error)
	// IsResourceCommonTerminal specifies whether the given resource type is expected
	// to have a common use-case as a terminal resource that does not link out to other resources.
	// This is useful for providing warnings to users about their blueprints
	// without overloading them with warnings for all resources that don't have any outbound
	// links that could have.
	IsResourceCommonTerminal(context.Context, *ResourceRequest) (*IsResourceCommonTerminalResponse, error)
	// GetResourceType retrieves the type of a resource in a blueprint spec
	// that can be used for documentation and tooling.
	// This allows callers to get a human-readable label for the already known
	// resource type.
	GetResourceType(context.Context, *ResourceRequest) (*sharedtypesv1.ResourceTypeResponse, error)
	// GetResourceTypeDescription retrieves the description for a resource type
	// in a blueprint spec that can be used for documentation and tooling.
	// Markdown and plain text formats are supported.
	GetResourceTypeDescription(context.Context, *ResourceRequest) (*sharedtypesv1.TypeDescriptionResponse, error)
	// GetResourceExamples deals with retrieving a list of examples for a resource type
	// in a blueprint spec that can be used for documentation and tooling.
	// Markdown and plain text formats are supported.
	GetResourceExamples(context.Context, *ResourceRequest) (*sharedtypesv1.ExamplesResponse, error)
	// DeployResource deals with deploying a resource with the upstream resource provider.
	// THe behaviour of deploy is to create or update the resource configuration and return
	// the resource spec state once the configuration has been created or updated.
	// DeployResource should not wait for the resource to be in a stable state before returning,
	// the framework will call the HasStabilised method periodically when waiting for a resource
	// to stabilise.
	// Parameters are passed into DeployResource for extra context, blueprint variables will have already
	// been substituted at this stage and must be used instead of the passed in params argument
	// to ensure consistency between the staged changes that are reviewed and the deployment itself.
	DeployResource(context.Context, *sharedtypesv1.DeployResourceRequest) (*sharedtypesv1.DeployResourceResponse, error)
	// ResourceHasStabilised deals with checking if a resource has stabilised after being deployed.
	// This is important for resources that require a stable state before other resources can be deployed.
	// This is only used when creating or updating a resource, not when destroying a resource.
	ResourceHasStabilised(context.Context, *sharedtypesv1.ResourceHasStabilisedRequest) (*sharedtypesv1.ResourceHasStabilisedResponse, error)
	// GetResourceExternalState deals with getting the state of the resource from the resource provider.
	// (e.g. AWS or Google Cloud)
	GetResourceExternalState(context.Context, *GetResourceExternalStateRequest) (*GetResourceExternalStateResponse, error)
	// DestroyResource deals with destroying a resource instance if its current
	// state is successfully deployed or cleaning up a corrupt or partially deployed
	// resource instance.
	// The resource instance should be completely removed from the external provider
	// as a result of this operation; this is essential for when
	// another element to be removed from a blueprint
	// requires a resource to be completely removed from the external provider.
	// There is no "config complete" equivalent for destroying a resource and
	// "HasStabilised" is designed to be used for resources being created or
	// updated.
	DestroyResource(context.Context, *sharedtypesv1.DestroyResourceRequest) (*sharedtypesv1.DestroyResourceResponse, error)
	// StageLinkChanges details the changes that will be made to a link between
	// two resources in a blueprint deployment.
	// Unlike resources, links do not map to a specification for a single deployable unit,
	// so link implementations must specify the changes that will be made across multiple resources.
	StageLinkChanges(context.Context, *StageLinkChangesRequest) (*StageLinkChangesResponse, error)
	// UpdateLinkResourceA deals with applying the changes to the first of the two linked resources
	// for the creation or removal of a link between two resources.
	// The value of the `link_data` field returned in the response will be combined
	// with the link data output from updating resource B and intermediary resources
	// to form the final link data that will be persisted in the state of the blueprint instance.
	// Parameters are passed into UpdateLinkResourceA for extra context, blueprint variables will have already
	// been substituted at this stage and must be used instead of the passed in params argument
	// to ensure consistency between the staged changes that are reviewed and the deployment itself.
	UpdateLinkResourceA(context.Context, *UpdateLinkResourceRequest) (*UpdateLinkResourceResponse, error)
	// UpdateLinkResourceB deals with applying the changes to the second of the two linked resources
	// for the creation or removal of a link between two resources.
	// The value of the `link_data` field returned in the output will be combined
	// with the link data output from updating resource A and intermediary resources
	// to form the final link data that will be persisted in the state of the blueprint instance.
	// Parameters are passed into UpdateResourceB for extra context, blueprint variables will have already
	// been substituted at this stage and must be used instead of the passed in params argument
	// to ensure consistency between the staged changes that are reviewed and the deployment itself.
	UpdateLinkResourceB(context.Context, *UpdateLinkResourceRequest) (*UpdateLinkResourceResponse, error)
	// UpdateLinkIntermediaryResources deals with creating, updating or deleting intermediary resources
	// that are required for the link between two resources.
	// This is called for both the creation and removal of a link between two resources.
	// The value of the `link_data` field returned in the output will be combined
	// with the link data output from updating resource A and B
	// to form the final link data that will be persisted in the state of the blueprint instance.
	// Parameters are passed into UpdateIntermediaryResources for extra context, blueprint variables will have already
	// been substituted at this stage and must be used instead of the passed in params argument
	// to ensure consistency between the staged changes that are reviewed and the deployment itself.
	UpdateLinkIntermediaryResources(context.Context, *UpdateLinkIntermediaryResourcesRequest) (*UpdateLinkIntermediaryResourcesResponse, error)
	// GetLinkPriorityResource retrieves the resource in the relationship
	// that must be deployed first. This will be empty for links where one resource does not
	// need to be deployed before the other.
	GetLinkPriorityResource(context.Context, *LinkRequest) (*LinkPriorityResourceResponse, error)
	// GetLinkTypeDescription deals with retrieving the description for a link type in a blueprint spec
	// that can be used for documentation and tooling.
	// Markdown and plain text formats are supported.
	GetLinkTypeDescription(context.Context, *LinkRequest) (*sharedtypesv1.TypeDescriptionResponse, error)
	// GetLinkAnnotationDefinitions retrieves the annotation definitions for the link type.
	// Annotations provide a way to fine tune the behaviour of a link in a blueprint spec
	// in the linked resource metadata sections.
	GetLinkAnnotationDefinitions(context.Context, *LinkRequest) (*LinkAnnotationDefinitionsResponse, error)
	// GetKind tells us whether the link is a "hard" or "soft" link.
	// A hard link is where the priority resource type must be created first.
	// A soft link is where it does not matter which resource type in the relationship
	// is created first.
	GetLinkKind(context.Context, *LinkRequest) (*LinkKindResponse, error)
	// GetDataSourceType retrieves the type of a data source in a blueprint spec
	// that can be used for documentation and tooling.
	// This allows callers to get a human-readable label for the already known
	// data source type.
	GetDataSourceType(context.Context, *DataSourceRequest) (*DataSourceTypeResponse, error)
	// GetDataSourceTypeDescription deals with retrieving the description for a data source type in a blueprint spec
	// that can be used for documentation and tooling.
	// Markdown and plain text formats are supported.
	GetDataSourceTypeDescription(context.Context, *DataSourceRequest) (*sharedtypesv1.TypeDescriptionResponse, error)
	// GetDataSourceExamples deals with retrieving a list of examples for a data source type
	// in a blueprint spec that can be used for documentation and tooling.
	// Markdown and plain text formats are supported.
	GetDataSourceExamples(context.Context, *DataSourceRequest) (*sharedtypesv1.ExamplesResponse, error)
	// CustomValidateDataSource provides support for custom validation that goes beyond
	// the spec schema validation provided by the data source's spec definition.
	CustomValidateDataSource(context.Context, *CustomValidateDataSourceRequest) (*CustomValidateDataSourceResponse, error)
	// GetDataSourceSpecDefinition retrieves the spec definition for a data source.
	// This definition specifies all the fields that can be exported from a data source
	// to be used in a blueprint.
	// This is the first line of validation for a data source in a blueprint and is also
	// useful for validating references to a data source instance
	// in a blueprint and for providing definitions for docs and tooling.
	GetDataSourceSpecDefinition(context.Context, *DataSourceRequest) (*DataSourceSpecDefinitionResponse, error)
	// GetDataSourceFilterFields provides the fields that can be used in a filter when querying
	// a data source.
	GetDataSourceFilterFields(context.Context, *DataSourceRequest) (*DataSourceFilterFieldsResponse, error)
	// FetchDataSource deals with loading the data from the upstream data source
	// and returning the exported fields defined in the spec.
	FetchDataSource(context.Context, *FetchDataSourceRequest) (*FetchDataSourceResponse, error)
	// GetCustomVariableType retrieves the type of a custom variable type in a blueprint spec
	// that can be used for documentation and tooling.
	// This allows callers to get a human-readable label for the already known
	// custom variable type.
	GetCustomVariableType(context.Context, *CustomVariableTypeRequest) (*CustomVariableTypeResponse, error)
	// GetCustomVariableTypeDescription deals with retrieving the description
	// for a custom variable type in a blueprint spec that can be used for
	// documentation and tooling.
	// Markdown and plain text formats are supported.
	GetCustomVariableTypeDescription(context.Context, *CustomVariableTypeRequest) (*sharedtypesv1.TypeDescriptionResponse, error)
	// GetCustomVariableTypeOptions loads a set of fixed possible values available
	// for the custom variable type.
	// In the returned options, each one is keyed by a label, essentially
	// behaving as a runtime enum.
	GetCustomVariableTypeOptions(context.Context, *CustomVariableTypeRequest) (*CustomVariableTypeOptionsResponse, error)
	// GetCustomVariableTypeExamples deals with retrieving a list of examples for a custom
	// variable type in a blueprint spec that can be used for documentation and tooling.
	// Markdown and plain text formats are supported.
	GetCustomVariableTypeExamples(context.Context, *CustomVariableTypeRequest) (*sharedtypesv1.ExamplesResponse, error)
	// GetFunctionDefinition returns the definition of the function
	// that includes allowed parameters and return types.
	// This would usually be called during initialisation of a provider
	// to pre-fetch function definitions and cache them to validate
	// the returned values from plugin function calls.
	GetFunctionDefinition(context.Context, *sharedtypesv1.FunctionDefinitionRequest) (*sharedtypesv1.FunctionDefinitionResponse, error)
	// CallFunction is called when a function is used in a blueprint.
	CallFunction(context.Context, *sharedtypesv1.FunctionCallRequest) (*sharedtypesv1.FunctionCallResponse, error)
	mustEmbedUnimplementedProviderServer()
}

// UnimplementedProviderServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedProviderServer struct{}

func (UnimplementedProviderServer) GetNamespace(context.Context, *emptypb.Empty) (*NamespaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNamespace not implemented")
}
func (UnimplementedProviderServer) GetConfigDefinition(context.Context, *emptypb.Empty) (*sharedtypesv1.ConfigDefinitionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfigDefinition not implemented")
}
func (UnimplementedProviderServer) ListResourceTypes(context.Context, *emptypb.Empty) (*ResourceTypesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListResourceTypes not implemented")
}
func (UnimplementedProviderServer) ListDataSourceTypes(context.Context, *emptypb.Empty) (*DataSourceTypesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDataSourceTypes not implemented")
}
func (UnimplementedProviderServer) ListCustomVariableTypes(context.Context, *emptypb.Empty) (*CustomVariableTypesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCustomVariableTypes not implemented")
}
func (UnimplementedProviderServer) ListFunctions(context.Context, *emptypb.Empty) (*FunctionListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFunctions not implemented")
}
func (UnimplementedProviderServer) GetRetryPolicy(context.Context, *emptypb.Empty) (*RetryPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRetryPolicy not implemented")
}
func (UnimplementedProviderServer) CustomValidateResource(context.Context, *CustomValidateResourceRequest) (*CustomValidateResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CustomValidateResource not implemented")
}
func (UnimplementedProviderServer) GetResourceSpecDefinition(context.Context, *ResourceRequest) (*ResourceSpecDefinitionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResourceSpecDefinition not implemented")
}
func (UnimplementedProviderServer) CanResourceLinkTo(context.Context, *ResourceRequest) (*CanResourceLinkToResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CanResourceLinkTo not implemented")
}
func (UnimplementedProviderServer) GetResourceStabilisedDeps(context.Context, *ResourceRequest) (*ResourceStabilisedDepsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResourceStabilisedDeps not implemented")
}
func (UnimplementedProviderServer) IsResourceCommonTerminal(context.Context, *ResourceRequest) (*IsResourceCommonTerminalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsResourceCommonTerminal not implemented")
}
func (UnimplementedProviderServer) GetResourceType(context.Context, *ResourceRequest) (*sharedtypesv1.ResourceTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResourceType not implemented")
}
func (UnimplementedProviderServer) GetResourceTypeDescription(context.Context, *ResourceRequest) (*sharedtypesv1.TypeDescriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResourceTypeDescription not implemented")
}
func (UnimplementedProviderServer) GetResourceExamples(context.Context, *ResourceRequest) (*sharedtypesv1.ExamplesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResourceExamples not implemented")
}
func (UnimplementedProviderServer) DeployResource(context.Context, *sharedtypesv1.DeployResourceRequest) (*sharedtypesv1.DeployResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeployResource not implemented")
}
func (UnimplementedProviderServer) ResourceHasStabilised(context.Context, *sharedtypesv1.ResourceHasStabilisedRequest) (*sharedtypesv1.ResourceHasStabilisedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResourceHasStabilised not implemented")
}
func (UnimplementedProviderServer) GetResourceExternalState(context.Context, *GetResourceExternalStateRequest) (*GetResourceExternalStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResourceExternalState not implemented")
}
func (UnimplementedProviderServer) DestroyResource(context.Context, *sharedtypesv1.DestroyResourceRequest) (*sharedtypesv1.DestroyResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DestroyResource not implemented")
}
func (UnimplementedProviderServer) StageLinkChanges(context.Context, *StageLinkChangesRequest) (*StageLinkChangesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StageLinkChanges not implemented")
}
func (UnimplementedProviderServer) UpdateLinkResourceA(context.Context, *UpdateLinkResourceRequest) (*UpdateLinkResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLinkResourceA not implemented")
}
func (UnimplementedProviderServer) UpdateLinkResourceB(context.Context, *UpdateLinkResourceRequest) (*UpdateLinkResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLinkResourceB not implemented")
}
func (UnimplementedProviderServer) UpdateLinkIntermediaryResources(context.Context, *UpdateLinkIntermediaryResourcesRequest) (*UpdateLinkIntermediaryResourcesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLinkIntermediaryResources not implemented")
}
func (UnimplementedProviderServer) GetLinkPriorityResource(context.Context, *LinkRequest) (*LinkPriorityResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLinkPriorityResource not implemented")
}
func (UnimplementedProviderServer) GetLinkTypeDescription(context.Context, *LinkRequest) (*sharedtypesv1.TypeDescriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLinkTypeDescription not implemented")
}
func (UnimplementedProviderServer) GetLinkAnnotationDefinitions(context.Context, *LinkRequest) (*LinkAnnotationDefinitionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLinkAnnotationDefinitions not implemented")
}
func (UnimplementedProviderServer) GetLinkKind(context.Context, *LinkRequest) (*LinkKindResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLinkKind not implemented")
}
func (UnimplementedProviderServer) GetDataSourceType(context.Context, *DataSourceRequest) (*DataSourceTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDataSourceType not implemented")
}
func (UnimplementedProviderServer) GetDataSourceTypeDescription(context.Context, *DataSourceRequest) (*sharedtypesv1.TypeDescriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDataSourceTypeDescription not implemented")
}
func (UnimplementedProviderServer) GetDataSourceExamples(context.Context, *DataSourceRequest) (*sharedtypesv1.ExamplesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDataSourceExamples not implemented")
}
func (UnimplementedProviderServer) CustomValidateDataSource(context.Context, *CustomValidateDataSourceRequest) (*CustomValidateDataSourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CustomValidateDataSource not implemented")
}
func (UnimplementedProviderServer) GetDataSourceSpecDefinition(context.Context, *DataSourceRequest) (*DataSourceSpecDefinitionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDataSourceSpecDefinition not implemented")
}
func (UnimplementedProviderServer) GetDataSourceFilterFields(context.Context, *DataSourceRequest) (*DataSourceFilterFieldsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDataSourceFilterFields not implemented")
}
func (UnimplementedProviderServer) FetchDataSource(context.Context, *FetchDataSourceRequest) (*FetchDataSourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchDataSource not implemented")
}
func (UnimplementedProviderServer) GetCustomVariableType(context.Context, *CustomVariableTypeRequest) (*CustomVariableTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCustomVariableType not implemented")
}
func (UnimplementedProviderServer) GetCustomVariableTypeDescription(context.Context, *CustomVariableTypeRequest) (*sharedtypesv1.TypeDescriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCustomVariableTypeDescription not implemented")
}
func (UnimplementedProviderServer) GetCustomVariableTypeOptions(context.Context, *CustomVariableTypeRequest) (*CustomVariableTypeOptionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCustomVariableTypeOptions not implemented")
}
func (UnimplementedProviderServer) GetCustomVariableTypeExamples(context.Context, *CustomVariableTypeRequest) (*sharedtypesv1.ExamplesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCustomVariableTypeExamples not implemented")
}
func (UnimplementedProviderServer) GetFunctionDefinition(context.Context, *sharedtypesv1.FunctionDefinitionRequest) (*sharedtypesv1.FunctionDefinitionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFunctionDefinition not implemented")
}
func (UnimplementedProviderServer) CallFunction(context.Context, *sharedtypesv1.FunctionCallRequest) (*sharedtypesv1.FunctionCallResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CallFunction not implemented")
}
func (UnimplementedProviderServer) mustEmbedUnimplementedProviderServer() {}
func (UnimplementedProviderServer) testEmbeddedByValue()                  {}

// UnsafeProviderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProviderServer will
// result in compilation errors.
type UnsafeProviderServer interface {
	mustEmbedUnimplementedProviderServer()
}

func RegisterProviderServer(s grpc.ServiceRegistrar, srv ProviderServer) {
	// If the following call pancis, it indicates UnimplementedProviderServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Provider_ServiceDesc, srv)
}

func _Provider_GetNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServer).GetNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Provider_GetNamespace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServer).GetNamespace(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Provider_GetConfigDefinition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServer).GetConfigDefinition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Provider_GetConfigDefinition_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServer).GetConfigDefinition(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Provider_ListResourceTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServer).ListResourceTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Provider_ListResourceTypes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServer).ListResourceTypes(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Provider_ListDataSourceTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServer).ListDataSourceTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Provider_ListDataSourceTypes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServer).ListDataSourceTypes(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Provider_ListCustomVariableTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServer).ListCustomVariableTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Provider_ListCustomVariableTypes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServer).ListCustomVariableTypes(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Provider_ListFunctions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServer).ListFunctions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Provider_ListFunctions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServer).ListFunctions(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Provider_GetRetryPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServer).GetRetryPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Provider_GetRetryPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServer).GetRetryPolicy(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Provider_CustomValidateResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CustomValidateResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServer).CustomValidateResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Provider_CustomValidateResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServer).CustomValidateResource(ctx, req.(*CustomValidateResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Provider_GetResourceSpecDefinition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServer).GetResourceSpecDefinition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Provider_GetResourceSpecDefinition_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServer).GetResourceSpecDefinition(ctx, req.(*ResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Provider_CanResourceLinkTo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServer).CanResourceLinkTo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Provider_CanResourceLinkTo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServer).CanResourceLinkTo(ctx, req.(*ResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Provider_GetResourceStabilisedDeps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServer).GetResourceStabilisedDeps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Provider_GetResourceStabilisedDeps_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServer).GetResourceStabilisedDeps(ctx, req.(*ResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Provider_IsResourceCommonTerminal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServer).IsResourceCommonTerminal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Provider_IsResourceCommonTerminal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServer).IsResourceCommonTerminal(ctx, req.(*ResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Provider_GetResourceType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServer).GetResourceType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Provider_GetResourceType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServer).GetResourceType(ctx, req.(*ResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Provider_GetResourceTypeDescription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServer).GetResourceTypeDescription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Provider_GetResourceTypeDescription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServer).GetResourceTypeDescription(ctx, req.(*ResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Provider_GetResourceExamples_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServer).GetResourceExamples(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Provider_GetResourceExamples_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServer).GetResourceExamples(ctx, req.(*ResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Provider_DeployResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(sharedtypesv1.DeployResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServer).DeployResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Provider_DeployResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServer).DeployResource(ctx, req.(*sharedtypesv1.DeployResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Provider_ResourceHasStabilised_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(sharedtypesv1.ResourceHasStabilisedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServer).ResourceHasStabilised(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Provider_ResourceHasStabilised_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServer).ResourceHasStabilised(ctx, req.(*sharedtypesv1.ResourceHasStabilisedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Provider_GetResourceExternalState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetResourceExternalStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServer).GetResourceExternalState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Provider_GetResourceExternalState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServer).GetResourceExternalState(ctx, req.(*GetResourceExternalStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Provider_DestroyResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(sharedtypesv1.DestroyResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServer).DestroyResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Provider_DestroyResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServer).DestroyResource(ctx, req.(*sharedtypesv1.DestroyResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Provider_StageLinkChanges_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StageLinkChangesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServer).StageLinkChanges(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Provider_StageLinkChanges_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServer).StageLinkChanges(ctx, req.(*StageLinkChangesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Provider_UpdateLinkResourceA_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLinkResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServer).UpdateLinkResourceA(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Provider_UpdateLinkResourceA_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServer).UpdateLinkResourceA(ctx, req.(*UpdateLinkResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Provider_UpdateLinkResourceB_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLinkResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServer).UpdateLinkResourceB(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Provider_UpdateLinkResourceB_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServer).UpdateLinkResourceB(ctx, req.(*UpdateLinkResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Provider_UpdateLinkIntermediaryResources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLinkIntermediaryResourcesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServer).UpdateLinkIntermediaryResources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Provider_UpdateLinkIntermediaryResources_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServer).UpdateLinkIntermediaryResources(ctx, req.(*UpdateLinkIntermediaryResourcesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Provider_GetLinkPriorityResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServer).GetLinkPriorityResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Provider_GetLinkPriorityResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServer).GetLinkPriorityResource(ctx, req.(*LinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Provider_GetLinkTypeDescription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServer).GetLinkTypeDescription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Provider_GetLinkTypeDescription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServer).GetLinkTypeDescription(ctx, req.(*LinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Provider_GetLinkAnnotationDefinitions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServer).GetLinkAnnotationDefinitions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Provider_GetLinkAnnotationDefinitions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServer).GetLinkAnnotationDefinitions(ctx, req.(*LinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Provider_GetLinkKind_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServer).GetLinkKind(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Provider_GetLinkKind_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServer).GetLinkKind(ctx, req.(*LinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Provider_GetDataSourceType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataSourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServer).GetDataSourceType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Provider_GetDataSourceType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServer).GetDataSourceType(ctx, req.(*DataSourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Provider_GetDataSourceTypeDescription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataSourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServer).GetDataSourceTypeDescription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Provider_GetDataSourceTypeDescription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServer).GetDataSourceTypeDescription(ctx, req.(*DataSourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Provider_GetDataSourceExamples_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataSourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServer).GetDataSourceExamples(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Provider_GetDataSourceExamples_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServer).GetDataSourceExamples(ctx, req.(*DataSourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Provider_CustomValidateDataSource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CustomValidateDataSourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServer).CustomValidateDataSource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Provider_CustomValidateDataSource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServer).CustomValidateDataSource(ctx, req.(*CustomValidateDataSourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Provider_GetDataSourceSpecDefinition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataSourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServer).GetDataSourceSpecDefinition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Provider_GetDataSourceSpecDefinition_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServer).GetDataSourceSpecDefinition(ctx, req.(*DataSourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Provider_GetDataSourceFilterFields_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataSourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServer).GetDataSourceFilterFields(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Provider_GetDataSourceFilterFields_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServer).GetDataSourceFilterFields(ctx, req.(*DataSourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Provider_FetchDataSource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchDataSourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServer).FetchDataSource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Provider_FetchDataSource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServer).FetchDataSource(ctx, req.(*FetchDataSourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Provider_GetCustomVariableType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CustomVariableTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServer).GetCustomVariableType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Provider_GetCustomVariableType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServer).GetCustomVariableType(ctx, req.(*CustomVariableTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Provider_GetCustomVariableTypeDescription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CustomVariableTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServer).GetCustomVariableTypeDescription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Provider_GetCustomVariableTypeDescription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServer).GetCustomVariableTypeDescription(ctx, req.(*CustomVariableTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Provider_GetCustomVariableTypeOptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CustomVariableTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServer).GetCustomVariableTypeOptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Provider_GetCustomVariableTypeOptions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServer).GetCustomVariableTypeOptions(ctx, req.(*CustomVariableTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Provider_GetCustomVariableTypeExamples_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CustomVariableTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServer).GetCustomVariableTypeExamples(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Provider_GetCustomVariableTypeExamples_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServer).GetCustomVariableTypeExamples(ctx, req.(*CustomVariableTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Provider_GetFunctionDefinition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(sharedtypesv1.FunctionDefinitionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServer).GetFunctionDefinition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Provider_GetFunctionDefinition_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServer).GetFunctionDefinition(ctx, req.(*sharedtypesv1.FunctionDefinitionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Provider_CallFunction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(sharedtypesv1.FunctionCallRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServer).CallFunction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Provider_CallFunction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServer).CallFunction(ctx, req.(*sharedtypesv1.FunctionCallRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Provider_ServiceDesc is the grpc.ServiceDesc for Provider service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Provider_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "providerserverv1.Provider",
	HandlerType: (*ProviderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetNamespace",
			Handler:    _Provider_GetNamespace_Handler,
		},
		{
			MethodName: "GetConfigDefinition",
			Handler:    _Provider_GetConfigDefinition_Handler,
		},
		{
			MethodName: "ListResourceTypes",
			Handler:    _Provider_ListResourceTypes_Handler,
		},
		{
			MethodName: "ListDataSourceTypes",
			Handler:    _Provider_ListDataSourceTypes_Handler,
		},
		{
			MethodName: "ListCustomVariableTypes",
			Handler:    _Provider_ListCustomVariableTypes_Handler,
		},
		{
			MethodName: "ListFunctions",
			Handler:    _Provider_ListFunctions_Handler,
		},
		{
			MethodName: "GetRetryPolicy",
			Handler:    _Provider_GetRetryPolicy_Handler,
		},
		{
			MethodName: "CustomValidateResource",
			Handler:    _Provider_CustomValidateResource_Handler,
		},
		{
			MethodName: "GetResourceSpecDefinition",
			Handler:    _Provider_GetResourceSpecDefinition_Handler,
		},
		{
			MethodName: "CanResourceLinkTo",
			Handler:    _Provider_CanResourceLinkTo_Handler,
		},
		{
			MethodName: "GetResourceStabilisedDeps",
			Handler:    _Provider_GetResourceStabilisedDeps_Handler,
		},
		{
			MethodName: "IsResourceCommonTerminal",
			Handler:    _Provider_IsResourceCommonTerminal_Handler,
		},
		{
			MethodName: "GetResourceType",
			Handler:    _Provider_GetResourceType_Handler,
		},
		{
			MethodName: "GetResourceTypeDescription",
			Handler:    _Provider_GetResourceTypeDescription_Handler,
		},
		{
			MethodName: "GetResourceExamples",
			Handler:    _Provider_GetResourceExamples_Handler,
		},
		{
			MethodName: "DeployResource",
			Handler:    _Provider_DeployResource_Handler,
		},
		{
			MethodName: "ResourceHasStabilised",
			Handler:    _Provider_ResourceHasStabilised_Handler,
		},
		{
			MethodName: "GetResourceExternalState",
			Handler:    _Provider_GetResourceExternalState_Handler,
		},
		{
			MethodName: "DestroyResource",
			Handler:    _Provider_DestroyResource_Handler,
		},
		{
			MethodName: "StageLinkChanges",
			Handler:    _Provider_StageLinkChanges_Handler,
		},
		{
			MethodName: "UpdateLinkResourceA",
			Handler:    _Provider_UpdateLinkResourceA_Handler,
		},
		{
			MethodName: "UpdateLinkResourceB",
			Handler:    _Provider_UpdateLinkResourceB_Handler,
		},
		{
			MethodName: "UpdateLinkIntermediaryResources",
			Handler:    _Provider_UpdateLinkIntermediaryResources_Handler,
		},
		{
			MethodName: "GetLinkPriorityResource",
			Handler:    _Provider_GetLinkPriorityResource_Handler,
		},
		{
			MethodName: "GetLinkTypeDescription",
			Handler:    _Provider_GetLinkTypeDescription_Handler,
		},
		{
			MethodName: "GetLinkAnnotationDefinitions",
			Handler:    _Provider_GetLinkAnnotationDefinitions_Handler,
		},
		{
			MethodName: "GetLinkKind",
			Handler:    _Provider_GetLinkKind_Handler,
		},
		{
			MethodName: "GetDataSourceType",
			Handler:    _Provider_GetDataSourceType_Handler,
		},
		{
			MethodName: "GetDataSourceTypeDescription",
			Handler:    _Provider_GetDataSourceTypeDescription_Handler,
		},
		{
			MethodName: "GetDataSourceExamples",
			Handler:    _Provider_GetDataSourceExamples_Handler,
		},
		{
			MethodName: "CustomValidateDataSource",
			Handler:    _Provider_CustomValidateDataSource_Handler,
		},
		{
			MethodName: "GetDataSourceSpecDefinition",
			Handler:    _Provider_GetDataSourceSpecDefinition_Handler,
		},
		{
			MethodName: "GetDataSourceFilterFields",
			Handler:    _Provider_GetDataSourceFilterFields_Handler,
		},
		{
			MethodName: "FetchDataSource",
			Handler:    _Provider_FetchDataSource_Handler,
		},
		{
			MethodName: "GetCustomVariableType",
			Handler:    _Provider_GetCustomVariableType_Handler,
		},
		{
			MethodName: "GetCustomVariableTypeDescription",
			Handler:    _Provider_GetCustomVariableTypeDescription_Handler,
		},
		{
			MethodName: "GetCustomVariableTypeOptions",
			Handler:    _Provider_GetCustomVariableTypeOptions_Handler,
		},
		{
			MethodName: "GetCustomVariableTypeExamples",
			Handler:    _Provider_GetCustomVariableTypeExamples_Handler,
		},
		{
			MethodName: "GetFunctionDefinition",
			Handler:    _Provider_GetFunctionDefinition_Handler,
		},
		{
			MethodName: "CallFunction",
			Handler:    _Provider_CallFunction_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "plugin-framework/plugin/providerserverv1/provider.proto",
}
