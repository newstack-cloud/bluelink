// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.27.0
// source: plugin-framework/transformerserverv1/transformer.proto

package transformerserverv1

import (
	schemapb "github.com/newstack-cloud/bluelink/libs/blueprint/schemapb"
	sharedtypesv1 "github.com/newstack-cloud/bluelink/libs/plugin-framework/sharedtypesv1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// TransformNameResponse is the response for requesting
// the transform name that is the string that is used in
// a blueprint to identify the transformer plugin.
type TransformNameResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Response:
	//
	//	*TransformNameResponse_NameInfo
	//	*TransformNameResponse_ErrorResponse
	Response      isTransformNameResponse_Response `protobuf_oneof:"response"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TransformNameResponse) Reset() {
	*x = TransformNameResponse{}
	mi := &file_plugin_framework_transformerserverv1_transformer_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransformNameResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransformNameResponse) ProtoMessage() {}

func (x *TransformNameResponse) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_framework_transformerserverv1_transformer_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransformNameResponse.ProtoReflect.Descriptor instead.
func (*TransformNameResponse) Descriptor() ([]byte, []int) {
	return file_plugin_framework_transformerserverv1_transformer_proto_rawDescGZIP(), []int{0}
}

func (x *TransformNameResponse) GetResponse() isTransformNameResponse_Response {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *TransformNameResponse) GetNameInfo() *TransformNameInfo {
	if x != nil {
		if x, ok := x.Response.(*TransformNameResponse_NameInfo); ok {
			return x.NameInfo
		}
	}
	return nil
}

func (x *TransformNameResponse) GetErrorResponse() *sharedtypesv1.ErrorResponse {
	if x != nil {
		if x, ok := x.Response.(*TransformNameResponse_ErrorResponse); ok {
			return x.ErrorResponse
		}
	}
	return nil
}

type isTransformNameResponse_Response interface {
	isTransformNameResponse_Response()
}

type TransformNameResponse_NameInfo struct {
	NameInfo *TransformNameInfo `protobuf:"bytes,1,opt,name=name_info,json=nameInfo,oneof"`
}

type TransformNameResponse_ErrorResponse struct {
	ErrorResponse *sharedtypesv1.ErrorResponse `protobuf:"bytes,2,opt,name=error_response,json=errorResponse,oneof"`
}

func (*TransformNameResponse_NameInfo) isTransformNameResponse_Response() {}

func (*TransformNameResponse_ErrorResponse) isTransformNameResponse_Response() {}

// TransformNameInfo holds the name that is used in a blueprint
// to identify the transformer plugin.
type TransformNameInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TransformName string                 `protobuf:"bytes,1,opt,name=transform_name,json=transformName" json:"transform_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TransformNameInfo) Reset() {
	*x = TransformNameInfo{}
	mi := &file_plugin_framework_transformerserverv1_transformer_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransformNameInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransformNameInfo) ProtoMessage() {}

func (x *TransformNameInfo) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_framework_transformerserverv1_transformer_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransformNameInfo.ProtoReflect.Descriptor instead.
func (*TransformNameInfo) Descriptor() ([]byte, []int) {
	return file_plugin_framework_transformerserverv1_transformer_proto_rawDescGZIP(), []int{1}
}

func (x *TransformNameInfo) GetTransformName() string {
	if x != nil {
		return x.TransformName
	}
	return ""
}

// BlueprintTransformRequest is the request for transforming a blueprint.
type BlueprintTransformRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The blueprint that should be transformed.
	InputBlueprint *schemapb.Blueprint `protobuf:"bytes,1,opt,name=input_blueprint,json=inputBlueprint" json:"input_blueprint,omitempty"`
	// The ID of the host making the request
	// to the transformer.
	HostId string `protobuf:"bytes,2,opt,name=host_id,json=hostId" json:"host_id,omitempty"`
	// Runtime configuration for the current environment
	// specific to the current transformer.
	Context       *TransformerContext `protobuf:"bytes,3,opt,name=context" json:"context,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BlueprintTransformRequest) Reset() {
	*x = BlueprintTransformRequest{}
	mi := &file_plugin_framework_transformerserverv1_transformer_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BlueprintTransformRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlueprintTransformRequest) ProtoMessage() {}

func (x *BlueprintTransformRequest) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_framework_transformerserverv1_transformer_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlueprintTransformRequest.ProtoReflect.Descriptor instead.
func (*BlueprintTransformRequest) Descriptor() ([]byte, []int) {
	return file_plugin_framework_transformerserverv1_transformer_proto_rawDescGZIP(), []int{2}
}

func (x *BlueprintTransformRequest) GetInputBlueprint() *schemapb.Blueprint {
	if x != nil {
		return x.InputBlueprint
	}
	return nil
}

func (x *BlueprintTransformRequest) GetHostId() string {
	if x != nil {
		return x.HostId
	}
	return ""
}

func (x *BlueprintTransformRequest) GetContext() *TransformerContext {
	if x != nil {
		return x.Context
	}
	return nil
}

// BlueprintTransformResponse is the response for transforming a blueprint.
type BlueprintTransformResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Response:
	//
	//	*BlueprintTransformResponse_TransformedBlueprint
	//	*BlueprintTransformResponse_ErrorResponse
	Response      isBlueprintTransformResponse_Response `protobuf_oneof:"response"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BlueprintTransformResponse) Reset() {
	*x = BlueprintTransformResponse{}
	mi := &file_plugin_framework_transformerserverv1_transformer_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BlueprintTransformResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlueprintTransformResponse) ProtoMessage() {}

func (x *BlueprintTransformResponse) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_framework_transformerserverv1_transformer_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlueprintTransformResponse.ProtoReflect.Descriptor instead.
func (*BlueprintTransformResponse) Descriptor() ([]byte, []int) {
	return file_plugin_framework_transformerserverv1_transformer_proto_rawDescGZIP(), []int{3}
}

func (x *BlueprintTransformResponse) GetResponse() isBlueprintTransformResponse_Response {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *BlueprintTransformResponse) GetTransformedBlueprint() *schemapb.Blueprint {
	if x != nil {
		if x, ok := x.Response.(*BlueprintTransformResponse_TransformedBlueprint); ok {
			return x.TransformedBlueprint
		}
	}
	return nil
}

func (x *BlueprintTransformResponse) GetErrorResponse() *sharedtypesv1.ErrorResponse {
	if x != nil {
		if x, ok := x.Response.(*BlueprintTransformResponse_ErrorResponse); ok {
			return x.ErrorResponse
		}
	}
	return nil
}

type isBlueprintTransformResponse_Response interface {
	isBlueprintTransformResponse_Response()
}

type BlueprintTransformResponse_TransformedBlueprint struct {
	// The transformed blueprint.
	TransformedBlueprint *schemapb.Blueprint `protobuf:"bytes,1,opt,name=transformed_blueprint,json=transformedBlueprint,oneof"`
}

type BlueprintTransformResponse_ErrorResponse struct {
	// An error response if the transformation failed.
	ErrorResponse *sharedtypesv1.ErrorResponse `protobuf:"bytes,2,opt,name=error_response,json=errorResponse,oneof"`
}

func (*BlueprintTransformResponse_TransformedBlueprint) isBlueprintTransformResponse_Response() {}

func (*BlueprintTransformResponse_ErrorResponse) isBlueprintTransformResponse_Response() {}

// AbstractResourceTypesResponse contains the response
// for requesting a list of all the abstract resource types
// that are implemented by the transformer.
type AbstractResourceTypesResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Response:
	//
	//	*AbstractResourceTypesResponse_AbstractResourceTypes
	//	*AbstractResourceTypesResponse_ErrorResponse
	Response      isAbstractResourceTypesResponse_Response `protobuf_oneof:"response"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AbstractResourceTypesResponse) Reset() {
	*x = AbstractResourceTypesResponse{}
	mi := &file_plugin_framework_transformerserverv1_transformer_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AbstractResourceTypesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AbstractResourceTypesResponse) ProtoMessage() {}

func (x *AbstractResourceTypesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_framework_transformerserverv1_transformer_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AbstractResourceTypesResponse.ProtoReflect.Descriptor instead.
func (*AbstractResourceTypesResponse) Descriptor() ([]byte, []int) {
	return file_plugin_framework_transformerserverv1_transformer_proto_rawDescGZIP(), []int{4}
}

func (x *AbstractResourceTypesResponse) GetResponse() isAbstractResourceTypesResponse_Response {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *AbstractResourceTypesResponse) GetAbstractResourceTypes() *AbstractResourceTypes {
	if x != nil {
		if x, ok := x.Response.(*AbstractResourceTypesResponse_AbstractResourceTypes); ok {
			return x.AbstractResourceTypes
		}
	}
	return nil
}

func (x *AbstractResourceTypesResponse) GetErrorResponse() *sharedtypesv1.ErrorResponse {
	if x != nil {
		if x, ok := x.Response.(*AbstractResourceTypesResponse_ErrorResponse); ok {
			return x.ErrorResponse
		}
	}
	return nil
}

type isAbstractResourceTypesResponse_Response interface {
	isAbstractResourceTypesResponse_Response()
}

type AbstractResourceTypesResponse_AbstractResourceTypes struct {
	AbstractResourceTypes *AbstractResourceTypes `protobuf:"bytes,1,opt,name=abstract_resource_types,json=abstractResourceTypes,oneof"`
}

type AbstractResourceTypesResponse_ErrorResponse struct {
	ErrorResponse *sharedtypesv1.ErrorResponse `protobuf:"bytes,2,opt,name=error_response,json=errorResponse,oneof"`
}

func (*AbstractResourceTypesResponse_AbstractResourceTypes) isAbstractResourceTypesResponse_Response() {
}

func (*AbstractResourceTypesResponse_ErrorResponse) isAbstractResourceTypesResponse_Response() {}

// AbstractResourceTypes holds a list of resource types
// that are implemented by the transformer.
type AbstractResourceTypes struct {
	state         protoimpl.MessageState        `protogen:"open.v1"`
	ResourceTypes []*sharedtypesv1.ResourceType `protobuf:"bytes,1,rep,name=resource_types,json=resourceTypes" json:"resource_types,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AbstractResourceTypes) Reset() {
	*x = AbstractResourceTypes{}
	mi := &file_plugin_framework_transformerserverv1_transformer_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AbstractResourceTypes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AbstractResourceTypes) ProtoMessage() {}

func (x *AbstractResourceTypes) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_framework_transformerserverv1_transformer_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AbstractResourceTypes.ProtoReflect.Descriptor instead.
func (*AbstractResourceTypes) Descriptor() ([]byte, []int) {
	return file_plugin_framework_transformerserverv1_transformer_proto_rawDescGZIP(), []int{5}
}

func (x *AbstractResourceTypes) GetResourceTypes() []*sharedtypesv1.ResourceType {
	if x != nil {
		return x.ResourceTypes
	}
	return nil
}

// TransformerRequest is the request input
// for general transformer requests that only require
// a host ID.
type TransformerRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The ID of the host making the request
	// to the transformer.
	HostId        string `protobuf:"bytes,1,opt,name=host_id,json=hostId" json:"host_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TransformerRequest) Reset() {
	*x = TransformerRequest{}
	mi := &file_plugin_framework_transformerserverv1_transformer_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransformerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransformerRequest) ProtoMessage() {}

func (x *TransformerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_framework_transformerserverv1_transformer_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransformerRequest.ProtoReflect.Descriptor instead.
func (*TransformerRequest) Descriptor() ([]byte, []int) {
	return file_plugin_framework_transformerserverv1_transformer_proto_rawDescGZIP(), []int{6}
}

func (x *TransformerRequest) GetHostId() string {
	if x != nil {
		return x.HostId
	}
	return ""
}

// AbstractResourceRequest is the request input
// for general abstract resource type requests that only require
// a resource type and the current context.
type AbstractResourceRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The type of resource to carry out an action on or retrieve
	// some information about.
	AbstractResourceType *sharedtypesv1.ResourceType `protobuf:"bytes,1,opt,name=abstract_resource_type,json=abstractResourceType" json:"abstract_resource_type,omitempty"`
	// The ID of the host making the request
	// to the transformer.
	HostId string `protobuf:"bytes,2,opt,name=host_id,json=hostId" json:"host_id,omitempty"`
	// Runtime configuration for the current environment
	// specific to the current transformer.
	Context       *TransformerContext `protobuf:"bytes,3,opt,name=context" json:"context,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AbstractResourceRequest) Reset() {
	*x = AbstractResourceRequest{}
	mi := &file_plugin_framework_transformerserverv1_transformer_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AbstractResourceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AbstractResourceRequest) ProtoMessage() {}

func (x *AbstractResourceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_framework_transformerserverv1_transformer_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AbstractResourceRequest.ProtoReflect.Descriptor instead.
func (*AbstractResourceRequest) Descriptor() ([]byte, []int) {
	return file_plugin_framework_transformerserverv1_transformer_proto_rawDescGZIP(), []int{7}
}

func (x *AbstractResourceRequest) GetAbstractResourceType() *sharedtypesv1.ResourceType {
	if x != nil {
		return x.AbstractResourceType
	}
	return nil
}

func (x *AbstractResourceRequest) GetHostId() string {
	if x != nil {
		return x.HostId
	}
	return ""
}

func (x *AbstractResourceRequest) GetContext() *TransformerContext {
	if x != nil {
		return x.Context
	}
	return nil
}

// CustomValidateAbstractResourceRequest is the request
// for custom abstract resource validation.
type CustomValidateAbstractResourceRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The type of resource being validate.
	AbstractResourceType *sharedtypesv1.ResourceType `protobuf:"bytes,1,opt,name=abstract_resource_type,json=abstractResourceType" json:"abstract_resource_type,omitempty"`
	// The ID of the host making the request
	// to the transformer.
	HostId string `protobuf:"bytes,2,opt,name=host_id,json=hostId" json:"host_id,omitempty"`
	// The resource schema as parsed within a blueprint.
	SchemaResource *schemapb.Resource `protobuf:"bytes,3,opt,name=schema_resource,json=schemaResource" json:"schema_resource,omitempty"`
	// Runtime configuration for the current environment
	// specific to the current transformer.
	Context       *TransformerContext `protobuf:"bytes,4,opt,name=context" json:"context,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CustomValidateAbstractResourceRequest) Reset() {
	*x = CustomValidateAbstractResourceRequest{}
	mi := &file_plugin_framework_transformerserverv1_transformer_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CustomValidateAbstractResourceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomValidateAbstractResourceRequest) ProtoMessage() {}

func (x *CustomValidateAbstractResourceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_framework_transformerserverv1_transformer_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomValidateAbstractResourceRequest.ProtoReflect.Descriptor instead.
func (*CustomValidateAbstractResourceRequest) Descriptor() ([]byte, []int) {
	return file_plugin_framework_transformerserverv1_transformer_proto_rawDescGZIP(), []int{8}
}

func (x *CustomValidateAbstractResourceRequest) GetAbstractResourceType() *sharedtypesv1.ResourceType {
	if x != nil {
		return x.AbstractResourceType
	}
	return nil
}

func (x *CustomValidateAbstractResourceRequest) GetHostId() string {
	if x != nil {
		return x.HostId
	}
	return ""
}

func (x *CustomValidateAbstractResourceRequest) GetSchemaResource() *schemapb.Resource {
	if x != nil {
		return x.SchemaResource
	}
	return nil
}

func (x *CustomValidateAbstractResourceRequest) GetContext() *TransformerContext {
	if x != nil {
		return x.Context
	}
	return nil
}

// CustomValidateAbstractResourceResponse is the response
// for custom abstract resource validation, can be a validation
// complete response or an error response.
type CustomValidateAbstractResourceResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Response:
	//
	//	*CustomValidateAbstractResourceResponse_CompleteResponse
	//	*CustomValidateAbstractResourceResponse_ErrorResponse
	Response      isCustomValidateAbstractResourceResponse_Response `protobuf_oneof:"response"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CustomValidateAbstractResourceResponse) Reset() {
	*x = CustomValidateAbstractResourceResponse{}
	mi := &file_plugin_framework_transformerserverv1_transformer_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CustomValidateAbstractResourceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomValidateAbstractResourceResponse) ProtoMessage() {}

func (x *CustomValidateAbstractResourceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_framework_transformerserverv1_transformer_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomValidateAbstractResourceResponse.ProtoReflect.Descriptor instead.
func (*CustomValidateAbstractResourceResponse) Descriptor() ([]byte, []int) {
	return file_plugin_framework_transformerserverv1_transformer_proto_rawDescGZIP(), []int{9}
}

func (x *CustomValidateAbstractResourceResponse) GetResponse() isCustomValidateAbstractResourceResponse_Response {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *CustomValidateAbstractResourceResponse) GetCompleteResponse() *CustomValidateAbstractResourceCompleteResponse {
	if x != nil {
		if x, ok := x.Response.(*CustomValidateAbstractResourceResponse_CompleteResponse); ok {
			return x.CompleteResponse
		}
	}
	return nil
}

func (x *CustomValidateAbstractResourceResponse) GetErrorResponse() *sharedtypesv1.ErrorResponse {
	if x != nil {
		if x, ok := x.Response.(*CustomValidateAbstractResourceResponse_ErrorResponse); ok {
			return x.ErrorResponse
		}
	}
	return nil
}

type isCustomValidateAbstractResourceResponse_Response interface {
	isCustomValidateAbstractResourceResponse_Response()
}

type CustomValidateAbstractResourceResponse_CompleteResponse struct {
	CompleteResponse *CustomValidateAbstractResourceCompleteResponse `protobuf:"bytes,1,opt,name=complete_response,json=completeResponse,oneof"`
}

type CustomValidateAbstractResourceResponse_ErrorResponse struct {
	ErrorResponse *sharedtypesv1.ErrorResponse `protobuf:"bytes,2,opt,name=error_response,json=errorResponse,oneof"`
}

func (*CustomValidateAbstractResourceResponse_CompleteResponse) isCustomValidateAbstractResourceResponse_Response() {
}

func (*CustomValidateAbstractResourceResponse_ErrorResponse) isCustomValidateAbstractResourceResponse_Response() {
}

// CustomValidateAbstractResourceCompleteResponse is the response
// returned by the transformer plugin when custom resource
// validation has been completed.
type CustomValidateAbstractResourceCompleteResponse struct {
	state         protoimpl.MessageState      `protogen:"open.v1"`
	Diagnostics   []*sharedtypesv1.Diagnostic `protobuf:"bytes,1,rep,name=diagnostics" json:"diagnostics,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CustomValidateAbstractResourceCompleteResponse) Reset() {
	*x = CustomValidateAbstractResourceCompleteResponse{}
	mi := &file_plugin_framework_transformerserverv1_transformer_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CustomValidateAbstractResourceCompleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomValidateAbstractResourceCompleteResponse) ProtoMessage() {}

func (x *CustomValidateAbstractResourceCompleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_framework_transformerserverv1_transformer_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomValidateAbstractResourceCompleteResponse.ProtoReflect.Descriptor instead.
func (*CustomValidateAbstractResourceCompleteResponse) Descriptor() ([]byte, []int) {
	return file_plugin_framework_transformerserverv1_transformer_proto_rawDescGZIP(), []int{10}
}

func (x *CustomValidateAbstractResourceCompleteResponse) GetDiagnostics() []*sharedtypesv1.Diagnostic {
	if x != nil {
		return x.Diagnostics
	}
	return nil
}

// AbstractResourceSpecDefinitionResponse is the response
// containing the spec definition for a given abstract resource type.
type AbstractResourceSpecDefinitionResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Response:
	//
	//	*AbstractResourceSpecDefinitionResponse_SpecDefinition
	//	*AbstractResourceSpecDefinitionResponse_ErrorResponse
	Response      isAbstractResourceSpecDefinitionResponse_Response `protobuf_oneof:"response"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AbstractResourceSpecDefinitionResponse) Reset() {
	*x = AbstractResourceSpecDefinitionResponse{}
	mi := &file_plugin_framework_transformerserverv1_transformer_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AbstractResourceSpecDefinitionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AbstractResourceSpecDefinitionResponse) ProtoMessage() {}

func (x *AbstractResourceSpecDefinitionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_framework_transformerserverv1_transformer_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AbstractResourceSpecDefinitionResponse.ProtoReflect.Descriptor instead.
func (*AbstractResourceSpecDefinitionResponse) Descriptor() ([]byte, []int) {
	return file_plugin_framework_transformerserverv1_transformer_proto_rawDescGZIP(), []int{11}
}

func (x *AbstractResourceSpecDefinitionResponse) GetResponse() isAbstractResourceSpecDefinitionResponse_Response {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *AbstractResourceSpecDefinitionResponse) GetSpecDefinition() *sharedtypesv1.ResourceSpecDefinition {
	if x != nil {
		if x, ok := x.Response.(*AbstractResourceSpecDefinitionResponse_SpecDefinition); ok {
			return x.SpecDefinition
		}
	}
	return nil
}

func (x *AbstractResourceSpecDefinitionResponse) GetErrorResponse() *sharedtypesv1.ErrorResponse {
	if x != nil {
		if x, ok := x.Response.(*AbstractResourceSpecDefinitionResponse_ErrorResponse); ok {
			return x.ErrorResponse
		}
	}
	return nil
}

type isAbstractResourceSpecDefinitionResponse_Response interface {
	isAbstractResourceSpecDefinitionResponse_Response()
}

type AbstractResourceSpecDefinitionResponse_SpecDefinition struct {
	SpecDefinition *sharedtypesv1.ResourceSpecDefinition `protobuf:"bytes,1,opt,name=spec_definition,json=specDefinition,oneof"`
}

type AbstractResourceSpecDefinitionResponse_ErrorResponse struct {
	ErrorResponse *sharedtypesv1.ErrorResponse `protobuf:"bytes,2,opt,name=error_response,json=errorResponse,oneof"`
}

func (*AbstractResourceSpecDefinitionResponse_SpecDefinition) isAbstractResourceSpecDefinitionResponse_Response() {
}

func (*AbstractResourceSpecDefinitionResponse_ErrorResponse) isAbstractResourceSpecDefinitionResponse_Response() {
}

// CanAbstractResourceLinkToResponse is the response
// for a request to get all the resource types
// that a given abstract resource type can link to.
type CanAbstractResourceLinkToResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Response:
	//
	//	*CanAbstractResourceLinkToResponse_ResourceTypes
	//	*CanAbstractResourceLinkToResponse_ErrorResponse
	Response      isCanAbstractResourceLinkToResponse_Response `protobuf_oneof:"response"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CanAbstractResourceLinkToResponse) Reset() {
	*x = CanAbstractResourceLinkToResponse{}
	mi := &file_plugin_framework_transformerserverv1_transformer_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CanAbstractResourceLinkToResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CanAbstractResourceLinkToResponse) ProtoMessage() {}

func (x *CanAbstractResourceLinkToResponse) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_framework_transformerserverv1_transformer_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CanAbstractResourceLinkToResponse.ProtoReflect.Descriptor instead.
func (*CanAbstractResourceLinkToResponse) Descriptor() ([]byte, []int) {
	return file_plugin_framework_transformerserverv1_transformer_proto_rawDescGZIP(), []int{12}
}

func (x *CanAbstractResourceLinkToResponse) GetResponse() isCanAbstractResourceLinkToResponse_Response {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *CanAbstractResourceLinkToResponse) GetResourceTypes() *sharedtypesv1.CanLinkTo {
	if x != nil {
		if x, ok := x.Response.(*CanAbstractResourceLinkToResponse_ResourceTypes); ok {
			return x.ResourceTypes
		}
	}
	return nil
}

func (x *CanAbstractResourceLinkToResponse) GetErrorResponse() *sharedtypesv1.ErrorResponse {
	if x != nil {
		if x, ok := x.Response.(*CanAbstractResourceLinkToResponse_ErrorResponse); ok {
			return x.ErrorResponse
		}
	}
	return nil
}

type isCanAbstractResourceLinkToResponse_Response interface {
	isCanAbstractResourceLinkToResponse_Response()
}

type CanAbstractResourceLinkToResponse_ResourceTypes struct {
	ResourceTypes *sharedtypesv1.CanLinkTo `protobuf:"bytes,1,opt,name=resource_types,json=resourceTypes,oneof"`
}

type CanAbstractResourceLinkToResponse_ErrorResponse struct {
	ErrorResponse *sharedtypesv1.ErrorResponse `protobuf:"bytes,2,opt,name=error_response,json=errorResponse,oneof"`
}

func (*CanAbstractResourceLinkToResponse_ResourceTypes) isCanAbstractResourceLinkToResponse_Response() {
}

func (*CanAbstractResourceLinkToResponse_ErrorResponse) isCanAbstractResourceLinkToResponse_Response() {
}

// IsAbstractResourceCommonTerminalResponse is the response
// for a request to check if a given abstract resource type is
// expected to have a common use-case as a terminal resource.
type IsAbstractResourceCommonTerminalResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Response:
	//
	//	*IsAbstractResourceCommonTerminalResponse_Data
	//	*IsAbstractResourceCommonTerminalResponse_ErrorResponse
	Response      isIsAbstractResourceCommonTerminalResponse_Response `protobuf_oneof:"response"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IsAbstractResourceCommonTerminalResponse) Reset() {
	*x = IsAbstractResourceCommonTerminalResponse{}
	mi := &file_plugin_framework_transformerserverv1_transformer_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IsAbstractResourceCommonTerminalResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsAbstractResourceCommonTerminalResponse) ProtoMessage() {}

func (x *IsAbstractResourceCommonTerminalResponse) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_framework_transformerserverv1_transformer_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsAbstractResourceCommonTerminalResponse.ProtoReflect.Descriptor instead.
func (*IsAbstractResourceCommonTerminalResponse) Descriptor() ([]byte, []int) {
	return file_plugin_framework_transformerserverv1_transformer_proto_rawDescGZIP(), []int{13}
}

func (x *IsAbstractResourceCommonTerminalResponse) GetResponse() isIsAbstractResourceCommonTerminalResponse_Response {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *IsAbstractResourceCommonTerminalResponse) GetData() *sharedtypesv1.ResourceCommonTerminalInfo {
	if x != nil {
		if x, ok := x.Response.(*IsAbstractResourceCommonTerminalResponse_Data); ok {
			return x.Data
		}
	}
	return nil
}

func (x *IsAbstractResourceCommonTerminalResponse) GetErrorResponse() *sharedtypesv1.ErrorResponse {
	if x != nil {
		if x, ok := x.Response.(*IsAbstractResourceCommonTerminalResponse_ErrorResponse); ok {
			return x.ErrorResponse
		}
	}
	return nil
}

type isIsAbstractResourceCommonTerminalResponse_Response interface {
	isIsAbstractResourceCommonTerminalResponse_Response()
}

type IsAbstractResourceCommonTerminalResponse_Data struct {
	Data *sharedtypesv1.ResourceCommonTerminalInfo `protobuf:"bytes,1,opt,name=data,oneof"`
}

type IsAbstractResourceCommonTerminalResponse_ErrorResponse struct {
	ErrorResponse *sharedtypesv1.ErrorResponse `protobuf:"bytes,2,opt,name=error_response,json=errorResponse,oneof"`
}

func (*IsAbstractResourceCommonTerminalResponse_Data) isIsAbstractResourceCommonTerminalResponse_Response() {
}

func (*IsAbstractResourceCommonTerminalResponse_ErrorResponse) isIsAbstractResourceCommonTerminalResponse_Response() {
}

// TransformerContext holds the environment configuration
// for the current transformer.
type TransformerContext struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Configuration parameters specifically for the transformer.
	TransformerConfigVariables map[string]*schemapb.ScalarValue `protobuf:"bytes,1,rep,name=transformer_config_variables,json=transformerConfigVariables" json:"transformer_config_variables,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Context-wide variables for the current deploy engine run.
	ContextVariables map[string]*schemapb.ScalarValue `protobuf:"bytes,2,rep,name=context_variables,json=contextVariables" json:"context_variables,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *TransformerContext) Reset() {
	*x = TransformerContext{}
	mi := &file_plugin_framework_transformerserverv1_transformer_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransformerContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransformerContext) ProtoMessage() {}

func (x *TransformerContext) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_framework_transformerserverv1_transformer_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransformerContext.ProtoReflect.Descriptor instead.
func (*TransformerContext) Descriptor() ([]byte, []int) {
	return file_plugin_framework_transformerserverv1_transformer_proto_rawDescGZIP(), []int{14}
}

func (x *TransformerContext) GetTransformerConfigVariables() map[string]*schemapb.ScalarValue {
	if x != nil {
		return x.TransformerConfigVariables
	}
	return nil
}

func (x *TransformerContext) GetContextVariables() map[string]*schemapb.ScalarValue {
	if x != nil {
		return x.ContextVariables
	}
	return nil
}

var File_plugin_framework_transformerserverv1_transformer_proto protoreflect.FileDescriptor

var file_plugin_framework_transformerserverv1_transformer_proto_rawDesc = string([]byte{
	0x0a, 0x36, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2d, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f,
	0x72, 0x6b, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x76, 0x31, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d,
	0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x6f, 0x72, 0x6d, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x76, 0x31, 0x1a, 0x16, 0x62,
	0x6c, 0x75, 0x65, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2a, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2d, 0x66, 0x72,
	0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x76, 0x31, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xb1, 0x01, 0x0a, 0x15, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x4e,
	0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x09, 0x6e,
	0x61, 0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x4e, 0x61,
	0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x08, 0x6e, 0x61, 0x6d, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x45, 0x0a, 0x0e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x74, 0x79, 0x70, 0x65, 0x73, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3a, 0x0a, 0x11, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f,
	0x72, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x4e, 0x61, 0x6d,
	0x65, 0x22, 0xb3, 0x01, 0x0a, 0x19, 0x42, 0x6c, 0x75, 0x65, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x3a, 0x0a, 0x0f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x62, 0x6c, 0x75, 0x65, 0x70, 0x72, 0x69,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x2e, 0x42, 0x6c, 0x75, 0x65, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x52, 0x0e, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x42, 0x6c, 0x75, 0x65, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x68,
	0x6f, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x68, 0x6f,
	0x73, 0x74, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72,
	0x6d, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0xb9, 0x01, 0x0a, 0x1a, 0x42, 0x6c, 0x75, 0x65,
	0x70, 0x72, 0x69, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x15, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x6f, 0x72, 0x6d, 0x65, 0x64, 0x5f, 0x62, 0x6c, 0x75, 0x65, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x42,
	0x6c, 0x75, 0x65, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x14, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64, 0x42, 0x6c, 0x75, 0x65, 0x70, 0x72, 0x69, 0x6e, 0x74,
	0x12, 0x45, 0x0a, 0x0e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x74, 0x79, 0x70, 0x65, 0x73, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0xd8, 0x01, 0x0a, 0x1d, 0x41, 0x62, 0x73, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x64, 0x0a, 0x17, 0x61, 0x62, 0x73, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f,
	0x72, 0x6d, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x76, 0x31, 0x2e, 0x41, 0x62, 0x73,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x73, 0x48, 0x00, 0x52, 0x15, 0x61, 0x62, 0x73, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x45, 0x0a, 0x0e, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x48, 0x00, 0x52, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5b,
	0x0a, 0x15, 0x41, 0x62, 0x73, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x42, 0x0a, 0x0e, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x74, 0x79, 0x70, 0x65, 0x73, 0x76, 0x31, 0x2e,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x22, 0x2d, 0x0a, 0x12, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x17, 0x0a, 0x07, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x68, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x22, 0xc8, 0x01, 0x0a, 0x17, 0x41,
	0x62, 0x73, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x51, 0x0a, 0x16, 0x61, 0x62, 0x73, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x14, 0x61, 0x62, 0x73, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x68, 0x6f, 0x73,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x68, 0x6f, 0x73, 0x74,
	0x49, 0x64, 0x12, 0x41, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65,
	0x72, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x6f, 0x72, 0x6d, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0x91, 0x02, 0x0a, 0x25, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x41, 0x62, 0x73, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x51, 0x0a, 0x16, 0x61, 0x62, 0x73, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x74, 0x79, 0x70, 0x65, 0x73, 0x76, 0x31, 0x2e,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x14, 0x61, 0x62,
	0x73, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x68, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x0f, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x0e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x41, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x6f, 0x72, 0x6d, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x76, 0x31, 0x2e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0xef, 0x01, 0x0a, 0x26, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x41, 0x62, 0x73, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x72, 0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65,
	0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x43, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x41, 0x62, 0x73, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x10, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x0e, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x74, 0x79, 0x70, 0x65, 0x73, 0x76, 0x31,
	0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00,
	0x52, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42,
	0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x6d, 0x0a, 0x2e, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x41, 0x62, 0x73,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a,
	0x0b, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x76, 0x31, 0x2e, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x52, 0x0b, 0x64,
	0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x22, 0xcd, 0x01, 0x0a, 0x26, 0x41,
	0x62, 0x73, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53,
	0x70, 0x65, 0x63, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x0f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x64, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x74, 0x79, 0x70, 0x65, 0x73, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0e, 0x73, 0x70, 0x65, 0x63, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x45, 0x0a, 0x0e, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x74, 0x79, 0x70, 0x65, 0x73, 0x76, 0x31, 0x2e,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52,
	0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x0a,
	0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xb9, 0x01, 0x0a, 0x21, 0x43,
	0x61, 0x6e, 0x41, 0x62, 0x73, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x54, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x41, 0x0a, 0x0e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x74, 0x79, 0x70, 0x65, 0x73, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x6e, 0x4c, 0x69, 0x6e, 0x6b,
	0x54, 0x6f, 0x48, 0x00, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x73, 0x12, 0x45, 0x0a, 0x0e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x74, 0x79, 0x70, 0x65, 0x73, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xbe, 0x01, 0x0a, 0x28, 0x49, 0x73, 0x41, 0x62, 0x73,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x74, 0x79, 0x70, 0x65, 0x73, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x45, 0x0a, 0x0e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x74, 0x79, 0x70, 0x65, 0x73, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xca, 0x03, 0x0a, 0x12, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x89,
	0x01, 0x0a, 0x1c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72,
	0x6d, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x1a,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x6a, 0x0a, 0x11, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72,
	0x6d, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x56, 0x61, 0x72,
	0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x1a, 0x62, 0x0a, 0x1f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x6f, 0x72, 0x6d, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x56, 0x61, 0x72, 0x69, 0x61,
	0x62, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x29, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x58, 0x0a, 0x15, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x29, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x53, 0x63,
	0x61, 0x6c, 0x61, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x32, 0xf8, 0x0a, 0x0a, 0x0b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f,
	0x72, 0x6d, 0x65, 0x72, 0x12, 0x69, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x6f, 0x72, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x76, 0x31, 0x2e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2a, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72,
	0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x69, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f,
	0x72, 0x6d, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x27, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x74, 0x79, 0x70, 0x65, 0x73, 0x76, 0x31, 0x2e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6e, 0x0a, 0x09, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x2e, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x6f, 0x72, 0x6d, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x76, 0x31, 0x2e, 0x42, 0x6c,
	0x75, 0x65, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x6f, 0x72, 0x6d, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x76, 0x31, 0x2e, 0x42, 0x6c,
	0x75, 0x65, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7a, 0x0a, 0x19, 0x4c, 0x69,
	0x73, 0x74, 0x41, 0x62, 0x73, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x27, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x6f, 0x72, 0x6d, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x76, 0x31, 0x2e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x32, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x76, 0x31, 0x2e, 0x41, 0x62, 0x73, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x9b, 0x01, 0x0a, 0x1e, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x41, 0x62, 0x73, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x3a, 0x2e, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x76, 0x31, 0x2e,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x41, 0x62,
	0x73, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3b, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72,
	0x6d, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x41, 0x62, 0x73, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x90, 0x01, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x41, 0x62, 0x73, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x2e, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x76, 0x31,
	0x2e, 0x41, 0x62, 0x73, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3b, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x76, 0x31, 0x2e, 0x41,
	0x62, 0x73, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53,
	0x70, 0x65, 0x63, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x83, 0x01, 0x0a, 0x19, 0x43, 0x61, 0x6e, 0x41,
	0x62, 0x73, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c,
	0x69, 0x6e, 0x6b, 0x54, 0x6f, 0x12, 0x2c, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72,
	0x6d, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x76, 0x31, 0x2e, 0x41, 0x62, 0x73, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65,
	0x72, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x6e, 0x41, 0x62, 0x73,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x69, 0x6e,
	0x6b, 0x54, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x91, 0x01,
	0x0a, 0x20, 0x49, 0x73, 0x41, 0x62, 0x73, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e,
	0x61, 0x6c, 0x12, 0x2c, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x76, 0x31, 0x2e, 0x41, 0x62, 0x73, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x3d, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x76, 0x31, 0x2e, 0x49, 0x73, 0x41, 0x62, 0x73, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x54,
	0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x6e, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x41, 0x62, 0x73, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x2e, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x76, 0x31, 0x2e, 0x41, 0x62, 0x73, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x74, 0x79, 0x70, 0x65, 0x73, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x7c, 0x0a, 0x22, 0x47, 0x65, 0x74, 0x41, 0x62, 0x73, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x6f, 0x72, 0x6d, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x76, 0x31, 0x2e, 0x41, 0x62,
	0x73, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x76, 0x31, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x6e, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x41, 0x62, 0x73, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x12, 0x2c,
	0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x76, 0x31, 0x2e, 0x41, 0x62, 0x73, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x74, 0x79, 0x70, 0x65, 0x73, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42,
	0x53, 0x5a, 0x4c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6e, 0x65,
	0x77, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x62, 0x6c, 0x75,
	0x65, 0x6c, 0x69, 0x6e, 0x6b, 0x2f, 0x6c, 0x69, 0x62, 0x73, 0x2f, 0x70, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x2d, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x76, 0x31, 0x92,
	0x03, 0x02, 0x08, 0x02, 0x62, 0x08, 0x65, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x70, 0xe8,
	0x07,
})

var (
	file_plugin_framework_transformerserverv1_transformer_proto_rawDescOnce sync.Once
	file_plugin_framework_transformerserverv1_transformer_proto_rawDescData []byte
)

func file_plugin_framework_transformerserverv1_transformer_proto_rawDescGZIP() []byte {
	file_plugin_framework_transformerserverv1_transformer_proto_rawDescOnce.Do(func() {
		file_plugin_framework_transformerserverv1_transformer_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_plugin_framework_transformerserverv1_transformer_proto_rawDesc), len(file_plugin_framework_transformerserverv1_transformer_proto_rawDesc)))
	})
	return file_plugin_framework_transformerserverv1_transformer_proto_rawDescData
}

var file_plugin_framework_transformerserverv1_transformer_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_plugin_framework_transformerserverv1_transformer_proto_goTypes = []any{
	(*TransformNameResponse)(nil),                          // 0: transformerserverv1.TransformNameResponse
	(*TransformNameInfo)(nil),                              // 1: transformerserverv1.TransformNameInfo
	(*BlueprintTransformRequest)(nil),                      // 2: transformerserverv1.BlueprintTransformRequest
	(*BlueprintTransformResponse)(nil),                     // 3: transformerserverv1.BlueprintTransformResponse
	(*AbstractResourceTypesResponse)(nil),                  // 4: transformerserverv1.AbstractResourceTypesResponse
	(*AbstractResourceTypes)(nil),                          // 5: transformerserverv1.AbstractResourceTypes
	(*TransformerRequest)(nil),                             // 6: transformerserverv1.TransformerRequest
	(*AbstractResourceRequest)(nil),                        // 7: transformerserverv1.AbstractResourceRequest
	(*CustomValidateAbstractResourceRequest)(nil),          // 8: transformerserverv1.CustomValidateAbstractResourceRequest
	(*CustomValidateAbstractResourceResponse)(nil),         // 9: transformerserverv1.CustomValidateAbstractResourceResponse
	(*CustomValidateAbstractResourceCompleteResponse)(nil), // 10: transformerserverv1.CustomValidateAbstractResourceCompleteResponse
	(*AbstractResourceSpecDefinitionResponse)(nil),         // 11: transformerserverv1.AbstractResourceSpecDefinitionResponse
	(*CanAbstractResourceLinkToResponse)(nil),              // 12: transformerserverv1.CanAbstractResourceLinkToResponse
	(*IsAbstractResourceCommonTerminalResponse)(nil),       // 13: transformerserverv1.IsAbstractResourceCommonTerminalResponse
	(*TransformerContext)(nil),                             // 14: transformerserverv1.TransformerContext
	nil,                                                    // 15: transformerserverv1.TransformerContext.TransformerConfigVariablesEntry
	nil,                                                    // 16: transformerserverv1.TransformerContext.ContextVariablesEntry
	(*sharedtypesv1.ErrorResponse)(nil),                    // 17: sharedtypesv1.ErrorResponse
	(*schemapb.Blueprint)(nil),                             // 18: schema.Blueprint
	(*sharedtypesv1.ResourceType)(nil),                     // 19: sharedtypesv1.ResourceType
	(*schemapb.Resource)(nil),                              // 20: schema.Resource
	(*sharedtypesv1.Diagnostic)(nil),                       // 21: sharedtypesv1.Diagnostic
	(*sharedtypesv1.ResourceSpecDefinition)(nil),           // 22: sharedtypesv1.ResourceSpecDefinition
	(*sharedtypesv1.CanLinkTo)(nil),                        // 23: sharedtypesv1.CanLinkTo
	(*sharedtypesv1.ResourceCommonTerminalInfo)(nil),       // 24: sharedtypesv1.ResourceCommonTerminalInfo
	(*schemapb.ScalarValue)(nil),                           // 25: schema.ScalarValue
	(*sharedtypesv1.ConfigDefinitionResponse)(nil),         // 26: sharedtypesv1.ConfigDefinitionResponse
	(*sharedtypesv1.ResourceTypeResponse)(nil),             // 27: sharedtypesv1.ResourceTypeResponse
	(*sharedtypesv1.TypeDescriptionResponse)(nil),          // 28: sharedtypesv1.TypeDescriptionResponse
	(*sharedtypesv1.ExamplesResponse)(nil),                 // 29: sharedtypesv1.ExamplesResponse
}
var file_plugin_framework_transformerserverv1_transformer_proto_depIdxs = []int32{
	1,  // 0: transformerserverv1.TransformNameResponse.name_info:type_name -> transformerserverv1.TransformNameInfo
	17, // 1: transformerserverv1.TransformNameResponse.error_response:type_name -> sharedtypesv1.ErrorResponse
	18, // 2: transformerserverv1.BlueprintTransformRequest.input_blueprint:type_name -> schema.Blueprint
	14, // 3: transformerserverv1.BlueprintTransformRequest.context:type_name -> transformerserverv1.TransformerContext
	18, // 4: transformerserverv1.BlueprintTransformResponse.transformed_blueprint:type_name -> schema.Blueprint
	17, // 5: transformerserverv1.BlueprintTransformResponse.error_response:type_name -> sharedtypesv1.ErrorResponse
	5,  // 6: transformerserverv1.AbstractResourceTypesResponse.abstract_resource_types:type_name -> transformerserverv1.AbstractResourceTypes
	17, // 7: transformerserverv1.AbstractResourceTypesResponse.error_response:type_name -> sharedtypesv1.ErrorResponse
	19, // 8: transformerserverv1.AbstractResourceTypes.resource_types:type_name -> sharedtypesv1.ResourceType
	19, // 9: transformerserverv1.AbstractResourceRequest.abstract_resource_type:type_name -> sharedtypesv1.ResourceType
	14, // 10: transformerserverv1.AbstractResourceRequest.context:type_name -> transformerserverv1.TransformerContext
	19, // 11: transformerserverv1.CustomValidateAbstractResourceRequest.abstract_resource_type:type_name -> sharedtypesv1.ResourceType
	20, // 12: transformerserverv1.CustomValidateAbstractResourceRequest.schema_resource:type_name -> schema.Resource
	14, // 13: transformerserverv1.CustomValidateAbstractResourceRequest.context:type_name -> transformerserverv1.TransformerContext
	10, // 14: transformerserverv1.CustomValidateAbstractResourceResponse.complete_response:type_name -> transformerserverv1.CustomValidateAbstractResourceCompleteResponse
	17, // 15: transformerserverv1.CustomValidateAbstractResourceResponse.error_response:type_name -> sharedtypesv1.ErrorResponse
	21, // 16: transformerserverv1.CustomValidateAbstractResourceCompleteResponse.diagnostics:type_name -> sharedtypesv1.Diagnostic
	22, // 17: transformerserverv1.AbstractResourceSpecDefinitionResponse.spec_definition:type_name -> sharedtypesv1.ResourceSpecDefinition
	17, // 18: transformerserverv1.AbstractResourceSpecDefinitionResponse.error_response:type_name -> sharedtypesv1.ErrorResponse
	23, // 19: transformerserverv1.CanAbstractResourceLinkToResponse.resource_types:type_name -> sharedtypesv1.CanLinkTo
	17, // 20: transformerserverv1.CanAbstractResourceLinkToResponse.error_response:type_name -> sharedtypesv1.ErrorResponse
	24, // 21: transformerserverv1.IsAbstractResourceCommonTerminalResponse.data:type_name -> sharedtypesv1.ResourceCommonTerminalInfo
	17, // 22: transformerserverv1.IsAbstractResourceCommonTerminalResponse.error_response:type_name -> sharedtypesv1.ErrorResponse
	15, // 23: transformerserverv1.TransformerContext.transformer_config_variables:type_name -> transformerserverv1.TransformerContext.TransformerConfigVariablesEntry
	16, // 24: transformerserverv1.TransformerContext.context_variables:type_name -> transformerserverv1.TransformerContext.ContextVariablesEntry
	25, // 25: transformerserverv1.TransformerContext.TransformerConfigVariablesEntry.value:type_name -> schema.ScalarValue
	25, // 26: transformerserverv1.TransformerContext.ContextVariablesEntry.value:type_name -> schema.ScalarValue
	6,  // 27: transformerserverv1.Transformer.GetTransformName:input_type -> transformerserverv1.TransformerRequest
	6,  // 28: transformerserverv1.Transformer.GetConfigDefinition:input_type -> transformerserverv1.TransformerRequest
	2,  // 29: transformerserverv1.Transformer.Transform:input_type -> transformerserverv1.BlueprintTransformRequest
	6,  // 30: transformerserverv1.Transformer.ListAbstractResourceTypes:input_type -> transformerserverv1.TransformerRequest
	8,  // 31: transformerserverv1.Transformer.CustomValidateAbstractResource:input_type -> transformerserverv1.CustomValidateAbstractResourceRequest
	7,  // 32: transformerserverv1.Transformer.GetAbstractResourceSpecDefinition:input_type -> transformerserverv1.AbstractResourceRequest
	7,  // 33: transformerserverv1.Transformer.CanAbstractResourceLinkTo:input_type -> transformerserverv1.AbstractResourceRequest
	7,  // 34: transformerserverv1.Transformer.IsAbstractResourceCommonTerminal:input_type -> transformerserverv1.AbstractResourceRequest
	7,  // 35: transformerserverv1.Transformer.GetAbstractResourceType:input_type -> transformerserverv1.AbstractResourceRequest
	7,  // 36: transformerserverv1.Transformer.GetAbstractResourceTypeDescription:input_type -> transformerserverv1.AbstractResourceRequest
	7,  // 37: transformerserverv1.Transformer.GetAbstractResourceExamples:input_type -> transformerserverv1.AbstractResourceRequest
	0,  // 38: transformerserverv1.Transformer.GetTransformName:output_type -> transformerserverv1.TransformNameResponse
	26, // 39: transformerserverv1.Transformer.GetConfigDefinition:output_type -> sharedtypesv1.ConfigDefinitionResponse
	3,  // 40: transformerserverv1.Transformer.Transform:output_type -> transformerserverv1.BlueprintTransformResponse
	4,  // 41: transformerserverv1.Transformer.ListAbstractResourceTypes:output_type -> transformerserverv1.AbstractResourceTypesResponse
	9,  // 42: transformerserverv1.Transformer.CustomValidateAbstractResource:output_type -> transformerserverv1.CustomValidateAbstractResourceResponse
	11, // 43: transformerserverv1.Transformer.GetAbstractResourceSpecDefinition:output_type -> transformerserverv1.AbstractResourceSpecDefinitionResponse
	12, // 44: transformerserverv1.Transformer.CanAbstractResourceLinkTo:output_type -> transformerserverv1.CanAbstractResourceLinkToResponse
	13, // 45: transformerserverv1.Transformer.IsAbstractResourceCommonTerminal:output_type -> transformerserverv1.IsAbstractResourceCommonTerminalResponse
	27, // 46: transformerserverv1.Transformer.GetAbstractResourceType:output_type -> sharedtypesv1.ResourceTypeResponse
	28, // 47: transformerserverv1.Transformer.GetAbstractResourceTypeDescription:output_type -> sharedtypesv1.TypeDescriptionResponse
	29, // 48: transformerserverv1.Transformer.GetAbstractResourceExamples:output_type -> sharedtypesv1.ExamplesResponse
	38, // [38:49] is the sub-list for method output_type
	27, // [27:38] is the sub-list for method input_type
	27, // [27:27] is the sub-list for extension type_name
	27, // [27:27] is the sub-list for extension extendee
	0,  // [0:27] is the sub-list for field type_name
}

func init() { file_plugin_framework_transformerserverv1_transformer_proto_init() }
func file_plugin_framework_transformerserverv1_transformer_proto_init() {
	if File_plugin_framework_transformerserverv1_transformer_proto != nil {
		return
	}
	file_plugin_framework_transformerserverv1_transformer_proto_msgTypes[0].OneofWrappers = []any{
		(*TransformNameResponse_NameInfo)(nil),
		(*TransformNameResponse_ErrorResponse)(nil),
	}
	file_plugin_framework_transformerserverv1_transformer_proto_msgTypes[3].OneofWrappers = []any{
		(*BlueprintTransformResponse_TransformedBlueprint)(nil),
		(*BlueprintTransformResponse_ErrorResponse)(nil),
	}
	file_plugin_framework_transformerserverv1_transformer_proto_msgTypes[4].OneofWrappers = []any{
		(*AbstractResourceTypesResponse_AbstractResourceTypes)(nil),
		(*AbstractResourceTypesResponse_ErrorResponse)(nil),
	}
	file_plugin_framework_transformerserverv1_transformer_proto_msgTypes[9].OneofWrappers = []any{
		(*CustomValidateAbstractResourceResponse_CompleteResponse)(nil),
		(*CustomValidateAbstractResourceResponse_ErrorResponse)(nil),
	}
	file_plugin_framework_transformerserverv1_transformer_proto_msgTypes[11].OneofWrappers = []any{
		(*AbstractResourceSpecDefinitionResponse_SpecDefinition)(nil),
		(*AbstractResourceSpecDefinitionResponse_ErrorResponse)(nil),
	}
	file_plugin_framework_transformerserverv1_transformer_proto_msgTypes[12].OneofWrappers = []any{
		(*CanAbstractResourceLinkToResponse_ResourceTypes)(nil),
		(*CanAbstractResourceLinkToResponse_ErrorResponse)(nil),
	}
	file_plugin_framework_transformerserverv1_transformer_proto_msgTypes[13].OneofWrappers = []any{
		(*IsAbstractResourceCommonTerminalResponse_Data)(nil),
		(*IsAbstractResourceCommonTerminalResponse_ErrorResponse)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_plugin_framework_transformerserverv1_transformer_proto_rawDesc), len(file_plugin_framework_transformerserverv1_transformer_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_plugin_framework_transformerserverv1_transformer_proto_goTypes,
		DependencyIndexes: file_plugin_framework_transformerserverv1_transformer_proto_depIdxs,
		MessageInfos:      file_plugin_framework_transformerserverv1_transformer_proto_msgTypes,
	}.Build()
	File_plugin_framework_transformerserverv1_transformer_proto = out.File
	file_plugin_framework_transformerserverv1_transformer_proto_goTypes = nil
	file_plugin_framework_transformerserverv1_transformer_proto_depIdxs = nil
}
