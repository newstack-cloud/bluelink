edition = "2023";

import "blueprint/schema.proto";
import "plugin-framework/sharedtypesv1/types.proto";

option features.field_presence = IMPLICIT;
option go_package = "github.com/two-hundred/celerity/libs/plugin-framework/transformerserverv1";

package transformerserverv1;

// Interface exported by a tranformer plugin server.
service Transformer {

    //////////////////////////////////////////////////////////////////////
    // Transformer methods
    //////////////////////////////////////////////////////////////////////

    // GetTransformName returns the transform name of the transformer
    // that should be used in the `transform` section of a blueprint
    // to use this transformer plugin.
    rpc GetTransformName(TransformerRequest) returns (TransformNameResponse) {}
    // ConfigDefinition retrieves a detailed definition of the configuration
    // that is required for the transformer.
    rpc GetConfigDefinition(TransformerRequest) returns (sharedtypesv1.ConfigDefinitionResponse) {}
    // Transform a blueprint by expanding abstract resources into their
    // final form along with any other transformations that are required.
    rpc Transform(BlueprintTransformRequest) returns (BlueprintTransformResponse) {}
    // ListAbstractResourceTypes returns a list of abstract resource types
    // that are supported by the transformer.
    rpc ListAbstractResourceTypes(TransformerRequest) returns (AbstractResourceTypesResponse) {}

    //////////////////////////////////////////////////////////////////////
    // Abstract resource methods
    //////////////////////////////////////////////////////////////////////

    // CustomValidateAbstractResource deals with carrying out custom validation for
    // an abstract resource that goes beyond the built-in resource spec validation.
    rpc CustomValidateAbstractResource(CustomValidateAbstractResourceRequest) returns (CustomValidateAbstractResourceResponse) {}
    // GetAbstractResourceSpecDefinition retrieves the spec definition for an abstract resource,
    // this is used as the first line of validation for a resource in a blueprint
    // and is also useful for validating references to a resource instance
    // in a blueprint and for providing definitions for docs and tooling.
    // The spec defines both the schema for the resource spec fields that can be defined
    // by users in a blueprint and computed fields that are derived from the deployed
    // resource in the external provider (e.g. Lambda ARN in AWS).
    rpc GetAbstractResourceSpecDefinition(AbstractResourceRequest) returns (AbstractResourceSpecDefinitionResponse) {}
    // CanAbstractResourceLinkTo produces a list of all the resource types
    // that the given abstract resource type can link to.
    rpc CanAbstractResourceLinkTo(AbstractResourceRequest) returns (CanAbstractResourceLinkToResponse) {}
    // IsAbstractResourceCommonTerminal specifies whether the given abstract resource type is expected
    // to have a common use-case as a terminal resource that does not link out to other resources.
    // This is useful for providing warnings to users about their blueprints
    // without overloading them with warnings for all resources that don't have any outbound
    // links that could have.
    rpc IsAbstractResourceCommonTerminal(AbstractResourceRequest) returns (IsAbstractResourceCommonTerminalResponse) {}
    // GetAbstractResourceType retrieves the type of an abstract resource in a blueprint spec
    // that can be used for documentation and tooling.
    // This allows callers to get a human-readable label for the already known
    // resource type.
    rpc GetAbstractResourceType(AbstractResourceRequest) returns (sharedtypesv1.ResourceTypeResponse) {}
    // GetAbstractResourceTypeDescription retrieves the description for an abstract resource type
    // in a blueprint spec that can be used for documentation and tooling.
    // Markdown and plain text formats are supported.
    rpc GetAbstractResourceTypeDescription(AbstractResourceRequest) returns (sharedtypesv1.TypeDescriptionResponse) {}
    // GetAbstractResourceExamples deals with retrieving a list of examples
    // for an abstract resource type in a blueprint spec that can be used
    // for documentation and tooling.
    // Markdown and plain text formats are supported.
    rpc GetAbstractResourceExamples(AbstractResourceRequest) returns (sharedtypesv1.ExamplesResponse) {}
}

// TransformNameResponse is the response for requesting
// the transform name that is the string that is used in
// a blueprint to identify the transformer plugin.
message TransformNameResponse {
    oneof response {
        TransformNameInfo name_info = 1;
        sharedtypesv1.ErrorResponse error_response = 2;
    }
}

// TransformNameInfo holds the name that is used in a blueprint
// to identify the transformer plugin.
message TransformNameInfo {
    string transform_name = 1;
}

// BlueprintTransformRequest is the request for transforming a blueprint.
message BlueprintTransformRequest {
    // The blueprint that should be transformed.
    schema.Blueprint input_blueprint = 1;
    // Runtime configuration for the current environment
    // specific to the current transformer.
    TransformerContext context = 2;
}

// BlueprintTransformResponse is the response for transforming a blueprint.
message BlueprintTransformResponse {
    oneof response {
        // The transformed blueprint.
        schema.Blueprint transformed_blueprint = 1;
        // An error response if the transformation failed.
        sharedtypesv1.ErrorResponse error_response = 2;
    }
}

// AbstractResourceTypesResponse contains the response
// for requesting a list of all the abstract resource types
// that are implemented by the transformer.
message AbstractResourceTypesResponse {
    oneof response {
        AbstractResourceTypes abstract_resource_types = 1;
        sharedtypesv1.ErrorResponse error_response = 2;
    }
}

// AbstractResourceTypes holds a list of resource types
// that are implemented by the transformer.
message AbstractResourceTypes {
    repeated sharedtypesv1.ResourceType resource_types = 1;
}

// TransformerRequest is the request input
// for general transformer requests that only require
// a host ID.
message TransformerRequest {
    // The ID of the host making the request
    // to the transformer.
    string host_id = 1;
}

// AbstractResourceRequest is the request input
// for general abstract resource type requests that only require
// a resource type and the current context.
message AbstractResourceRequest {
    // The type of resource to carry out an action on or retrieve
    // some information about.
    sharedtypesv1.ResourceType abstract_resource_type = 1;
    // The ID of the host making the request
    // to the transformer.
    string host_id = 2;
    // Runtime configuration for the current environment
    // specific to the current transformer.
    TransformerContext context = 3;
}

// CustomValidateAbstractResourceRequest is the request
// for custom abstract resource validation.
message CustomValidateAbstractResourceRequest {
    // The type of resource being validate.
    sharedtypesv1.ResourceType abstract_resource_type = 1;
    // The ID of the host making the request
    // to the transformer.
    string host_id = 2;
    // The resource schema as parsed within a blueprint.
    schema.Resource schema_resource = 3;
    // Runtime configuration for the current environment
    // specific to the current transformer.
    TransformerContext context = 4;
}

// CustomValidateAbstractResourceResponse is the response
// for custom abstract resource validation, can be a validation
// complete response or an error response.
message CustomValidateAbstractResourceResponse {
    oneof response {
        CustomValidateAbstractResourceCompleteResponse complete_response = 1;
        sharedtypesv1.ErrorResponse error_response = 2;
    }
}

// CustomValidateAbstractResourceCompleteResponse is the response
// returned by the transformer plugin when custom resource
// validation has been completed.
message CustomValidateAbstractResourceCompleteResponse {
    repeated sharedtypesv1.Diagnostic diagnostics = 1;
}

// AbstractResourceSpecDefinitionResponse is the response
// containing the spec definition for a given abstract resource type.
message AbstractResourceSpecDefinitionResponse {
    oneof response {
        sharedtypesv1.ResourceSpecDefinition spec_definition = 1;
        sharedtypesv1.ErrorResponse error_response = 2;
    }
}

// CanAbstractResourceLinkToResponse is the response
// for a request to get all the resource types
// that a given abstract resource type can link to.
message CanAbstractResourceLinkToResponse {
    oneof response {
        sharedtypesv1.CanLinkTo resource_types = 1;
        sharedtypesv1.ErrorResponse error_response = 2;
    }
}

// IsAbstractResourceCommonTerminalResponse is the response
// for a request to check if a given abstract resource type is
// expected to have a common use-case as a terminal resource.
message IsAbstractResourceCommonTerminalResponse {
    oneof response {
        sharedtypesv1.ResourceCommonTerminalInfo data = 1;
        sharedtypesv1.ErrorResponse error_response = 2;
    }
}

// TransformerContext holds the environment configuration
// for the current transformer.
message TransformerContext {
    // Configuration parameters specifically for the transformer.
    map<string, schema.ScalarValue> transformer_config_variables = 1;
	// Context-wide variables for the current deploy engine run.
    map<string, schema.ScalarValue> context_variables = 2;
}
