// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.0
// source: plugin-framework/transformerserverv1/transformer.proto

package transformerserverv1

import (
	context "context"
	sharedtypesv1 "github.com/two-hundred/celerity/libs/plugin-framework/sharedtypesv1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Transformer_GetTransformName_FullMethodName                   = "/transformerserverv1.Transformer/GetTransformName"
	Transformer_GetConfigDefinition_FullMethodName                = "/transformerserverv1.Transformer/GetConfigDefinition"
	Transformer_Transform_FullMethodName                          = "/transformerserverv1.Transformer/Transform"
	Transformer_ListAbstractResourceTypes_FullMethodName          = "/transformerserverv1.Transformer/ListAbstractResourceTypes"
	Transformer_CustomValidateAbstractResource_FullMethodName     = "/transformerserverv1.Transformer/CustomValidateAbstractResource"
	Transformer_GetAbstractResourceSpecDefinition_FullMethodName  = "/transformerserverv1.Transformer/GetAbstractResourceSpecDefinition"
	Transformer_CanAbstractResourceLinkTo_FullMethodName          = "/transformerserverv1.Transformer/CanAbstractResourceLinkTo"
	Transformer_IsAbstractResourceCommonTerminal_FullMethodName   = "/transformerserverv1.Transformer/IsAbstractResourceCommonTerminal"
	Transformer_GetAbstractResourceType_FullMethodName            = "/transformerserverv1.Transformer/GetAbstractResourceType"
	Transformer_GetAbstractResourceTypeDescription_FullMethodName = "/transformerserverv1.Transformer/GetAbstractResourceTypeDescription"
	Transformer_GetAbstractResourceExamples_FullMethodName        = "/transformerserverv1.Transformer/GetAbstractResourceExamples"
)

// TransformerClient is the client API for Transformer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Interface exported by a tranformer plugin server.
type TransformerClient interface {
	// GetTransformName returns the transform name of the provider
	// that should be used in the `transform` section of a blueprint
	// to use this transformer plugin.
	GetTransformName(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*TransformNameResponse, error)
	// ConfigDefinition retrieves a detailed definition of the configuration
	// that is required for the transformer.
	GetConfigDefinition(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*sharedtypesv1.ConfigDefinitionResponse, error)
	// Transform a blueprint by expanding abstract resources into their
	// final form along with any other transformations that are required.
	Transform(ctx context.Context, in *BlueprintTransformRequest, opts ...grpc.CallOption) (*BlueprintTransformResponse, error)
	// ListAbstractResourceTypes returns a list of abstract resource types
	// that are supported by the transformer.
	ListAbstractResourceTypes(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AbstractResourceTypesResponse, error)
	// CustomValidateAbstractResource deals with carrying out custom validation for
	// an abstract resource that goes beyond the built-in resource spec validation.
	CustomValidateAbstractResource(ctx context.Context, in *CustomValidateAbstractResourceRequest, opts ...grpc.CallOption) (*CustomValidateAbstractResourceResponse, error)
	// GetAbstractResourceSpecDefinition retrieves the spec definition for an abstract resource,
	// this is used as the first line of validation for a resource in a blueprint
	// and is also useful for validating references to a resource instance
	// in a blueprint and for providing definitions for docs and tooling.
	// The spec defines both the schema for the resource spec fields that can be defined
	// by users in a blueprint and computed fields that are derived from the deployed
	// resource in the external provider (e.g. Lambda ARN in AWS).
	GetAbstractResourceSpecDefinition(ctx context.Context, in *AbstractResourceRequest, opts ...grpc.CallOption) (*AbstractResourceSpecDefinitionResponse, error)
	// CanAbstractResourceLinkTo produces a list of all the resource types
	// that the given abstract resource type can link to.
	CanAbstractResourceLinkTo(ctx context.Context, in *AbstractResourceRequest, opts ...grpc.CallOption) (*CanAbstractResourceLinkToResponse, error)
	// IsAbstractResourceCommonTerminal specifies whether the given abstract resource type is expected
	// to have a common use-case as a terminal resource that does not link out to other resources.
	// This is useful for providing warnings to users about their blueprints
	// without overloading them with warnings for all resources that don't have any outbound
	// links that could have.
	IsAbstractResourceCommonTerminal(ctx context.Context, in *AbstractResourceRequest, opts ...grpc.CallOption) (*IsAbstractResourceCommonTerminalResponse, error)
	// GetAbstractResourceType retrieves the type of an abstract resource in a blueprint spec
	// that can be used for documentation and tooling.
	// This allows callers to get a human-readable label for the already known
	// resource type.
	GetAbstractResourceType(ctx context.Context, in *AbstractResourceRequest, opts ...grpc.CallOption) (*sharedtypesv1.ResourceTypeResponse, error)
	// GetAbstractResourceTypeDescription retrieves the description for an abstract resource type
	// in a blueprint spec that can be used for documentation and tooling.
	// Markdown and plain text formats are supported.
	GetAbstractResourceTypeDescription(ctx context.Context, in *AbstractResourceRequest, opts ...grpc.CallOption) (*sharedtypesv1.TypeDescriptionResponse, error)
	// GetAbstractResourceExamples deals with retrieving a list of examples
	// for an abstract resource type in a blueprint spec that can be used
	// for documentation and tooling.
	// Markdown and plain text formats are supported.
	GetAbstractResourceExamples(ctx context.Context, in *AbstractResourceRequest, opts ...grpc.CallOption) (*sharedtypesv1.ExamplesResponse, error)
}

type transformerClient struct {
	cc grpc.ClientConnInterface
}

func NewTransformerClient(cc grpc.ClientConnInterface) TransformerClient {
	return &transformerClient{cc}
}

func (c *transformerClient) GetTransformName(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*TransformNameResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TransformNameResponse)
	err := c.cc.Invoke(ctx, Transformer_GetTransformName_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transformerClient) GetConfigDefinition(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*sharedtypesv1.ConfigDefinitionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(sharedtypesv1.ConfigDefinitionResponse)
	err := c.cc.Invoke(ctx, Transformer_GetConfigDefinition_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transformerClient) Transform(ctx context.Context, in *BlueprintTransformRequest, opts ...grpc.CallOption) (*BlueprintTransformResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BlueprintTransformResponse)
	err := c.cc.Invoke(ctx, Transformer_Transform_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transformerClient) ListAbstractResourceTypes(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AbstractResourceTypesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AbstractResourceTypesResponse)
	err := c.cc.Invoke(ctx, Transformer_ListAbstractResourceTypes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transformerClient) CustomValidateAbstractResource(ctx context.Context, in *CustomValidateAbstractResourceRequest, opts ...grpc.CallOption) (*CustomValidateAbstractResourceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CustomValidateAbstractResourceResponse)
	err := c.cc.Invoke(ctx, Transformer_CustomValidateAbstractResource_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transformerClient) GetAbstractResourceSpecDefinition(ctx context.Context, in *AbstractResourceRequest, opts ...grpc.CallOption) (*AbstractResourceSpecDefinitionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AbstractResourceSpecDefinitionResponse)
	err := c.cc.Invoke(ctx, Transformer_GetAbstractResourceSpecDefinition_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transformerClient) CanAbstractResourceLinkTo(ctx context.Context, in *AbstractResourceRequest, opts ...grpc.CallOption) (*CanAbstractResourceLinkToResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CanAbstractResourceLinkToResponse)
	err := c.cc.Invoke(ctx, Transformer_CanAbstractResourceLinkTo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transformerClient) IsAbstractResourceCommonTerminal(ctx context.Context, in *AbstractResourceRequest, opts ...grpc.CallOption) (*IsAbstractResourceCommonTerminalResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IsAbstractResourceCommonTerminalResponse)
	err := c.cc.Invoke(ctx, Transformer_IsAbstractResourceCommonTerminal_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transformerClient) GetAbstractResourceType(ctx context.Context, in *AbstractResourceRequest, opts ...grpc.CallOption) (*sharedtypesv1.ResourceTypeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(sharedtypesv1.ResourceTypeResponse)
	err := c.cc.Invoke(ctx, Transformer_GetAbstractResourceType_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transformerClient) GetAbstractResourceTypeDescription(ctx context.Context, in *AbstractResourceRequest, opts ...grpc.CallOption) (*sharedtypesv1.TypeDescriptionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(sharedtypesv1.TypeDescriptionResponse)
	err := c.cc.Invoke(ctx, Transformer_GetAbstractResourceTypeDescription_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transformerClient) GetAbstractResourceExamples(ctx context.Context, in *AbstractResourceRequest, opts ...grpc.CallOption) (*sharedtypesv1.ExamplesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(sharedtypesv1.ExamplesResponse)
	err := c.cc.Invoke(ctx, Transformer_GetAbstractResourceExamples_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TransformerServer is the server API for Transformer service.
// All implementations must embed UnimplementedTransformerServer
// for forward compatibility.
//
// Interface exported by a tranformer plugin server.
type TransformerServer interface {
	// GetTransformName returns the transform name of the provider
	// that should be used in the `transform` section of a blueprint
	// to use this transformer plugin.
	GetTransformName(context.Context, *emptypb.Empty) (*TransformNameResponse, error)
	// ConfigDefinition retrieves a detailed definition of the configuration
	// that is required for the transformer.
	GetConfigDefinition(context.Context, *emptypb.Empty) (*sharedtypesv1.ConfigDefinitionResponse, error)
	// Transform a blueprint by expanding abstract resources into their
	// final form along with any other transformations that are required.
	Transform(context.Context, *BlueprintTransformRequest) (*BlueprintTransformResponse, error)
	// ListAbstractResourceTypes returns a list of abstract resource types
	// that are supported by the transformer.
	ListAbstractResourceTypes(context.Context, *emptypb.Empty) (*AbstractResourceTypesResponse, error)
	// CustomValidateAbstractResource deals with carrying out custom validation for
	// an abstract resource that goes beyond the built-in resource spec validation.
	CustomValidateAbstractResource(context.Context, *CustomValidateAbstractResourceRequest) (*CustomValidateAbstractResourceResponse, error)
	// GetAbstractResourceSpecDefinition retrieves the spec definition for an abstract resource,
	// this is used as the first line of validation for a resource in a blueprint
	// and is also useful for validating references to a resource instance
	// in a blueprint and for providing definitions for docs and tooling.
	// The spec defines both the schema for the resource spec fields that can be defined
	// by users in a blueprint and computed fields that are derived from the deployed
	// resource in the external provider (e.g. Lambda ARN in AWS).
	GetAbstractResourceSpecDefinition(context.Context, *AbstractResourceRequest) (*AbstractResourceSpecDefinitionResponse, error)
	// CanAbstractResourceLinkTo produces a list of all the resource types
	// that the given abstract resource type can link to.
	CanAbstractResourceLinkTo(context.Context, *AbstractResourceRequest) (*CanAbstractResourceLinkToResponse, error)
	// IsAbstractResourceCommonTerminal specifies whether the given abstract resource type is expected
	// to have a common use-case as a terminal resource that does not link out to other resources.
	// This is useful for providing warnings to users about their blueprints
	// without overloading them with warnings for all resources that don't have any outbound
	// links that could have.
	IsAbstractResourceCommonTerminal(context.Context, *AbstractResourceRequest) (*IsAbstractResourceCommonTerminalResponse, error)
	// GetAbstractResourceType retrieves the type of an abstract resource in a blueprint spec
	// that can be used for documentation and tooling.
	// This allows callers to get a human-readable label for the already known
	// resource type.
	GetAbstractResourceType(context.Context, *AbstractResourceRequest) (*sharedtypesv1.ResourceTypeResponse, error)
	// GetAbstractResourceTypeDescription retrieves the description for an abstract resource type
	// in a blueprint spec that can be used for documentation and tooling.
	// Markdown and plain text formats are supported.
	GetAbstractResourceTypeDescription(context.Context, *AbstractResourceRequest) (*sharedtypesv1.TypeDescriptionResponse, error)
	// GetAbstractResourceExamples deals with retrieving a list of examples
	// for an abstract resource type in a blueprint spec that can be used
	// for documentation and tooling.
	// Markdown and plain text formats are supported.
	GetAbstractResourceExamples(context.Context, *AbstractResourceRequest) (*sharedtypesv1.ExamplesResponse, error)
	mustEmbedUnimplementedTransformerServer()
}

// UnimplementedTransformerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTransformerServer struct{}

func (UnimplementedTransformerServer) GetTransformName(context.Context, *emptypb.Empty) (*TransformNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransformName not implemented")
}
func (UnimplementedTransformerServer) GetConfigDefinition(context.Context, *emptypb.Empty) (*sharedtypesv1.ConfigDefinitionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfigDefinition not implemented")
}
func (UnimplementedTransformerServer) Transform(context.Context, *BlueprintTransformRequest) (*BlueprintTransformResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Transform not implemented")
}
func (UnimplementedTransformerServer) ListAbstractResourceTypes(context.Context, *emptypb.Empty) (*AbstractResourceTypesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAbstractResourceTypes not implemented")
}
func (UnimplementedTransformerServer) CustomValidateAbstractResource(context.Context, *CustomValidateAbstractResourceRequest) (*CustomValidateAbstractResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CustomValidateAbstractResource not implemented")
}
func (UnimplementedTransformerServer) GetAbstractResourceSpecDefinition(context.Context, *AbstractResourceRequest) (*AbstractResourceSpecDefinitionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAbstractResourceSpecDefinition not implemented")
}
func (UnimplementedTransformerServer) CanAbstractResourceLinkTo(context.Context, *AbstractResourceRequest) (*CanAbstractResourceLinkToResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CanAbstractResourceLinkTo not implemented")
}
func (UnimplementedTransformerServer) IsAbstractResourceCommonTerminal(context.Context, *AbstractResourceRequest) (*IsAbstractResourceCommonTerminalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsAbstractResourceCommonTerminal not implemented")
}
func (UnimplementedTransformerServer) GetAbstractResourceType(context.Context, *AbstractResourceRequest) (*sharedtypesv1.ResourceTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAbstractResourceType not implemented")
}
func (UnimplementedTransformerServer) GetAbstractResourceTypeDescription(context.Context, *AbstractResourceRequest) (*sharedtypesv1.TypeDescriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAbstractResourceTypeDescription not implemented")
}
func (UnimplementedTransformerServer) GetAbstractResourceExamples(context.Context, *AbstractResourceRequest) (*sharedtypesv1.ExamplesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAbstractResourceExamples not implemented")
}
func (UnimplementedTransformerServer) mustEmbedUnimplementedTransformerServer() {}
func (UnimplementedTransformerServer) testEmbeddedByValue()                     {}

// UnsafeTransformerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TransformerServer will
// result in compilation errors.
type UnsafeTransformerServer interface {
	mustEmbedUnimplementedTransformerServer()
}

func RegisterTransformerServer(s grpc.ServiceRegistrar, srv TransformerServer) {
	// If the following call pancis, it indicates UnimplementedTransformerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Transformer_ServiceDesc, srv)
}

func _Transformer_GetTransformName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransformerServer).GetTransformName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Transformer_GetTransformName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransformerServer).GetTransformName(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transformer_GetConfigDefinition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransformerServer).GetConfigDefinition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Transformer_GetConfigDefinition_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransformerServer).GetConfigDefinition(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transformer_Transform_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlueprintTransformRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransformerServer).Transform(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Transformer_Transform_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransformerServer).Transform(ctx, req.(*BlueprintTransformRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transformer_ListAbstractResourceTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransformerServer).ListAbstractResourceTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Transformer_ListAbstractResourceTypes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransformerServer).ListAbstractResourceTypes(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transformer_CustomValidateAbstractResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CustomValidateAbstractResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransformerServer).CustomValidateAbstractResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Transformer_CustomValidateAbstractResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransformerServer).CustomValidateAbstractResource(ctx, req.(*CustomValidateAbstractResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transformer_GetAbstractResourceSpecDefinition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AbstractResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransformerServer).GetAbstractResourceSpecDefinition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Transformer_GetAbstractResourceSpecDefinition_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransformerServer).GetAbstractResourceSpecDefinition(ctx, req.(*AbstractResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transformer_CanAbstractResourceLinkTo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AbstractResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransformerServer).CanAbstractResourceLinkTo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Transformer_CanAbstractResourceLinkTo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransformerServer).CanAbstractResourceLinkTo(ctx, req.(*AbstractResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transformer_IsAbstractResourceCommonTerminal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AbstractResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransformerServer).IsAbstractResourceCommonTerminal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Transformer_IsAbstractResourceCommonTerminal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransformerServer).IsAbstractResourceCommonTerminal(ctx, req.(*AbstractResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transformer_GetAbstractResourceType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AbstractResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransformerServer).GetAbstractResourceType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Transformer_GetAbstractResourceType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransformerServer).GetAbstractResourceType(ctx, req.(*AbstractResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transformer_GetAbstractResourceTypeDescription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AbstractResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransformerServer).GetAbstractResourceTypeDescription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Transformer_GetAbstractResourceTypeDescription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransformerServer).GetAbstractResourceTypeDescription(ctx, req.(*AbstractResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transformer_GetAbstractResourceExamples_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AbstractResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransformerServer).GetAbstractResourceExamples(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Transformer_GetAbstractResourceExamples_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransformerServer).GetAbstractResourceExamples(ctx, req.(*AbstractResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Transformer_ServiceDesc is the grpc.ServiceDesc for Transformer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Transformer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "transformerserverv1.Transformer",
	HandlerType: (*TransformerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTransformName",
			Handler:    _Transformer_GetTransformName_Handler,
		},
		{
			MethodName: "GetConfigDefinition",
			Handler:    _Transformer_GetConfigDefinition_Handler,
		},
		{
			MethodName: "Transform",
			Handler:    _Transformer_Transform_Handler,
		},
		{
			MethodName: "ListAbstractResourceTypes",
			Handler:    _Transformer_ListAbstractResourceTypes_Handler,
		},
		{
			MethodName: "CustomValidateAbstractResource",
			Handler:    _Transformer_CustomValidateAbstractResource_Handler,
		},
		{
			MethodName: "GetAbstractResourceSpecDefinition",
			Handler:    _Transformer_GetAbstractResourceSpecDefinition_Handler,
		},
		{
			MethodName: "CanAbstractResourceLinkTo",
			Handler:    _Transformer_CanAbstractResourceLinkTo_Handler,
		},
		{
			MethodName: "IsAbstractResourceCommonTerminal",
			Handler:    _Transformer_IsAbstractResourceCommonTerminal_Handler,
		},
		{
			MethodName: "GetAbstractResourceType",
			Handler:    _Transformer_GetAbstractResourceType_Handler,
		},
		{
			MethodName: "GetAbstractResourceTypeDescription",
			Handler:    _Transformer_GetAbstractResourceTypeDescription_Handler,
		},
		{
			MethodName: "GetAbstractResourceExamples",
			Handler:    _Transformer_GetAbstractResourceExamples_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "plugin-framework/transformerserverv1/transformer.proto",
}
