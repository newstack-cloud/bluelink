edition = "2023";

import "google/protobuf/empty.proto";
import "plugin-framework/sharedtypesv1/types.proto";

option features.field_presence = IMPLICIT;
option go_package = "github.com/newstack-cloud/celerity/libs/plugin-framework/pluginservicev1";

package pluginservicev1;

// Interface exported by the deploy engine
// to allow plugins to register and deregister
// themselves along with inter-plugin communication.
service Service {
    // Register is used by plugins to register themselves
    // with the deploy engine.
    rpc Register(PluginRegistrationRequest) returns (PluginRegistrationResponse) {}
    // Deregister is used by plugins to deregister themselves
    // from the deploy engine.
    rpc Deregister(PluginDeregistrationRequest) returns (PluginDeregistrationResponse) {}

    //////////////////////////////////////////////////////////////////////
    // Methods to allow plugins to call functions
    // registered with the deploy engine.
    //////////////////////////////////////////////////////////////////////

    // CallFunction is used to allow plugins to call functions
    // that have been registered with the deploy engine.
    // Only functions can call other functions, this behaviour is
    // essential to allow for function composition in blueprints.
    rpc CallFunction(sharedtypesv1.FunctionCallRequest) returns (sharedtypesv1.FunctionCallResponse) {}
    // GetFunctionDefinition is used to get the definition of a function
    // that has been registered with the deploy engine.
    rpc GetFunctionDefinition(sharedtypesv1.FunctionDefinitionRequest) returns (sharedtypesv1.FunctionDefinitionResponse) {}
    // HasFunction is used to check if a function has been registered
    // with the deploy engine.
    rpc HasFunction(HasFunctionRequest) returns (HasFunctionResponse) {}
    // ListFunctions is used to list all the functions that have been
    // registered with the deploy engine.
    rpc ListFunctions(google.protobuf.Empty) returns (ListFunctionsResponse) {}

    //////////////////////////////////////////////////////////////////////
    // Methods to allow plugins to call a subset of resource
    // management functions.
    // This is primarily to allow links to reuse existing resource
    // types for the management of intermediary resources.
    //////////////////////////////////////////////////////////////////////

    // DeployResource deals with deploying a resource with the upstream resource provider.
    // THe behaviour of deploy is to create or update the resource configuration and return
    // the resource spec state once the configuration has been created or updated.
    // The caller is responsible for making sure that the input resource spec is valid.
    // The `wait_until_stable` field can be used to determine whether the service should wait for the
    // resource to stabilise before returning a response.
    // This is meant to be used to reuse resource plugins to manage intermediary resources
    // in a link implementation, this must not be used for managing resources that are explicitly
    // defined in a blueprint.
    rpc DeployResource(DeployResourceServiceRequest) returns (sharedtypesv1.DeployResourceResponse) {}
	// DestroyResource deals with destroying a resource instance if its current
	// state is successfully deployed or cleaning up a corrupt or partially deployed
	// resource instance.
	// The resource instance should be completely removed from the external provider
	// as a result of this operation.
    // This is meant to be used to reuse resource plugins to manage intermediary resources
    // in a link implementation, this must not be used for managing resources that are explicitly
    // defined in a blueprint.
    rpc DestroyResource(sharedtypesv1.DestroyResourceRequest) returns (sharedtypesv1.DestroyResourceResponse) {}
}

// PluginRegistrationRequest is the request
// for registering a plugin.
message PluginRegistrationRequest {
    // The type of plugin that is registered.
    PluginType plugin_type = 1;
	// The unique identifier for the provider plugin.
	// In addition to being unique, the ID should point to the location
	// where the provider plugin can be downloaded.
	// {hostname/}?{namespace}/{provider}
	//
	// For example:
	// registry.celerityframework.io/celerity/aws
	// celerity/aws
    string plugin_id = 2;
    // The id of the plugin instance that should correspond to the
    // id that was captured when the plugin was launched.
    string instance_id = 3;
    // The protocol versions that the plugin supports.
    // Each protocol version must be in the form MAJOR.MINOR,
    // for example: 1.0, 1.1, 2.0.
    repeated string protocol_versions = 4;
    // Metadata for the plugin that can be used for documentation.
    PluginMetadata metadata = 5;
    // The tcp port that the plugin is listening on.
    // Only the port needs to be specified here as the address
    // can only ever be the loopback address,
    // plugins can not be called from a remote host.
    int32 port = 6;
    // The unix socket that the plugin is listening on.
    string unix_socket = 7;
}

// PluginMetadata is basic metadata
// for the plugin that can be used for documentation.
message PluginMetadata {
    // A semver version for the plugin that can be used
    // for documentation and debugging purposes.
    string plugin_version = 1;
    // A friendly name for the plugin to be displayed
    // in documentation and user interfaces.
    string display_name = 2;
    // A plain text description of the plugin.
    string plain_text_description = 3;
    // A formatted description of the plugin
    // that can be formatted with markdown.
    string formatted_description = 4;
    // The URL of the git repository that the plugin
    // is hosted in.
    string repository_url = 5;
    // The company or individual that authored the plugin.
    string author = 6;
}

// PluginRegistrationResponse is the response
// for registering a plugin.
message PluginRegistrationResponse {
    bool success = 1;
    string message = 2;
    // The ID of the host that the plugin was registered with.
    // This will be checked against the host that makes requests
    // to the plugin.
    string host_id = 3;
}

// PluginDeregistrationResponse is the request
// for deregistering a plugin.
message PluginDeregistrationRequest {
    // The type of plugin that needs to be deregistered.
    PluginType plugin_type = 1;
    // The id of the plugin instance that should correspond to the
    // id that was captured when the plugin was launched.
    string instance_id = 2;
    // The ID of the host that the plugin was registered with.
    // If the host does not match, nothing will be done.
    string host_id = 3;
}

// PluginDeregistrationResponse is the response
// for deregistering a plugin.
message PluginDeregistrationResponse {
    bool success = 1;
    string message = 2;
}

// PluginType is an enum for the type of plugin being registered.
// The plugin type is used to determine the type of plugin that is
// being registered.
enum PluginType {
    // protobuf enums must have a zero value, so we need a NONE value
    // here.
    // PluginType starts at 1.
    PLUGIN_TYPE_NONE = 0;
    // A provider plugin.
    PLUGIN_TYPE_PROVIDER = 1;
    // A transformer plugin.
    PLUGIN_TYPE_TRANSFORMER = 2;
}


// HasFunctionRequest is the request
// to check if a function has been registered with
// the deploy engine.
message HasFunctionRequest {
    string function_name = 1;
}

// HasFunctionResponse is the response
// with the result of checking if a function has been
// registered with the deploy engine.
message HasFunctionResponse {
    oneof response {
        FunctionCheckResult function_check_result = 1;
        sharedtypesv1.ErrorResponse error_response = 2;
    }
}

// FunctionCheckResult is the result of checking
// if a function has been registered with the deploy engine.
message FunctionCheckResult {
    bool has_function = 1;
}

// ListFunctionsResponse is the response
// with the list of functions that have been registered
// with the deploy engine.
message ListFunctionsResponse {
    oneof response {
        FunctionList function_list = 1;
        sharedtypesv1.ErrorResponse error_response = 2;
    }
}

// FunctionList is the list of functions that have been
// registered with the deploy engine.
message FunctionList {
    repeated string functions = 1;
}

// DeployResourceServiceRequest is the request
// used to deploy a resource from a plugin.
// This enhances the sharedtypesv1.DeployResourceRequest
// to allow for a plugin to specify whether it wants to
// wait for the resource to stabilise before returning
// a response.
message DeployResourceServiceRequest {
    // The deploy resource request that is used to deploy
    // the resource with the plugin responsible for the
    // resource provider.
    sharedtypesv1.DeployResourceRequest deploy_request = 1;
    // Whether the plugin should wait for the resource to stabilise
    // before returning a response.
    bool wait_until_stable = 2;
}
