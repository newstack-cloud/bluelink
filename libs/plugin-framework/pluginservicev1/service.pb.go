// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.27.0
// source: plugin-framework/pluginservicev1/service.proto

package pluginservicev1

import (
	sharedtypesv1 "github.com/newstack-cloud/bluelink/libs/plugin-framework/sharedtypesv1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// PluginType is an enum for the type of plugin being registered.
// The plugin type is used to determine the type of plugin that is
// being registered.
type PluginType int32

const (
	// protobuf enums must have a zero value, so we need a NONE value
	// here.
	// PluginType starts at 1.
	PluginType_PLUGIN_TYPE_NONE PluginType = 0
	// A provider plugin.
	PluginType_PLUGIN_TYPE_PROVIDER PluginType = 1
	// A transformer plugin.
	PluginType_PLUGIN_TYPE_TRANSFORMER PluginType = 2
)

// Enum value maps for PluginType.
var (
	PluginType_name = map[int32]string{
		0: "PLUGIN_TYPE_NONE",
		1: "PLUGIN_TYPE_PROVIDER",
		2: "PLUGIN_TYPE_TRANSFORMER",
	}
	PluginType_value = map[string]int32{
		"PLUGIN_TYPE_NONE":        0,
		"PLUGIN_TYPE_PROVIDER":    1,
		"PLUGIN_TYPE_TRANSFORMER": 2,
	}
)

func (x PluginType) Enum() *PluginType {
	p := new(PluginType)
	*p = x
	return p
}

func (x PluginType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PluginType) Descriptor() protoreflect.EnumDescriptor {
	return file_plugin_framework_pluginservicev1_service_proto_enumTypes[0].Descriptor()
}

func (PluginType) Type() protoreflect.EnumType {
	return &file_plugin_framework_pluginservicev1_service_proto_enumTypes[0]
}

func (x PluginType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PluginType.Descriptor instead.
func (PluginType) EnumDescriptor() ([]byte, []int) {
	return file_plugin_framework_pluginservicev1_service_proto_rawDescGZIP(), []int{0}
}

// PluginRegistrationRequest is the request
// for registering a plugin.
type PluginRegistrationRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The type of plugin that is registered.
	PluginType PluginType `protobuf:"varint,1,opt,name=plugin_type,json=pluginType,enum=pluginservicev1.PluginType" json:"plugin_type,omitempty"`
	// The unique identifier for the provider plugin.
	// In addition to being unique, the ID should point to the location
	// where the provider plugin can be downloaded.
	// {hostname/}?{namespace}/{provider}
	//
	// For example:
	// registry.bluelink.dev/bluelink/aws
	// bluelink/aws
	PluginId string `protobuf:"bytes,2,opt,name=plugin_id,json=pluginId" json:"plugin_id,omitempty"`
	// The id of the plugin instance that should correspond to the
	// id that was captured when the plugin was launched.
	InstanceId string `protobuf:"bytes,3,opt,name=instance_id,json=instanceId" json:"instance_id,omitempty"`
	// The protocol versions that the plugin supports.
	// Each protocol version must be in the form MAJOR.MINOR,
	// for example: 1.0, 1.1, 2.0.
	ProtocolVersions []string `protobuf:"bytes,4,rep,name=protocol_versions,json=protocolVersions" json:"protocol_versions,omitempty"`
	// Metadata for the plugin that can be used for documentation.
	Metadata *PluginMetadata `protobuf:"bytes,5,opt,name=metadata" json:"metadata,omitempty"`
	// The tcp port that the plugin is listening on.
	// Only the port needs to be specified here as the address
	// can only ever be the loopback address,
	// plugins can not be called from a remote host.
	Port int32 `protobuf:"varint,6,opt,name=port" json:"port,omitempty"`
	// The unix socket that the plugin is listening on.
	UnixSocket    string `protobuf:"bytes,7,opt,name=unix_socket,json=unixSocket" json:"unix_socket,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PluginRegistrationRequest) Reset() {
	*x = PluginRegistrationRequest{}
	mi := &file_plugin_framework_pluginservicev1_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PluginRegistrationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PluginRegistrationRequest) ProtoMessage() {}

func (x *PluginRegistrationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_framework_pluginservicev1_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PluginRegistrationRequest.ProtoReflect.Descriptor instead.
func (*PluginRegistrationRequest) Descriptor() ([]byte, []int) {
	return file_plugin_framework_pluginservicev1_service_proto_rawDescGZIP(), []int{0}
}

func (x *PluginRegistrationRequest) GetPluginType() PluginType {
	if x != nil {
		return x.PluginType
	}
	return PluginType_PLUGIN_TYPE_NONE
}

func (x *PluginRegistrationRequest) GetPluginId() string {
	if x != nil {
		return x.PluginId
	}
	return ""
}

func (x *PluginRegistrationRequest) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *PluginRegistrationRequest) GetProtocolVersions() []string {
	if x != nil {
		return x.ProtocolVersions
	}
	return nil
}

func (x *PluginRegistrationRequest) GetMetadata() *PluginMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *PluginRegistrationRequest) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *PluginRegistrationRequest) GetUnixSocket() string {
	if x != nil {
		return x.UnixSocket
	}
	return ""
}

// PluginMetadata is basic metadata
// for the plugin that can be used for documentation.
type PluginMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// A semver version for the plugin that can be used
	// for documentation and debugging purposes.
	PluginVersion string `protobuf:"bytes,1,opt,name=plugin_version,json=pluginVersion" json:"plugin_version,omitempty"`
	// A friendly name for the plugin to be displayed
	// in documentation and user interfaces.
	DisplayName string `protobuf:"bytes,2,opt,name=display_name,json=displayName" json:"display_name,omitempty"`
	// A plain text description of the plugin.
	PlainTextDescription string `protobuf:"bytes,3,opt,name=plain_text_description,json=plainTextDescription" json:"plain_text_description,omitempty"`
	// A formatted description of the plugin
	// that can be formatted with markdown.
	FormattedDescription string `protobuf:"bytes,4,opt,name=formatted_description,json=formattedDescription" json:"formatted_description,omitempty"`
	// The URL of the git repository that the plugin
	// is hosted in.
	RepositoryUrl string `protobuf:"bytes,5,opt,name=repository_url,json=repositoryUrl" json:"repository_url,omitempty"`
	// The company or individual that authored the plugin.
	Author        string `protobuf:"bytes,6,opt,name=author" json:"author,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PluginMetadata) Reset() {
	*x = PluginMetadata{}
	mi := &file_plugin_framework_pluginservicev1_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PluginMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PluginMetadata) ProtoMessage() {}

func (x *PluginMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_framework_pluginservicev1_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PluginMetadata.ProtoReflect.Descriptor instead.
func (*PluginMetadata) Descriptor() ([]byte, []int) {
	return file_plugin_framework_pluginservicev1_service_proto_rawDescGZIP(), []int{1}
}

func (x *PluginMetadata) GetPluginVersion() string {
	if x != nil {
		return x.PluginVersion
	}
	return ""
}

func (x *PluginMetadata) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *PluginMetadata) GetPlainTextDescription() string {
	if x != nil {
		return x.PlainTextDescription
	}
	return ""
}

func (x *PluginMetadata) GetFormattedDescription() string {
	if x != nil {
		return x.FormattedDescription
	}
	return ""
}

func (x *PluginMetadata) GetRepositoryUrl() string {
	if x != nil {
		return x.RepositoryUrl
	}
	return ""
}

func (x *PluginMetadata) GetAuthor() string {
	if x != nil {
		return x.Author
	}
	return ""
}

// PluginRegistrationResponse is the response
// for registering a plugin.
type PluginRegistrationResponse struct {
	state   protoimpl.MessageState `protogen:"open.v1"`
	Success bool                   `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	Message string                 `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
	// The ID of the host that the plugin was registered with.
	// This will be checked against the host that makes requests
	// to the plugin.
	HostId        string `protobuf:"bytes,3,opt,name=host_id,json=hostId" json:"host_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PluginRegistrationResponse) Reset() {
	*x = PluginRegistrationResponse{}
	mi := &file_plugin_framework_pluginservicev1_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PluginRegistrationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PluginRegistrationResponse) ProtoMessage() {}

func (x *PluginRegistrationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_framework_pluginservicev1_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PluginRegistrationResponse.ProtoReflect.Descriptor instead.
func (*PluginRegistrationResponse) Descriptor() ([]byte, []int) {
	return file_plugin_framework_pluginservicev1_service_proto_rawDescGZIP(), []int{2}
}

func (x *PluginRegistrationResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *PluginRegistrationResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *PluginRegistrationResponse) GetHostId() string {
	if x != nil {
		return x.HostId
	}
	return ""
}

// PluginDeregistrationResponse is the request
// for deregistering a plugin.
type PluginDeregistrationRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The type of plugin that needs to be deregistered.
	PluginType PluginType `protobuf:"varint,1,opt,name=plugin_type,json=pluginType,enum=pluginservicev1.PluginType" json:"plugin_type,omitempty"`
	// The id of the plugin instance that should correspond to the
	// id that was captured when the plugin was launched.
	InstanceId string `protobuf:"bytes,2,opt,name=instance_id,json=instanceId" json:"instance_id,omitempty"`
	// The ID of the host that the plugin was registered with.
	// If the host does not match, nothing will be done.
	HostId        string `protobuf:"bytes,3,opt,name=host_id,json=hostId" json:"host_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PluginDeregistrationRequest) Reset() {
	*x = PluginDeregistrationRequest{}
	mi := &file_plugin_framework_pluginservicev1_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PluginDeregistrationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PluginDeregistrationRequest) ProtoMessage() {}

func (x *PluginDeregistrationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_framework_pluginservicev1_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PluginDeregistrationRequest.ProtoReflect.Descriptor instead.
func (*PluginDeregistrationRequest) Descriptor() ([]byte, []int) {
	return file_plugin_framework_pluginservicev1_service_proto_rawDescGZIP(), []int{3}
}

func (x *PluginDeregistrationRequest) GetPluginType() PluginType {
	if x != nil {
		return x.PluginType
	}
	return PluginType_PLUGIN_TYPE_NONE
}

func (x *PluginDeregistrationRequest) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *PluginDeregistrationRequest) GetHostId() string {
	if x != nil {
		return x.HostId
	}
	return ""
}

// PluginDeregistrationResponse is the response
// for deregistering a plugin.
type PluginDeregistrationResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PluginDeregistrationResponse) Reset() {
	*x = PluginDeregistrationResponse{}
	mi := &file_plugin_framework_pluginservicev1_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PluginDeregistrationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PluginDeregistrationResponse) ProtoMessage() {}

func (x *PluginDeregistrationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_framework_pluginservicev1_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PluginDeregistrationResponse.ProtoReflect.Descriptor instead.
func (*PluginDeregistrationResponse) Descriptor() ([]byte, []int) {
	return file_plugin_framework_pluginservicev1_service_proto_rawDescGZIP(), []int{4}
}

func (x *PluginDeregistrationResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *PluginDeregistrationResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// HasFunctionRequest is the request
// to check if a function has been registered with
// the deploy engine.
type HasFunctionRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FunctionName  string                 `protobuf:"bytes,1,opt,name=function_name,json=functionName" json:"function_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HasFunctionRequest) Reset() {
	*x = HasFunctionRequest{}
	mi := &file_plugin_framework_pluginservicev1_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HasFunctionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HasFunctionRequest) ProtoMessage() {}

func (x *HasFunctionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_framework_pluginservicev1_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HasFunctionRequest.ProtoReflect.Descriptor instead.
func (*HasFunctionRequest) Descriptor() ([]byte, []int) {
	return file_plugin_framework_pluginservicev1_service_proto_rawDescGZIP(), []int{5}
}

func (x *HasFunctionRequest) GetFunctionName() string {
	if x != nil {
		return x.FunctionName
	}
	return ""
}

// HasFunctionResponse is the response
// with the result of checking if a function has been
// registered with the deploy engine.
type HasFunctionResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Response:
	//
	//	*HasFunctionResponse_FunctionCheckResult
	//	*HasFunctionResponse_ErrorResponse
	Response      isHasFunctionResponse_Response `protobuf_oneof:"response"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HasFunctionResponse) Reset() {
	*x = HasFunctionResponse{}
	mi := &file_plugin_framework_pluginservicev1_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HasFunctionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HasFunctionResponse) ProtoMessage() {}

func (x *HasFunctionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_framework_pluginservicev1_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HasFunctionResponse.ProtoReflect.Descriptor instead.
func (*HasFunctionResponse) Descriptor() ([]byte, []int) {
	return file_plugin_framework_pluginservicev1_service_proto_rawDescGZIP(), []int{6}
}

func (x *HasFunctionResponse) GetResponse() isHasFunctionResponse_Response {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *HasFunctionResponse) GetFunctionCheckResult() *FunctionCheckResult {
	if x != nil {
		if x, ok := x.Response.(*HasFunctionResponse_FunctionCheckResult); ok {
			return x.FunctionCheckResult
		}
	}
	return nil
}

func (x *HasFunctionResponse) GetErrorResponse() *sharedtypesv1.ErrorResponse {
	if x != nil {
		if x, ok := x.Response.(*HasFunctionResponse_ErrorResponse); ok {
			return x.ErrorResponse
		}
	}
	return nil
}

type isHasFunctionResponse_Response interface {
	isHasFunctionResponse_Response()
}

type HasFunctionResponse_FunctionCheckResult struct {
	FunctionCheckResult *FunctionCheckResult `protobuf:"bytes,1,opt,name=function_check_result,json=functionCheckResult,oneof"`
}

type HasFunctionResponse_ErrorResponse struct {
	ErrorResponse *sharedtypesv1.ErrorResponse `protobuf:"bytes,2,opt,name=error_response,json=errorResponse,oneof"`
}

func (*HasFunctionResponse_FunctionCheckResult) isHasFunctionResponse_Response() {}

func (*HasFunctionResponse_ErrorResponse) isHasFunctionResponse_Response() {}

// FunctionCheckResult is the result of checking
// if a function has been registered with the deploy engine.
type FunctionCheckResult struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	HasFunction   bool                   `protobuf:"varint,1,opt,name=has_function,json=hasFunction" json:"has_function,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FunctionCheckResult) Reset() {
	*x = FunctionCheckResult{}
	mi := &file_plugin_framework_pluginservicev1_service_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FunctionCheckResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FunctionCheckResult) ProtoMessage() {}

func (x *FunctionCheckResult) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_framework_pluginservicev1_service_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FunctionCheckResult.ProtoReflect.Descriptor instead.
func (*FunctionCheckResult) Descriptor() ([]byte, []int) {
	return file_plugin_framework_pluginservicev1_service_proto_rawDescGZIP(), []int{7}
}

func (x *FunctionCheckResult) GetHasFunction() bool {
	if x != nil {
		return x.HasFunction
	}
	return false
}

// ListFunctionsResponse is the response
// with the list of functions that have been registered
// with the deploy engine.
type ListFunctionsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Response:
	//
	//	*ListFunctionsResponse_FunctionList
	//	*ListFunctionsResponse_ErrorResponse
	Response      isListFunctionsResponse_Response `protobuf_oneof:"response"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListFunctionsResponse) Reset() {
	*x = ListFunctionsResponse{}
	mi := &file_plugin_framework_pluginservicev1_service_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListFunctionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFunctionsResponse) ProtoMessage() {}

func (x *ListFunctionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_framework_pluginservicev1_service_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFunctionsResponse.ProtoReflect.Descriptor instead.
func (*ListFunctionsResponse) Descriptor() ([]byte, []int) {
	return file_plugin_framework_pluginservicev1_service_proto_rawDescGZIP(), []int{8}
}

func (x *ListFunctionsResponse) GetResponse() isListFunctionsResponse_Response {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *ListFunctionsResponse) GetFunctionList() *FunctionList {
	if x != nil {
		if x, ok := x.Response.(*ListFunctionsResponse_FunctionList); ok {
			return x.FunctionList
		}
	}
	return nil
}

func (x *ListFunctionsResponse) GetErrorResponse() *sharedtypesv1.ErrorResponse {
	if x != nil {
		if x, ok := x.Response.(*ListFunctionsResponse_ErrorResponse); ok {
			return x.ErrorResponse
		}
	}
	return nil
}

type isListFunctionsResponse_Response interface {
	isListFunctionsResponse_Response()
}

type ListFunctionsResponse_FunctionList struct {
	FunctionList *FunctionList `protobuf:"bytes,1,opt,name=function_list,json=functionList,oneof"`
}

type ListFunctionsResponse_ErrorResponse struct {
	ErrorResponse *sharedtypesv1.ErrorResponse `protobuf:"bytes,2,opt,name=error_response,json=errorResponse,oneof"`
}

func (*ListFunctionsResponse_FunctionList) isListFunctionsResponse_Response() {}

func (*ListFunctionsResponse_ErrorResponse) isListFunctionsResponse_Response() {}

// FunctionList is the list of functions that have been
// registered with the deploy engine.
type FunctionList struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Functions     []string               `protobuf:"bytes,1,rep,name=functions" json:"functions,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FunctionList) Reset() {
	*x = FunctionList{}
	mi := &file_plugin_framework_pluginservicev1_service_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FunctionList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FunctionList) ProtoMessage() {}

func (x *FunctionList) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_framework_pluginservicev1_service_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FunctionList.ProtoReflect.Descriptor instead.
func (*FunctionList) Descriptor() ([]byte, []int) {
	return file_plugin_framework_pluginservicev1_service_proto_rawDescGZIP(), []int{9}
}

func (x *FunctionList) GetFunctions() []string {
	if x != nil {
		return x.Functions
	}
	return nil
}

// DeployResourceServiceRequest is the request
// used to deploy a resource from a plugin.
// This enhances the sharedtypesv1.DeployResourceRequest
// to allow for a plugin to specify whether it wants to
// wait for the resource to stabilise before returning
// a response.
type DeployResourceServiceRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The deploy resource request that is used to deploy
	// the resource with the plugin responsible for the
	// resource provider.
	DeployRequest *sharedtypesv1.DeployResourceRequest `protobuf:"bytes,1,opt,name=deploy_request,json=deployRequest" json:"deploy_request,omitempty"`
	// Whether the plugin should wait for the resource to stabilise
	// before returning a response.
	WaitUntilStable bool `protobuf:"varint,2,opt,name=wait_until_stable,json=waitUntilStable" json:"wait_until_stable,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *DeployResourceServiceRequest) Reset() {
	*x = DeployResourceServiceRequest{}
	mi := &file_plugin_framework_pluginservicev1_service_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeployResourceServiceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeployResourceServiceRequest) ProtoMessage() {}

func (x *DeployResourceServiceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_framework_pluginservicev1_service_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeployResourceServiceRequest.ProtoReflect.Descriptor instead.
func (*DeployResourceServiceRequest) Descriptor() ([]byte, []int) {
	return file_plugin_framework_pluginservicev1_service_proto_rawDescGZIP(), []int{10}
}

func (x *DeployResourceServiceRequest) GetDeployRequest() *sharedtypesv1.DeployResourceRequest {
	if x != nil {
		return x.DeployRequest
	}
	return nil
}

func (x *DeployResourceServiceRequest) GetWaitUntilStable() bool {
	if x != nil {
		return x.WaitUntilStable
	}
	return false
}

// LookupResourceInStateRequest is the request
// to look up a resource in the blueprint state.
type LookupResourceInStateRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The ID of the blueprint instance to look up the resource in.
	InstanceId string `protobuf:"bytes,1,opt,name=instance_id,json=instanceId" json:"instance_id,omitempty"`
	// The type of the resource to look up.
	// For eaxmple, "aws/iam/role" or "gcloud/compute/instance".
	ResourceType string `protobuf:"bytes,2,opt,name=resource_type,json=resourceType" json:"resource_type,omitempty"`
	// The external identifier of the resource in the provider.
	// This is defined in a resource type spec definition as the
	// `IDField`.
	ExternalId    string                         `protobuf:"bytes,3,opt,name=external_id,json=externalId" json:"external_id,omitempty"`
	Context       *sharedtypesv1.ProviderContext `protobuf:"bytes,4,opt,name=context" json:"context,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LookupResourceInStateRequest) Reset() {
	*x = LookupResourceInStateRequest{}
	mi := &file_plugin_framework_pluginservicev1_service_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LookupResourceInStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LookupResourceInStateRequest) ProtoMessage() {}

func (x *LookupResourceInStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_framework_pluginservicev1_service_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LookupResourceInStateRequest.ProtoReflect.Descriptor instead.
func (*LookupResourceInStateRequest) Descriptor() ([]byte, []int) {
	return file_plugin_framework_pluginservicev1_service_proto_rawDescGZIP(), []int{11}
}

func (x *LookupResourceInStateRequest) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *LookupResourceInStateRequest) GetResourceType() string {
	if x != nil {
		return x.ResourceType
	}
	return ""
}

func (x *LookupResourceInStateRequest) GetExternalId() string {
	if x != nil {
		return x.ExternalId
	}
	return ""
}

func (x *LookupResourceInStateRequest) GetContext() *sharedtypesv1.ProviderContext {
	if x != nil {
		return x.Context
	}
	return nil
}

// LookupResourceInStateResponse is the response
// to the LookupResourceInStateRequest.
type LookupResourceInStateResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Response:
	//
	//	*LookupResourceInStateResponse_Resource
	//	*LookupResourceInStateResponse_ErrorResponse
	Response      isLookupResourceInStateResponse_Response `protobuf_oneof:"response"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LookupResourceInStateResponse) Reset() {
	*x = LookupResourceInStateResponse{}
	mi := &file_plugin_framework_pluginservicev1_service_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LookupResourceInStateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LookupResourceInStateResponse) ProtoMessage() {}

func (x *LookupResourceInStateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_framework_pluginservicev1_service_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LookupResourceInStateResponse.ProtoReflect.Descriptor instead.
func (*LookupResourceInStateResponse) Descriptor() ([]byte, []int) {
	return file_plugin_framework_pluginservicev1_service_proto_rawDescGZIP(), []int{12}
}

func (x *LookupResourceInStateResponse) GetResponse() isLookupResourceInStateResponse_Response {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *LookupResourceInStateResponse) GetResource() *sharedtypesv1.ResourceState {
	if x != nil {
		if x, ok := x.Response.(*LookupResourceInStateResponse_Resource); ok {
			return x.Resource
		}
	}
	return nil
}

func (x *LookupResourceInStateResponse) GetErrorResponse() *sharedtypesv1.ErrorResponse {
	if x != nil {
		if x, ok := x.Response.(*LookupResourceInStateResponse_ErrorResponse); ok {
			return x.ErrorResponse
		}
	}
	return nil
}

type isLookupResourceInStateResponse_Response interface {
	isLookupResourceInStateResponse_Response()
}

type LookupResourceInStateResponse_Resource struct {
	Resource *sharedtypesv1.ResourceState `protobuf:"bytes,1,opt,name=resource,oneof"`
}

type LookupResourceInStateResponse_ErrorResponse struct {
	ErrorResponse *sharedtypesv1.ErrorResponse `protobuf:"bytes,2,opt,name=error_response,json=errorResponse,oneof"`
}

func (*LookupResourceInStateResponse_Resource) isLookupResourceInStateResponse_Response() {}

func (*LookupResourceInStateResponse_ErrorResponse) isLookupResourceInStateResponse_Response() {}

// AcquireResourceLockRequest is the request
// to acquire a lock on a resource.
type AcquireResourceLockRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The ID of the blueprint instance to scope the resource lock to.
	InstanceId string `protobuf:"bytes,1,opt,name=instance_id,json=instanceId" json:"instance_id,omitempty"`
	// The name of the resource in the blueprint to lock.
	ResourceName string `protobuf:"bytes,2,opt,name=resource_name,json=resourceName" json:"resource_name,omitempty"`
	// The identifier of the caller that is seeking to acquire the lock.
	AcquiredBy    string                         `protobuf:"bytes,3,opt,name=acquired_by,json=acquiredBy" json:"acquired_by,omitempty"`
	Context       *sharedtypesv1.ProviderContext `protobuf:"bytes,4,opt,name=context" json:"context,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AcquireResourceLockRequest) Reset() {
	*x = AcquireResourceLockRequest{}
	mi := &file_plugin_framework_pluginservicev1_service_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AcquireResourceLockRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcquireResourceLockRequest) ProtoMessage() {}

func (x *AcquireResourceLockRequest) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_framework_pluginservicev1_service_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcquireResourceLockRequest.ProtoReflect.Descriptor instead.
func (*AcquireResourceLockRequest) Descriptor() ([]byte, []int) {
	return file_plugin_framework_pluginservicev1_service_proto_rawDescGZIP(), []int{13}
}

func (x *AcquireResourceLockRequest) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *AcquireResourceLockRequest) GetResourceName() string {
	if x != nil {
		return x.ResourceName
	}
	return ""
}

func (x *AcquireResourceLockRequest) GetAcquiredBy() string {
	if x != nil {
		return x.AcquiredBy
	}
	return ""
}

func (x *AcquireResourceLockRequest) GetContext() *sharedtypesv1.ProviderContext {
	if x != nil {
		return x.Context
	}
	return nil
}

// AcquireResourceLockResponse is the response
// containing the result of acquiring a resource lock.
type AcquireResourceLockResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Response:
	//
	//	*AcquireResourceLockResponse_Result
	//	*AcquireResourceLockResponse_ErrorResponse
	Response      isAcquireResourceLockResponse_Response `protobuf_oneof:"response"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AcquireResourceLockResponse) Reset() {
	*x = AcquireResourceLockResponse{}
	mi := &file_plugin_framework_pluginservicev1_service_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AcquireResourceLockResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcquireResourceLockResponse) ProtoMessage() {}

func (x *AcquireResourceLockResponse) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_framework_pluginservicev1_service_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcquireResourceLockResponse.ProtoReflect.Descriptor instead.
func (*AcquireResourceLockResponse) Descriptor() ([]byte, []int) {
	return file_plugin_framework_pluginservicev1_service_proto_rawDescGZIP(), []int{14}
}

func (x *AcquireResourceLockResponse) GetResponse() isAcquireResourceLockResponse_Response {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *AcquireResourceLockResponse) GetResult() *AcquireResourceLockResult {
	if x != nil {
		if x, ok := x.Response.(*AcquireResourceLockResponse_Result); ok {
			return x.Result
		}
	}
	return nil
}

func (x *AcquireResourceLockResponse) GetErrorResponse() *sharedtypesv1.ErrorResponse {
	if x != nil {
		if x, ok := x.Response.(*AcquireResourceLockResponse_ErrorResponse); ok {
			return x.ErrorResponse
		}
	}
	return nil
}

type isAcquireResourceLockResponse_Response interface {
	isAcquireResourceLockResponse_Response()
}

type AcquireResourceLockResponse_Result struct {
	Result *AcquireResourceLockResult `protobuf:"bytes,1,opt,name=result,oneof"`
}

type AcquireResourceLockResponse_ErrorResponse struct {
	ErrorResponse *sharedtypesv1.ErrorResponse `protobuf:"bytes,2,opt,name=error_response,json=errorResponse,oneof"`
}

func (*AcquireResourceLockResponse_Result) isAcquireResourceLockResponse_Response() {}

func (*AcquireResourceLockResponse_ErrorResponse) isAcquireResourceLockResponse_Response() {}

// AcquireResourceLockResult contains the result
// of acquiring a lock to a resource.
type AcquireResourceLockResult struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Acquired      bool                   `protobuf:"varint,1,opt,name=acquired" json:"acquired,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AcquireResourceLockResult) Reset() {
	*x = AcquireResourceLockResult{}
	mi := &file_plugin_framework_pluginservicev1_service_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AcquireResourceLockResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcquireResourceLockResult) ProtoMessage() {}

func (x *AcquireResourceLockResult) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_framework_pluginservicev1_service_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcquireResourceLockResult.ProtoReflect.Descriptor instead.
func (*AcquireResourceLockResult) Descriptor() ([]byte, []int) {
	return file_plugin_framework_pluginservicev1_service_proto_rawDescGZIP(), []int{15}
}

func (x *AcquireResourceLockResult) GetAcquired() bool {
	if x != nil {
		return x.Acquired
	}
	return false
}

var File_plugin_framework_pluginservicev1_service_proto protoreflect.FileDescriptor

var file_plugin_framework_pluginservicev1_service_proto_rawDesc = string([]byte{
	0x0a, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2d, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f,
	0x72, 0x6b, 0x2f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x76, 0x31, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x0f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x76,
	0x31, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2a,
	0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2d, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b,
	0x2f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x74, 0x79, 0x70, 0x65, 0x73, 0x76, 0x31, 0x2f, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb6, 0x02, 0x0a, 0x19, 0x50,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x0b, 0x70, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e,
	0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x76, 0x31, 0x2e,
	0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x70, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x10, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x3b, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x6f,
	0x72, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x6e, 0x69, 0x78, 0x5f, 0x73, 0x6f, 0x63, 0x6b, 0x65,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x6e, 0x69, 0x78, 0x53, 0x6f, 0x63,
	0x6b, 0x65, 0x74, 0x22, 0x84, 0x02, 0x0a, 0x0e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a,
	0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x34, 0x0a, 0x16, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x14, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x15, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x74, 0x65, 0x64, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74, 0x65, 0x64,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x72,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x55,
	0x72, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x22, 0x69, 0x0a, 0x1a, 0x50, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x17, 0x0a, 0x07,
	0x68, 0x6f, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x68,
	0x6f, 0x73, 0x74, 0x49, 0x64, 0x22, 0x95, 0x01, 0x0a, 0x1b, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x44, 0x65, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x0b, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x70, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x68, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x22, 0x52, 0x0a,
	0x1c, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x44, 0x65, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x22, 0x39, 0x0a, 0x12, 0x48, 0x61, 0x73, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xc4, 0x01, 0x0a,
	0x13, 0x48, 0x61, 0x73, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5a, 0x0a, 0x15, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x76, 0x31, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x48, 0x00, 0x52, 0x13, 0x66, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x45, 0x0a, 0x0e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x74, 0x79, 0x70, 0x65, 0x73, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x38, 0x0a, 0x13, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x68, 0x61,
	0x73, 0x5f, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0b, 0x68, 0x61, 0x73, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xb0, 0x01,
	0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x0d, 0x66, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x76, 0x31,
	0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52,
	0x0c, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x45, 0x0a,
	0x0e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x2c, 0x0a, 0x0c, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x09, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x97,
	0x01, 0x0a, 0x1c, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x4b, 0x0a, 0x0e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0d, 0x64,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x11,
	0x77, 0x61, 0x69, 0x74, 0x5f, 0x75, 0x6e, 0x74, 0x69, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x77, 0x61, 0x69, 0x74, 0x55, 0x6e, 0x74,
	0x69, 0x6c, 0x53, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x22, 0xbf, 0x01, 0x0a, 0x1c, 0x4c, 0x6f, 0x6f,
	0x6b, 0x75, 0x70, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x64,
	0x12, 0x38, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x74, 0x79, 0x70, 0x65, 0x73, 0x76,
	0x31, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0xae, 0x01, 0x0a, 0x1d, 0x4c,
	0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x08,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x74, 0x79, 0x70, 0x65, 0x73, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x08,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x45, 0x0a, 0x0e, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x74, 0x79, 0x70, 0x65, 0x73, 0x76, 0x31,
	0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00,
	0x52, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42,
	0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xbd, 0x01, 0x0a, 0x1a,
	0x41, 0x63, 0x71, 0x75, 0x69, 0x72, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c,
	0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x63, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x42,
	0x79, 0x12, 0x38, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0xb6, 0x01, 0x0a, 0x1b,
	0x41, 0x63, 0x71, 0x75, 0x69, 0x72, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c,
	0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x76, 0x31, 0x2e, 0x41, 0x63,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x6f, 0x63,
	0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x48, 0x00, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x45, 0x0a, 0x0e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x74, 0x79, 0x70, 0x65, 0x73, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x37, 0x0a, 0x19, 0x41, 0x63, 0x71, 0x75, 0x69, 0x72, 0x65, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x63, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x61, 0x63, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x2a, 0x59, 0x0a,
	0x0a, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x50,
	0x4c, 0x55, 0x47, 0x49, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10,
	0x00, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x4c, 0x55, 0x47, 0x49, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x50,
	0x4c, 0x55, 0x47, 0x49, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53,
	0x46, 0x4f, 0x52, 0x4d, 0x45, 0x52, 0x10, 0x02, 0x32, 0x93, 0x08, 0x0a, 0x07, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x65, 0x0a, 0x08, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x12, 0x2a, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x76, 0x31, 0x2e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x70,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x76, 0x31, 0x2e, 0x50,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6b, 0x0a, 0x0a, 0x44,
	0x65, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x12, 0x2c, 0x2e, 0x70, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x44, 0x65, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x44, 0x65, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x59, 0x0a, 0x0c, 0x43, 0x61, 0x6c, 0x6c,
	0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x74, 0x79, 0x70, 0x65, 0x73, 0x76, 0x31, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x74, 0x79, 0x70, 0x65, 0x73, 0x76, 0x31, 0x2e, 0x46, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x6e, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x2e, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x74, 0x79, 0x70, 0x65, 0x73, 0x76, 0x31, 0x2e, 0x46, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x76, 0x31, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x5a, 0x0a, 0x0b, 0x48, 0x61, 0x73, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x23, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x76, 0x31, 0x2e, 0x48, 0x61, 0x73, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x76, 0x31, 0x2e, 0x48, 0x61, 0x73, 0x46, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x51, 0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x26, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x46,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x68, 0x0a, 0x0e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x12, 0x2d, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x62, 0x0a, 0x0f,
	0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12,
	0x25, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x74, 0x79, 0x70, 0x65, 0x73, 0x76, 0x31, 0x2e,
	0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x78, 0x0a, 0x15, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x49, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2d, 0x2e, 0x70, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b,
	0x75, 0x70, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75,
	0x70, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x72, 0x0a, 0x13, 0x41, 0x63,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x6f, 0x63,
	0x6b, 0x12, 0x2b, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x71, 0x75, 0x69, 0x72, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c,
	0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x76, 0x31,
	0x2e, 0x41, 0x63, 0x71, 0x75, 0x69, 0x72, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x4c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x4f,
	0x5a, 0x48, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6e, 0x65, 0x77,
	0x73, 0x74, 0x61, 0x63, 0x6b, 0x2d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x62, 0x6c, 0x75, 0x65,
	0x6c, 0x69, 0x6e, 0x6b, 0x2f, 0x6c, 0x69, 0x62, 0x73, 0x2f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x2d, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x70, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x76, 0x31, 0x92, 0x03, 0x02, 0x08, 0x02, 0x62,
	0x08, 0x65, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x70, 0xe8, 0x07,
})

var (
	file_plugin_framework_pluginservicev1_service_proto_rawDescOnce sync.Once
	file_plugin_framework_pluginservicev1_service_proto_rawDescData []byte
)

func file_plugin_framework_pluginservicev1_service_proto_rawDescGZIP() []byte {
	file_plugin_framework_pluginservicev1_service_proto_rawDescOnce.Do(func() {
		file_plugin_framework_pluginservicev1_service_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_plugin_framework_pluginservicev1_service_proto_rawDesc), len(file_plugin_framework_pluginservicev1_service_proto_rawDesc)))
	})
	return file_plugin_framework_pluginservicev1_service_proto_rawDescData
}

var file_plugin_framework_pluginservicev1_service_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_plugin_framework_pluginservicev1_service_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_plugin_framework_pluginservicev1_service_proto_goTypes = []any{
	(PluginType)(0),                                  // 0: pluginservicev1.PluginType
	(*PluginRegistrationRequest)(nil),                // 1: pluginservicev1.PluginRegistrationRequest
	(*PluginMetadata)(nil),                           // 2: pluginservicev1.PluginMetadata
	(*PluginRegistrationResponse)(nil),               // 3: pluginservicev1.PluginRegistrationResponse
	(*PluginDeregistrationRequest)(nil),              // 4: pluginservicev1.PluginDeregistrationRequest
	(*PluginDeregistrationResponse)(nil),             // 5: pluginservicev1.PluginDeregistrationResponse
	(*HasFunctionRequest)(nil),                       // 6: pluginservicev1.HasFunctionRequest
	(*HasFunctionResponse)(nil),                      // 7: pluginservicev1.HasFunctionResponse
	(*FunctionCheckResult)(nil),                      // 8: pluginservicev1.FunctionCheckResult
	(*ListFunctionsResponse)(nil),                    // 9: pluginservicev1.ListFunctionsResponse
	(*FunctionList)(nil),                             // 10: pluginservicev1.FunctionList
	(*DeployResourceServiceRequest)(nil),             // 11: pluginservicev1.DeployResourceServiceRequest
	(*LookupResourceInStateRequest)(nil),             // 12: pluginservicev1.LookupResourceInStateRequest
	(*LookupResourceInStateResponse)(nil),            // 13: pluginservicev1.LookupResourceInStateResponse
	(*AcquireResourceLockRequest)(nil),               // 14: pluginservicev1.AcquireResourceLockRequest
	(*AcquireResourceLockResponse)(nil),              // 15: pluginservicev1.AcquireResourceLockResponse
	(*AcquireResourceLockResult)(nil),                // 16: pluginservicev1.AcquireResourceLockResult
	(*sharedtypesv1.ErrorResponse)(nil),              // 17: sharedtypesv1.ErrorResponse
	(*sharedtypesv1.DeployResourceRequest)(nil),      // 18: sharedtypesv1.DeployResourceRequest
	(*sharedtypesv1.ProviderContext)(nil),            // 19: sharedtypesv1.ProviderContext
	(*sharedtypesv1.ResourceState)(nil),              // 20: sharedtypesv1.ResourceState
	(*sharedtypesv1.FunctionCallRequest)(nil),        // 21: sharedtypesv1.FunctionCallRequest
	(*sharedtypesv1.FunctionDefinitionRequest)(nil),  // 22: sharedtypesv1.FunctionDefinitionRequest
	(*emptypb.Empty)(nil),                            // 23: google.protobuf.Empty
	(*sharedtypesv1.DestroyResourceRequest)(nil),     // 24: sharedtypesv1.DestroyResourceRequest
	(*sharedtypesv1.FunctionCallResponse)(nil),       // 25: sharedtypesv1.FunctionCallResponse
	(*sharedtypesv1.FunctionDefinitionResponse)(nil), // 26: sharedtypesv1.FunctionDefinitionResponse
	(*sharedtypesv1.DeployResourceResponse)(nil),     // 27: sharedtypesv1.DeployResourceResponse
	(*sharedtypesv1.DestroyResourceResponse)(nil),    // 28: sharedtypesv1.DestroyResourceResponse
}
var file_plugin_framework_pluginservicev1_service_proto_depIdxs = []int32{
	0,  // 0: pluginservicev1.PluginRegistrationRequest.plugin_type:type_name -> pluginservicev1.PluginType
	2,  // 1: pluginservicev1.PluginRegistrationRequest.metadata:type_name -> pluginservicev1.PluginMetadata
	0,  // 2: pluginservicev1.PluginDeregistrationRequest.plugin_type:type_name -> pluginservicev1.PluginType
	8,  // 3: pluginservicev1.HasFunctionResponse.function_check_result:type_name -> pluginservicev1.FunctionCheckResult
	17, // 4: pluginservicev1.HasFunctionResponse.error_response:type_name -> sharedtypesv1.ErrorResponse
	10, // 5: pluginservicev1.ListFunctionsResponse.function_list:type_name -> pluginservicev1.FunctionList
	17, // 6: pluginservicev1.ListFunctionsResponse.error_response:type_name -> sharedtypesv1.ErrorResponse
	18, // 7: pluginservicev1.DeployResourceServiceRequest.deploy_request:type_name -> sharedtypesv1.DeployResourceRequest
	19, // 8: pluginservicev1.LookupResourceInStateRequest.context:type_name -> sharedtypesv1.ProviderContext
	20, // 9: pluginservicev1.LookupResourceInStateResponse.resource:type_name -> sharedtypesv1.ResourceState
	17, // 10: pluginservicev1.LookupResourceInStateResponse.error_response:type_name -> sharedtypesv1.ErrorResponse
	19, // 11: pluginservicev1.AcquireResourceLockRequest.context:type_name -> sharedtypesv1.ProviderContext
	16, // 12: pluginservicev1.AcquireResourceLockResponse.result:type_name -> pluginservicev1.AcquireResourceLockResult
	17, // 13: pluginservicev1.AcquireResourceLockResponse.error_response:type_name -> sharedtypesv1.ErrorResponse
	1,  // 14: pluginservicev1.Service.Register:input_type -> pluginservicev1.PluginRegistrationRequest
	4,  // 15: pluginservicev1.Service.Deregister:input_type -> pluginservicev1.PluginDeregistrationRequest
	21, // 16: pluginservicev1.Service.CallFunction:input_type -> sharedtypesv1.FunctionCallRequest
	22, // 17: pluginservicev1.Service.GetFunctionDefinition:input_type -> sharedtypesv1.FunctionDefinitionRequest
	6,  // 18: pluginservicev1.Service.HasFunction:input_type -> pluginservicev1.HasFunctionRequest
	23, // 19: pluginservicev1.Service.ListFunctions:input_type -> google.protobuf.Empty
	11, // 20: pluginservicev1.Service.DeployResource:input_type -> pluginservicev1.DeployResourceServiceRequest
	24, // 21: pluginservicev1.Service.DestroyResource:input_type -> sharedtypesv1.DestroyResourceRequest
	12, // 22: pluginservicev1.Service.LookupResourceInState:input_type -> pluginservicev1.LookupResourceInStateRequest
	14, // 23: pluginservicev1.Service.AcquireResourceLock:input_type -> pluginservicev1.AcquireResourceLockRequest
	3,  // 24: pluginservicev1.Service.Register:output_type -> pluginservicev1.PluginRegistrationResponse
	5,  // 25: pluginservicev1.Service.Deregister:output_type -> pluginservicev1.PluginDeregistrationResponse
	25, // 26: pluginservicev1.Service.CallFunction:output_type -> sharedtypesv1.FunctionCallResponse
	26, // 27: pluginservicev1.Service.GetFunctionDefinition:output_type -> sharedtypesv1.FunctionDefinitionResponse
	7,  // 28: pluginservicev1.Service.HasFunction:output_type -> pluginservicev1.HasFunctionResponse
	9,  // 29: pluginservicev1.Service.ListFunctions:output_type -> pluginservicev1.ListFunctionsResponse
	27, // 30: pluginservicev1.Service.DeployResource:output_type -> sharedtypesv1.DeployResourceResponse
	28, // 31: pluginservicev1.Service.DestroyResource:output_type -> sharedtypesv1.DestroyResourceResponse
	13, // 32: pluginservicev1.Service.LookupResourceInState:output_type -> pluginservicev1.LookupResourceInStateResponse
	15, // 33: pluginservicev1.Service.AcquireResourceLock:output_type -> pluginservicev1.AcquireResourceLockResponse
	24, // [24:34] is the sub-list for method output_type
	14, // [14:24] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_plugin_framework_pluginservicev1_service_proto_init() }
func file_plugin_framework_pluginservicev1_service_proto_init() {
	if File_plugin_framework_pluginservicev1_service_proto != nil {
		return
	}
	file_plugin_framework_pluginservicev1_service_proto_msgTypes[6].OneofWrappers = []any{
		(*HasFunctionResponse_FunctionCheckResult)(nil),
		(*HasFunctionResponse_ErrorResponse)(nil),
	}
	file_plugin_framework_pluginservicev1_service_proto_msgTypes[8].OneofWrappers = []any{
		(*ListFunctionsResponse_FunctionList)(nil),
		(*ListFunctionsResponse_ErrorResponse)(nil),
	}
	file_plugin_framework_pluginservicev1_service_proto_msgTypes[12].OneofWrappers = []any{
		(*LookupResourceInStateResponse_Resource)(nil),
		(*LookupResourceInStateResponse_ErrorResponse)(nil),
	}
	file_plugin_framework_pluginservicev1_service_proto_msgTypes[14].OneofWrappers = []any{
		(*AcquireResourceLockResponse_Result)(nil),
		(*AcquireResourceLockResponse_ErrorResponse)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_plugin_framework_pluginservicev1_service_proto_rawDesc), len(file_plugin_framework_pluginservicev1_service_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_plugin_framework_pluginservicev1_service_proto_goTypes,
		DependencyIndexes: file_plugin_framework_pluginservicev1_service_proto_depIdxs,
		EnumInfos:         file_plugin_framework_pluginservicev1_service_proto_enumTypes,
		MessageInfos:      file_plugin_framework_pluginservicev1_service_proto_msgTypes,
	}.Build()
	File_plugin_framework_pluginservicev1_service_proto = out.File
	file_plugin_framework_pluginservicev1_service_proto_goTypes = nil
	file_plugin_framework_pluginservicev1_service_proto_depIdxs = nil
}
