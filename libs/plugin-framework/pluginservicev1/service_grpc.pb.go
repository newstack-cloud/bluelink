// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.0
// source: plugin-framework/pluginservicev1/service.proto

package pluginservicev1

import (
	context "context"
	sharedtypesv1 "github.com/newstack-cloud/celerity/libs/plugin-framework/sharedtypesv1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Service_Register_FullMethodName              = "/pluginservicev1.Service/Register"
	Service_Deregister_FullMethodName            = "/pluginservicev1.Service/Deregister"
	Service_CallFunction_FullMethodName          = "/pluginservicev1.Service/CallFunction"
	Service_GetFunctionDefinition_FullMethodName = "/pluginservicev1.Service/GetFunctionDefinition"
	Service_HasFunction_FullMethodName           = "/pluginservicev1.Service/HasFunction"
	Service_ListFunctions_FullMethodName         = "/pluginservicev1.Service/ListFunctions"
	Service_DeployResource_FullMethodName        = "/pluginservicev1.Service/DeployResource"
	Service_DestroyResource_FullMethodName       = "/pluginservicev1.Service/DestroyResource"
)

// ServiceClient is the client API for Service service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Interface exported by the deploy engine
// to allow plugins to register and deregister
// themselves along with inter-plugin communication.
type ServiceClient interface {
	// Register is used by plugins to register themselves
	// with the deploy engine.
	Register(ctx context.Context, in *PluginRegistrationRequest, opts ...grpc.CallOption) (*PluginRegistrationResponse, error)
	// Deregister is used by plugins to deregister themselves
	// from the deploy engine.
	Deregister(ctx context.Context, in *PluginDeregistrationRequest, opts ...grpc.CallOption) (*PluginDeregistrationResponse, error)
	// CallFunction is used to allow plugins to call functions
	// that have been registered with the deploy engine.
	// Only functions can call other functions, this behaviour is
	// essential to allow for function composition in blueprints.
	CallFunction(ctx context.Context, in *sharedtypesv1.FunctionCallRequest, opts ...grpc.CallOption) (*sharedtypesv1.FunctionCallResponse, error)
	// GetFunctionDefinition is used to get the definition of a function
	// that has been registered with the deploy engine.
	GetFunctionDefinition(ctx context.Context, in *sharedtypesv1.FunctionDefinitionRequest, opts ...grpc.CallOption) (*sharedtypesv1.FunctionDefinitionResponse, error)
	// HasFunction is used to check if a function has been registered
	// with the deploy engine.
	HasFunction(ctx context.Context, in *HasFunctionRequest, opts ...grpc.CallOption) (*HasFunctionResponse, error)
	// ListFunctions is used to list all the functions that have been
	// registered with the deploy engine.
	ListFunctions(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListFunctionsResponse, error)
	// DeployResource deals with deploying a resource with the upstream resource provider.
	// THe behaviour of deploy is to create or update the resource configuration and return
	// the resource spec state once the configuration has been created or updated.
	// The caller is responsible for making sure that the input resource spec is valid.
	// The `wait_until_stable` field can be used to determine whether the service should wait for the
	// resource to stabilise before returning a response.
	// This is meant to be used to reuse resource plugins to manage intermediary resources
	// in a link implementation, this must not be used for managing resources that are explicitly
	// defined in a blueprint.
	DeployResource(ctx context.Context, in *DeployResourceServiceRequest, opts ...grpc.CallOption) (*sharedtypesv1.DeployResourceResponse, error)
	// DestroyResource deals with destroying a resource instance if its current
	// state is successfully deployed or cleaning up a corrupt or partially deployed
	// resource instance.
	// The resource instance should be completely removed from the external provider
	// as a result of this operation.
	// This is meant to be used to reuse resource plugins to manage intermediary resources
	// in a link implementation, this must not be used for managing resources that are explicitly
	// defined in a blueprint.
	DestroyResource(ctx context.Context, in *sharedtypesv1.DestroyResourceRequest, opts ...grpc.CallOption) (*sharedtypesv1.DestroyResourceResponse, error)
}

type serviceClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceClient(cc grpc.ClientConnInterface) ServiceClient {
	return &serviceClient{cc}
}

func (c *serviceClient) Register(ctx context.Context, in *PluginRegistrationRequest, opts ...grpc.CallOption) (*PluginRegistrationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PluginRegistrationResponse)
	err := c.cc.Invoke(ctx, Service_Register_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) Deregister(ctx context.Context, in *PluginDeregistrationRequest, opts ...grpc.CallOption) (*PluginDeregistrationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PluginDeregistrationResponse)
	err := c.cc.Invoke(ctx, Service_Deregister_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) CallFunction(ctx context.Context, in *sharedtypesv1.FunctionCallRequest, opts ...grpc.CallOption) (*sharedtypesv1.FunctionCallResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(sharedtypesv1.FunctionCallResponse)
	err := c.cc.Invoke(ctx, Service_CallFunction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) GetFunctionDefinition(ctx context.Context, in *sharedtypesv1.FunctionDefinitionRequest, opts ...grpc.CallOption) (*sharedtypesv1.FunctionDefinitionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(sharedtypesv1.FunctionDefinitionResponse)
	err := c.cc.Invoke(ctx, Service_GetFunctionDefinition_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) HasFunction(ctx context.Context, in *HasFunctionRequest, opts ...grpc.CallOption) (*HasFunctionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HasFunctionResponse)
	err := c.cc.Invoke(ctx, Service_HasFunction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) ListFunctions(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListFunctionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListFunctionsResponse)
	err := c.cc.Invoke(ctx, Service_ListFunctions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) DeployResource(ctx context.Context, in *DeployResourceServiceRequest, opts ...grpc.CallOption) (*sharedtypesv1.DeployResourceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(sharedtypesv1.DeployResourceResponse)
	err := c.cc.Invoke(ctx, Service_DeployResource_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) DestroyResource(ctx context.Context, in *sharedtypesv1.DestroyResourceRequest, opts ...grpc.CallOption) (*sharedtypesv1.DestroyResourceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(sharedtypesv1.DestroyResourceResponse)
	err := c.cc.Invoke(ctx, Service_DestroyResource_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceServer is the server API for Service service.
// All implementations must embed UnimplementedServiceServer
// for forward compatibility.
//
// Interface exported by the deploy engine
// to allow plugins to register and deregister
// themselves along with inter-plugin communication.
type ServiceServer interface {
	// Register is used by plugins to register themselves
	// with the deploy engine.
	Register(context.Context, *PluginRegistrationRequest) (*PluginRegistrationResponse, error)
	// Deregister is used by plugins to deregister themselves
	// from the deploy engine.
	Deregister(context.Context, *PluginDeregistrationRequest) (*PluginDeregistrationResponse, error)
	// CallFunction is used to allow plugins to call functions
	// that have been registered with the deploy engine.
	// Only functions can call other functions, this behaviour is
	// essential to allow for function composition in blueprints.
	CallFunction(context.Context, *sharedtypesv1.FunctionCallRequest) (*sharedtypesv1.FunctionCallResponse, error)
	// GetFunctionDefinition is used to get the definition of a function
	// that has been registered with the deploy engine.
	GetFunctionDefinition(context.Context, *sharedtypesv1.FunctionDefinitionRequest) (*sharedtypesv1.FunctionDefinitionResponse, error)
	// HasFunction is used to check if a function has been registered
	// with the deploy engine.
	HasFunction(context.Context, *HasFunctionRequest) (*HasFunctionResponse, error)
	// ListFunctions is used to list all the functions that have been
	// registered with the deploy engine.
	ListFunctions(context.Context, *emptypb.Empty) (*ListFunctionsResponse, error)
	// DeployResource deals with deploying a resource with the upstream resource provider.
	// THe behaviour of deploy is to create or update the resource configuration and return
	// the resource spec state once the configuration has been created or updated.
	// The caller is responsible for making sure that the input resource spec is valid.
	// The `wait_until_stable` field can be used to determine whether the service should wait for the
	// resource to stabilise before returning a response.
	// This is meant to be used to reuse resource plugins to manage intermediary resources
	// in a link implementation, this must not be used for managing resources that are explicitly
	// defined in a blueprint.
	DeployResource(context.Context, *DeployResourceServiceRequest) (*sharedtypesv1.DeployResourceResponse, error)
	// DestroyResource deals with destroying a resource instance if its current
	// state is successfully deployed or cleaning up a corrupt or partially deployed
	// resource instance.
	// The resource instance should be completely removed from the external provider
	// as a result of this operation.
	// This is meant to be used to reuse resource plugins to manage intermediary resources
	// in a link implementation, this must not be used for managing resources that are explicitly
	// defined in a blueprint.
	DestroyResource(context.Context, *sharedtypesv1.DestroyResourceRequest) (*sharedtypesv1.DestroyResourceResponse, error)
	mustEmbedUnimplementedServiceServer()
}

// UnimplementedServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedServiceServer struct{}

func (UnimplementedServiceServer) Register(context.Context, *PluginRegistrationRequest) (*PluginRegistrationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedServiceServer) Deregister(context.Context, *PluginDeregistrationRequest) (*PluginDeregistrationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Deregister not implemented")
}
func (UnimplementedServiceServer) CallFunction(context.Context, *sharedtypesv1.FunctionCallRequest) (*sharedtypesv1.FunctionCallResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CallFunction not implemented")
}
func (UnimplementedServiceServer) GetFunctionDefinition(context.Context, *sharedtypesv1.FunctionDefinitionRequest) (*sharedtypesv1.FunctionDefinitionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFunctionDefinition not implemented")
}
func (UnimplementedServiceServer) HasFunction(context.Context, *HasFunctionRequest) (*HasFunctionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HasFunction not implemented")
}
func (UnimplementedServiceServer) ListFunctions(context.Context, *emptypb.Empty) (*ListFunctionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFunctions not implemented")
}
func (UnimplementedServiceServer) DeployResource(context.Context, *DeployResourceServiceRequest) (*sharedtypesv1.DeployResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeployResource not implemented")
}
func (UnimplementedServiceServer) DestroyResource(context.Context, *sharedtypesv1.DestroyResourceRequest) (*sharedtypesv1.DestroyResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DestroyResource not implemented")
}
func (UnimplementedServiceServer) mustEmbedUnimplementedServiceServer() {}
func (UnimplementedServiceServer) testEmbeddedByValue()                 {}

// UnsafeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceServer will
// result in compilation errors.
type UnsafeServiceServer interface {
	mustEmbedUnimplementedServiceServer()
}

func RegisterServiceServer(s grpc.ServiceRegistrar, srv ServiceServer) {
	// If the following call pancis, it indicates UnimplementedServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Service_ServiceDesc, srv)
}

func _Service_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PluginRegistrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).Register(ctx, req.(*PluginRegistrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_Deregister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PluginDeregistrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).Deregister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_Deregister_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).Deregister(ctx, req.(*PluginDeregistrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_CallFunction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(sharedtypesv1.FunctionCallRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).CallFunction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_CallFunction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).CallFunction(ctx, req.(*sharedtypesv1.FunctionCallRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_GetFunctionDefinition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(sharedtypesv1.FunctionDefinitionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).GetFunctionDefinition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_GetFunctionDefinition_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).GetFunctionDefinition(ctx, req.(*sharedtypesv1.FunctionDefinitionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_HasFunction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HasFunctionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).HasFunction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_HasFunction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).HasFunction(ctx, req.(*HasFunctionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_ListFunctions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).ListFunctions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_ListFunctions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).ListFunctions(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_DeployResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeployResourceServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).DeployResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_DeployResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).DeployResource(ctx, req.(*DeployResourceServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_DestroyResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(sharedtypesv1.DestroyResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).DestroyResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_DestroyResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).DestroyResource(ctx, req.(*sharedtypesv1.DestroyResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Service_ServiceDesc is the grpc.ServiceDesc for Service service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Service_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pluginservicev1.Service",
	HandlerType: (*ServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _Service_Register_Handler,
		},
		{
			MethodName: "Deregister",
			Handler:    _Service_Deregister_Handler,
		},
		{
			MethodName: "CallFunction",
			Handler:    _Service_CallFunction_Handler,
		},
		{
			MethodName: "GetFunctionDefinition",
			Handler:    _Service_GetFunctionDefinition_Handler,
		},
		{
			MethodName: "HasFunction",
			Handler:    _Service_HasFunction_Handler,
		},
		{
			MethodName: "ListFunctions",
			Handler:    _Service_ListFunctions_Handler,
		},
		{
			MethodName: "DeployResource",
			Handler:    _Service_DeployResource_Handler,
		},
		{
			MethodName: "DestroyResource",
			Handler:    _Service_DestroyResource_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "plugin-framework/pluginservicev1/service.proto",
}
