// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.27.0
// source: plugin-framework/sharedtypesv1/types.proto

package sharedtypesv1

import (
	schemapb "github.com/newstack-cloud/celerity/libs/blueprint/schemapb"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ScalarType represents the type of a scalar value that can be
// used in annotation and configuration definitions.
// This is translated to a string enum representation in the deploy engine.
type ScalarType int32

const (
	ScalarType_SCALAR_TYPE_STRING  ScalarType = 0
	ScalarType_SCALAR_TYPE_INTEGER ScalarType = 1
	ScalarType_SCALAR_TYPE_FLOAT   ScalarType = 2
	ScalarType_SCALAR_TYPE_BOOLEAN ScalarType = 3
)

// Enum value maps for ScalarType.
var (
	ScalarType_name = map[int32]string{
		0: "SCALAR_TYPE_STRING",
		1: "SCALAR_TYPE_INTEGER",
		2: "SCALAR_TYPE_FLOAT",
		3: "SCALAR_TYPE_BOOLEAN",
	}
	ScalarType_value = map[string]int32{
		"SCALAR_TYPE_STRING":  0,
		"SCALAR_TYPE_INTEGER": 1,
		"SCALAR_TYPE_FLOAT":   2,
		"SCALAR_TYPE_BOOLEAN": 3,
	}
)

func (x ScalarType) Enum() *ScalarType {
	p := new(ScalarType)
	*p = x
	return p
}

func (x ScalarType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ScalarType) Descriptor() protoreflect.EnumDescriptor {
	return file_plugin_framework_sharedtypesv1_types_proto_enumTypes[0].Descriptor()
}

func (ScalarType) Type() protoreflect.EnumType {
	return &file_plugin_framework_sharedtypesv1_types_proto_enumTypes[0]
}

func (x ScalarType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ScalarType.Descriptor instead.
func (ScalarType) EnumDescriptor() ([]byte, []int) {
	return file_plugin_framework_sharedtypesv1_types_proto_rawDescGZIP(), []int{0}
}

// FunctionValueType is an enum for the value types that are supported for
// function parameters and return types.
// This is translated to a string enum representation in the deploy engine.
type FunctionValueType int32

const (
	FunctionValueType_FUNCTION_VALUE_TYPE_STRING   FunctionValueType = 0
	FunctionValueType_FUNCTION_VALUE_TYPE_INT32    FunctionValueType = 1
	FunctionValueType_FUNCTION_VALUE_TYPE_INT64    FunctionValueType = 2
	FunctionValueType_FUNCTION_VALUE_TYPE_UINT32   FunctionValueType = 3
	FunctionValueType_FUNCTION_VALUE_TYPE_UINT64   FunctionValueType = 4
	FunctionValueType_FUNCTION_VALUE_TYPE_FLOAT32  FunctionValueType = 5
	FunctionValueType_FUNCTION_VALUE_TYPE_FLOAT64  FunctionValueType = 6
	FunctionValueType_FUNCTION_VALUE_TYPE_BOOL     FunctionValueType = 7
	FunctionValueType_FUNCTION_VALUE_TYPE_LIST     FunctionValueType = 8
	FunctionValueType_FUNCTION_VALUE_TYPE_MAP      FunctionValueType = 9
	FunctionValueType_FUNCTION_VALUE_TYPE_OBJECT   FunctionValueType = 10
	FunctionValueType_FUNCTION_VALUE_TYPE_FUNCTION FunctionValueType = 11
	FunctionValueType_FUNCTION_VALUE_TYPE_ANY      FunctionValueType = 12
)

// Enum value maps for FunctionValueType.
var (
	FunctionValueType_name = map[int32]string{
		0:  "FUNCTION_VALUE_TYPE_STRING",
		1:  "FUNCTION_VALUE_TYPE_INT32",
		2:  "FUNCTION_VALUE_TYPE_INT64",
		3:  "FUNCTION_VALUE_TYPE_UINT32",
		4:  "FUNCTION_VALUE_TYPE_UINT64",
		5:  "FUNCTION_VALUE_TYPE_FLOAT32",
		6:  "FUNCTION_VALUE_TYPE_FLOAT64",
		7:  "FUNCTION_VALUE_TYPE_BOOL",
		8:  "FUNCTION_VALUE_TYPE_LIST",
		9:  "FUNCTION_VALUE_TYPE_MAP",
		10: "FUNCTION_VALUE_TYPE_OBJECT",
		11: "FUNCTION_VALUE_TYPE_FUNCTION",
		12: "FUNCTION_VALUE_TYPE_ANY",
	}
	FunctionValueType_value = map[string]int32{
		"FUNCTION_VALUE_TYPE_STRING":   0,
		"FUNCTION_VALUE_TYPE_INT32":    1,
		"FUNCTION_VALUE_TYPE_INT64":    2,
		"FUNCTION_VALUE_TYPE_UINT32":   3,
		"FUNCTION_VALUE_TYPE_UINT64":   4,
		"FUNCTION_VALUE_TYPE_FLOAT32":  5,
		"FUNCTION_VALUE_TYPE_FLOAT64":  6,
		"FUNCTION_VALUE_TYPE_BOOL":     7,
		"FUNCTION_VALUE_TYPE_LIST":     8,
		"FUNCTION_VALUE_TYPE_MAP":      9,
		"FUNCTION_VALUE_TYPE_OBJECT":   10,
		"FUNCTION_VALUE_TYPE_FUNCTION": 11,
		"FUNCTION_VALUE_TYPE_ANY":      12,
	}
)

func (x FunctionValueType) Enum() *FunctionValueType {
	p := new(FunctionValueType)
	*p = x
	return p
}

func (x FunctionValueType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FunctionValueType) Descriptor() protoreflect.EnumDescriptor {
	return file_plugin_framework_sharedtypesv1_types_proto_enumTypes[1].Descriptor()
}

func (FunctionValueType) Type() protoreflect.EnumType {
	return &file_plugin_framework_sharedtypesv1_types_proto_enumTypes[1]
}

func (x FunctionValueType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FunctionValueType.Descriptor instead.
func (FunctionValueType) EnumDescriptor() ([]byte, []int) {
	return file_plugin_framework_sharedtypesv1_types_proto_rawDescGZIP(), []int{1}
}

// ResourceStatus represents the current status of a resource in a blueprint instance.
type ResourceStatus int32

const (
	// The status for when we can't determine
	// an accurate status for a resource.
	ResourceStatus_RESOURCE_STATUS_UNKNOWN ResourceStatus = 0
	// The status for when an initial resource deployment
	// is currently in progress.
	ResourceStatus_RESOURCE_STATUS_CREATING ResourceStatus = 1
	// The status for when a resource has been deployed
	// successfully.
	ResourceStatus_RESOURCE_STATUS_CREATED ResourceStatus = 2
	// The status for when the first creation of a resource
	// failed.
	ResourceStatus_RESOURCE_STATUS_CREATE_FAILED ResourceStatus = 3
	// The status for when a resource is in the process
	// of being destroyed.
	ResourceStatus_RESOURCE_STATUS_DESTROYING ResourceStatus = 4
	// The status for when a resource has been destroyed.
	ResourceStatus_RESOURCE_STATUS_DESTROYED ResourceStatus = 5
	// The status for when the destruction of a resource fails.
	ResourceStatus_RESOURCE_STATUS_DESTROY_FAILED ResourceStatus = 6
	// The status for when a resource is being updated.
	ResourceStatus_RESOURCE_STATUS_UPDATING ResourceStatus = 7
	// The status for when a resource has been successfully updated.
	ResourceStatus_RESOURCE_STATUS_UPDATED ResourceStatus = 8
	// The status for when a resource has failed to update.
	ResourceStatus_RESOURCE_STATUS_UPDATE_FAILED ResourceStatus = 9
	// The status for when another change
	// in the same blueprint has failed and the latest change involving
	// the current resource is being rolled back.
	ResourceStatus_RESOURCE_STATUS_ROLLING_BACK ResourceStatus = 10
	// The status for when another change in the same blueprint
	// has failed and the latest change involving the current resource
	// could not be rolled back.
	ResourceStatus_RESOURCE_STATUS_ROLLBACK_FAILED ResourceStatus = 11
	// The status for when another change in the same blueprint
	// has failed and the latest change involving the current resource
	// has been rolled back.
	ResourceStatus_RESOURCE_STATUS_ROLLBACK_COMPLETE ResourceStatus = 12
)

// Enum value maps for ResourceStatus.
var (
	ResourceStatus_name = map[int32]string{
		0:  "RESOURCE_STATUS_UNKNOWN",
		1:  "RESOURCE_STATUS_CREATING",
		2:  "RESOURCE_STATUS_CREATED",
		3:  "RESOURCE_STATUS_CREATE_FAILED",
		4:  "RESOURCE_STATUS_DESTROYING",
		5:  "RESOURCE_STATUS_DESTROYED",
		6:  "RESOURCE_STATUS_DESTROY_FAILED",
		7:  "RESOURCE_STATUS_UPDATING",
		8:  "RESOURCE_STATUS_UPDATED",
		9:  "RESOURCE_STATUS_UPDATE_FAILED",
		10: "RESOURCE_STATUS_ROLLING_BACK",
		11: "RESOURCE_STATUS_ROLLBACK_FAILED",
		12: "RESOURCE_STATUS_ROLLBACK_COMPLETE",
	}
	ResourceStatus_value = map[string]int32{
		"RESOURCE_STATUS_UNKNOWN":           0,
		"RESOURCE_STATUS_CREATING":          1,
		"RESOURCE_STATUS_CREATED":           2,
		"RESOURCE_STATUS_CREATE_FAILED":     3,
		"RESOURCE_STATUS_DESTROYING":        4,
		"RESOURCE_STATUS_DESTROYED":         5,
		"RESOURCE_STATUS_DESTROY_FAILED":    6,
		"RESOURCE_STATUS_UPDATING":          7,
		"RESOURCE_STATUS_UPDATED":           8,
		"RESOURCE_STATUS_UPDATE_FAILED":     9,
		"RESOURCE_STATUS_ROLLING_BACK":      10,
		"RESOURCE_STATUS_ROLLBACK_FAILED":   11,
		"RESOURCE_STATUS_ROLLBACK_COMPLETE": 12,
	}
)

func (x ResourceStatus) Enum() *ResourceStatus {
	p := new(ResourceStatus)
	*p = x
	return p
}

func (x ResourceStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResourceStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_plugin_framework_sharedtypesv1_types_proto_enumTypes[2].Descriptor()
}

func (ResourceStatus) Type() protoreflect.EnumType {
	return &file_plugin_framework_sharedtypesv1_types_proto_enumTypes[2]
}

func (x ResourceStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResourceStatus.Descriptor instead.
func (ResourceStatus) EnumDescriptor() ([]byte, []int) {
	return file_plugin_framework_sharedtypesv1_types_proto_rawDescGZIP(), []int{2}
}

// PreciseResourceStatus represents a more precise current state of a resource
// in a blueprint instance.
// This is used to allow the deploy engine to be more efficient in deploying a blueprint,
// by avoiding blocking on resource finalisation that isn't always needed to be able to
// successfully deploy the resources that are dependent on the resource in question.
type PreciseResourceStatus int32

const (
	// The status for when we can't determine
	// an accurate status for a resource.
	PreciseResourceStatus_PRECISE_RESOURCE_STATUS_UNKNOWN PreciseResourceStatus = 0
	// The status for when an initial resource deployment
	// is currently in progress.
	PreciseResourceStatus_PRECISE_RESOURCE_STATUS_CREATING PreciseResourceStatus = 1
	// The status for when a resource has been configured
	// successfully.
	// What this means is that the resource has been created
	// but is not yet in a stable state.
	// For example, an application in a container orchestration service
	// has been created but is not yet up and running.
	PreciseResourceStatus_PRECISE_RESOURCE_STATUS_CONFIG_COMPLETE PreciseResourceStatus = 2
	// The status for when a resource has been deployed
	// successfully.
	// This is used when a resource is in a stable state.
	PreciseResourceStatus_PRECISE_RESOURCE_STATUS_CREATED PreciseResourceStatus = 3
	// The status for when the first creation of a resource
	// failed.
	PreciseResourceStatus_PRECISE_RESOURCE_STATUS_CREATE_FAILED PreciseResourceStatus = 4
	// The status for when another change in the same blueprint has failed
	// and the current resource that was successfully created is being rolled back.
	PreciseResourceStatus_PRECISE_RESOURCE_STATUS_CREATE_ROLLING_BACK PreciseResourceStatus = 5
	// The status for when another change in the same blueprint has failed
	// and the current resource that was successfully created could not be rolled back.
	PreciseResourceStatus_PRECISE_RESOURCE_STATUS_CREATE_ROLLBACK_FAILED PreciseResourceStatus = 6
	// The status for when another change in the same blueprint has failed
	// and the current resource that was successfully created has been rolled back.
	PreciseResourceStatus_PRECISE_RESOURCE_STATUS_CREATE_ROLLBACK_COMPLETE PreciseResourceStatus = 7
	// The status for when a resource is in the process of being destroyed.
	PreciseResourceStatus_PRECISE_RESOURCE_STATUS_DESTROYING PreciseResourceStatus = 8
	// The status for when a resource has been destroyed.
	PreciseResourceStatus_PRECISE_RESOURCE_STATUS_DESTROYED PreciseResourceStatus = 9
	// The status for when the destruction of a resource fails.
	PreciseResourceStatus_PRECISE_RESOURCE_STATUS_DESTROY_FAILED PreciseResourceStatus = 10
	// The status for when another change in the same blueprint has failed
	// and the current resource that was successfully removed is being rolled back.
	// This involves recreating the resource from the previous state.
	PreciseResourceStatus_PRECISE_RESOURCE_STATUS_DESTROY_ROLLING_BACK PreciseResourceStatus = 11
	// The status for when another change in the same blueprint has failed
	// and the current resource that was successfully removed could not be
	// rolled back (recreated).
	PreciseResourceStatus_PRECISE_RESOURCE_STATUS_DESTROY_ROLLBACK_FAILED PreciseResourceStatus = 12
	// The status for when another change in the same blueprint has failed
	// and the current resource that was successfully removed
	// has been rolled back (recreated) but is not yet in a stable state.
	PreciseResourceStatus_PRECISE_RESOURCE_STATUS_DESTROY_ROLLBACK_CONFIG_COMPLETE PreciseResourceStatus = 13
	// The status for when another change in the same blueprint has failed
	// and the current resource that was successfully
	// removed has been rolled back (recreated).
	PreciseResourceStatus_PRECISE_RESOURCE_STATUS_DESTROY_ROLLBACK_COMPLETE PreciseResourceStatus = 14
	// The status for when a resource is being updated.
	PreciseResourceStatus_PRECISE_RESOURCE_STATUS_UPDATING PreciseResourceStatus = 15
	// The status for when a resource being updated has been configured
	// successfully.
	// What this means is that the resource has been updated
	// but is not yet in a stable state.
	// For example, an application in a container orchestration service
	// has been updated but the new version is not yet up and running.
	PreciseResourceStatus_PRECISE_RESOURCE_STATUS_UPDATE_CONFIG_COMPLETE PreciseResourceStatus = 16
	// The status for when a resource has been successfully updated.
	PreciseResourceStatus_PRECISE_RESOURCE_STATUS_UPDATED PreciseResourceStatus = 17
	// The status for when a resource has failed to update.
	PreciseResourceStatus_PRECISE_RESOURCE_STATUS_UPDATE_FAILED PreciseResourceStatus = 18
	// The status for when another change in the same blueprint has failed
	// and the current resource that was successfully updated is being
	// rolled back to the previous state.
	PreciseResourceStatus_PRECISE_RESOURCE_STATUS_UPDATE_ROLLING_BACK PreciseResourceStatus = 19
	// The status for when another change in the same blueprint has failed
	// and the current resource that was successfully updated could not be
	// rolled back to the previous state.
	PreciseResourceStatus_PRECISE_RESOURCE_STATUS_UPDATE_ROLLBACK_FAILED PreciseResourceStatus = 20
	// The status for when another change in the same blueprint has failed
	// and the current resource that was successfully updated has been
	// rolled back to the previous state but is not yet in a stable state.
	PreciseResourceStatus_PRECISE_RESOURCE_STATUS_UPDATE_ROLLBACK_CONFIG_COMPLETE PreciseResourceStatus = 21
	// The status for when another change in the same blueprint has failed
	// and the current resource that was successfully updated has been
	// rolled back to the previous state.
	PreciseResourceStatus_PRECISE_RESOURCE_STATUS_UPDATE_ROLLBACK_COMPLETE PreciseResourceStatus = 22
)

// Enum value maps for PreciseResourceStatus.
var (
	PreciseResourceStatus_name = map[int32]string{
		0:  "PRECISE_RESOURCE_STATUS_UNKNOWN",
		1:  "PRECISE_RESOURCE_STATUS_CREATING",
		2:  "PRECISE_RESOURCE_STATUS_CONFIG_COMPLETE",
		3:  "PRECISE_RESOURCE_STATUS_CREATED",
		4:  "PRECISE_RESOURCE_STATUS_CREATE_FAILED",
		5:  "PRECISE_RESOURCE_STATUS_CREATE_ROLLING_BACK",
		6:  "PRECISE_RESOURCE_STATUS_CREATE_ROLLBACK_FAILED",
		7:  "PRECISE_RESOURCE_STATUS_CREATE_ROLLBACK_COMPLETE",
		8:  "PRECISE_RESOURCE_STATUS_DESTROYING",
		9:  "PRECISE_RESOURCE_STATUS_DESTROYED",
		10: "PRECISE_RESOURCE_STATUS_DESTROY_FAILED",
		11: "PRECISE_RESOURCE_STATUS_DESTROY_ROLLING_BACK",
		12: "PRECISE_RESOURCE_STATUS_DESTROY_ROLLBACK_FAILED",
		13: "PRECISE_RESOURCE_STATUS_DESTROY_ROLLBACK_CONFIG_COMPLETE",
		14: "PRECISE_RESOURCE_STATUS_DESTROY_ROLLBACK_COMPLETE",
		15: "PRECISE_RESOURCE_STATUS_UPDATING",
		16: "PRECISE_RESOURCE_STATUS_UPDATE_CONFIG_COMPLETE",
		17: "PRECISE_RESOURCE_STATUS_UPDATED",
		18: "PRECISE_RESOURCE_STATUS_UPDATE_FAILED",
		19: "PRECISE_RESOURCE_STATUS_UPDATE_ROLLING_BACK",
		20: "PRECISE_RESOURCE_STATUS_UPDATE_ROLLBACK_FAILED",
		21: "PRECISE_RESOURCE_STATUS_UPDATE_ROLLBACK_CONFIG_COMPLETE",
		22: "PRECISE_RESOURCE_STATUS_UPDATE_ROLLBACK_COMPLETE",
	}
	PreciseResourceStatus_value = map[string]int32{
		"PRECISE_RESOURCE_STATUS_UNKNOWN":                          0,
		"PRECISE_RESOURCE_STATUS_CREATING":                         1,
		"PRECISE_RESOURCE_STATUS_CONFIG_COMPLETE":                  2,
		"PRECISE_RESOURCE_STATUS_CREATED":                          3,
		"PRECISE_RESOURCE_STATUS_CREATE_FAILED":                    4,
		"PRECISE_RESOURCE_STATUS_CREATE_ROLLING_BACK":              5,
		"PRECISE_RESOURCE_STATUS_CREATE_ROLLBACK_FAILED":           6,
		"PRECISE_RESOURCE_STATUS_CREATE_ROLLBACK_COMPLETE":         7,
		"PRECISE_RESOURCE_STATUS_DESTROYING":                       8,
		"PRECISE_RESOURCE_STATUS_DESTROYED":                        9,
		"PRECISE_RESOURCE_STATUS_DESTROY_FAILED":                   10,
		"PRECISE_RESOURCE_STATUS_DESTROY_ROLLING_BACK":             11,
		"PRECISE_RESOURCE_STATUS_DESTROY_ROLLBACK_FAILED":          12,
		"PRECISE_RESOURCE_STATUS_DESTROY_ROLLBACK_CONFIG_COMPLETE": 13,
		"PRECISE_RESOURCE_STATUS_DESTROY_ROLLBACK_COMPLETE":        14,
		"PRECISE_RESOURCE_STATUS_UPDATING":                         15,
		"PRECISE_RESOURCE_STATUS_UPDATE_CONFIG_COMPLETE":           16,
		"PRECISE_RESOURCE_STATUS_UPDATED":                          17,
		"PRECISE_RESOURCE_STATUS_UPDATE_FAILED":                    18,
		"PRECISE_RESOURCE_STATUS_UPDATE_ROLLING_BACK":              19,
		"PRECISE_RESOURCE_STATUS_UPDATE_ROLLBACK_FAILED":           20,
		"PRECISE_RESOURCE_STATUS_UPDATE_ROLLBACK_CONFIG_COMPLETE":  21,
		"PRECISE_RESOURCE_STATUS_UPDATE_ROLLBACK_COMPLETE":         22,
	}
)

func (x PreciseResourceStatus) Enum() *PreciseResourceStatus {
	p := new(PreciseResourceStatus)
	*p = x
	return p
}

func (x PreciseResourceStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PreciseResourceStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_plugin_framework_sharedtypesv1_types_proto_enumTypes[3].Descriptor()
}

func (PreciseResourceStatus) Type() protoreflect.EnumType {
	return &file_plugin_framework_sharedtypesv1_types_proto_enumTypes[3]
}

func (x PreciseResourceStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PreciseResourceStatus.Descriptor instead.
func (PreciseResourceStatus) EnumDescriptor() ([]byte, []int) {
	return file_plugin_framework_sharedtypesv1_types_proto_rawDescGZIP(), []int{3}
}

// DiagnosticLevel is an enum for the level of a diagnostic.
type DiagnosticLevel int32

const (
	// protobuf enums must have a zero value, so we need a NONE value
	// here.
	// DiagnosticLevel starts at 1 as per the Blueprint framework.
	DiagnosticLevel_DIAGNOSTIC_LEVEL_NONE DiagnosticLevel = 0
	// Indicates an error diagnostic.
	DiagnosticLevel_DIAGNOSTIC_LEVEL_ERROR DiagnosticLevel = 1
	// Indicates a warning diagnostic.
	DiagnosticLevel_DIAGNOSTIC_LEVEL_WARNING DiagnosticLevel = 2
	// Indicates an informational diagnostic.
	DiagnosticLevel_DIAGNOSTIC_LEVEL_INFO DiagnosticLevel = 3
)

// Enum value maps for DiagnosticLevel.
var (
	DiagnosticLevel_name = map[int32]string{
		0: "DIAGNOSTIC_LEVEL_NONE",
		1: "DIAGNOSTIC_LEVEL_ERROR",
		2: "DIAGNOSTIC_LEVEL_WARNING",
		3: "DIAGNOSTIC_LEVEL_INFO",
	}
	DiagnosticLevel_value = map[string]int32{
		"DIAGNOSTIC_LEVEL_NONE":    0,
		"DIAGNOSTIC_LEVEL_ERROR":   1,
		"DIAGNOSTIC_LEVEL_WARNING": 2,
		"DIAGNOSTIC_LEVEL_INFO":    3,
	}
)

func (x DiagnosticLevel) Enum() *DiagnosticLevel {
	p := new(DiagnosticLevel)
	*p = x
	return p
}

func (x DiagnosticLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DiagnosticLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_plugin_framework_sharedtypesv1_types_proto_enumTypes[4].Descriptor()
}

func (DiagnosticLevel) Type() protoreflect.EnumType {
	return &file_plugin_framework_sharedtypesv1_types_proto_enumTypes[4]
}

func (x DiagnosticLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DiagnosticLevel.Descriptor instead.
func (DiagnosticLevel) EnumDescriptor() ([]byte, []int) {
	return file_plugin_framework_sharedtypesv1_types_proto_rawDescGZIP(), []int{4}
}

// ColumnAccuracy is an enum for the accuracy of a column
// location in a source blueprint.
type ColumnAccuracy int32

const (
	// protobuf enums must have a zero value, so we need a NONE value
	// here.
	// ColumnAccuracy starts at 1 as per the Blueprint framework.
	ColumnAccuracy_COLUMN_ACCURACY_NONE ColumnAccuracy = 0
	// Indicates that the column is accurate.
	ColumnAccuracy_COLUMN_ACCURACY_EXACT ColumnAccuracy = 1
	// Indicates that the column is approximate.
	ColumnAccuracy_COLUMN_ACCURACY_APPROXIMATE ColumnAccuracy = 2
)

// Enum value maps for ColumnAccuracy.
var (
	ColumnAccuracy_name = map[int32]string{
		0: "COLUMN_ACCURACY_NONE",
		1: "COLUMN_ACCURACY_EXACT",
		2: "COLUMN_ACCURACY_APPROXIMATE",
	}
	ColumnAccuracy_value = map[string]int32{
		"COLUMN_ACCURACY_NONE":        0,
		"COLUMN_ACCURACY_EXACT":       1,
		"COLUMN_ACCURACY_APPROXIMATE": 2,
	}
)

func (x ColumnAccuracy) Enum() *ColumnAccuracy {
	p := new(ColumnAccuracy)
	*p = x
	return p
}

func (x ColumnAccuracy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ColumnAccuracy) Descriptor() protoreflect.EnumDescriptor {
	return file_plugin_framework_sharedtypesv1_types_proto_enumTypes[5].Descriptor()
}

func (ColumnAccuracy) Type() protoreflect.EnumType {
	return &file_plugin_framework_sharedtypesv1_types_proto_enumTypes[5]
}

func (x ColumnAccuracy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ColumnAccuracy.Descriptor instead.
func (ColumnAccuracy) EnumDescriptor() ([]byte, []int) {
	return file_plugin_framework_sharedtypesv1_types_proto_rawDescGZIP(), []int{5}
}

// ErrorCode is an enum for a range of error codes
// for provider plugins.
type ErrorCode int32

const (
	// Indicates that the error is unexpected and the
	// action cannot be retried by the deploy engine
	// host.
	// This will not crash the deploy engine host but
	// will stop the current action (e.g. deploying a blueprint).
	ErrorCode_ERROR_CODE_UNEXPECTED ErrorCode = 0
	// Indicates that the failure is transient and the
	// action can be retried by the deploy engine
	// host based on the deploy engine host's retry policy.
	ErrorCode_ERROR_CODE_TRANSIENT ErrorCode = 1
	// Indicates that the input to the provider plugin
	// is invalid. Bad input errors should not be retried
	// but are distinguished from unexpected errors to allow
	// the deploy engine host to provide a more specific
	// error message to the user.
	ErrorCode_ERROR_CODE_BAD_INPUT ErrorCode = 2
)

// Enum value maps for ErrorCode.
var (
	ErrorCode_name = map[int32]string{
		0: "ERROR_CODE_UNEXPECTED",
		1: "ERROR_CODE_TRANSIENT",
		2: "ERROR_CODE_BAD_INPUT",
	}
	ErrorCode_value = map[string]int32{
		"ERROR_CODE_UNEXPECTED": 0,
		"ERROR_CODE_TRANSIENT":  1,
		"ERROR_CODE_BAD_INPUT":  2,
	}
)

func (x ErrorCode) Enum() *ErrorCode {
	p := new(ErrorCode)
	*p = x
	return p
}

func (x ErrorCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ErrorCode) Descriptor() protoreflect.EnumDescriptor {
	return file_plugin_framework_sharedtypesv1_types_proto_enumTypes[6].Descriptor()
}

func (ErrorCode) Type() protoreflect.EnumType {
	return &file_plugin_framework_sharedtypesv1_types_proto_enumTypes[6]
}

func (x ErrorCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ErrorCode.Descriptor instead.
func (ErrorCode) EnumDescriptor() ([]byte, []int) {
	return file_plugin_framework_sharedtypesv1_types_proto_rawDescGZIP(), []int{6}
}

// ConfigDefinitionResponse contains the response
// for requesting the configuration definition
// for a provider or transformer plugin.
type ConfigDefinitionResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Response:
	//
	//	*ConfigDefinitionResponse_ConfigDefinition
	//	*ConfigDefinitionResponse_ErrorResponse
	Response      isConfigDefinitionResponse_Response `protobuf_oneof:"response"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConfigDefinitionResponse) Reset() {
	*x = ConfigDefinitionResponse{}
	mi := &file_plugin_framework_sharedtypesv1_types_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConfigDefinitionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigDefinitionResponse) ProtoMessage() {}

func (x *ConfigDefinitionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_framework_sharedtypesv1_types_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigDefinitionResponse.ProtoReflect.Descriptor instead.
func (*ConfigDefinitionResponse) Descriptor() ([]byte, []int) {
	return file_plugin_framework_sharedtypesv1_types_proto_rawDescGZIP(), []int{0}
}

func (x *ConfigDefinitionResponse) GetResponse() isConfigDefinitionResponse_Response {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *ConfigDefinitionResponse) GetConfigDefinition() *ConfigDefinition {
	if x != nil {
		if x, ok := x.Response.(*ConfigDefinitionResponse_ConfigDefinition); ok {
			return x.ConfigDefinition
		}
	}
	return nil
}

func (x *ConfigDefinitionResponse) GetErrorResponse() *ErrorResponse {
	if x != nil {
		if x, ok := x.Response.(*ConfigDefinitionResponse_ErrorResponse); ok {
			return x.ErrorResponse
		}
	}
	return nil
}

type isConfigDefinitionResponse_Response interface {
	isConfigDefinitionResponse_Response()
}

type ConfigDefinitionResponse_ConfigDefinition struct {
	ConfigDefinition *ConfigDefinition `protobuf:"bytes,1,opt,name=config_definition,json=configDefinition,oneof"`
}

type ConfigDefinitionResponse_ErrorResponse struct {
	ErrorResponse *ErrorResponse `protobuf:"bytes,2,opt,name=error_response,json=errorResponse,oneof"`
}

func (*ConfigDefinitionResponse_ConfigDefinition) isConfigDefinitionResponse_Response() {}

func (*ConfigDefinitionResponse_ErrorResponse) isConfigDefinitionResponse_Response() {}

// ConfigDefinition contains a detailed definition (schema)
// of the configuration required for a provider or
// transformer plugin.
type ConfigDefinition struct {
	state                 protoimpl.MessageState            `protogen:"open.v1"`
	Fields                map[string]*ConfigFieldDefinition `protobuf:"bytes,1,rep,name=fields" json:"fields,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	AllowAdditionalFields bool                              `protobuf:"varint,2,opt,name=allow_additional_fields,json=allowAdditionalFields" json:"allow_additional_fields,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *ConfigDefinition) Reset() {
	*x = ConfigDefinition{}
	mi := &file_plugin_framework_sharedtypesv1_types_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConfigDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigDefinition) ProtoMessage() {}

func (x *ConfigDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_framework_sharedtypesv1_types_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigDefinition.ProtoReflect.Descriptor instead.
func (*ConfigDefinition) Descriptor() ([]byte, []int) {
	return file_plugin_framework_sharedtypesv1_types_proto_rawDescGZIP(), []int{1}
}

func (x *ConfigDefinition) GetFields() map[string]*ConfigFieldDefinition {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *ConfigDefinition) GetAllowAdditionalFields() bool {
	if x != nil {
		return x.AllowAdditionalFields
	}
	return false
}

// ConfigFieldDefinition represents a field in a configuration
// definition for a provider or transformer plugin.
type ConfigFieldDefinition struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Type          ScalarType              `protobuf:"varint,1,opt,name=type,enum=sharedtypesv1.ScalarType" json:"type,omitempty"`
	Label         string                  `protobuf:"bytes,2,opt,name=label" json:"label,omitempty"`
	Description   string                  `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
	DefaultValue  *schemapb.ScalarValue   `protobuf:"bytes,4,opt,name=default_value,json=defaultValue" json:"default_value,omitempty"`
	AllowedValues []*schemapb.ScalarValue `protobuf:"bytes,5,rep,name=allowed_values,json=allowedValues" json:"allowed_values,omitempty"`
	Secret        bool                    `protobuf:"varint,6,opt,name=secret" json:"secret,omitempty"`
	Examples      []*schemapb.ScalarValue `protobuf:"bytes,7,rep,name=examples" json:"examples,omitempty"`
	Required      bool                    `protobuf:"varint,8,opt,name=required" json:"required,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConfigFieldDefinition) Reset() {
	*x = ConfigFieldDefinition{}
	mi := &file_plugin_framework_sharedtypesv1_types_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConfigFieldDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigFieldDefinition) ProtoMessage() {}

func (x *ConfigFieldDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_framework_sharedtypesv1_types_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigFieldDefinition.ProtoReflect.Descriptor instead.
func (*ConfigFieldDefinition) Descriptor() ([]byte, []int) {
	return file_plugin_framework_sharedtypesv1_types_proto_rawDescGZIP(), []int{2}
}

func (x *ConfigFieldDefinition) GetType() ScalarType {
	if x != nil {
		return x.Type
	}
	return ScalarType_SCALAR_TYPE_STRING
}

func (x *ConfigFieldDefinition) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *ConfigFieldDefinition) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ConfigFieldDefinition) GetDefaultValue() *schemapb.ScalarValue {
	if x != nil {
		return x.DefaultValue
	}
	return nil
}

func (x *ConfigFieldDefinition) GetAllowedValues() []*schemapb.ScalarValue {
	if x != nil {
		return x.AllowedValues
	}
	return nil
}

func (x *ConfigFieldDefinition) GetSecret() bool {
	if x != nil {
		return x.Secret
	}
	return false
}

func (x *ConfigFieldDefinition) GetExamples() []*schemapb.ScalarValue {
	if x != nil {
		return x.Examples
	}
	return nil
}

func (x *ConfigFieldDefinition) GetRequired() bool {
	if x != nil {
		return x.Required
	}
	return false
}

// ExamplesResponse is the response
// containing examples for entities (e.g. resources)
// provided by a plugin.
type ExamplesResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Response:
	//
	//	*ExamplesResponse_Examples
	//	*ExamplesResponse_ErrorResponse
	Response      isExamplesResponse_Response `protobuf_oneof:"response"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExamplesResponse) Reset() {
	*x = ExamplesResponse{}
	mi := &file_plugin_framework_sharedtypesv1_types_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExamplesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExamplesResponse) ProtoMessage() {}

func (x *ExamplesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_framework_sharedtypesv1_types_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExamplesResponse.ProtoReflect.Descriptor instead.
func (*ExamplesResponse) Descriptor() ([]byte, []int) {
	return file_plugin_framework_sharedtypesv1_types_proto_rawDescGZIP(), []int{3}
}

func (x *ExamplesResponse) GetResponse() isExamplesResponse_Response {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *ExamplesResponse) GetExamples() *Examples {
	if x != nil {
		if x, ok := x.Response.(*ExamplesResponse_Examples); ok {
			return x.Examples
		}
	}
	return nil
}

func (x *ExamplesResponse) GetErrorResponse() *ErrorResponse {
	if x != nil {
		if x, ok := x.Response.(*ExamplesResponse_ErrorResponse); ok {
			return x.ErrorResponse
		}
	}
	return nil
}

type isExamplesResponse_Response interface {
	isExamplesResponse_Response()
}

type ExamplesResponse_Examples struct {
	Examples *Examples `protobuf:"bytes,1,opt,name=examples,oneof"`
}

type ExamplesResponse_ErrorResponse struct {
	ErrorResponse *ErrorResponse `protobuf:"bytes,2,opt,name=error_response,json=errorResponse,oneof"`
}

func (*ExamplesResponse_Examples) isExamplesResponse_Response() {}

func (*ExamplesResponse_ErrorResponse) isExamplesResponse_Response() {}

// Examples for entities (e.g. resources) provided by a plugin.
type Examples struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// A human-readable list of examples in plain text.
	Examples []string `protobuf:"bytes,1,rep,name=examples" json:"examples,omitempty"`
	// A human-readable list of examples in markdown format
	// that will usually be expected to contain code blocks.
	FormattedExamples []string `protobuf:"bytes,2,rep,name=formatted_examples,json=formattedExamples" json:"formatted_examples,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *Examples) Reset() {
	*x = Examples{}
	mi := &file_plugin_framework_sharedtypesv1_types_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Examples) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Examples) ProtoMessage() {}

func (x *Examples) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_framework_sharedtypesv1_types_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Examples.ProtoReflect.Descriptor instead.
func (*Examples) Descriptor() ([]byte, []int) {
	return file_plugin_framework_sharedtypesv1_types_proto_rawDescGZIP(), []int{4}
}

func (x *Examples) GetExamples() []string {
	if x != nil {
		return x.Examples
	}
	return nil
}

func (x *Examples) GetFormattedExamples() []string {
	if x != nil {
		return x.FormattedExamples
	}
	return nil
}

// ResourceTypeDescriptionResponse is the response
// containing the description for a plugin entity (e.g. resource).
type TypeDescriptionResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Response:
	//
	//	*TypeDescriptionResponse_Description
	//	*TypeDescriptionResponse_ErrorResponse
	Response      isTypeDescriptionResponse_Response `protobuf_oneof:"response"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TypeDescriptionResponse) Reset() {
	*x = TypeDescriptionResponse{}
	mi := &file_plugin_framework_sharedtypesv1_types_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TypeDescriptionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TypeDescriptionResponse) ProtoMessage() {}

func (x *TypeDescriptionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_framework_sharedtypesv1_types_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TypeDescriptionResponse.ProtoReflect.Descriptor instead.
func (*TypeDescriptionResponse) Descriptor() ([]byte, []int) {
	return file_plugin_framework_sharedtypesv1_types_proto_rawDescGZIP(), []int{5}
}

func (x *TypeDescriptionResponse) GetResponse() isTypeDescriptionResponse_Response {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *TypeDescriptionResponse) GetDescription() *TypeDescription {
	if x != nil {
		if x, ok := x.Response.(*TypeDescriptionResponse_Description); ok {
			return x.Description
		}
	}
	return nil
}

func (x *TypeDescriptionResponse) GetErrorResponse() *ErrorResponse {
	if x != nil {
		if x, ok := x.Response.(*TypeDescriptionResponse_ErrorResponse); ok {
			return x.ErrorResponse
		}
	}
	return nil
}

type isTypeDescriptionResponse_Response interface {
	isTypeDescriptionResponse_Response()
}

type TypeDescriptionResponse_Description struct {
	Description *TypeDescription `protobuf:"bytes,1,opt,name=description,oneof"`
}

type TypeDescriptionResponse_ErrorResponse struct {
	ErrorResponse *ErrorResponse `protobuf:"bytes,2,opt,name=error_response,json=errorResponse,oneof"`
}

func (*TypeDescriptionResponse_Description) isTypeDescriptionResponse_Response() {}

func (*TypeDescriptionResponse_ErrorResponse) isTypeDescriptionResponse_Response() {}

// TypeDescription provides a description for resource,
// data source and custom variable types
// that can be used for documentation and tooling.
type TypeDescription struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	MarkdownDescription  string                 `protobuf:"bytes,1,opt,name=markdown_description,json=markdownDescription" json:"markdown_description,omitempty"`
	PlainTextDescription string                 `protobuf:"bytes,2,opt,name=plain_text_description,json=plainTextDescription" json:"plain_text_description,omitempty"`
	MarkdownSummary      string                 `protobuf:"bytes,3,opt,name=markdown_summary,json=markdownSummary" json:"markdown_summary,omitempty"`
	PlainTextSummary     string                 `protobuf:"bytes,4,opt,name=plain_text_summary,json=plainTextSummary" json:"plain_text_summary,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *TypeDescription) Reset() {
	*x = TypeDescription{}
	mi := &file_plugin_framework_sharedtypesv1_types_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TypeDescription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TypeDescription) ProtoMessage() {}

func (x *TypeDescription) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_framework_sharedtypesv1_types_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TypeDescription.ProtoReflect.Descriptor instead.
func (*TypeDescription) Descriptor() ([]byte, []int) {
	return file_plugin_framework_sharedtypesv1_types_proto_rawDescGZIP(), []int{6}
}

func (x *TypeDescription) GetMarkdownDescription() string {
	if x != nil {
		return x.MarkdownDescription
	}
	return ""
}

func (x *TypeDescription) GetPlainTextDescription() string {
	if x != nil {
		return x.PlainTextDescription
	}
	return ""
}

func (x *TypeDescription) GetMarkdownSummary() string {
	if x != nil {
		return x.MarkdownSummary
	}
	return ""
}

func (x *TypeDescription) GetPlainTextSummary() string {
	if x != nil {
		return x.PlainTextSummary
	}
	return ""
}

// ResourceTypeResponse is the response
// containing the type information for a concrete
// or abstract resource type.
type ResourceTypeResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Response:
	//
	//	*ResourceTypeResponse_ResourceTypeInfo
	//	*ResourceTypeResponse_ErrorResponse
	Response      isResourceTypeResponse_Response `protobuf_oneof:"response"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResourceTypeResponse) Reset() {
	*x = ResourceTypeResponse{}
	mi := &file_plugin_framework_sharedtypesv1_types_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResourceTypeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceTypeResponse) ProtoMessage() {}

func (x *ResourceTypeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_framework_sharedtypesv1_types_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceTypeResponse.ProtoReflect.Descriptor instead.
func (*ResourceTypeResponse) Descriptor() ([]byte, []int) {
	return file_plugin_framework_sharedtypesv1_types_proto_rawDescGZIP(), []int{7}
}

func (x *ResourceTypeResponse) GetResponse() isResourceTypeResponse_Response {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *ResourceTypeResponse) GetResourceTypeInfo() *ResourceTypeInfo {
	if x != nil {
		if x, ok := x.Response.(*ResourceTypeResponse_ResourceTypeInfo); ok {
			return x.ResourceTypeInfo
		}
	}
	return nil
}

func (x *ResourceTypeResponse) GetErrorResponse() *ErrorResponse {
	if x != nil {
		if x, ok := x.Response.(*ResourceTypeResponse_ErrorResponse); ok {
			return x.ErrorResponse
		}
	}
	return nil
}

type isResourceTypeResponse_Response interface {
	isResourceTypeResponse_Response()
}

type ResourceTypeResponse_ResourceTypeInfo struct {
	ResourceTypeInfo *ResourceTypeInfo `protobuf:"bytes,1,opt,name=resource_type_info,json=resourceTypeInfo,oneof"`
}

type ResourceTypeResponse_ErrorResponse struct {
	ErrorResponse *ErrorResponse `protobuf:"bytes,2,opt,name=error_response,json=errorResponse,oneof"`
}

func (*ResourceTypeResponse_ResourceTypeInfo) isResourceTypeResponse_Response() {}

func (*ResourceTypeResponse_ErrorResponse) isResourceTypeResponse_Response() {}

// ResourceTypeInfo provides information about a resource type
// that can be used for documentation and tooling.
type ResourceTypeInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The type of the resource.
	Type *ResourceType `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	// The human-readable label for the resource type.
	Label         string `protobuf:"bytes,2,opt,name=label" json:"label,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResourceTypeInfo) Reset() {
	*x = ResourceTypeInfo{}
	mi := &file_plugin_framework_sharedtypesv1_types_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResourceTypeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceTypeInfo) ProtoMessage() {}

func (x *ResourceTypeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_framework_sharedtypesv1_types_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceTypeInfo.ProtoReflect.Descriptor instead.
func (*ResourceTypeInfo) Descriptor() ([]byte, []int) {
	return file_plugin_framework_sharedtypesv1_types_proto_rawDescGZIP(), []int{8}
}

func (x *ResourceTypeInfo) GetType() *ResourceType {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *ResourceTypeInfo) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

// FunctionDefinitionRequest is the request input
// for fetching the definition of a function.
type FunctionDefinitionRequest struct {
	state        protoimpl.MessageState `protogen:"open.v1"`
	FunctionName string                 `protobuf:"bytes,1,opt,name=function_name,json=functionName" json:"function_name,omitempty"`
	// The ID of the host making the request
	// to the provider.
	HostId        string           `protobuf:"bytes,2,opt,name=host_id,json=hostId" json:"host_id,omitempty"`
	Params        *BlueprintParams `protobuf:"bytes,3,opt,name=params" json:"params,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FunctionDefinitionRequest) Reset() {
	*x = FunctionDefinitionRequest{}
	mi := &file_plugin_framework_sharedtypesv1_types_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FunctionDefinitionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FunctionDefinitionRequest) ProtoMessage() {}

func (x *FunctionDefinitionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_framework_sharedtypesv1_types_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FunctionDefinitionRequest.ProtoReflect.Descriptor instead.
func (*FunctionDefinitionRequest) Descriptor() ([]byte, []int) {
	return file_plugin_framework_sharedtypesv1_types_proto_rawDescGZIP(), []int{9}
}

func (x *FunctionDefinitionRequest) GetFunctionName() string {
	if x != nil {
		return x.FunctionName
	}
	return ""
}

func (x *FunctionDefinitionRequest) GetHostId() string {
	if x != nil {
		return x.HostId
	}
	return ""
}

func (x *FunctionDefinitionRequest) GetParams() *BlueprintParams {
	if x != nil {
		return x.Params
	}
	return nil
}

// FunctionDefinitionResponse is the response
// containing the definition of a function.
type FunctionDefinitionResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Response:
	//
	//	*FunctionDefinitionResponse_FunctionDefinition
	//	*FunctionDefinitionResponse_ErrorResponse
	Response      isFunctionDefinitionResponse_Response `protobuf_oneof:"response"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FunctionDefinitionResponse) Reset() {
	*x = FunctionDefinitionResponse{}
	mi := &file_plugin_framework_sharedtypesv1_types_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FunctionDefinitionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FunctionDefinitionResponse) ProtoMessage() {}

func (x *FunctionDefinitionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_framework_sharedtypesv1_types_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FunctionDefinitionResponse.ProtoReflect.Descriptor instead.
func (*FunctionDefinitionResponse) Descriptor() ([]byte, []int) {
	return file_plugin_framework_sharedtypesv1_types_proto_rawDescGZIP(), []int{10}
}

func (x *FunctionDefinitionResponse) GetResponse() isFunctionDefinitionResponse_Response {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *FunctionDefinitionResponse) GetFunctionDefinition() *FunctionDefinition {
	if x != nil {
		if x, ok := x.Response.(*FunctionDefinitionResponse_FunctionDefinition); ok {
			return x.FunctionDefinition
		}
	}
	return nil
}

func (x *FunctionDefinitionResponse) GetErrorResponse() *ErrorResponse {
	if x != nil {
		if x, ok := x.Response.(*FunctionDefinitionResponse_ErrorResponse); ok {
			return x.ErrorResponse
		}
	}
	return nil
}

type isFunctionDefinitionResponse_Response interface {
	isFunctionDefinitionResponse_Response()
}

type FunctionDefinitionResponse_FunctionDefinition struct {
	FunctionDefinition *FunctionDefinition `protobuf:"bytes,1,opt,name=function_definition,json=functionDefinition,oneof"`
}

type FunctionDefinitionResponse_ErrorResponse struct {
	ErrorResponse *ErrorResponse `protobuf:"bytes,2,opt,name=error_response,json=errorResponse,oneof"`
}

func (*FunctionDefinitionResponse_FunctionDefinition) isFunctionDefinitionResponse_Response() {}

func (*FunctionDefinitionResponse_ErrorResponse) isFunctionDefinitionResponse_Response() {}

// FunctionCallRequest is the request input
// for calling a function.
type FunctionCallRequest struct {
	state        protoimpl.MessageState `protogen:"open.v1"`
	FunctionName string                 `protobuf:"bytes,1,opt,name=function_name,json=functionName" json:"function_name,omitempty"`
	// The ID of the host making the request
	// to the provider.
	HostId        string               `protobuf:"bytes,2,opt,name=host_id,json=hostId" json:"host_id,omitempty"`
	Args          *FunctionCallArgs    `protobuf:"bytes,3,opt,name=args" json:"args,omitempty"`
	CallContext   *FunctionCallContext `protobuf:"bytes,4,opt,name=call_context,json=callContext" json:"call_context,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FunctionCallRequest) Reset() {
	*x = FunctionCallRequest{}
	mi := &file_plugin_framework_sharedtypesv1_types_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FunctionCallRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FunctionCallRequest) ProtoMessage() {}

func (x *FunctionCallRequest) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_framework_sharedtypesv1_types_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FunctionCallRequest.ProtoReflect.Descriptor instead.
func (*FunctionCallRequest) Descriptor() ([]byte, []int) {
	return file_plugin_framework_sharedtypesv1_types_proto_rawDescGZIP(), []int{11}
}

func (x *FunctionCallRequest) GetFunctionName() string {
	if x != nil {
		return x.FunctionName
	}
	return ""
}

func (x *FunctionCallRequest) GetHostId() string {
	if x != nil {
		return x.HostId
	}
	return ""
}

func (x *FunctionCallRequest) GetArgs() *FunctionCallArgs {
	if x != nil {
		return x.Args
	}
	return nil
}

func (x *FunctionCallRequest) GetCallContext() *FunctionCallContext {
	if x != nil {
		return x.CallContext
	}
	return nil
}

// FunctionCallResponse is the response
// containing the result of calling a function.
type FunctionCallResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Response:
	//
	//	*FunctionCallResponse_FunctionResult
	//	*FunctionCallResponse_ErrorResponse
	Response      isFunctionCallResponse_Response `protobuf_oneof:"response"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FunctionCallResponse) Reset() {
	*x = FunctionCallResponse{}
	mi := &file_plugin_framework_sharedtypesv1_types_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FunctionCallResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FunctionCallResponse) ProtoMessage() {}

func (x *FunctionCallResponse) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_framework_sharedtypesv1_types_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FunctionCallResponse.ProtoReflect.Descriptor instead.
func (*FunctionCallResponse) Descriptor() ([]byte, []int) {
	return file_plugin_framework_sharedtypesv1_types_proto_rawDescGZIP(), []int{12}
}

func (x *FunctionCallResponse) GetResponse() isFunctionCallResponse_Response {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *FunctionCallResponse) GetFunctionResult() *FunctionCallResult {
	if x != nil {
		if x, ok := x.Response.(*FunctionCallResponse_FunctionResult); ok {
			return x.FunctionResult
		}
	}
	return nil
}

func (x *FunctionCallResponse) GetErrorResponse() *ErrorResponse {
	if x != nil {
		if x, ok := x.Response.(*FunctionCallResponse_ErrorResponse); ok {
			return x.ErrorResponse
		}
	}
	return nil
}

type isFunctionCallResponse_Response interface {
	isFunctionCallResponse_Response()
}

type FunctionCallResponse_FunctionResult struct {
	FunctionResult *FunctionCallResult `protobuf:"bytes,1,opt,name=function_result,json=functionResult,oneof"`
}

type FunctionCallResponse_ErrorResponse struct {
	ErrorResponse *ErrorResponse `protobuf:"bytes,2,opt,name=error_response,json=errorResponse,oneof"`
}

func (*FunctionCallResponse_FunctionResult) isFunctionCallResponse_Response() {}

func (*FunctionCallResponse_ErrorResponse) isFunctionCallResponse_Response() {}

// FunctionCallResult contains the result of calling
// a function.
type FunctionCallResult struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ResponseData  *anypb.Any             `protobuf:"bytes,1,opt,name=response_data,json=responseData" json:"response_data,omitempty"`
	FunctionInfo  *FunctionRuntimeInfo   `protobuf:"bytes,2,opt,name=function_info,json=functionInfo" json:"function_info,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FunctionCallResult) Reset() {
	*x = FunctionCallResult{}
	mi := &file_plugin_framework_sharedtypesv1_types_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FunctionCallResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FunctionCallResult) ProtoMessage() {}

func (x *FunctionCallResult) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_framework_sharedtypesv1_types_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FunctionCallResult.ProtoReflect.Descriptor instead.
func (*FunctionCallResult) Descriptor() ([]byte, []int) {
	return file_plugin_framework_sharedtypesv1_types_proto_rawDescGZIP(), []int{13}
}

func (x *FunctionCallResult) GetResponseData() *anypb.Any {
	if x != nil {
		return x.ResponseData
	}
	return nil
}

func (x *FunctionCallResult) GetFunctionInfo() *FunctionRuntimeInfo {
	if x != nil {
		return x.FunctionInfo
	}
	return nil
}

// FunctionRuntimeInfo provides information about a function to be passed
// between functions.
// The blueprint function framework is designed to work across process boundaries
// so an actual function in memory can not be passed around, Instead, a function
// runtime info is used, this contains the function name to be called and pre-configured
// arguments that can be used when the function is eventually called.
//
// Higher-order functions can only use named functions for the return value
// as the function name is used to look up the function definition and combine
// the pre-configured arguments with the arguments passed to the function.
type FunctionRuntimeInfo struct {
	state        protoimpl.MessageState `protogen:"open.v1"`
	FunctionName string                 `protobuf:"bytes,1,opt,name=function_name,json=functionName" json:"function_name,omitempty"`
	// Partial args should be a serialised JSON array,
	// this means partial args only need to be deserialised once.
	PartialArgs *anypb.Any `protobuf:"bytes,2,opt,name=partial_args,json=partialArgs" json:"partial_args,omitempty"`
	// The offset of the arguments in the partial arguments.
	// This should be rarely be used, but in the case where the captured
	// arguments to be "partially applied" are not the first arguments
	// in the function signature, this can be used to specify the offset
	// of the arguments in the partial arguments list.
	ArgsOffset    int32 `protobuf:"varint,3,opt,name=args_offset,json=argsOffset" json:"args_offset,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FunctionRuntimeInfo) Reset() {
	*x = FunctionRuntimeInfo{}
	mi := &file_plugin_framework_sharedtypesv1_types_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FunctionRuntimeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FunctionRuntimeInfo) ProtoMessage() {}

func (x *FunctionRuntimeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_framework_sharedtypesv1_types_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FunctionRuntimeInfo.ProtoReflect.Descriptor instead.
func (*FunctionRuntimeInfo) Descriptor() ([]byte, []int) {
	return file_plugin_framework_sharedtypesv1_types_proto_rawDescGZIP(), []int{14}
}

func (x *FunctionRuntimeInfo) GetFunctionName() string {
	if x != nil {
		return x.FunctionName
	}
	return ""
}

func (x *FunctionRuntimeInfo) GetPartialArgs() *anypb.Any {
	if x != nil {
		return x.PartialArgs
	}
	return nil
}

func (x *FunctionRuntimeInfo) GetArgsOffset() int32 {
	if x != nil {
		return x.ArgsOffset
	}
	return 0
}

// FunctionCallArgs contains the arguments for calling
// a provider function.
type FunctionCallArgs struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Arguments are expected to be stored in a serialised JSON array
	// which allows the call args list to be deserialised once into a list instead
	// of having to deserialise each argument individually.
	// There is no concept of named args in the deploy engine host runtime,
	// it is down to function implementation to handle derive named args
	// from the list of arguments. (e.g. extract the first arg as a map)
	Args          *anypb.Any `protobuf:"bytes,1,opt,name=args" json:"args,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FunctionCallArgs) Reset() {
	*x = FunctionCallArgs{}
	mi := &file_plugin_framework_sharedtypesv1_types_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FunctionCallArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FunctionCallArgs) ProtoMessage() {}

func (x *FunctionCallArgs) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_framework_sharedtypesv1_types_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FunctionCallArgs.ProtoReflect.Descriptor instead.
func (*FunctionCallArgs) Descriptor() ([]byte, []int) {
	return file_plugin_framework_sharedtypesv1_types_proto_rawDescGZIP(), []int{15}
}

func (x *FunctionCallArgs) GetArgs() *anypb.Any {
	if x != nil {
		return x.Args
	}
	return nil
}

// FunctionCallContext contains the current environment
// context for calling a function.
type FunctionCallContext struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Params          *BlueprintParams       `protobuf:"bytes,1,opt,name=params" json:"params,omitempty"`
	CallStack       []*FunctionCall        `protobuf:"bytes,2,rep,name=call_stack,json=callStack" json:"call_stack,omitempty"`
	CurrentLocation *SourceMeta            `protobuf:"bytes,3,opt,name=current_location,json=currentLocation" json:"current_location,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *FunctionCallContext) Reset() {
	*x = FunctionCallContext{}
	mi := &file_plugin_framework_sharedtypesv1_types_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FunctionCallContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FunctionCallContext) ProtoMessage() {}

func (x *FunctionCallContext) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_framework_sharedtypesv1_types_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FunctionCallContext.ProtoReflect.Descriptor instead.
func (*FunctionCallContext) Descriptor() ([]byte, []int) {
	return file_plugin_framework_sharedtypesv1_types_proto_rawDescGZIP(), []int{16}
}

func (x *FunctionCallContext) GetParams() *BlueprintParams {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *FunctionCallContext) GetCallStack() []*FunctionCall {
	if x != nil {
		return x.CallStack
	}
	return nil
}

func (x *FunctionCallContext) GetCurrentLocation() *SourceMeta {
	if x != nil {
		return x.CurrentLocation
	}
	return nil
}

// FunctionCall holds information for a function call
// in a call stack.
type FunctionCall struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The file path of the source blueprint
	// where the function call is located.
	// This is especially useful for debugging projects with multiple
	// blueprints or in a multi-stage validation/deployment process
	// where the blueprint is one of many files that could have caused
	// an error.
	FilePath     string `protobuf:"bytes,1,opt,name=file_path,json=filePath" json:"file_path,omitempty"`
	FunctionName string `protobuf:"bytes,2,opt,name=function_name,json=functionName" json:"function_name,omitempty"`
	// The location of the function call in the source blueprint
	// that is captured in the schema and substitution parsing process.
	Location      *SourceMeta `protobuf:"bytes,3,opt,name=location" json:"location,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FunctionCall) Reset() {
	*x = FunctionCall{}
	mi := &file_plugin_framework_sharedtypesv1_types_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FunctionCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FunctionCall) ProtoMessage() {}

func (x *FunctionCall) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_framework_sharedtypesv1_types_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FunctionCall.ProtoReflect.Descriptor instead.
func (*FunctionCall) Descriptor() ([]byte, []int) {
	return file_plugin_framework_sharedtypesv1_types_proto_rawDescGZIP(), []int{17}
}

func (x *FunctionCall) GetFilePath() string {
	if x != nil {
		return x.FilePath
	}
	return ""
}

func (x *FunctionCall) GetFunctionName() string {
	if x != nil {
		return x.FunctionName
	}
	return ""
}

func (x *FunctionCall) GetLocation() *SourceMeta {
	if x != nil {
		return x.Location
	}
	return nil
}

// SourceMeta contains information about the location and range
// of an element in a source blueprint document.
type SourceMeta struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	StartPosition *SourcePosition        `protobuf:"bytes,1,opt,name=start_position,json=startPosition" json:"start_position,omitempty"`
	EndPosition   *SourcePosition        `protobuf:"bytes,2,opt,name=end_position,json=endPosition" json:"end_position,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SourceMeta) Reset() {
	*x = SourceMeta{}
	mi := &file_plugin_framework_sharedtypesv1_types_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SourceMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SourceMeta) ProtoMessage() {}

func (x *SourceMeta) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_framework_sharedtypesv1_types_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SourceMeta.ProtoReflect.Descriptor instead.
func (*SourceMeta) Descriptor() ([]byte, []int) {
	return file_plugin_framework_sharedtypesv1_types_proto_rawDescGZIP(), []int{18}
}

func (x *SourceMeta) GetStartPosition() *SourcePosition {
	if x != nil {
		return x.StartPosition
	}
	return nil
}

func (x *SourceMeta) GetEndPosition() *SourcePosition {
	if x != nil {
		return x.EndPosition
	}
	return nil
}

// SourcePosition contains information about the position
// of an element in a source blueprint document.
type SourcePosition struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Line          int64                  `protobuf:"varint,1,opt,name=line" json:"line,omitempty"`
	Column        int64                  `protobuf:"varint,2,opt,name=column" json:"column,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SourcePosition) Reset() {
	*x = SourcePosition{}
	mi := &file_plugin_framework_sharedtypesv1_types_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SourcePosition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SourcePosition) ProtoMessage() {}

func (x *SourcePosition) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_framework_sharedtypesv1_types_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SourcePosition.ProtoReflect.Descriptor instead.
func (*SourcePosition) Descriptor() ([]byte, []int) {
	return file_plugin_framework_sharedtypesv1_types_proto_rawDescGZIP(), []int{19}
}

func (x *SourcePosition) GetLine() int64 {
	if x != nil {
		return x.Line
	}
	return 0
}

func (x *SourcePosition) GetColumn() int64 {
	if x != nil {
		return x.Column
	}
	return 0
}

// FunctionDefinition describes a function that can be used in a blueprint "${..}" substitution.
// This is used to define the parameters and return types of a function that is used
// to validate arguments passed into a function and the return value of a function.
type FunctionDefinition struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The globally unique name of the function.
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// A human-readable summary to be used in documentation and
	// tooling when listing functions.
	Summary string `protobuf:"bytes,2,opt,name=summary" json:"summary,omitempty"`
	// A human-readable summary of the function that is formatted with markdown.
	FormattedSummary string `protobuf:"bytes,3,opt,name=formatted_summary,json=formattedSummary" json:"formatted_summary,omitempty"`
	// A human-readable description of the function.
	Description string `protobuf:"bytes,4,opt,name=description" json:"description,omitempty"`
	// A human-readable description of the function that is
	// formatted with markdown.
	FormattedDescription string `protobuf:"bytes,5,opt,name=formatted_description,json=formattedDescription" json:"formatted_description,omitempty"`
	// A definition of the parameters that are expected
	// to be passed into the function.
	// The order of the parameters is important as it will be used
	// to match arguments passed into the function.
	Parameters []*FunctionParameter `protobuf:"bytes,6,rep,name=parameters" json:"parameters,omitempty"`
	// A definition of the return type of the function.
	// Return types are always expected as provider functions are
	// expected to be pure functions that return an output based
	// on the input arguments without side effects.
	// Functions can also return other functions that can be shared,
	// this especially useful for function composition and partial application
	// of functions used in mapping over arrays or similar operations.
	Return *FunctionReturn `protobuf:"bytes,7,opt,name=return" json:"return,omitempty"`
	// Determines whether or not the function is an internal function
	// that should not be exposed to end-users.
	// Some internal functions are required to enable capabilities
	// such as function composition, piping and a small collection of other
	// higher-order functions.
	Internal      bool `protobuf:"varint,8,opt,name=internal" json:"internal,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FunctionDefinition) Reset() {
	*x = FunctionDefinition{}
	mi := &file_plugin_framework_sharedtypesv1_types_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FunctionDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FunctionDefinition) ProtoMessage() {}

func (x *FunctionDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_framework_sharedtypesv1_types_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FunctionDefinition.ProtoReflect.Descriptor instead.
func (*FunctionDefinition) Descriptor() ([]byte, []int) {
	return file_plugin_framework_sharedtypesv1_types_proto_rawDescGZIP(), []int{20}
}

func (x *FunctionDefinition) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FunctionDefinition) GetSummary() string {
	if x != nil {
		return x.Summary
	}
	return ""
}

func (x *FunctionDefinition) GetFormattedSummary() string {
	if x != nil {
		return x.FormattedSummary
	}
	return ""
}

func (x *FunctionDefinition) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *FunctionDefinition) GetFormattedDescription() string {
	if x != nil {
		return x.FormattedDescription
	}
	return ""
}

func (x *FunctionDefinition) GetParameters() []*FunctionParameter {
	if x != nil {
		return x.Parameters
	}
	return nil
}

func (x *FunctionDefinition) GetReturn() *FunctionReturn {
	if x != nil {
		return x.Return
	}
	return nil
}

func (x *FunctionDefinition) GetInternal() bool {
	if x != nil {
		return x.Internal
	}
	return false
}

// FunctionParameter is a parameter type definition for arguments
// passed into a function.
type FunctionParameter struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Parameter:
	//
	//	*FunctionParameter_ScalarParameter
	//	*FunctionParameter_ListParameter
	//	*FunctionParameter_MapParameter
	//	*FunctionParameter_ObjectParameter
	//	*FunctionParameter_FunctionTypeParameter
	//	*FunctionParameter_VariadicParameter
	//	*FunctionParameter_AnyParameter
	Parameter     isFunctionParameter_Parameter `protobuf_oneof:"parameter"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FunctionParameter) Reset() {
	*x = FunctionParameter{}
	mi := &file_plugin_framework_sharedtypesv1_types_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FunctionParameter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FunctionParameter) ProtoMessage() {}

func (x *FunctionParameter) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_framework_sharedtypesv1_types_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FunctionParameter.ProtoReflect.Descriptor instead.
func (*FunctionParameter) Descriptor() ([]byte, []int) {
	return file_plugin_framework_sharedtypesv1_types_proto_rawDescGZIP(), []int{21}
}

func (x *FunctionParameter) GetParameter() isFunctionParameter_Parameter {
	if x != nil {
		return x.Parameter
	}
	return nil
}

func (x *FunctionParameter) GetScalarParameter() *FunctionScalarParameter {
	if x != nil {
		if x, ok := x.Parameter.(*FunctionParameter_ScalarParameter); ok {
			return x.ScalarParameter
		}
	}
	return nil
}

func (x *FunctionParameter) GetListParameter() *FunctionListParameter {
	if x != nil {
		if x, ok := x.Parameter.(*FunctionParameter_ListParameter); ok {
			return x.ListParameter
		}
	}
	return nil
}

func (x *FunctionParameter) GetMapParameter() *FunctionMapParameter {
	if x != nil {
		if x, ok := x.Parameter.(*FunctionParameter_MapParameter); ok {
			return x.MapParameter
		}
	}
	return nil
}

func (x *FunctionParameter) GetObjectParameter() *FunctionObjectParameter {
	if x != nil {
		if x, ok := x.Parameter.(*FunctionParameter_ObjectParameter); ok {
			return x.ObjectParameter
		}
	}
	return nil
}

func (x *FunctionParameter) GetFunctionTypeParameter() *FunctionTypeParameter {
	if x != nil {
		if x, ok := x.Parameter.(*FunctionParameter_FunctionTypeParameter); ok {
			return x.FunctionTypeParameter
		}
	}
	return nil
}

func (x *FunctionParameter) GetVariadicParameter() *FunctionVariadicParameter {
	if x != nil {
		if x, ok := x.Parameter.(*FunctionParameter_VariadicParameter); ok {
			return x.VariadicParameter
		}
	}
	return nil
}

func (x *FunctionParameter) GetAnyParameter() *FunctionAnyParameter {
	if x != nil {
		if x, ok := x.Parameter.(*FunctionParameter_AnyParameter); ok {
			return x.AnyParameter
		}
	}
	return nil
}

type isFunctionParameter_Parameter interface {
	isFunctionParameter_Parameter()
}

type FunctionParameter_ScalarParameter struct {
	ScalarParameter *FunctionScalarParameter `protobuf:"bytes,1,opt,name=scalar_parameter,json=scalarParameter,oneof"`
}

type FunctionParameter_ListParameter struct {
	ListParameter *FunctionListParameter `protobuf:"bytes,2,opt,name=list_parameter,json=listParameter,oneof"`
}

type FunctionParameter_MapParameter struct {
	MapParameter *FunctionMapParameter `protobuf:"bytes,3,opt,name=map_parameter,json=mapParameter,oneof"`
}

type FunctionParameter_ObjectParameter struct {
	ObjectParameter *FunctionObjectParameter `protobuf:"bytes,4,opt,name=object_parameter,json=objectParameter,oneof"`
}

type FunctionParameter_FunctionTypeParameter struct {
	FunctionTypeParameter *FunctionTypeParameter `protobuf:"bytes,5,opt,name=function_type_parameter,json=functionTypeParameter,oneof"`
}

type FunctionParameter_VariadicParameter struct {
	VariadicParameter *FunctionVariadicParameter `protobuf:"bytes,6,opt,name=variadic_parameter,json=variadicParameter,oneof"`
}

type FunctionParameter_AnyParameter struct {
	AnyParameter *FunctionAnyParameter `protobuf:"bytes,7,opt,name=any_parameter,json=anyParameter,oneof"`
}

func (*FunctionParameter_ScalarParameter) isFunctionParameter_Parameter() {}

func (*FunctionParameter_ListParameter) isFunctionParameter_Parameter() {}

func (*FunctionParameter_MapParameter) isFunctionParameter_Parameter() {}

func (*FunctionParameter_ObjectParameter) isFunctionParameter_Parameter() {}

func (*FunctionParameter_FunctionTypeParameter) isFunctionParameter_Parameter() {}

func (*FunctionParameter_VariadicParameter) isFunctionParameter_Parameter() {}

func (*FunctionParameter_AnyParameter) isFunctionParameter_Parameter() {}

// ScalarParameter is a parameter type definition for primitive types.
type FunctionScalarParameter struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The name of the parameter for functions that support named arguments.
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// The usage name for the parameter.
	// This will appear in logs and in tooling such as the
	// language server.
	Label string `protobuf:"bytes,2,opt,name=label" json:"label,omitempty"`
	// Type of the parameter, an argument will be validated
	// against this type.
	Type *FunctionValueTypeDefinition `protobuf:"bytes,3,opt,name=type" json:"type,omitempty"`
	// A human-readable description of the parameter.
	// This will appear in logs and tooling such as the
	// language server.
	Description string `protobuf:"bytes,4,opt,name=description" json:"description,omitempty"`
	// A human-readable description of the parameter
	// that is formatted with markdown.
	// This will appear in usage documentation, logs and in
	// tooling such as the language server.
	FormattedDescription string `protobuf:"bytes,5,opt,name=formatted_description,json=formattedDescription" json:"formatted_description,omitempty"`
	// Determines whether or not an argument passed in for
	// this parameter can be null.
	AllowNullValue bool `protobuf:"varint,6,opt,name=allow_null_value,json=allowNullValue" json:"allow_null_value,omitempty"`
	// Determines whether or not the value can be omitted.
	Optional      bool `protobuf:"varint,7,opt,name=optional" json:"optional,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FunctionScalarParameter) Reset() {
	*x = FunctionScalarParameter{}
	mi := &file_plugin_framework_sharedtypesv1_types_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FunctionScalarParameter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FunctionScalarParameter) ProtoMessage() {}

func (x *FunctionScalarParameter) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_framework_sharedtypesv1_types_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FunctionScalarParameter.ProtoReflect.Descriptor instead.
func (*FunctionScalarParameter) Descriptor() ([]byte, []int) {
	return file_plugin_framework_sharedtypesv1_types_proto_rawDescGZIP(), []int{22}
}

func (x *FunctionScalarParameter) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FunctionScalarParameter) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *FunctionScalarParameter) GetType() *FunctionValueTypeDefinition {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *FunctionScalarParameter) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *FunctionScalarParameter) GetFormattedDescription() string {
	if x != nil {
		return x.FormattedDescription
	}
	return ""
}

func (x *FunctionScalarParameter) GetAllowNullValue() bool {
	if x != nil {
		return x.AllowNullValue
	}
	return false
}

func (x *FunctionScalarParameter) GetOptional() bool {
	if x != nil {
		return x.Optional
	}
	return false
}

// FunctionListParameter is a parameter type definition for lists.
type FunctionListParameter struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The name of the parameter for functions that support named arguments.
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// The usage name for the parameter.
	// This will appear in logs and in tooling such as the
	// language server.
	Label string `protobuf:"bytes,2,opt,name=label" json:"label,omitempty"`
	// Type of elements in the list, an argument will be validated
	// against this type.
	ElementType *FunctionValueTypeDefinition `protobuf:"bytes,3,opt,name=element_type,json=elementType" json:"element_type,omitempty"`
	// A human-readable description of the parameter.
	// This will appear in logs and tooling such as the
	// language server.
	Description string `protobuf:"bytes,4,opt,name=description" json:"description,omitempty"`
	// A human-readable description of the parameter
	// that is formatted with markdown.
	// This will appear in usage documentation, logs and in
	// tooling such as the language server.
	FormattedDescription string `protobuf:"bytes,5,opt,name=formatted_description,json=formattedDescription" json:"formatted_description,omitempty"`
	// Determines whether or not an argument passed in for
	// this parameter can be null.
	AllowNullValue bool `protobuf:"varint,6,opt,name=allow_null_value,json=allowNullValue" json:"allow_null_value,omitempty"`
	// Determines whether or not the value can be omitted.
	Optional      bool `protobuf:"varint,7,opt,name=optional" json:"optional,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FunctionListParameter) Reset() {
	*x = FunctionListParameter{}
	mi := &file_plugin_framework_sharedtypesv1_types_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FunctionListParameter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FunctionListParameter) ProtoMessage() {}

func (x *FunctionListParameter) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_framework_sharedtypesv1_types_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FunctionListParameter.ProtoReflect.Descriptor instead.
func (*FunctionListParameter) Descriptor() ([]byte, []int) {
	return file_plugin_framework_sharedtypesv1_types_proto_rawDescGZIP(), []int{23}
}

func (x *FunctionListParameter) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FunctionListParameter) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *FunctionListParameter) GetElementType() *FunctionValueTypeDefinition {
	if x != nil {
		return x.ElementType
	}
	return nil
}

func (x *FunctionListParameter) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *FunctionListParameter) GetFormattedDescription() string {
	if x != nil {
		return x.FormattedDescription
	}
	return ""
}

func (x *FunctionListParameter) GetAllowNullValue() bool {
	if x != nil {
		return x.AllowNullValue
	}
	return false
}

func (x *FunctionListParameter) GetOptional() bool {
	if x != nil {
		return x.Optional
	}
	return false
}

// FunctionMapParameter is a parameter type definition for maps.
type FunctionMapParameter struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The name of the parameter for functions that support named arguments.
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// The usage name for the parameter.
	// This will appear in logs and in tooling such as the
	// language server.
	Label string `protobuf:"bytes,2,opt,name=label" json:"label,omitempty"`
	// Type of values in the map, an argument will be validated
	// against this type.
	ElementType *FunctionValueTypeDefinition `protobuf:"bytes,3,opt,name=element_type,json=elementType" json:"element_type,omitempty"`
	// A human-readable description of the parameter.
	// This will appear in logs and tooling such as the
	// language server.
	Description string `protobuf:"bytes,4,opt,name=description" json:"description,omitempty"`
	// A human-readable description of the parameter
	// that is formatted with markdown.
	// This will appear in usage documentation, logs and in
	// tooling such as the language server.
	FormattedDescription string `protobuf:"bytes,5,opt,name=formatted_description,json=formattedDescription" json:"formatted_description,omitempty"`
	// Determines whether or not an argument passed in for
	// this parameter can be null.
	AllowNullValue bool `protobuf:"varint,6,opt,name=allow_null_value,json=allowNullValue" json:"allow_null_value,omitempty"`
	// Determines whether or not the value can be omitted.
	Optional      bool `protobuf:"varint,7,opt,name=optional" json:"optional,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FunctionMapParameter) Reset() {
	*x = FunctionMapParameter{}
	mi := &file_plugin_framework_sharedtypesv1_types_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FunctionMapParameter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FunctionMapParameter) ProtoMessage() {}

func (x *FunctionMapParameter) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_framework_sharedtypesv1_types_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FunctionMapParameter.ProtoReflect.Descriptor instead.
func (*FunctionMapParameter) Descriptor() ([]byte, []int) {
	return file_plugin_framework_sharedtypesv1_types_proto_rawDescGZIP(), []int{24}
}

func (x *FunctionMapParameter) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FunctionMapParameter) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *FunctionMapParameter) GetElementType() *FunctionValueTypeDefinition {
	if x != nil {
		return x.ElementType
	}
	return nil
}

func (x *FunctionMapParameter) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *FunctionMapParameter) GetFormattedDescription() string {
	if x != nil {
		return x.FormattedDescription
	}
	return ""
}

func (x *FunctionMapParameter) GetAllowNullValue() bool {
	if x != nil {
		return x.AllowNullValue
	}
	return false
}

func (x *FunctionMapParameter) GetOptional() bool {
	if x != nil {
		return x.Optional
	}
	return false
}

// FunctionObjectParameter is a parameter type definition for objects.
type FunctionObjectParameter struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The name of the parameter for functions that support named arguments.
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// The usage name for the parameter.
	// This will appear in logs and in tooling such as the
	// language server.
	Label string `protobuf:"bytes,2,opt,name=label" json:"label,omitempty"`
	// The type definition for an object including the type
	// of each named attribute.
	ObjectValueType *FunctionValueTypeDefinition `protobuf:"bytes,3,opt,name=object_value_type,json=objectValueType" json:"object_value_type,omitempty"`
	// A human-readable description of the parameter.
	// This will appear in logs and tooling such as the
	// language server.
	Description string `protobuf:"bytes,4,opt,name=description" json:"description,omitempty"`
	// A human-readable description of the parameter
	// that is formatted with markdown.
	// This will appear in usage documentation, logs and in
	// tooling such as the language server.
	FormattedDescription string `protobuf:"bytes,5,opt,name=formatted_description,json=formattedDescription" json:"formatted_description,omitempty"`
	// Determines whether or not an argument passed in for
	// this parameter can be null.
	AllowNullValue bool `protobuf:"varint,6,opt,name=allow_null_value,json=allowNullValue" json:"allow_null_value,omitempty"`
	// Determines whether or not the value can be omitted.
	Optional      bool `protobuf:"varint,7,opt,name=optional" json:"optional,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FunctionObjectParameter) Reset() {
	*x = FunctionObjectParameter{}
	mi := &file_plugin_framework_sharedtypesv1_types_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FunctionObjectParameter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FunctionObjectParameter) ProtoMessage() {}

func (x *FunctionObjectParameter) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_framework_sharedtypesv1_types_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FunctionObjectParameter.ProtoReflect.Descriptor instead.
func (*FunctionObjectParameter) Descriptor() ([]byte, []int) {
	return file_plugin_framework_sharedtypesv1_types_proto_rawDescGZIP(), []int{25}
}

func (x *FunctionObjectParameter) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FunctionObjectParameter) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *FunctionObjectParameter) GetObjectValueType() *FunctionValueTypeDefinition {
	if x != nil {
		return x.ObjectValueType
	}
	return nil
}

func (x *FunctionObjectParameter) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *FunctionObjectParameter) GetFormattedDescription() string {
	if x != nil {
		return x.FormattedDescription
	}
	return ""
}

func (x *FunctionObjectParameter) GetAllowNullValue() bool {
	if x != nil {
		return x.AllowNullValue
	}
	return false
}

func (x *FunctionObjectParameter) GetOptional() bool {
	if x != nil {
		return x.Optional
	}
	return false
}

// FunctionTypeParameter is a parameter type definition for functions
// that can be passed as arguments to other functions.
type FunctionTypeParameter struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The name of the parameter for functions that support named arguments.
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// The usage name for the parameter.
	// This will appear in logs and in tooling such as the
	// language server.
	Label string `protobuf:"bytes,2,opt,name=label" json:"label,omitempty"`
	// Type of function that represents the type signature
	// that defines the parameters and return type of the function.
	FunctionType *FunctionValueTypeDefinition `protobuf:"bytes,3,opt,name=function_type,json=functionType" json:"function_type,omitempty"`
	// A human-readable description of the parameter.
	// This will appear in logs and tooling such as the
	// language server.
	Description string `protobuf:"bytes,4,opt,name=description" json:"description,omitempty"`
	// A human-readable description of the parameter
	// that is formatted with markdown.
	// This will appear in usage documentation, logs and in
	// tooling such as the language server.
	FormattedDescription string `protobuf:"bytes,5,opt,name=formatted_description,json=formattedDescription" json:"formatted_description,omitempty"`
	// Determines whether or not an argument passed in for
	// this parameter can be null.
	AllowNullValue bool `protobuf:"varint,6,opt,name=allow_null_value,json=allowNullValue" json:"allow_null_value,omitempty"`
	// Determines whether or not the value can be omitted.
	Optional      bool `protobuf:"varint,7,opt,name=optional" json:"optional,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FunctionTypeParameter) Reset() {
	*x = FunctionTypeParameter{}
	mi := &file_plugin_framework_sharedtypesv1_types_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FunctionTypeParameter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FunctionTypeParameter) ProtoMessage() {}

func (x *FunctionTypeParameter) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_framework_sharedtypesv1_types_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FunctionTypeParameter.ProtoReflect.Descriptor instead.
func (*FunctionTypeParameter) Descriptor() ([]byte, []int) {
	return file_plugin_framework_sharedtypesv1_types_proto_rawDescGZIP(), []int{26}
}

func (x *FunctionTypeParameter) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FunctionTypeParameter) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *FunctionTypeParameter) GetFunctionType() *FunctionValueTypeDefinition {
	if x != nil {
		return x.FunctionType
	}
	return nil
}

func (x *FunctionTypeParameter) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *FunctionTypeParameter) GetFormattedDescription() string {
	if x != nil {
		return x.FormattedDescription
	}
	return ""
}

func (x *FunctionTypeParameter) GetAllowNullValue() bool {
	if x != nil {
		return x.AllowNullValue
	}
	return false
}

func (x *FunctionTypeParameter) GetOptional() bool {
	if x != nil {
		return x.Optional
	}
	return false
}

// FunctionVariadicParameter is a parameter type definition for variadic parameters
// at the end of a parameter list.
// A variadic parameter can be any number of arguments of any or a specific type.
type FunctionVariadicParameter struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The usage name for the parameter.
	// This will appear in logs and in tooling such as the
	// language server.
	Label string `protobuf:"bytes,1,opt,name=label" json:"label,omitempty"`
	// Type of the variadic parameter, an argument will be validated
	// against this type.
	Type *FunctionValueTypeDefinition `protobuf:"bytes,2,opt,name=type" json:"type,omitempty"`
	// Determines whether or not the variadic parameters
	// must all be of the same type.
	// This is false by default, meaning that variadic parameters
	// can be of any type.
	// The `type` field is only assessed if `single_type` is true.
	SingleType bool `protobuf:"varint,3,opt,name=single_type,json=singleType" json:"single_type,omitempty"`
	// A human-readable description of the parameter.
	// This will appear in logs and tooling such as the
	// language server.
	Description string `protobuf:"bytes,4,opt,name=description" json:"description,omitempty"`
	// A human-readable description of the parameter
	// that is formatted with markdown.
	// This will appear in usage documentation, logs and in
	// tooling such as the language server.
	FormattedDescription string `protobuf:"bytes,5,opt,name=formatted_description,json=formattedDescription" json:"formatted_description,omitempty"`
	// Determines whether or not an argument passed in for
	// this parameter can be null.
	AllowNullValue bool `protobuf:"varint,6,opt,name=allow_null_value,json=allowNullValue" json:"allow_null_value,omitempty"`
	// Determines whether or not the variadic parameters
	// are named arguments.
	// Named and positional arguments cannot be mixed.
	// If they are named arguments, all arguments do not need to be
	// of the same type.
	Named         bool `protobuf:"varint,7,opt,name=named" json:"named,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FunctionVariadicParameter) Reset() {
	*x = FunctionVariadicParameter{}
	mi := &file_plugin_framework_sharedtypesv1_types_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FunctionVariadicParameter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FunctionVariadicParameter) ProtoMessage() {}

func (x *FunctionVariadicParameter) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_framework_sharedtypesv1_types_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FunctionVariadicParameter.ProtoReflect.Descriptor instead.
func (*FunctionVariadicParameter) Descriptor() ([]byte, []int) {
	return file_plugin_framework_sharedtypesv1_types_proto_rawDescGZIP(), []int{27}
}

func (x *FunctionVariadicParameter) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *FunctionVariadicParameter) GetType() *FunctionValueTypeDefinition {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *FunctionVariadicParameter) GetSingleType() bool {
	if x != nil {
		return x.SingleType
	}
	return false
}

func (x *FunctionVariadicParameter) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *FunctionVariadicParameter) GetFormattedDescription() string {
	if x != nil {
		return x.FormattedDescription
	}
	return ""
}

func (x *FunctionVariadicParameter) GetAllowNullValue() bool {
	if x != nil {
		return x.AllowNullValue
	}
	return false
}

func (x *FunctionVariadicParameter) GetNamed() bool {
	if x != nil {
		return x.Named
	}
	return false
}

// FunctionAnyParameter is a parameter type definition for any type.
// This can be used for union types as well as parameters that
// can accept any type.
type FunctionAnyParameter struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The name of the parameter for functions that support named arguments.
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// The usage name for the parameter.
	// This will appear in logs and in tooling such as the
	// language server.
	Label string `protobuf:"bytes,2,opt,name=label" json:"label,omitempty"`
	// A list of value type definitions that are allowed for the parameter.
	// When provided, an any parameter type is expected to be validated
	// as a union type where arguments must match of these types.
	UnionTypes []*FunctionValueTypeDefinition `protobuf:"bytes,3,rep,name=union_types,json=unionTypes" json:"union_types,omitempty"`
	// A human-readable description of the parameter.
	// This will appear in logs and tooling such as the
	// language server.
	Description string `protobuf:"bytes,4,opt,name=description" json:"description,omitempty"`
	// A human-readable description of the parameter
	// that is formatted with markdown.
	// This will appear in usage documentation, logs and in
	// tooling such as the language server.
	FormattedDescription string `protobuf:"bytes,5,opt,name=formatted_description,json=formattedDescription" json:"formatted_description,omitempty"`
	// Determines whether or not an argument passed in for
	// this parameter can be null.
	AllowNullValue bool `protobuf:"varint,6,opt,name=allow_null_value,json=allowNullValue" json:"allow_null_value,omitempty"`
	// Determines whether or not the value can be omitted.
	Optional      bool `protobuf:"varint,7,opt,name=optional" json:"optional,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FunctionAnyParameter) Reset() {
	*x = FunctionAnyParameter{}
	mi := &file_plugin_framework_sharedtypesv1_types_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FunctionAnyParameter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FunctionAnyParameter) ProtoMessage() {}

func (x *FunctionAnyParameter) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_framework_sharedtypesv1_types_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FunctionAnyParameter.ProtoReflect.Descriptor instead.
func (*FunctionAnyParameter) Descriptor() ([]byte, []int) {
	return file_plugin_framework_sharedtypesv1_types_proto_rawDescGZIP(), []int{28}
}

func (x *FunctionAnyParameter) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FunctionAnyParameter) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *FunctionAnyParameter) GetUnionTypes() []*FunctionValueTypeDefinition {
	if x != nil {
		return x.UnionTypes
	}
	return nil
}

func (x *FunctionAnyParameter) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *FunctionAnyParameter) GetFormattedDescription() string {
	if x != nil {
		return x.FormattedDescription
	}
	return ""
}

func (x *FunctionAnyParameter) GetAllowNullValue() bool {
	if x != nil {
		return x.AllowNullValue
	}
	return false
}

func (x *FunctionAnyParameter) GetOptional() bool {
	if x != nil {
		return x.Optional
	}
	return false
}

// FunctionReturn is a return type definition for the return value
// of a function.
type FunctionReturn struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Return:
	//
	//	*FunctionReturn_ScalarReturn
	//	*FunctionReturn_ListReturn
	//	*FunctionReturn_MapReturn
	//	*FunctionReturn_ObjectReturn
	//	*FunctionReturn_FunctionTypeReturn
	//	*FunctionReturn_AnyReturn
	Return        isFunctionReturn_Return `protobuf_oneof:"return"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FunctionReturn) Reset() {
	*x = FunctionReturn{}
	mi := &file_plugin_framework_sharedtypesv1_types_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FunctionReturn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FunctionReturn) ProtoMessage() {}

func (x *FunctionReturn) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_framework_sharedtypesv1_types_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FunctionReturn.ProtoReflect.Descriptor instead.
func (*FunctionReturn) Descriptor() ([]byte, []int) {
	return file_plugin_framework_sharedtypesv1_types_proto_rawDescGZIP(), []int{29}
}

func (x *FunctionReturn) GetReturn() isFunctionReturn_Return {
	if x != nil {
		return x.Return
	}
	return nil
}

func (x *FunctionReturn) GetScalarReturn() *FunctionScalarReturn {
	if x != nil {
		if x, ok := x.Return.(*FunctionReturn_ScalarReturn); ok {
			return x.ScalarReturn
		}
	}
	return nil
}

func (x *FunctionReturn) GetListReturn() *FunctionListReturn {
	if x != nil {
		if x, ok := x.Return.(*FunctionReturn_ListReturn); ok {
			return x.ListReturn
		}
	}
	return nil
}

func (x *FunctionReturn) GetMapReturn() *FunctionMapReturn {
	if x != nil {
		if x, ok := x.Return.(*FunctionReturn_MapReturn); ok {
			return x.MapReturn
		}
	}
	return nil
}

func (x *FunctionReturn) GetObjectReturn() *FunctionObjectReturn {
	if x != nil {
		if x, ok := x.Return.(*FunctionReturn_ObjectReturn); ok {
			return x.ObjectReturn
		}
	}
	return nil
}

func (x *FunctionReturn) GetFunctionTypeReturn() *FunctionTypeReturn {
	if x != nil {
		if x, ok := x.Return.(*FunctionReturn_FunctionTypeReturn); ok {
			return x.FunctionTypeReturn
		}
	}
	return nil
}

func (x *FunctionReturn) GetAnyReturn() *FunctionAnyReturn {
	if x != nil {
		if x, ok := x.Return.(*FunctionReturn_AnyReturn); ok {
			return x.AnyReturn
		}
	}
	return nil
}

type isFunctionReturn_Return interface {
	isFunctionReturn_Return()
}

type FunctionReturn_ScalarReturn struct {
	ScalarReturn *FunctionScalarReturn `protobuf:"bytes,1,opt,name=scalar_return,json=scalarReturn,oneof"`
}

type FunctionReturn_ListReturn struct {
	ListReturn *FunctionListReturn `protobuf:"bytes,2,opt,name=list_return,json=listReturn,oneof"`
}

type FunctionReturn_MapReturn struct {
	MapReturn *FunctionMapReturn `protobuf:"bytes,3,opt,name=map_return,json=mapReturn,oneof"`
}

type FunctionReturn_ObjectReturn struct {
	ObjectReturn *FunctionObjectReturn `protobuf:"bytes,4,opt,name=object_return,json=objectReturn,oneof"`
}

type FunctionReturn_FunctionTypeReturn struct {
	FunctionTypeReturn *FunctionTypeReturn `protobuf:"bytes,5,opt,name=function_type_return,json=functionTypeReturn,oneof"`
}

type FunctionReturn_AnyReturn struct {
	AnyReturn *FunctionAnyReturn `protobuf:"bytes,6,opt,name=any_return,json=anyReturn,oneof"`
}

func (*FunctionReturn_ScalarReturn) isFunctionReturn_Return() {}

func (*FunctionReturn_ListReturn) isFunctionReturn_Return() {}

func (*FunctionReturn_MapReturn) isFunctionReturn_Return() {}

func (*FunctionReturn_ObjectReturn) isFunctionReturn_Return() {}

func (*FunctionReturn_FunctionTypeReturn) isFunctionReturn_Return() {}

func (*FunctionReturn_AnyReturn) isFunctionReturn_Return() {}

// FunctionScalarReturn defines a return type for primitive types.
type FunctionScalarReturn struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// This is the type definition for the scalar return value,
	// this should be a type definition that uses one of the scalar
	// value types such as ValueTypeString, ValueTypeInt32, etc.
	Type *FunctionValueTypeDefinition `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	// A human-readable description of the return value.
	// This will appear in logs and in tooling such as the
	// language server.
	Description string `protobuf:"bytes,2,opt,name=description" json:"description,omitempty"`
	// A human-readable description of the return value
	// that is formatted with markdown.
	// This will appear in usage documentation, logs and in
	// tooling such as the language server.
	FormattedDescription string `protobuf:"bytes,3,opt,name=formatted_description,json=formattedDescription" json:"formatted_description,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *FunctionScalarReturn) Reset() {
	*x = FunctionScalarReturn{}
	mi := &file_plugin_framework_sharedtypesv1_types_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FunctionScalarReturn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FunctionScalarReturn) ProtoMessage() {}

func (x *FunctionScalarReturn) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_framework_sharedtypesv1_types_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FunctionScalarReturn.ProtoReflect.Descriptor instead.
func (*FunctionScalarReturn) Descriptor() ([]byte, []int) {
	return file_plugin_framework_sharedtypesv1_types_proto_rawDescGZIP(), []int{30}
}

func (x *FunctionScalarReturn) GetType() *FunctionValueTypeDefinition {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *FunctionScalarReturn) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *FunctionScalarReturn) GetFormattedDescription() string {
	if x != nil {
		return x.FormattedDescription
	}
	return ""
}

// FunctionListReturn defines a return type for a list
// of values with a single type.
type FunctionListReturn struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The type definition for the elements in the list.
	ElementType *FunctionValueTypeDefinition `protobuf:"bytes,1,opt,name=element_type,json=elementType" json:"element_type,omitempty"`
	// A human-readable description of the return value.
	// This will appear in logs and in tooling such as the
	// language server.
	Description string `protobuf:"bytes,2,opt,name=description" json:"description,omitempty"`
	// A human-readable description of the return value
	// that is formatted with markdown.
	// This will appear in usage documentation, logs and in
	// tooling such as the language server.
	FormattedDescription string `protobuf:"bytes,3,opt,name=formatted_description,json=formattedDescription" json:"formatted_description,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *FunctionListReturn) Reset() {
	*x = FunctionListReturn{}
	mi := &file_plugin_framework_sharedtypesv1_types_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FunctionListReturn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FunctionListReturn) ProtoMessage() {}

func (x *FunctionListReturn) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_framework_sharedtypesv1_types_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FunctionListReturn.ProtoReflect.Descriptor instead.
func (*FunctionListReturn) Descriptor() ([]byte, []int) {
	return file_plugin_framework_sharedtypesv1_types_proto_rawDescGZIP(), []int{31}
}

func (x *FunctionListReturn) GetElementType() *FunctionValueTypeDefinition {
	if x != nil {
		return x.ElementType
	}
	return nil
}

func (x *FunctionListReturn) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *FunctionListReturn) GetFormattedDescription() string {
	if x != nil {
		return x.FormattedDescription
	}
	return ""
}

// FunctionMapReturn defines a return type for a map
// of strings to values with a single type.
type FunctionMapReturn struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The type definition for the values in the map.
	ElementType *FunctionValueTypeDefinition `protobuf:"bytes,1,opt,name=element_type,json=elementType" json:"element_type,omitempty"`
	// A human-readable description of the return value.
	// This will appear in logs and in tooling such as the
	// language server.
	Description string `protobuf:"bytes,2,opt,name=description" json:"description,omitempty"`
	// A human-readable description of the return value
	// that is formatted with markdown.
	// This will appear in usage documentation, logs and in
	// tooling such as the language server.
	FormattedDescription string `protobuf:"bytes,3,opt,name=formatted_description,json=formattedDescription" json:"formatted_description,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *FunctionMapReturn) Reset() {
	*x = FunctionMapReturn{}
	mi := &file_plugin_framework_sharedtypesv1_types_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FunctionMapReturn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FunctionMapReturn) ProtoMessage() {}

func (x *FunctionMapReturn) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_framework_sharedtypesv1_types_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FunctionMapReturn.ProtoReflect.Descriptor instead.
func (*FunctionMapReturn) Descriptor() ([]byte, []int) {
	return file_plugin_framework_sharedtypesv1_types_proto_rawDescGZIP(), []int{32}
}

func (x *FunctionMapReturn) GetElementType() *FunctionValueTypeDefinition {
	if x != nil {
		return x.ElementType
	}
	return nil
}

func (x *FunctionMapReturn) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *FunctionMapReturn) GetFormattedDescription() string {
	if x != nil {
		return x.FormattedDescription
	}
	return ""
}

// FunctionObjectReturn defines a return type for an object
// with named attributes and their types.
type FunctionObjectReturn struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The type definition for the object that is returned.
	ObjectValueType *FunctionValueTypeDefinition `protobuf:"bytes,1,opt,name=object_value_type,json=objectValueType" json:"object_value_type,omitempty"`
	// A human-readable description of the return value.
	// This will appear in logs and in tooling such as the
	// language server.
	Description string `protobuf:"bytes,2,opt,name=description" json:"description,omitempty"`
	// A human-readable description of the return value
	// that is formatted with markdown.
	// This will appear in usage documentation, logs and in
	// tooling such as the language server.
	FormattedDescription string `protobuf:"bytes,3,opt,name=formatted_description,json=formattedDescription" json:"formatted_description,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *FunctionObjectReturn) Reset() {
	*x = FunctionObjectReturn{}
	mi := &file_plugin_framework_sharedtypesv1_types_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FunctionObjectReturn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FunctionObjectReturn) ProtoMessage() {}

func (x *FunctionObjectReturn) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_framework_sharedtypesv1_types_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FunctionObjectReturn.ProtoReflect.Descriptor instead.
func (*FunctionObjectReturn) Descriptor() ([]byte, []int) {
	return file_plugin_framework_sharedtypesv1_types_proto_rawDescGZIP(), []int{33}
}

func (x *FunctionObjectReturn) GetObjectValueType() *FunctionValueTypeDefinition {
	if x != nil {
		return x.ObjectValueType
	}
	return nil
}

func (x *FunctionObjectReturn) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *FunctionObjectReturn) GetFormattedDescription() string {
	if x != nil {
		return x.FormattedDescription
	}
	return ""
}

// FunctionTypeReturn defines a return type for a function
// that can be returned from another function.
type FunctionTypeReturn struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The type definition for the function that is returned.
	// This should be a type definition of the function signature
	// that defines the parameters and return type of the function.
	FunctionType *FunctionValueTypeDefinition `protobuf:"bytes,1,opt,name=function_type,json=functionType" json:"function_type,omitempty"`
	// A human-readable description of the return value.
	// This will appear in logs and in tooling such as the
	// language server.
	Description string `protobuf:"bytes,2,opt,name=description" json:"description,omitempty"`
	// A human-readable description of the return value
	// that is formatted with markdown.
	// This will appear in usage documentation, logs and in
	// tooling such as the language server.
	FormattedDescription string `protobuf:"bytes,3,opt,name=formatted_description,json=formattedDescription" json:"formatted_description,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *FunctionTypeReturn) Reset() {
	*x = FunctionTypeReturn{}
	mi := &file_plugin_framework_sharedtypesv1_types_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FunctionTypeReturn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FunctionTypeReturn) ProtoMessage() {}

func (x *FunctionTypeReturn) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_framework_sharedtypesv1_types_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FunctionTypeReturn.ProtoReflect.Descriptor instead.
func (*FunctionTypeReturn) Descriptor() ([]byte, []int) {
	return file_plugin_framework_sharedtypesv1_types_proto_rawDescGZIP(), []int{34}
}

func (x *FunctionTypeReturn) GetFunctionType() *FunctionValueTypeDefinition {
	if x != nil {
		return x.FunctionType
	}
	return nil
}

func (x *FunctionTypeReturn) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *FunctionTypeReturn) GetFormattedDescription() string {
	if x != nil {
		return x.FormattedDescription
	}
	return ""
}

// FunctionAnyReturn defines a return type for any type.
// This can be used for union types as well as return values
// that can be of any type.
type FunctionAnyReturn struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// This is the type definition for a return value that can be any type.
	Type FunctionValueType `protobuf:"varint,1,opt,name=type,enum=sharedtypesv1.FunctionValueType" json:"type,omitempty"`
	// UnionTypes is a list of value type definitions that are allowed for the return value.
	// When provided, an any return type is expected to be validated
	// as a union type where the return value must match one of these types.
	UnionTypes []*FunctionValueTypeDefinition `protobuf:"bytes,2,rep,name=union_types,json=unionTypes" json:"union_types,omitempty"`
	// A human-readable description of the return value.
	// This will appear in logs and in tooling such as the
	// language server.
	Description string `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
	// A human-readable description of the return value
	// that is formatted with markdown.
	// This will appear in usage documentation, logs and in
	// tooling such as the language server.
	FormattedDescription string `protobuf:"bytes,4,opt,name=formatted_description,json=formattedDescription" json:"formatted_description,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *FunctionAnyReturn) Reset() {
	*x = FunctionAnyReturn{}
	mi := &file_plugin_framework_sharedtypesv1_types_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FunctionAnyReturn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FunctionAnyReturn) ProtoMessage() {}

func (x *FunctionAnyReturn) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_framework_sharedtypesv1_types_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FunctionAnyReturn.ProtoReflect.Descriptor instead.
func (*FunctionAnyReturn) Descriptor() ([]byte, []int) {
	return file_plugin_framework_sharedtypesv1_types_proto_rawDescGZIP(), []int{35}
}

func (x *FunctionAnyReturn) GetType() FunctionValueType {
	if x != nil {
		return x.Type
	}
	return FunctionValueType_FUNCTION_VALUE_TYPE_STRING
}

func (x *FunctionAnyReturn) GetUnionTypes() []*FunctionValueTypeDefinition {
	if x != nil {
		return x.UnionTypes
	}
	return nil
}

func (x *FunctionAnyReturn) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *FunctionAnyReturn) GetFormattedDescription() string {
	if x != nil {
		return x.FormattedDescription
	}
	return ""
}

// FunctionObjectAttributeType provides a wrapper around a value
// type definition that allows specific attributes of an object to be null.
type FunctionObjectAttributeType struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The type definition for the attribute.
	Type *FunctionValueTypeDefinition `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	// Determines whether or not the attribute can be null.
	AllowNullValue bool `protobuf:"varint,2,opt,name=allow_null_value,json=allowNullValue" json:"allow_null_value,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *FunctionObjectAttributeType) Reset() {
	*x = FunctionObjectAttributeType{}
	mi := &file_plugin_framework_sharedtypesv1_types_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FunctionObjectAttributeType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FunctionObjectAttributeType) ProtoMessage() {}

func (x *FunctionObjectAttributeType) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_framework_sharedtypesv1_types_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FunctionObjectAttributeType.ProtoReflect.Descriptor instead.
func (*FunctionObjectAttributeType) Descriptor() ([]byte, []int) {
	return file_plugin_framework_sharedtypesv1_types_proto_rawDescGZIP(), []int{36}
}

func (x *FunctionObjectAttributeType) GetType() *FunctionValueTypeDefinition {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *FunctionObjectAttributeType) GetAllowNullValue() bool {
	if x != nil {
		return x.AllowNullValue
	}
	return false
}

// FunctionValueTypeDefinition provides a definition for a value type
// that can be used for function parameters and return types.
type FunctionValueTypeDefinition struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to ValueTypeDefinition:
	//
	//	*FunctionValueTypeDefinition_ScalarValueType
	//	*FunctionValueTypeDefinition_ListValueType
	//	*FunctionValueTypeDefinition_MapValueType
	//	*FunctionValueTypeDefinition_ObjectValueType
	//	*FunctionValueTypeDefinition_FunctionValueType
	//	*FunctionValueTypeDefinition_AnyValueType
	ValueTypeDefinition isFunctionValueTypeDefinition_ValueTypeDefinition `protobuf_oneof:"value_type_definition"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *FunctionValueTypeDefinition) Reset() {
	*x = FunctionValueTypeDefinition{}
	mi := &file_plugin_framework_sharedtypesv1_types_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FunctionValueTypeDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FunctionValueTypeDefinition) ProtoMessage() {}

func (x *FunctionValueTypeDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_framework_sharedtypesv1_types_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FunctionValueTypeDefinition.ProtoReflect.Descriptor instead.
func (*FunctionValueTypeDefinition) Descriptor() ([]byte, []int) {
	return file_plugin_framework_sharedtypesv1_types_proto_rawDescGZIP(), []int{37}
}

func (x *FunctionValueTypeDefinition) GetValueTypeDefinition() isFunctionValueTypeDefinition_ValueTypeDefinition {
	if x != nil {
		return x.ValueTypeDefinition
	}
	return nil
}

func (x *FunctionValueTypeDefinition) GetScalarValueType() *FunctionScalarValueTypeDefinition {
	if x != nil {
		if x, ok := x.ValueTypeDefinition.(*FunctionValueTypeDefinition_ScalarValueType); ok {
			return x.ScalarValueType
		}
	}
	return nil
}

func (x *FunctionValueTypeDefinition) GetListValueType() *FunctionListValueTypeDefinition {
	if x != nil {
		if x, ok := x.ValueTypeDefinition.(*FunctionValueTypeDefinition_ListValueType); ok {
			return x.ListValueType
		}
	}
	return nil
}

func (x *FunctionValueTypeDefinition) GetMapValueType() *FunctionMapValueTypeDefinition {
	if x != nil {
		if x, ok := x.ValueTypeDefinition.(*FunctionValueTypeDefinition_MapValueType); ok {
			return x.MapValueType
		}
	}
	return nil
}

func (x *FunctionValueTypeDefinition) GetObjectValueType() *FunctionObjectValueTypeDefinition {
	if x != nil {
		if x, ok := x.ValueTypeDefinition.(*FunctionValueTypeDefinition_ObjectValueType); ok {
			return x.ObjectValueType
		}
	}
	return nil
}

func (x *FunctionValueTypeDefinition) GetFunctionValueType() *FunctionTypeValueTypeDefinition {
	if x != nil {
		if x, ok := x.ValueTypeDefinition.(*FunctionValueTypeDefinition_FunctionValueType); ok {
			return x.FunctionValueType
		}
	}
	return nil
}

func (x *FunctionValueTypeDefinition) GetAnyValueType() *FunctionAnyValueTypeDefinition {
	if x != nil {
		if x, ok := x.ValueTypeDefinition.(*FunctionValueTypeDefinition_AnyValueType); ok {
			return x.AnyValueType
		}
	}
	return nil
}

type isFunctionValueTypeDefinition_ValueTypeDefinition interface {
	isFunctionValueTypeDefinition_ValueTypeDefinition()
}

type FunctionValueTypeDefinition_ScalarValueType struct {
	ScalarValueType *FunctionScalarValueTypeDefinition `protobuf:"bytes,1,opt,name=scalar_value_type,json=scalarValueType,oneof"`
}

type FunctionValueTypeDefinition_ListValueType struct {
	ListValueType *FunctionListValueTypeDefinition `protobuf:"bytes,2,opt,name=list_value_type,json=listValueType,oneof"`
}

type FunctionValueTypeDefinition_MapValueType struct {
	MapValueType *FunctionMapValueTypeDefinition `protobuf:"bytes,3,opt,name=map_value_type,json=mapValueType,oneof"`
}

type FunctionValueTypeDefinition_ObjectValueType struct {
	ObjectValueType *FunctionObjectValueTypeDefinition `protobuf:"bytes,4,opt,name=object_value_type,json=objectValueType,oneof"`
}

type FunctionValueTypeDefinition_FunctionValueType struct {
	FunctionValueType *FunctionTypeValueTypeDefinition `protobuf:"bytes,5,opt,name=function_value_type,json=functionValueType,oneof"`
}

type FunctionValueTypeDefinition_AnyValueType struct {
	AnyValueType *FunctionAnyValueTypeDefinition `protobuf:"bytes,6,opt,name=any_value_type,json=anyValueType,oneof"`
}

func (*FunctionValueTypeDefinition_ScalarValueType) isFunctionValueTypeDefinition_ValueTypeDefinition() {
}

func (*FunctionValueTypeDefinition_ListValueType) isFunctionValueTypeDefinition_ValueTypeDefinition() {
}

func (*FunctionValueTypeDefinition_MapValueType) isFunctionValueTypeDefinition_ValueTypeDefinition() {
}

func (*FunctionValueTypeDefinition_ObjectValueType) isFunctionValueTypeDefinition_ValueTypeDefinition() {
}

func (*FunctionValueTypeDefinition_FunctionValueType) isFunctionValueTypeDefinition_ValueTypeDefinition() {
}

func (*FunctionValueTypeDefinition_AnyValueType) isFunctionValueTypeDefinition_ValueTypeDefinition() {
}

// FunctionScalarValueTypeDefinition is a value type
// definition for scalar (primitive) types.
type FunctionScalarValueTypeDefinition struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The value type name for the scalar type.
	Type FunctionValueType `protobuf:"varint,1,opt,name=type,enum=sharedtypesv1.FunctionValueType" json:"type,omitempty"`
	// Usage name for the value type.
	Label string `protobuf:"bytes,2,opt,name=label" json:"label,omitempty"`
	// A human-readable description of the value type.
	Description string `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
	// A human-readable description of the value type
	// that is formatted with markdown.
	FormattedDescription string `protobuf:"bytes,4,opt,name=formatted_description,json=formattedDescription" json:"formatted_description,omitempty"`
	// A list of string values that are allowed
	// for values with this type.
	// This is only taken into account when the type is a string.
	StringChoices []string `protobuf:"bytes,5,rep,name=string_choices,json=stringChoices" json:"string_choices,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FunctionScalarValueTypeDefinition) Reset() {
	*x = FunctionScalarValueTypeDefinition{}
	mi := &file_plugin_framework_sharedtypesv1_types_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FunctionScalarValueTypeDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FunctionScalarValueTypeDefinition) ProtoMessage() {}

func (x *FunctionScalarValueTypeDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_framework_sharedtypesv1_types_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FunctionScalarValueTypeDefinition.ProtoReflect.Descriptor instead.
func (*FunctionScalarValueTypeDefinition) Descriptor() ([]byte, []int) {
	return file_plugin_framework_sharedtypesv1_types_proto_rawDescGZIP(), []int{38}
}

func (x *FunctionScalarValueTypeDefinition) GetType() FunctionValueType {
	if x != nil {
		return x.Type
	}
	return FunctionValueType_FUNCTION_VALUE_TYPE_STRING
}

func (x *FunctionScalarValueTypeDefinition) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *FunctionScalarValueTypeDefinition) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *FunctionScalarValueTypeDefinition) GetFormattedDescription() string {
	if x != nil {
		return x.FormattedDescription
	}
	return ""
}

func (x *FunctionScalarValueTypeDefinition) GetStringChoices() []string {
	if x != nil {
		return x.StringChoices
	}
	return nil
}

// FunctionListValueTypeDefinition is a value type
// definition for lists of values.
type FunctionListValueTypeDefinition struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The type definition for the elements in the list.
	ElementType *FunctionValueTypeDefinition `protobuf:"bytes,1,opt,name=element_type,json=elementType" json:"element_type,omitempty"`
	// Usage name for the value type.
	Label string `protobuf:"bytes,2,opt,name=label" json:"label,omitempty"`
	// A human-readable description of the value type.
	Description string `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
	// A human-readable description of the value type
	// that is formatted with markdown.
	FormattedDescription string `protobuf:"bytes,4,opt,name=formatted_description,json=formattedDescription" json:"formatted_description,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *FunctionListValueTypeDefinition) Reset() {
	*x = FunctionListValueTypeDefinition{}
	mi := &file_plugin_framework_sharedtypesv1_types_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FunctionListValueTypeDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FunctionListValueTypeDefinition) ProtoMessage() {}

func (x *FunctionListValueTypeDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_framework_sharedtypesv1_types_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FunctionListValueTypeDefinition.ProtoReflect.Descriptor instead.
func (*FunctionListValueTypeDefinition) Descriptor() ([]byte, []int) {
	return file_plugin_framework_sharedtypesv1_types_proto_rawDescGZIP(), []int{39}
}

func (x *FunctionListValueTypeDefinition) GetElementType() *FunctionValueTypeDefinition {
	if x != nil {
		return x.ElementType
	}
	return nil
}

func (x *FunctionListValueTypeDefinition) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *FunctionListValueTypeDefinition) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *FunctionListValueTypeDefinition) GetFormattedDescription() string {
	if x != nil {
		return x.FormattedDescription
	}
	return ""
}

// FunctionMapValueTypeDefinition is a value type
// definition for a mapping of strings to values.
type FunctionMapValueTypeDefinition struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The type definition for the values in the map.
	ElementType *FunctionValueTypeDefinition `protobuf:"bytes,1,opt,name=element_type,json=elementType" json:"element_type,omitempty"`
	// Usage name for the value type.
	Label string `protobuf:"bytes,2,opt,name=label" json:"label,omitempty"`
	// A human-readable description of the value type.
	Description string `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
	// A human-readable description of the value type
	// that is formatted with markdown.
	FormattedDescription string `protobuf:"bytes,4,opt,name=formatted_description,json=formattedDescription" json:"formatted_description,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *FunctionMapValueTypeDefinition) Reset() {
	*x = FunctionMapValueTypeDefinition{}
	mi := &file_plugin_framework_sharedtypesv1_types_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FunctionMapValueTypeDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FunctionMapValueTypeDefinition) ProtoMessage() {}

func (x *FunctionMapValueTypeDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_framework_sharedtypesv1_types_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FunctionMapValueTypeDefinition.ProtoReflect.Descriptor instead.
func (*FunctionMapValueTypeDefinition) Descriptor() ([]byte, []int) {
	return file_plugin_framework_sharedtypesv1_types_proto_rawDescGZIP(), []int{40}
}

func (x *FunctionMapValueTypeDefinition) GetElementType() *FunctionValueTypeDefinition {
	if x != nil {
		return x.ElementType
	}
	return nil
}

func (x *FunctionMapValueTypeDefinition) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *FunctionMapValueTypeDefinition) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *FunctionMapValueTypeDefinition) GetFormattedDescription() string {
	if x != nil {
		return x.FormattedDescription
	}
	return ""
}

// FunctionObjectValueTypeDefinition is a value type
// definition for objects with named attributes.
type FunctionObjectValueTypeDefinition struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The type definition for each named attribute in the object.
	AttributeTypes map[string]*FunctionObjectAttributeType `protobuf:"bytes,1,rep,name=attribute_types,json=attributeTypes" json:"attribute_types,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Usage name for the value type.
	Label string `protobuf:"bytes,2,opt,name=label" json:"label,omitempty"`
	// A human-readable description of the value type.
	Description string `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
	// A human-readable description of the value type
	// that is formatted with markdown.
	FormattedDescription string `protobuf:"bytes,4,opt,name=formatted_description,json=formattedDescription" json:"formatted_description,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *FunctionObjectValueTypeDefinition) Reset() {
	*x = FunctionObjectValueTypeDefinition{}
	mi := &file_plugin_framework_sharedtypesv1_types_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FunctionObjectValueTypeDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FunctionObjectValueTypeDefinition) ProtoMessage() {}

func (x *FunctionObjectValueTypeDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_framework_sharedtypesv1_types_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FunctionObjectValueTypeDefinition.ProtoReflect.Descriptor instead.
func (*FunctionObjectValueTypeDefinition) Descriptor() ([]byte, []int) {
	return file_plugin_framework_sharedtypesv1_types_proto_rawDescGZIP(), []int{41}
}

func (x *FunctionObjectValueTypeDefinition) GetAttributeTypes() map[string]*FunctionObjectAttributeType {
	if x != nil {
		return x.AttributeTypes
	}
	return nil
}

func (x *FunctionObjectValueTypeDefinition) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *FunctionObjectValueTypeDefinition) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *FunctionObjectValueTypeDefinition) GetFormattedDescription() string {
	if x != nil {
		return x.FormattedDescription
	}
	return ""
}

// FunctionTypeValueTypeDefinition is a value type
// definition for functions that can be passed into
// and returned from other functions.
type FunctionTypeValueTypeDefinition struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The type definition for the function.
	FunctionType *FunctionDefinition `protobuf:"bytes,1,opt,name=function_type,json=functionType" json:"function_type,omitempty"`
	// Usage name for the value type.
	Label string `protobuf:"bytes,2,opt,name=label" json:"label,omitempty"`
	// A human-readable description of the value type.
	Description string `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
	// A human-readable description of the value type
	// that is formatted with markdown.
	FormattedDescription string `protobuf:"bytes,4,opt,name=formatted_description,json=formattedDescription" json:"formatted_description,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *FunctionTypeValueTypeDefinition) Reset() {
	*x = FunctionTypeValueTypeDefinition{}
	mi := &file_plugin_framework_sharedtypesv1_types_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FunctionTypeValueTypeDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FunctionTypeValueTypeDefinition) ProtoMessage() {}

func (x *FunctionTypeValueTypeDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_framework_sharedtypesv1_types_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FunctionTypeValueTypeDefinition.ProtoReflect.Descriptor instead.
func (*FunctionTypeValueTypeDefinition) Descriptor() ([]byte, []int) {
	return file_plugin_framework_sharedtypesv1_types_proto_rawDescGZIP(), []int{42}
}

func (x *FunctionTypeValueTypeDefinition) GetFunctionType() *FunctionDefinition {
	if x != nil {
		return x.FunctionType
	}
	return nil
}

func (x *FunctionTypeValueTypeDefinition) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *FunctionTypeValueTypeDefinition) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *FunctionTypeValueTypeDefinition) GetFormattedDescription() string {
	if x != nil {
		return x.FormattedDescription
	}
	return ""
}

// FunctionAnyValueTypeDefinition is a value type
// definition for any type.
type FunctionAnyValueTypeDefinition struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The value type name for an any type.
	Type FunctionValueType `protobuf:"varint,1,opt,name=type,enum=sharedtypesv1.FunctionValueType" json:"type,omitempty"`
	// A list of value type definitions that are allowed for the value.
	// When provided, an any value type is expected to be validated
	// as a union type where the value must match one of these types.
	UnionTypes []*FunctionValueTypeDefinition `protobuf:"bytes,2,rep,name=union_types,json=unionTypes" json:"union_types,omitempty"`
	// Usage name for the value type.
	Label string `protobuf:"bytes,3,opt,name=label" json:"label,omitempty"`
	// A human-readable description of the value type.
	Description string `protobuf:"bytes,4,opt,name=description" json:"description,omitempty"`
	// A human-readable description of the value type
	// that is formatted with markdown.
	FormattedDescription string `protobuf:"bytes,5,opt,name=formatted_description,json=formattedDescription" json:"formatted_description,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *FunctionAnyValueTypeDefinition) Reset() {
	*x = FunctionAnyValueTypeDefinition{}
	mi := &file_plugin_framework_sharedtypesv1_types_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FunctionAnyValueTypeDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FunctionAnyValueTypeDefinition) ProtoMessage() {}

func (x *FunctionAnyValueTypeDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_framework_sharedtypesv1_types_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FunctionAnyValueTypeDefinition.ProtoReflect.Descriptor instead.
func (*FunctionAnyValueTypeDefinition) Descriptor() ([]byte, []int) {
	return file_plugin_framework_sharedtypesv1_types_proto_rawDescGZIP(), []int{43}
}

func (x *FunctionAnyValueTypeDefinition) GetType() FunctionValueType {
	if x != nil {
		return x.Type
	}
	return FunctionValueType_FUNCTION_VALUE_TYPE_STRING
}

func (x *FunctionAnyValueTypeDefinition) GetUnionTypes() []*FunctionValueTypeDefinition {
	if x != nil {
		return x.UnionTypes
	}
	return nil
}

func (x *FunctionAnyValueTypeDefinition) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *FunctionAnyValueTypeDefinition) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *FunctionAnyValueTypeDefinition) GetFormattedDescription() string {
	if x != nil {
		return x.FormattedDescription
	}
	return ""
}

// DeployResourceRequest provides the input data needed for a resource
// to be deployed.
type DeployResourceRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The type of resource to carry out an action on or retrieve
	// some information about.
	ResourceType *ResourceType `protobuf:"bytes,1,opt,name=resource_type,json=resourceType" json:"resource_type,omitempty"`
	// The ID of the host making the request
	// to the provider.
	HostId       string   `protobuf:"bytes,2,opt,name=host_id,json=hostId" json:"host_id,omitempty"`
	InstanceId   string   `protobuf:"bytes,3,opt,name=instance_id,json=instanceId" json:"instance_id,omitempty"`
	InstanceName string   `protobuf:"bytes,4,opt,name=instance_name,json=instanceName" json:"instance_name,omitempty"`
	ResourceId   string   `protobuf:"bytes,5,opt,name=resource_id,json=resourceId" json:"resource_id,omitempty"`
	Changes      *Changes `protobuf:"bytes,6,opt,name=changes" json:"changes,omitempty"`
	// Runtime configuration for the current environment
	// specific to the current provider.
	Context       *ProviderContext `protobuf:"bytes,7,opt,name=context" json:"context,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeployResourceRequest) Reset() {
	*x = DeployResourceRequest{}
	mi := &file_plugin_framework_sharedtypesv1_types_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeployResourceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeployResourceRequest) ProtoMessage() {}

func (x *DeployResourceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_framework_sharedtypesv1_types_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeployResourceRequest.ProtoReflect.Descriptor instead.
func (*DeployResourceRequest) Descriptor() ([]byte, []int) {
	return file_plugin_framework_sharedtypesv1_types_proto_rawDescGZIP(), []int{44}
}

func (x *DeployResourceRequest) GetResourceType() *ResourceType {
	if x != nil {
		return x.ResourceType
	}
	return nil
}

func (x *DeployResourceRequest) GetHostId() string {
	if x != nil {
		return x.HostId
	}
	return ""
}

func (x *DeployResourceRequest) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *DeployResourceRequest) GetInstanceName() string {
	if x != nil {
		return x.InstanceName
	}
	return ""
}

func (x *DeployResourceRequest) GetResourceId() string {
	if x != nil {
		return x.ResourceId
	}
	return ""
}

func (x *DeployResourceRequest) GetChanges() *Changes {
	if x != nil {
		return x.Changes
	}
	return nil
}

func (x *DeployResourceRequest) GetContext() *ProviderContext {
	if x != nil {
		return x.Context
	}
	return nil
}

// DeployResourceResponse is the response
// containing the result of deploying a resource.
type DeployResourceResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Response:
	//
	//	*DeployResourceResponse_CompleteResponse
	//	*DeployResourceResponse_ErrorResponse
	Response      isDeployResourceResponse_Response `protobuf_oneof:"response"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeployResourceResponse) Reset() {
	*x = DeployResourceResponse{}
	mi := &file_plugin_framework_sharedtypesv1_types_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeployResourceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeployResourceResponse) ProtoMessage() {}

func (x *DeployResourceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_framework_sharedtypesv1_types_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeployResourceResponse.ProtoReflect.Descriptor instead.
func (*DeployResourceResponse) Descriptor() ([]byte, []int) {
	return file_plugin_framework_sharedtypesv1_types_proto_rawDescGZIP(), []int{45}
}

func (x *DeployResourceResponse) GetResponse() isDeployResourceResponse_Response {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *DeployResourceResponse) GetCompleteResponse() *DeployResourceCompleteResponse {
	if x != nil {
		if x, ok := x.Response.(*DeployResourceResponse_CompleteResponse); ok {
			return x.CompleteResponse
		}
	}
	return nil
}

func (x *DeployResourceResponse) GetErrorResponse() *ErrorResponse {
	if x != nil {
		if x, ok := x.Response.(*DeployResourceResponse_ErrorResponse); ok {
			return x.ErrorResponse
		}
	}
	return nil
}

type isDeployResourceResponse_Response interface {
	isDeployResourceResponse_Response()
}

type DeployResourceResponse_CompleteResponse struct {
	CompleteResponse *DeployResourceCompleteResponse `protobuf:"bytes,1,opt,name=complete_response,json=completeResponse,oneof"`
}

type DeployResourceResponse_ErrorResponse struct {
	ErrorResponse *ErrorResponse `protobuf:"bytes,2,opt,name=error_response,json=errorResponse,oneof"`
}

func (*DeployResourceResponse_CompleteResponse) isDeployResourceResponse_Response() {}

func (*DeployResourceResponse_ErrorResponse) isDeployResourceResponse_Response() {}

// DeployResourceCompleteResponse is the response
// returned by the provider plugin when a resource has been deployed.
// This should contain any computed fields that are known after the resource
// has been deployed.
type DeployResourceCompleteResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// A mapping of computed field paths to their values.
	// Examples of computed fields are the ARN of an AWS Lambda function
	// or the ID of a Google Cloud Storage bucket.
	// Some examples of valid computed field paths are:
	// - `spec.arn`
	// - `spec.id`
	// - `spec.arns[0]`
	// - `spec.identifiers["id.v1"]`
	// - `spec["identifiers.1"].arn`
	//
	// The computed fields will be injected into the final resource state that
	// will be persisted as a part of the blueprint instance state.
	ComputedFieldValues map[string]*schemapb.MappingNode `protobuf:"bytes,1,rep,name=computed_field_values,json=computedFieldValues" json:"computed_field_values,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *DeployResourceCompleteResponse) Reset() {
	*x = DeployResourceCompleteResponse{}
	mi := &file_plugin_framework_sharedtypesv1_types_proto_msgTypes[46]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeployResourceCompleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeployResourceCompleteResponse) ProtoMessage() {}

func (x *DeployResourceCompleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_framework_sharedtypesv1_types_proto_msgTypes[46]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeployResourceCompleteResponse.ProtoReflect.Descriptor instead.
func (*DeployResourceCompleteResponse) Descriptor() ([]byte, []int) {
	return file_plugin_framework_sharedtypesv1_types_proto_rawDescGZIP(), []int{46}
}

func (x *DeployResourceCompleteResponse) GetComputedFieldValues() map[string]*schemapb.MappingNode {
	if x != nil {
		return x.ComputedFieldValues
	}
	return nil
}

// ResourceHasStabilisedRequest is the request that contains the input data
// needed for a resource to determine if it has stabilised after being deployed.
type ResourceHasStabilisedRequest struct {
	state        protoimpl.MessageState `protogen:"open.v1"`
	ResourceType *ResourceType          `protobuf:"bytes,1,opt,name=resource_type,json=resourceType" json:"resource_type,omitempty"`
	// The ID of the host making the request
	// to the provider.
	HostId           string                 `protobuf:"bytes,2,opt,name=host_id,json=hostId" json:"host_id,omitempty"`
	InstanceId       string                 `protobuf:"bytes,3,opt,name=instance_id,json=instanceId" json:"instance_id,omitempty"`
	InstanceName     string                 `protobuf:"bytes,4,opt,name=instance_name,json=instanceName" json:"instance_name,omitempty"`
	ResourceId       string                 `protobuf:"bytes,5,opt,name=resource_id,json=resourceId" json:"resource_id,omitempty"`
	ResourceSpec     *schemapb.MappingNode  `protobuf:"bytes,6,opt,name=resource_spec,json=resourceSpec" json:"resource_spec,omitempty"`
	ResourceMetadata *ResourceMetadataState `protobuf:"bytes,7,opt,name=resource_metadata,json=resourceMetadata" json:"resource_metadata,omitempty"`
	Context          *ProviderContext       `protobuf:"bytes,8,opt,name=context" json:"context,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *ResourceHasStabilisedRequest) Reset() {
	*x = ResourceHasStabilisedRequest{}
	mi := &file_plugin_framework_sharedtypesv1_types_proto_msgTypes[47]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResourceHasStabilisedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceHasStabilisedRequest) ProtoMessage() {}

func (x *ResourceHasStabilisedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_framework_sharedtypesv1_types_proto_msgTypes[47]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceHasStabilisedRequest.ProtoReflect.Descriptor instead.
func (*ResourceHasStabilisedRequest) Descriptor() ([]byte, []int) {
	return file_plugin_framework_sharedtypesv1_types_proto_rawDescGZIP(), []int{47}
}

func (x *ResourceHasStabilisedRequest) GetResourceType() *ResourceType {
	if x != nil {
		return x.ResourceType
	}
	return nil
}

func (x *ResourceHasStabilisedRequest) GetHostId() string {
	if x != nil {
		return x.HostId
	}
	return ""
}

func (x *ResourceHasStabilisedRequest) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *ResourceHasStabilisedRequest) GetInstanceName() string {
	if x != nil {
		return x.InstanceName
	}
	return ""
}

func (x *ResourceHasStabilisedRequest) GetResourceId() string {
	if x != nil {
		return x.ResourceId
	}
	return ""
}

func (x *ResourceHasStabilisedRequest) GetResourceSpec() *schemapb.MappingNode {
	if x != nil {
		return x.ResourceSpec
	}
	return nil
}

func (x *ResourceHasStabilisedRequest) GetResourceMetadata() *ResourceMetadataState {
	if x != nil {
		return x.ResourceMetadata
	}
	return nil
}

func (x *ResourceHasStabilisedRequest) GetContext() *ProviderContext {
	if x != nil {
		return x.Context
	}
	return nil
}

// ResourceHasStabilisedResponse is the response
// containing the result of checking if a resource has stabilised.
type ResourceHasStabilisedResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Response:
	//
	//	*ResourceHasStabilisedResponse_ResourceStabilisationInfo
	//	*ResourceHasStabilisedResponse_ErrorResponse
	Response      isResourceHasStabilisedResponse_Response `protobuf_oneof:"response"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResourceHasStabilisedResponse) Reset() {
	*x = ResourceHasStabilisedResponse{}
	mi := &file_plugin_framework_sharedtypesv1_types_proto_msgTypes[48]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResourceHasStabilisedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceHasStabilisedResponse) ProtoMessage() {}

func (x *ResourceHasStabilisedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_framework_sharedtypesv1_types_proto_msgTypes[48]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceHasStabilisedResponse.ProtoReflect.Descriptor instead.
func (*ResourceHasStabilisedResponse) Descriptor() ([]byte, []int) {
	return file_plugin_framework_sharedtypesv1_types_proto_rawDescGZIP(), []int{48}
}

func (x *ResourceHasStabilisedResponse) GetResponse() isResourceHasStabilisedResponse_Response {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *ResourceHasStabilisedResponse) GetResourceStabilisationInfo() *ResourceStabilisationInfo {
	if x != nil {
		if x, ok := x.Response.(*ResourceHasStabilisedResponse_ResourceStabilisationInfo); ok {
			return x.ResourceStabilisationInfo
		}
	}
	return nil
}

func (x *ResourceHasStabilisedResponse) GetErrorResponse() *ErrorResponse {
	if x != nil {
		if x, ok := x.Response.(*ResourceHasStabilisedResponse_ErrorResponse); ok {
			return x.ErrorResponse
		}
	}
	return nil
}

type isResourceHasStabilisedResponse_Response interface {
	isResourceHasStabilisedResponse_Response()
}

type ResourceHasStabilisedResponse_ResourceStabilisationInfo struct {
	ResourceStabilisationInfo *ResourceStabilisationInfo `protobuf:"bytes,1,opt,name=resource_stabilisation_info,json=resourceStabilisationInfo,oneof"`
}

type ResourceHasStabilisedResponse_ErrorResponse struct {
	ErrorResponse *ErrorResponse `protobuf:"bytes,2,opt,name=error_response,json=errorResponse,oneof"`
}

func (*ResourceHasStabilisedResponse_ResourceStabilisationInfo) isResourceHasStabilisedResponse_Response() {
}

func (*ResourceHasStabilisedResponse_ErrorResponse) isResourceHasStabilisedResponse_Response() {}

// DestroyResourceRequest is the request that contains the input data
// needed to destroy a resource instance.
type DestroyResourceRequest struct {
	state        protoimpl.MessageState `protogen:"open.v1"`
	ResourceType *ResourceType          `protobuf:"bytes,1,opt,name=resource_type,json=resourceType" json:"resource_type,omitempty"`
	// The ID of the host making the request
	// to the provider.
	HostId        string           `protobuf:"bytes,2,opt,name=host_id,json=hostId" json:"host_id,omitempty"`
	InstanceId    string           `protobuf:"bytes,3,opt,name=instance_id,json=instanceId" json:"instance_id,omitempty"`
	InstanceName  string           `protobuf:"bytes,4,opt,name=instance_name,json=instanceName" json:"instance_name,omitempty"`
	ResourceId    string           `protobuf:"bytes,5,opt,name=resource_id,json=resourceId" json:"resource_id,omitempty"`
	ResourceState *ResourceState   `protobuf:"bytes,6,opt,name=resource_state,json=resourceState" json:"resource_state,omitempty"`
	Context       *ProviderContext `protobuf:"bytes,7,opt,name=context" json:"context,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DestroyResourceRequest) Reset() {
	*x = DestroyResourceRequest{}
	mi := &file_plugin_framework_sharedtypesv1_types_proto_msgTypes[49]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DestroyResourceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DestroyResourceRequest) ProtoMessage() {}

func (x *DestroyResourceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_framework_sharedtypesv1_types_proto_msgTypes[49]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DestroyResourceRequest.ProtoReflect.Descriptor instead.
func (*DestroyResourceRequest) Descriptor() ([]byte, []int) {
	return file_plugin_framework_sharedtypesv1_types_proto_rawDescGZIP(), []int{49}
}

func (x *DestroyResourceRequest) GetResourceType() *ResourceType {
	if x != nil {
		return x.ResourceType
	}
	return nil
}

func (x *DestroyResourceRequest) GetHostId() string {
	if x != nil {
		return x.HostId
	}
	return ""
}

func (x *DestroyResourceRequest) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *DestroyResourceRequest) GetInstanceName() string {
	if x != nil {
		return x.InstanceName
	}
	return ""
}

func (x *DestroyResourceRequest) GetResourceId() string {
	if x != nil {
		return x.ResourceId
	}
	return ""
}

func (x *DestroyResourceRequest) GetResourceState() *ResourceState {
	if x != nil {
		return x.ResourceState
	}
	return nil
}

func (x *DestroyResourceRequest) GetContext() *ProviderContext {
	if x != nil {
		return x.Context
	}
	return nil
}

// DestroyResourceResponse is the response
// containing the result of destroying a resource.
type DestroyResourceResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Response:
	//
	//	*DestroyResourceResponse_Result
	//	*DestroyResourceResponse_ErrorResponse
	Response      isDestroyResourceResponse_Response `protobuf_oneof:"response"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DestroyResourceResponse) Reset() {
	*x = DestroyResourceResponse{}
	mi := &file_plugin_framework_sharedtypesv1_types_proto_msgTypes[50]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DestroyResourceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DestroyResourceResponse) ProtoMessage() {}

func (x *DestroyResourceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_framework_sharedtypesv1_types_proto_msgTypes[50]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DestroyResourceResponse.ProtoReflect.Descriptor instead.
func (*DestroyResourceResponse) Descriptor() ([]byte, []int) {
	return file_plugin_framework_sharedtypesv1_types_proto_rawDescGZIP(), []int{50}
}

func (x *DestroyResourceResponse) GetResponse() isDestroyResourceResponse_Response {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *DestroyResourceResponse) GetResult() *DestroyResourceResult {
	if x != nil {
		if x, ok := x.Response.(*DestroyResourceResponse_Result); ok {
			return x.Result
		}
	}
	return nil
}

func (x *DestroyResourceResponse) GetErrorResponse() *ErrorResponse {
	if x != nil {
		if x, ok := x.Response.(*DestroyResourceResponse_ErrorResponse); ok {
			return x.ErrorResponse
		}
	}
	return nil
}

type isDestroyResourceResponse_Response interface {
	isDestroyResourceResponse_Response()
}

type DestroyResourceResponse_Result struct {
	Result *DestroyResourceResult `protobuf:"bytes,1,opt,name=result,oneof"`
}

type DestroyResourceResponse_ErrorResponse struct {
	ErrorResponse *ErrorResponse `protobuf:"bytes,2,opt,name=error_response,json=errorResponse,oneof"`
}

func (*DestroyResourceResponse_Result) isDestroyResourceResponse_Response() {}

func (*DestroyResourceResponse_ErrorResponse) isDestroyResourceResponse_Response() {}

// DestroyResourceResult contains the result
// of destroying a resource.
type DestroyResourceResult struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Destroyed     bool                   `protobuf:"varint,1,opt,name=destroyed" json:"destroyed,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DestroyResourceResult) Reset() {
	*x = DestroyResourceResult{}
	mi := &file_plugin_framework_sharedtypesv1_types_proto_msgTypes[51]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DestroyResourceResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DestroyResourceResult) ProtoMessage() {}

func (x *DestroyResourceResult) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_framework_sharedtypesv1_types_proto_msgTypes[51]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DestroyResourceResult.ProtoReflect.Descriptor instead.
func (*DestroyResourceResult) Descriptor() ([]byte, []int) {
	return file_plugin_framework_sharedtypesv1_types_proto_rawDescGZIP(), []int{51}
}

func (x *DestroyResourceResult) GetDestroyed() bool {
	if x != nil {
		return x.Destroyed
	}
	return false
}

// ResourceStabilisationInfo provides information about whether a resource
// has stabilised after being deployed.
type ResourceStabilisationInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Stabilised    bool                   `protobuf:"varint,1,opt,name=stabilised" json:"stabilised,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResourceStabilisationInfo) Reset() {
	*x = ResourceStabilisationInfo{}
	mi := &file_plugin_framework_sharedtypesv1_types_proto_msgTypes[52]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResourceStabilisationInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceStabilisationInfo) ProtoMessage() {}

func (x *ResourceStabilisationInfo) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_framework_sharedtypesv1_types_proto_msgTypes[52]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceStabilisationInfo.ProtoReflect.Descriptor instead.
func (*ResourceStabilisationInfo) Descriptor() ([]byte, []int) {
	return file_plugin_framework_sharedtypesv1_types_proto_rawDescGZIP(), []int{52}
}

func (x *ResourceStabilisationInfo) GetStabilised() bool {
	if x != nil {
		return x.Stabilised
	}
	return false
}

// Changes provides a set of modified fields along with a version of the resource
// schema (includes metadata labels and annotations) and spec
// that has already had all it's variables substituted.
type Changes struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Provides a new version of the spec and schema for which variable
	// substitution has been applied so the deploy phase has everything
	// it needs to deploy the resource.
	AppliedResourceInfo *ResourceInfo  `protobuf:"bytes,1,opt,name=applied_resource_info,json=appliedResourceInfo" json:"applied_resource_info,omitempty"`
	MustRecreate        bool           `protobuf:"varint,2,opt,name=must_recreate,json=mustRecreate" json:"must_recreate,omitempty"`
	ModifiedFields      []*FieldChange `protobuf:"bytes,3,rep,name=modified_fields,json=modifiedFields" json:"modified_fields,omitempty"`
	NewFields           []*FieldChange `protobuf:"bytes,4,rep,name=new_fields,json=newFields" json:"new_fields,omitempty"`
	RemovedFields       []string       `protobuf:"bytes,5,rep,name=removed_fields,json=removedFields" json:"removed_fields,omitempty"`
	UnchangedFields     []string       `protobuf:"bytes,6,rep,name=unchanged_fields,json=unchangedFields" json:"unchanged_fields,omitempty"`
	// A list of field paths that are computed at deploy time.
	// This is primarily useful to give fast access to information
	// about which fields are computed without having to inspect
	// the spec schema in link implementations.
	ComputedFields []string `protobuf:"bytes,7,rep,name=computed_fields,json=computedFields" json:"computed_fields,omitempty"`
	// A list of field names for which changes will be known when the host
	// blueprint is deployed.
	FieldChangesKnownOnDeploy []string `protobuf:"bytes,8,rep,name=field_changes_known_on_deploy,json=fieldChangesKnownOnDeploy" json:"field_changes_known_on_deploy,omitempty"`
	// Specifies whether the condition
	// for the resource will be known when the host blueprint is deployed.
	// When a condition makes use of items in the blueprint that are not resolved
	// until deployment, whether the resource will be deployed or not
	// cannot be known during the change staging phase.
	ConditionKnownOnDeploy bool `protobuf:"varint,9,opt,name=condition_known_on_deploy,json=conditionKnownOnDeploy" json:"condition_known_on_deploy,omitempty"`
	// A mapping of the linked to resource name
	// to the link changes representing the new links that will be created.
	NewOutboundLinks map[string]*LinkChanges `protobuf:"bytes,10,rep,name=new_outbound_links,json=newOutboundLinks" json:"new_outbound_links,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// A mapping of the linked to resource name to any changes
	// that will be made to existing links.
	// The key is of the form `{resourceA}::{resourceB}`.
	OutboundLinkChanges map[string]*LinkChanges `protobuf:"bytes,11,rep,name=outbound_link_changes,json=outboundLinkChanges" json:"outbound_link_changes,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// A list of link identifiers that will be removed.
	// The form of the link identifier is `{resourceA}::{resourceB}`.
	RemovedOutboundLinks []string `protobuf:"bytes,12,rep,name=removed_outbound_links,json=removedOutboundLinks" json:"removed_outbound_links,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *Changes) Reset() {
	*x = Changes{}
	mi := &file_plugin_framework_sharedtypesv1_types_proto_msgTypes[53]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Changes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Changes) ProtoMessage() {}

func (x *Changes) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_framework_sharedtypesv1_types_proto_msgTypes[53]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Changes.ProtoReflect.Descriptor instead.
func (*Changes) Descriptor() ([]byte, []int) {
	return file_plugin_framework_sharedtypesv1_types_proto_rawDescGZIP(), []int{53}
}

func (x *Changes) GetAppliedResourceInfo() *ResourceInfo {
	if x != nil {
		return x.AppliedResourceInfo
	}
	return nil
}

func (x *Changes) GetMustRecreate() bool {
	if x != nil {
		return x.MustRecreate
	}
	return false
}

func (x *Changes) GetModifiedFields() []*FieldChange {
	if x != nil {
		return x.ModifiedFields
	}
	return nil
}

func (x *Changes) GetNewFields() []*FieldChange {
	if x != nil {
		return x.NewFields
	}
	return nil
}

func (x *Changes) GetRemovedFields() []string {
	if x != nil {
		return x.RemovedFields
	}
	return nil
}

func (x *Changes) GetUnchangedFields() []string {
	if x != nil {
		return x.UnchangedFields
	}
	return nil
}

func (x *Changes) GetComputedFields() []string {
	if x != nil {
		return x.ComputedFields
	}
	return nil
}

func (x *Changes) GetFieldChangesKnownOnDeploy() []string {
	if x != nil {
		return x.FieldChangesKnownOnDeploy
	}
	return nil
}

func (x *Changes) GetConditionKnownOnDeploy() bool {
	if x != nil {
		return x.ConditionKnownOnDeploy
	}
	return false
}

func (x *Changes) GetNewOutboundLinks() map[string]*LinkChanges {
	if x != nil {
		return x.NewOutboundLinks
	}
	return nil
}

func (x *Changes) GetOutboundLinkChanges() map[string]*LinkChanges {
	if x != nil {
		return x.OutboundLinkChanges
	}
	return nil
}

func (x *Changes) GetRemovedOutboundLinks() []string {
	if x != nil {
		return x.RemovedOutboundLinks
	}
	return nil
}

// FieldChange represents a change in a field value of
// a resource or link that is used in change staging.
type FieldChange struct {
	state     protoimpl.MessageState `protogen:"open.v1"`
	FieldPath string                 `protobuf:"bytes,1,opt,name=field_path,json=fieldPath" json:"field_path,omitempty"`
	PrevValue *schemapb.MappingNode  `protobuf:"bytes,2,opt,name=prev_value,json=prevValue" json:"prev_value,omitempty"`
	NewValue  *schemapb.MappingNode  `protobuf:"bytes,3,opt,name=new_value,json=newValue" json:"new_value,omitempty"`
	// A flag that indicates whether the resource or link
	// containing the field must be recreated in order to apply the change.
	MustRecreate  bool `protobuf:"varint,4,opt,name=must_recreate,json=mustRecreate" json:"must_recreate,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FieldChange) Reset() {
	*x = FieldChange{}
	mi := &file_plugin_framework_sharedtypesv1_types_proto_msgTypes[54]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FieldChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldChange) ProtoMessage() {}

func (x *FieldChange) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_framework_sharedtypesv1_types_proto_msgTypes[54]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldChange.ProtoReflect.Descriptor instead.
func (*FieldChange) Descriptor() ([]byte, []int) {
	return file_plugin_framework_sharedtypesv1_types_proto_rawDescGZIP(), []int{54}
}

func (x *FieldChange) GetFieldPath() string {
	if x != nil {
		return x.FieldPath
	}
	return ""
}

func (x *FieldChange) GetPrevValue() *schemapb.MappingNode {
	if x != nil {
		return x.PrevValue
	}
	return nil
}

func (x *FieldChange) GetNewValue() *schemapb.MappingNode {
	if x != nil {
		return x.NewValue
	}
	return nil
}

func (x *FieldChange) GetMustRecreate() bool {
	if x != nil {
		return x.MustRecreate
	}
	return false
}

// LinkChanges provides a set of modified fields for a link between two resources.
// The link field changes represent a set of changes that will be made to the
// resources in the link relationship, these changes should be modelled as per the
// structure of the linkData that is persisted in the state of a blueprint instance.
// The linkData model should be organised by the resource type with a structure
// that is a close approximation of the actual changes that will be made to each
// resource during deployment in the upstream provider.
type LinkChanges struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	ModifiedFields  []*FieldChange         `protobuf:"bytes,1,rep,name=modified_fields,json=modifiedFields" json:"modified_fields,omitempty"`
	NewFields       []*FieldChange         `protobuf:"bytes,2,rep,name=new_fields,json=newFields" json:"new_fields,omitempty"`
	RemovedFields   []string               `protobuf:"bytes,3,rep,name=removed_fields,json=removedFields" json:"removed_fields,omitempty"`
	UnchangedFields []string               `protobuf:"bytes,4,rep,name=unchanged_fields,json=unchangedFields" json:"unchanged_fields,omitempty"`
	// A list of field names for which changes
	// will be known when the host blueprint is deployed.
	FieldChangesKnownOnDeploy []string `protobuf:"bytes,5,rep,name=field_changes_known_on_deploy,json=fieldChangesKnownOnDeploy" json:"field_changes_known_on_deploy,omitempty"`
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *LinkChanges) Reset() {
	*x = LinkChanges{}
	mi := &file_plugin_framework_sharedtypesv1_types_proto_msgTypes[55]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LinkChanges) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinkChanges) ProtoMessage() {}

func (x *LinkChanges) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_framework_sharedtypesv1_types_proto_msgTypes[55]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinkChanges.ProtoReflect.Descriptor instead.
func (*LinkChanges) Descriptor() ([]byte, []int) {
	return file_plugin_framework_sharedtypesv1_types_proto_rawDescGZIP(), []int{55}
}

func (x *LinkChanges) GetModifiedFields() []*FieldChange {
	if x != nil {
		return x.ModifiedFields
	}
	return nil
}

func (x *LinkChanges) GetNewFields() []*FieldChange {
	if x != nil {
		return x.NewFields
	}
	return nil
}

func (x *LinkChanges) GetRemovedFields() []string {
	if x != nil {
		return x.RemovedFields
	}
	return nil
}

func (x *LinkChanges) GetUnchangedFields() []string {
	if x != nil {
		return x.UnchangedFields
	}
	return nil
}

func (x *LinkChanges) GetFieldChangesKnownOnDeploy() []string {
	if x != nil {
		return x.FieldChangesKnownOnDeploy
	}
	return nil
}

// ResourceInfo provides all the information needed for a resource including
// the blueprint schema data with annotations, labels and the spec
// as a core mapping node.
type ResourceInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The ID of a resource when in the context
	// of a blueprint instance when deploying or staging changes.
	// Sometimes staging changes is independent of an instance and is used to compare
	// two vesions of a blueprint in which
	// case the resource ID will be empty.
	ResourceId string `protobuf:"bytes,1,opt,name=resource_id,json=resourceId" json:"resource_id,omitempty"`
	// The name of the resource in the blueprint spec.
	// This is useful for new resources that do not have any current resource state.
	ResourceName string `protobuf:"bytes,2,opt,name=resource_name,json=resourceName" json:"resource_name,omitempty"`
	// The ID of the blueprint instance
	// that the current resource belongs to.
	// This could be empty if the resource is being staged
	// for an initial deployment.
	InstanceId string `protobuf:"bytes,3,opt,name=instance_id,json=instanceId" json:"instance_id,omitempty"`
	// The current state of the resource
	// for which changes are being staged.
	// If this is null, it means that the resource is new and does not have
	// a current state.
	CurrentResourceState *ResourceState `protobuf:"bytes,4,opt,name=current_resource_state,json=currentResourceState" json:"current_resource_state,omitempty"`
	// A version of a resource for which all ${..}
	// substitutions have been applied.
	ResourceWithResolvedSubs *ResolvedResource `protobuf:"bytes,5,opt,name=resource_with_resolved_subs,json=resourceWithResolvedSubs" json:"resource_with_resolved_subs,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *ResourceInfo) Reset() {
	*x = ResourceInfo{}
	mi := &file_plugin_framework_sharedtypesv1_types_proto_msgTypes[56]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResourceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceInfo) ProtoMessage() {}

func (x *ResourceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_framework_sharedtypesv1_types_proto_msgTypes[56]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceInfo.ProtoReflect.Descriptor instead.
func (*ResourceInfo) Descriptor() ([]byte, []int) {
	return file_plugin_framework_sharedtypesv1_types_proto_rawDescGZIP(), []int{56}
}

func (x *ResourceInfo) GetResourceId() string {
	if x != nil {
		return x.ResourceId
	}
	return ""
}

func (x *ResourceInfo) GetResourceName() string {
	if x != nil {
		return x.ResourceName
	}
	return ""
}

func (x *ResourceInfo) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *ResourceInfo) GetCurrentResourceState() *ResourceState {
	if x != nil {
		return x.CurrentResourceState
	}
	return nil
}

func (x *ResourceInfo) GetResourceWithResolvedSubs() *ResolvedResource {
	if x != nil {
		return x.ResourceWithResolvedSubs
	}
	return nil
}

// ResourceState represents the current state of a resource in a blueprint instance.
// This includes the status, derived data from the upstream resource provider
// along with reasons for failure when a resource is in a failed state.
type ResourceState struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// A globally unique identifier for the resource.
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// The logical name of the resource in the blueprint.
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	// The type of the resource as defined in the source blueprint.
	Type string `protobuf:"bytes,3,opt,name=type" json:"type,omitempty"`
	// The name of the resource template in the source blueprint
	// that the resource is derived from.
	// This will be empty if the resource is not derived from a resource template.
	TemplateName  string                `protobuf:"bytes,4,opt,name=template_name,json=templateName" json:"template_name,omitempty"`
	InstanceId    string                `protobuf:"bytes,5,opt,name=instance_id,json=instanceId" json:"instance_id,omitempty"`
	Status        ResourceStatus        `protobuf:"varint,6,opt,name=status,enum=sharedtypesv1.ResourceStatus" json:"status,omitempty"`
	PreciseStatus PreciseResourceStatus `protobuf:"varint,7,opt,name=precise_status,json=preciseStatus,enum=sharedtypesv1.PreciseResourceStatus" json:"precise_status,omitempty"`
	// The unix timestamp for when the resource deployment status was last updated.
	LastStatusUpdateTimestamp int64 `protobuf:"varint,8,opt,name=last_status_update_timestamp,json=lastStatusUpdateTimestamp" json:"last_status_update_timestamp,omitempty"`
	// The unix timestamp for when the resource was last deployed.
	LastDeployedTimestamp int64 `protobuf:"varint,9,opt,name=last_deployed_timestamp,json=lastDeployedTimestamp" json:"last_deployed_timestamp,omitempty"`
	// The unix timestamp for when an attempt was last made to deploy the resource.
	LastDeployAttemptTimestamp int64 `protobuf:"varint,10,opt,name=last_deploy_attempt_timestamp,json=lastDeployAttemptTimestamp" json:"last_deploy_attempt_timestamp,omitempty"`
	// The resolved resource spec for the currently deployed
	// version of the resource along with computed fields derived
	// from the deployed resource in the provider.
	SpecData *schemapb.MappingNode `protobuf:"bytes,11,opt,name=spec_data,json=specData" json:"spec_data,omitempty"`
	// A human-friendly description of the resource derived from a source blueprint.
	Description string `protobuf:"bytes,12,opt,name=description" json:"description,omitempty"`
	// Metadata for the resource that is derived from a source blueprint
	// that includes additional information that allows for extensions built on top
	// of the blueprint framework along with the storage of labels, annotations and a
	// human-friendly display name for the resource.
	Metadata *ResourceMetadataState `protobuf:"bytes,13,opt,name=metadata" json:"metadata,omitempty"`
	// A list of resource names that the response depends on,
	// this dependency is derived from "hard" links, references and the use of the dependsOn
	// property in the source blueprint.
	DependsOnResources []string `protobuf:"bytes,14,rep,name=depends_on_resources,json=dependsOnResources" json:"depends_on_resources,omitempty"`
	// A list of child blueprint names that the resource depends on.
	// This dependency is derived from references in the source blueprint.
	DependsOnChildren []string `protobuf:"bytes,15,rep,name=depends_on_children,json=dependsOnChildren" json:"depends_on_children,omitempty"`
	// A list of the latest reasons for failure in deploying a resource,
	// this only ever holds the results of the latest deployment attempt.
	FailureReasons []string `protobuf:"bytes,16,rep,name=failure_reasons,json=failureReasons" json:"failure_reasons,omitempty"`
	// Indicates whether or not the resource state has drifted
	// due to changes in the upstream provider.
	Drifted bool `protobuf:"varint,17,opt,name=drifted" json:"drifted,omitempty"`
	// The unix timestamp when drift was last detected.
	LastDriftDetectedTimestamp *wrapperspb.Int64Value `protobuf:"bytes,18,opt,name=last_drift_detected_timestamp,json=lastDriftDetectedTimestamp" json:"last_drift_detected_timestamp,omitempty"`
	// Holds the duration information for the latest deployment of the resource.
	Durations     *ResourceCompletionDurations `protobuf:"bytes,19,opt,name=durations" json:"durations,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResourceState) Reset() {
	*x = ResourceState{}
	mi := &file_plugin_framework_sharedtypesv1_types_proto_msgTypes[57]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResourceState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceState) ProtoMessage() {}

func (x *ResourceState) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_framework_sharedtypesv1_types_proto_msgTypes[57]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceState.ProtoReflect.Descriptor instead.
func (*ResourceState) Descriptor() ([]byte, []int) {
	return file_plugin_framework_sharedtypesv1_types_proto_rawDescGZIP(), []int{57}
}

func (x *ResourceState) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ResourceState) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ResourceState) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ResourceState) GetTemplateName() string {
	if x != nil {
		return x.TemplateName
	}
	return ""
}

func (x *ResourceState) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *ResourceState) GetStatus() ResourceStatus {
	if x != nil {
		return x.Status
	}
	return ResourceStatus_RESOURCE_STATUS_UNKNOWN
}

func (x *ResourceState) GetPreciseStatus() PreciseResourceStatus {
	if x != nil {
		return x.PreciseStatus
	}
	return PreciseResourceStatus_PRECISE_RESOURCE_STATUS_UNKNOWN
}

func (x *ResourceState) GetLastStatusUpdateTimestamp() int64 {
	if x != nil {
		return x.LastStatusUpdateTimestamp
	}
	return 0
}

func (x *ResourceState) GetLastDeployedTimestamp() int64 {
	if x != nil {
		return x.LastDeployedTimestamp
	}
	return 0
}

func (x *ResourceState) GetLastDeployAttemptTimestamp() int64 {
	if x != nil {
		return x.LastDeployAttemptTimestamp
	}
	return 0
}

func (x *ResourceState) GetSpecData() *schemapb.MappingNode {
	if x != nil {
		return x.SpecData
	}
	return nil
}

func (x *ResourceState) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ResourceState) GetMetadata() *ResourceMetadataState {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *ResourceState) GetDependsOnResources() []string {
	if x != nil {
		return x.DependsOnResources
	}
	return nil
}

func (x *ResourceState) GetDependsOnChildren() []string {
	if x != nil {
		return x.DependsOnChildren
	}
	return nil
}

func (x *ResourceState) GetFailureReasons() []string {
	if x != nil {
		return x.FailureReasons
	}
	return nil
}

func (x *ResourceState) GetDrifted() bool {
	if x != nil {
		return x.Drifted
	}
	return false
}

func (x *ResourceState) GetLastDriftDetectedTimestamp() *wrapperspb.Int64Value {
	if x != nil {
		return x.LastDriftDetectedTimestamp
	}
	return nil
}

func (x *ResourceState) GetDurations() *ResourceCompletionDurations {
	if x != nil {
		return x.Durations
	}
	return nil
}

// ResolvedResource provides a version of a resource for which all ${..}
// substitutions have been applied.
// Mapping nodes replace StringOrSubstitutions from the blueprint schema representation
// of the resource.
type ResolvedResource struct {
	state         protoimpl.MessageState     `protogen:"open.v1"`
	Type          *ResourceType              `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	Description   *schemapb.MappingNode      `protobuf:"bytes,2,opt,name=description" json:"description,omitempty"`
	Metadata      *ResolvedResourceMetadata  `protobuf:"bytes,3,opt,name=metadata" json:"metadata,omitempty"`
	Condition     *ResolvedResourceCondition `protobuf:"bytes,4,opt,name=condition" json:"condition,omitempty"`
	LinkSelector  *schemapb.LinkSelector     `protobuf:"bytes,5,opt,name=link_selector,json=linkSelector" json:"link_selector,omitempty"`
	Spec          *schemapb.MappingNode      `protobuf:"bytes,6,opt,name=spec" json:"spec,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResolvedResource) Reset() {
	*x = ResolvedResource{}
	mi := &file_plugin_framework_sharedtypesv1_types_proto_msgTypes[58]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResolvedResource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResolvedResource) ProtoMessage() {}

func (x *ResolvedResource) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_framework_sharedtypesv1_types_proto_msgTypes[58]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResolvedResource.ProtoReflect.Descriptor instead.
func (*ResolvedResource) Descriptor() ([]byte, []int) {
	return file_plugin_framework_sharedtypesv1_types_proto_rawDescGZIP(), []int{58}
}

func (x *ResolvedResource) GetType() *ResourceType {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *ResolvedResource) GetDescription() *schemapb.MappingNode {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *ResolvedResource) GetMetadata() *ResolvedResourceMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *ResolvedResource) GetCondition() *ResolvedResourceCondition {
	if x != nil {
		return x.Condition
	}
	return nil
}

func (x *ResolvedResource) GetLinkSelector() *schemapb.LinkSelector {
	if x != nil {
		return x.LinkSelector
	}
	return nil
}

func (x *ResolvedResource) GetSpec() *schemapb.MappingNode {
	if x != nil {
		return x.Spec
	}
	return nil
}

// ResolvedResourceMetadata provides a resolved version of the metadata
// for a resource where all substitutions have been applied.
type ResolvedResourceMetadata struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DisplayName   *schemapb.MappingNode  `protobuf:"bytes,1,opt,name=display_name,json=displayName" json:"display_name,omitempty"`
	Annotations   *schemapb.MappingNode  `protobuf:"bytes,2,opt,name=annotations" json:"annotations,omitempty"`
	Labels        map[string]string      `protobuf:"bytes,3,rep,name=labels" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Custom        *schemapb.MappingNode  `protobuf:"bytes,4,opt,name=custom" json:"custom,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResolvedResourceMetadata) Reset() {
	*x = ResolvedResourceMetadata{}
	mi := &file_plugin_framework_sharedtypesv1_types_proto_msgTypes[59]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResolvedResourceMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResolvedResourceMetadata) ProtoMessage() {}

func (x *ResolvedResourceMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_framework_sharedtypesv1_types_proto_msgTypes[59]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResolvedResourceMetadata.ProtoReflect.Descriptor instead.
func (*ResolvedResourceMetadata) Descriptor() ([]byte, []int) {
	return file_plugin_framework_sharedtypesv1_types_proto_rawDescGZIP(), []int{59}
}

func (x *ResolvedResourceMetadata) GetDisplayName() *schemapb.MappingNode {
	if x != nil {
		return x.DisplayName
	}
	return nil
}

func (x *ResolvedResourceMetadata) GetAnnotations() *schemapb.MappingNode {
	if x != nil {
		return x.Annotations
	}
	return nil
}

func (x *ResolvedResourceMetadata) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *ResolvedResourceMetadata) GetCustom() *schemapb.MappingNode {
	if x != nil {
		return x.Custom
	}
	return nil
}

// ResolvedResourceCondition provides a resolved version of the condition
// for a resource where all substitutions have been applied.
type ResolvedResourceCondition struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// A list of conditions that must all be true.
	And []*ResolvedResourceCondition `protobuf:"bytes,1,rep,name=and" json:"and,omitempty"`
	// A list of conditions where at least one must be true.
	Or []*ResolvedResourceCondition `protobuf:"bytes,2,rep,name=or" json:"or,omitempty"`
	// A condition that will be negated.
	Not *ResolvedResourceCondition `protobuf:"bytes,3,opt,name=not" json:"not,omitempty"`
	// A condition expression that is expected to be a substitution that
	// resolves to a boolean.
	StringValue   *schemapb.MappingNode `protobuf:"bytes,4,opt,name=string_value,json=stringValue" json:"string_value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResolvedResourceCondition) Reset() {
	*x = ResolvedResourceCondition{}
	mi := &file_plugin_framework_sharedtypesv1_types_proto_msgTypes[60]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResolvedResourceCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResolvedResourceCondition) ProtoMessage() {}

func (x *ResolvedResourceCondition) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_framework_sharedtypesv1_types_proto_msgTypes[60]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResolvedResourceCondition.ProtoReflect.Descriptor instead.
func (*ResolvedResourceCondition) Descriptor() ([]byte, []int) {
	return file_plugin_framework_sharedtypesv1_types_proto_rawDescGZIP(), []int{60}
}

func (x *ResolvedResourceCondition) GetAnd() []*ResolvedResourceCondition {
	if x != nil {
		return x.And
	}
	return nil
}

func (x *ResolvedResourceCondition) GetOr() []*ResolvedResourceCondition {
	if x != nil {
		return x.Or
	}
	return nil
}

func (x *ResolvedResourceCondition) GetNot() *ResolvedResourceCondition {
	if x != nil {
		return x.Not
	}
	return nil
}

func (x *ResolvedResourceCondition) GetStringValue() *schemapb.MappingNode {
	if x != nil {
		return x.StringValue
	}
	return nil
}

// ResourceCompletionDurations holds duration information
// for the deployment of a resource change.
type ResourceCompletionDurations struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The duration in milliseconds for the resource to be configured.
	// This will only be present of the resource has reached config complete status.
	ConfigCompleteDuration *wrapperspb.DoubleValue `protobuf:"bytes,1,opt,name=config_complete_duration,json=configCompleteDuration" json:"config_complete_duration,omitempty"`
	// The duration in milliseconds for the resource change to reach the final status.
	TotalDuration *wrapperspb.DoubleValue `protobuf:"bytes,2,opt,name=total_duration,json=totalDuration" json:"total_duration,omitempty"`
	// A list of durations in milliseconds for each attempt to deploy the resource.
	// Attempt durations are in order as per the "attempt" field in a status update message.
	AttemptDurations []float64 `protobuf:"fixed64,3,rep,packed,name=attempt_durations,json=attemptDurations" json:"attempt_durations,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *ResourceCompletionDurations) Reset() {
	*x = ResourceCompletionDurations{}
	mi := &file_plugin_framework_sharedtypesv1_types_proto_msgTypes[61]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResourceCompletionDurations) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceCompletionDurations) ProtoMessage() {}

func (x *ResourceCompletionDurations) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_framework_sharedtypesv1_types_proto_msgTypes[61]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceCompletionDurations.ProtoReflect.Descriptor instead.
func (*ResourceCompletionDurations) Descriptor() ([]byte, []int) {
	return file_plugin_framework_sharedtypesv1_types_proto_rawDescGZIP(), []int{61}
}

func (x *ResourceCompletionDurations) GetConfigCompleteDuration() *wrapperspb.DoubleValue {
	if x != nil {
		return x.ConfigCompleteDuration
	}
	return nil
}

func (x *ResourceCompletionDurations) GetTotalDuration() *wrapperspb.DoubleValue {
	if x != nil {
		return x.TotalDuration
	}
	return nil
}

func (x *ResourceCompletionDurations) GetAttemptDurations() []float64 {
	if x != nil {
		return x.AttemptDurations
	}
	return nil
}

// ResourceMetadataState holds metadata for a resource
// that is derived from a source blueprint.
type ResourceMetadataState struct {
	state         protoimpl.MessageState           `protogen:"open.v1"`
	DisplayName   string                           `protobuf:"bytes,1,opt,name=display_name,json=displayName" json:"display_name,omitempty"`
	Annotations   map[string]*schemapb.MappingNode `protobuf:"bytes,2,rep,name=annotations" json:"annotations,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Labels        map[string]string                `protobuf:"bytes,3,rep,name=labels" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Custom        *schemapb.MappingNode            `protobuf:"bytes,4,opt,name=custom" json:"custom,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResourceMetadataState) Reset() {
	*x = ResourceMetadataState{}
	mi := &file_plugin_framework_sharedtypesv1_types_proto_msgTypes[62]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResourceMetadataState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceMetadataState) ProtoMessage() {}

func (x *ResourceMetadataState) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_framework_sharedtypesv1_types_proto_msgTypes[62]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceMetadataState.ProtoReflect.Descriptor instead.
func (*ResourceMetadataState) Descriptor() ([]byte, []int) {
	return file_plugin_framework_sharedtypesv1_types_proto_rawDescGZIP(), []int{62}
}

func (x *ResourceMetadataState) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *ResourceMetadataState) GetAnnotations() map[string]*schemapb.MappingNode {
	if x != nil {
		return x.Annotations
	}
	return nil
}

func (x *ResourceMetadataState) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *ResourceMetadataState) GetCustom() *schemapb.MappingNode {
	if x != nil {
		return x.Custom
	}
	return nil
}

// ResourceSpecDefinition provides a definition for a resource spec
// that is used for state management, validation, docs and tooling.
type ResourceSpecDefinition struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The schema for the resource specification.
	Schema *ResourceDefinitionsSchema `protobuf:"bytes,1,opt,name=schema" json:"schema,omitempty"`
	// The name of the field in the resource spec that
	// holds the third-party ID for the resource.
	// This is used to resolve references to a resource in
	// a blueprint where only the name of the resource is specified.
	// For example, references such as `resources.processOrderFunction`
	// or `processOrderFunction` should resolve to the ID of the resource in
	// the blueprint.
	// The ID field must be a top-level property of the resource spec schema.
	IdField       string `protobuf:"bytes,2,opt,name=id_field,json=idField" json:"id_field,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResourceSpecDefinition) Reset() {
	*x = ResourceSpecDefinition{}
	mi := &file_plugin_framework_sharedtypesv1_types_proto_msgTypes[63]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResourceSpecDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceSpecDefinition) ProtoMessage() {}

func (x *ResourceSpecDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_framework_sharedtypesv1_types_proto_msgTypes[63]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceSpecDefinition.ProtoReflect.Descriptor instead.
func (*ResourceSpecDefinition) Descriptor() ([]byte, []int) {
	return file_plugin_framework_sharedtypesv1_types_proto_rawDescGZIP(), []int{63}
}

func (x *ResourceSpecDefinition) GetSchema() *ResourceDefinitionsSchema {
	if x != nil {
		return x.Schema
	}
	return nil
}

func (x *ResourceSpecDefinition) GetIdField() string {
	if x != nil {
		return x.IdField
	}
	return ""
}

// ResourceDefinitionsSchema provides a schema that can be used to validate
// a resource spec or output state.
type ResourceDefinitionsSchema struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The type of the resource element definition.
	Type string `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	// A human-readable label for the resource element definition.
	Label string `protobuf:"bytes,2,opt,name=label" json:"label,omitempty"`
	// A description for the resource definition without any formatting.
	Description string `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
	// A description for the resource definition with markdown formatting.
	FormattedDescription string `protobuf:"bytes,4,opt,name=formatted_description,json=formattedDescription" json:"formatted_description,omitempty"`
	// A mapping of the attribute types for a resource definition
	// object element.
	Attributes map[string]*ResourceDefinitionsSchema `protobuf:"bytes,5,rep,name=attributes" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// The schema for the items in a a resource definition array element.
	Items *ResourceDefinitionsSchema `protobuf:"bytes,6,opt,name=items" json:"items,omitempty"`
	// The schema for the values in a resource definition map element.
	// Keys are always strings.
	MapValues *ResourceDefinitionsSchema `protobuf:"bytes,7,opt,name=map_values,json=mapValues" json:"map_values,omitempty"`
	// A list of possible schemas for a resource definition item.
	// This is to be used with the "union" type.
	OneOf []*ResourceDefinitionsSchema `protobuf:"bytes,8,rep,name=one_of,json=oneOf" json:"one_of,omitempty"`
	// A list of required attributes for a resource definition object element.
	Required []string `protobuf:"bytes,9,rep,name=required" json:"required,omitempty"`
	// Specifies whether the resource definition schema can be null.
	Nullable bool `protobuf:"varint,10,opt,name=nullable" json:"nullable,omitempty"`
	// Holds the default value for a resource spec schema,
	// this will be populated in the `Resource.Spec.*` mapping node
	// if the resource spec is missing a value for a specific attribute
	// or item in the spec.
	// The default value will not be used if the attribute value in a given resource spec is null
	// and the schema is nullable, a null pointer should not be used
	// for an empty value, pointers should be set when you want to explicitly
	// set a value to null.
	// The default value will not be used for computed value in a resource spec.
	DefaultValue *schemapb.MappingNode `protobuf:"bytes,11,opt,name=default_value,json=defaultValue" json:"default_value,omitempty"`
	// Golds a list of examples for the resource definition element.
	// Examples are useful for documentation and tooling.
	Examples []*schemapb.MappingNode `protobuf:"bytes,12,rep,name=examples" json:"examples,omitempty"`
	// Specifies whether the value is computed by the provider and should not
	// be set by the user.
	// Computed values are expected to be populated by provider plugin resource
	// implementations in the deployment process.
	Computed bool `protobuf:"varint,13,opt,name=computed" json:"computed,omitempty"`
	// Specifies whether the resource must be recreated if a change to the field
	// is detected in the resource state.
	// This is only used for user-provided values, it will be ignored
	// for computed values.
	MustRecreate  bool `protobuf:"varint,14,opt,name=must_recreate,json=mustRecreate" json:"must_recreate,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResourceDefinitionsSchema) Reset() {
	*x = ResourceDefinitionsSchema{}
	mi := &file_plugin_framework_sharedtypesv1_types_proto_msgTypes[64]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResourceDefinitionsSchema) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceDefinitionsSchema) ProtoMessage() {}

func (x *ResourceDefinitionsSchema) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_framework_sharedtypesv1_types_proto_msgTypes[64]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceDefinitionsSchema.ProtoReflect.Descriptor instead.
func (*ResourceDefinitionsSchema) Descriptor() ([]byte, []int) {
	return file_plugin_framework_sharedtypesv1_types_proto_rawDescGZIP(), []int{64}
}

func (x *ResourceDefinitionsSchema) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ResourceDefinitionsSchema) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *ResourceDefinitionsSchema) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ResourceDefinitionsSchema) GetFormattedDescription() string {
	if x != nil {
		return x.FormattedDescription
	}
	return ""
}

func (x *ResourceDefinitionsSchema) GetAttributes() map[string]*ResourceDefinitionsSchema {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *ResourceDefinitionsSchema) GetItems() *ResourceDefinitionsSchema {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *ResourceDefinitionsSchema) GetMapValues() *ResourceDefinitionsSchema {
	if x != nil {
		return x.MapValues
	}
	return nil
}

func (x *ResourceDefinitionsSchema) GetOneOf() []*ResourceDefinitionsSchema {
	if x != nil {
		return x.OneOf
	}
	return nil
}

func (x *ResourceDefinitionsSchema) GetRequired() []string {
	if x != nil {
		return x.Required
	}
	return nil
}

func (x *ResourceDefinitionsSchema) GetNullable() bool {
	if x != nil {
		return x.Nullable
	}
	return false
}

func (x *ResourceDefinitionsSchema) GetDefaultValue() *schemapb.MappingNode {
	if x != nil {
		return x.DefaultValue
	}
	return nil
}

func (x *ResourceDefinitionsSchema) GetExamples() []*schemapb.MappingNode {
	if x != nil {
		return x.Examples
	}
	return nil
}

func (x *ResourceDefinitionsSchema) GetComputed() bool {
	if x != nil {
		return x.Computed
	}
	return false
}

func (x *ResourceDefinitionsSchema) GetMustRecreate() bool {
	if x != nil {
		return x.MustRecreate
	}
	return false
}

// CanLinkTo holds a list of resource types that a given resource type
// can link to.
type CanLinkTo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ResourceTypes []*ResourceType        `protobuf:"bytes,1,rep,name=resource_types,json=resourceTypes" json:"resource_types,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CanLinkTo) Reset() {
	*x = CanLinkTo{}
	mi := &file_plugin_framework_sharedtypesv1_types_proto_msgTypes[65]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CanLinkTo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CanLinkTo) ProtoMessage() {}

func (x *CanLinkTo) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_framework_sharedtypesv1_types_proto_msgTypes[65]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CanLinkTo.ProtoReflect.Descriptor instead.
func (*CanLinkTo) Descriptor() ([]byte, []int) {
	return file_plugin_framework_sharedtypesv1_types_proto_rawDescGZIP(), []int{65}
}

func (x *CanLinkTo) GetResourceTypes() []*ResourceType {
	if x != nil {
		return x.ResourceTypes
	}
	return nil
}

// ResourceCommonTerminalInfo holds information about whether
// a given resource type is expected to have a common use-case
// as a terminal resource.
type ResourceCommonTerminalInfo struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	IsCommonTerminal bool                   `protobuf:"varint,1,opt,name=is_common_terminal,json=isCommonTerminal" json:"is_common_terminal,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *ResourceCommonTerminalInfo) Reset() {
	*x = ResourceCommonTerminalInfo{}
	mi := &file_plugin_framework_sharedtypesv1_types_proto_msgTypes[66]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResourceCommonTerminalInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceCommonTerminalInfo) ProtoMessage() {}

func (x *ResourceCommonTerminalInfo) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_framework_sharedtypesv1_types_proto_msgTypes[66]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceCommonTerminalInfo.ProtoReflect.Descriptor instead.
func (*ResourceCommonTerminalInfo) Descriptor() ([]byte, []int) {
	return file_plugin_framework_sharedtypesv1_types_proto_rawDescGZIP(), []int{66}
}

func (x *ResourceCommonTerminalInfo) GetIsCommonTerminal() bool {
	if x != nil {
		return x.IsCommonTerminal
	}
	return false
}

// Diagnostic provides error, warning or informational
// diagnostic for a blueprint.
type Diagnostic struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The level of this diagnostic.
	Level DiagnosticLevel `protobuf:"varint,1,opt,name=level,enum=sharedtypesv1.DiagnosticLevel" json:"level,omitempty"`
	// The message of this diagnostic.
	Message string `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
	// An optional text range in the source blueprint
	// that the diagnostic applies to.
	// This will only be present when the source blueprint
	// is YAML and the plugin can extract this information
	// from the resource schema.
	Range         *DiagnosticRange `protobuf:"bytes,3,opt,name=range" json:"range,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Diagnostic) Reset() {
	*x = Diagnostic{}
	mi := &file_plugin_framework_sharedtypesv1_types_proto_msgTypes[67]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Diagnostic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Diagnostic) ProtoMessage() {}

func (x *Diagnostic) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_framework_sharedtypesv1_types_proto_msgTypes[67]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Diagnostic.ProtoReflect.Descriptor instead.
func (*Diagnostic) Descriptor() ([]byte, []int) {
	return file_plugin_framework_sharedtypesv1_types_proto_rawDescGZIP(), []int{67}
}

func (x *Diagnostic) GetLevel() DiagnosticLevel {
	if x != nil {
		return x.Level
	}
	return DiagnosticLevel_DIAGNOSTIC_LEVEL_NONE
}

func (x *Diagnostic) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *Diagnostic) GetRange() *DiagnosticRange {
	if x != nil {
		return x.Range
	}
	return nil
}

// A range in the source blueprint that a diagnostic applies to.
// This will only be used for source formats that allow position tracking
// (i.e. YAML source documents).
type DiagnosticRange struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Start          *SourceMeta            `protobuf:"bytes,1,opt,name=start" json:"start,omitempty"`
	End            *SourceMeta            `protobuf:"bytes,2,opt,name=end" json:"end,omitempty"`
	ColumnAccuracy ColumnAccuracy         `protobuf:"varint,3,opt,name=column_accuracy,json=columnAccuracy,enum=sharedtypesv1.ColumnAccuracy" json:"column_accuracy,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *DiagnosticRange) Reset() {
	*x = DiagnosticRange{}
	mi := &file_plugin_framework_sharedtypesv1_types_proto_msgTypes[68]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DiagnosticRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiagnosticRange) ProtoMessage() {}

func (x *DiagnosticRange) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_framework_sharedtypesv1_types_proto_msgTypes[68]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiagnosticRange.ProtoReflect.Descriptor instead.
func (*DiagnosticRange) Descriptor() ([]byte, []int) {
	return file_plugin_framework_sharedtypesv1_types_proto_rawDescGZIP(), []int{68}
}

func (x *DiagnosticRange) GetStart() *SourceMeta {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *DiagnosticRange) GetEnd() *SourceMeta {
	if x != nil {
		return x.End
	}
	return nil
}

func (x *DiagnosticRange) GetColumnAccuracy() ColumnAccuracy {
	if x != nil {
		return x.ColumnAccuracy
	}
	return ColumnAccuracy_COLUMN_ACCURACY_NONE
}

// The type of resource to carry out an action on or retrieve
// some information about.
type ResourceType struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Type          string                 `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResourceType) Reset() {
	*x = ResourceType{}
	mi := &file_plugin_framework_sharedtypesv1_types_proto_msgTypes[69]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResourceType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceType) ProtoMessage() {}

func (x *ResourceType) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_framework_sharedtypesv1_types_proto_msgTypes[69]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceType.ProtoReflect.Descriptor instead.
func (*ResourceType) Descriptor() ([]byte, []int) {
	return file_plugin_framework_sharedtypesv1_types_proto_rawDescGZIP(), []int{69}
}

func (x *ResourceType) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

// ProviderContext holds the environment configuration
// for the current provider.
type ProviderContext struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Configuration parameters specifically for the provider.
	ProviderConfigVariables map[string]*schemapb.ScalarValue `protobuf:"bytes,1,rep,name=provider_config_variables,json=providerConfigVariables" json:"provider_config_variables,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Context-wide variables for the current deploy engine run.
	ContextVariables map[string]*schemapb.ScalarValue `protobuf:"bytes,2,rep,name=context_variables,json=contextVariables" json:"context_variables,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *ProviderContext) Reset() {
	*x = ProviderContext{}
	mi := &file_plugin_framework_sharedtypesv1_types_proto_msgTypes[70]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProviderContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProviderContext) ProtoMessage() {}

func (x *ProviderContext) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_framework_sharedtypesv1_types_proto_msgTypes[70]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProviderContext.ProtoReflect.Descriptor instead.
func (*ProviderContext) Descriptor() ([]byte, []int) {
	return file_plugin_framework_sharedtypesv1_types_proto_rawDescGZIP(), []int{70}
}

func (x *ProviderContext) GetProviderConfigVariables() map[string]*schemapb.ScalarValue {
	if x != nil {
		return x.ProviderConfigVariables
	}
	return nil
}

func (x *ProviderContext) GetContextVariables() map[string]*schemapb.ScalarValue {
	if x != nil {
		return x.ContextVariables
	}
	return nil
}

// BlueprintParams holds environment and blueprint configuration
// to be used for function implementations.
type BlueprintParams struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Configuration parameters for multiple providers.
	// Keys are expected to be in the format `{providerNamespace}::{variableName}`.
	ProviderConfigVariables map[string]*schemapb.ScalarValue `protobuf:"bytes,1,rep,name=provider_config_variables,json=providerConfigVariables" json:"provider_config_variables,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Configuration parameters for multiple transformers.
	// Keys are expected to be in the format `{transformerNamespace}::{variableName}`.
	TransformerConfigVariables map[string]*schemapb.ScalarValue `protobuf:"bytes,2,rep,name=transformer_config_variables,json=transformerConfigVariables" json:"transformer_config_variables,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Context-wide variable for the current deploy engine run.
	ContextVariables map[string]*schemapb.ScalarValue `protobuf:"bytes,3,rep,name=context_variables,json=contextVariables" json:"context_variables,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Variables for the current blueprint.
	BlueprintVariables map[string]*schemapb.ScalarValue `protobuf:"bytes,4,rep,name=blueprint_variables,json=blueprintVariables" json:"blueprint_variables,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *BlueprintParams) Reset() {
	*x = BlueprintParams{}
	mi := &file_plugin_framework_sharedtypesv1_types_proto_msgTypes[71]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BlueprintParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlueprintParams) ProtoMessage() {}

func (x *BlueprintParams) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_framework_sharedtypesv1_types_proto_msgTypes[71]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlueprintParams.ProtoReflect.Descriptor instead.
func (*BlueprintParams) Descriptor() ([]byte, []int) {
	return file_plugin_framework_sharedtypesv1_types_proto_rawDescGZIP(), []int{71}
}

func (x *BlueprintParams) GetProviderConfigVariables() map[string]*schemapb.ScalarValue {
	if x != nil {
		return x.ProviderConfigVariables
	}
	return nil
}

func (x *BlueprintParams) GetTransformerConfigVariables() map[string]*schemapb.ScalarValue {
	if x != nil {
		return x.TransformerConfigVariables
	}
	return nil
}

func (x *BlueprintParams) GetContextVariables() map[string]*schemapb.ScalarValue {
	if x != nil {
		return x.ContextVariables
	}
	return nil
}

func (x *BlueprintParams) GetBlueprintVariables() map[string]*schemapb.ScalarValue {
	if x != nil {
		return x.BlueprintVariables
	}
	return nil
}

// Error response returned by the provider plugin
// when an error occurs during any of the supported
// provider plugin actions.
type ErrorResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// An error code specific to the plugin system.
	// For example, an action that should be retried
	// would have a specific error code to let the deploy engine
	// host know that the action should be retried.
	Code ErrorCode `protobuf:"varint,1,opt,name=code,enum=sharedtypesv1.ErrorCode" json:"code,omitempty"`
	// A human-readable error message.
	Message string `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
	// Extra details about the error.
	Details       *anypb.Any `protobuf:"bytes,3,opt,name=details" json:"details,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ErrorResponse) Reset() {
	*x = ErrorResponse{}
	mi := &file_plugin_framework_sharedtypesv1_types_proto_msgTypes[72]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ErrorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErrorResponse) ProtoMessage() {}

func (x *ErrorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_framework_sharedtypesv1_types_proto_msgTypes[72]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErrorResponse.ProtoReflect.Descriptor instead.
func (*ErrorResponse) Descriptor() ([]byte, []int) {
	return file_plugin_framework_sharedtypesv1_types_proto_rawDescGZIP(), []int{72}
}

func (x *ErrorResponse) GetCode() ErrorCode {
	if x != nil {
		return x.Code
	}
	return ErrorCode_ERROR_CODE_UNEXPECTED
}

func (x *ErrorResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ErrorResponse) GetDetails() *anypb.Any {
	if x != nil {
		return x.Details
	}
	return nil
}

var File_plugin_framework_sharedtypesv1_types_proto protoreflect.FileDescriptor

var file_plugin_framework_sharedtypesv1_types_proto_rawDesc = string([]byte{
	0x0a, 0x2a, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2d, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f,
	0x72, 0x6b, 0x2f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x74, 0x79, 0x70, 0x65, 0x73, 0x76, 0x31,
	0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x74, 0x79, 0x70, 0x65, 0x73, 0x76, 0x31, 0x1a, 0x19, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x62, 0x6c, 0x75, 0x65, 0x70, 0x72, 0x69, 0x6e,
	0x74, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xbd,
	0x01, 0x0a, 0x18, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a, 0x11, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x45, 0x0a, 0x0e, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x48, 0x00, 0x52, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xf0,
	0x01, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x36, 0x0a, 0x17, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x5f, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x1a, 0x5f, 0x0a, 0x0b, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x3a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x74, 0x79, 0x70, 0x65, 0x73, 0x76, 0x31,
	0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0xd9, 0x02, 0x0a, 0x15, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x74, 0x79, 0x70, 0x65, 0x73, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3a, 0x0a, 0x0e,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x53, 0x63,
	0x61, 0x6c, 0x61, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x12, 0x2f, 0x0a, 0x08, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x53, 0x63, 0x61, 0x6c,
	0x61, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x73, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x22, 0x9c, 0x01,
	0x0a, 0x10, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x48, 0x00, 0x52,
	0x08, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x12, 0x45, 0x0a, 0x0e, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x74, 0x79, 0x70, 0x65, 0x73, 0x76,
	0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48,
	0x00, 0x52, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x55, 0x0a, 0x08,
	0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x78, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x65, 0x78, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x73, 0x12, 0x2d, 0x0a, 0x12, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74, 0x65,
	0x64, 0x5f, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x11, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74, 0x65, 0x64, 0x45, 0x78, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x73, 0x22, 0xb0, 0x01, 0x0a, 0x17, 0x54, 0x79, 0x70, 0x65, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x42, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x76, 0x31, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x45, 0x0a, 0x0e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x74, 0x79, 0x70, 0x65, 0x73, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xd3, 0x01, 0x0a, 0x0f, 0x54, 0x79, 0x70, 0x65, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x14, 0x6d, 0x61,
	0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x6d, 0x61, 0x72, 0x6b, 0x64, 0x6f,
	0x77, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a,
	0x16, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x70,
	0x6c, 0x61, 0x69, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x6d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x5f,
	0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6d,
	0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x2c,
	0x0a, 0x12, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x73, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x6c, 0x61, 0x69,
	0x6e, 0x54, 0x65, 0x78, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x22, 0xba, 0x01, 0x0a,
	0x14, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x12, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x74, 0x79, 0x70, 0x65, 0x73, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x48, 0x00, 0x52, 0x10, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x45, 0x0a, 0x0e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x74, 0x79, 0x70, 0x65, 0x73, 0x76, 0x31, 0x2e, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0d,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x0a, 0x0a,
	0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x59, 0x0a, 0x10, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2f, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x74, 0x79, 0x70, 0x65, 0x73, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x22, 0x91, 0x01, 0x0a, 0x19, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x68, 0x6f, 0x73, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x68, 0x6f, 0x73, 0x74, 0x49, 0x64,
	0x12, 0x36, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x74, 0x79, 0x70, 0x65, 0x73, 0x76, 0x31,
	0x2e, 0x42, 0x6c, 0x75, 0x65, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0xc5, 0x01, 0x0a, 0x1a, 0x46, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x54, 0x0a, 0x13, 0x66, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x76, 0x31, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x12, 0x66, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x45, 0x0a,
	0x0e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0xcf, 0x01, 0x0a, 0x13, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6c,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a,
	0x07, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x68, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x76, 0x31, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6c,
	0x6c, 0x41, 0x72, 0x67, 0x73, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x12, 0x45, 0x0a, 0x0c, 0x63,
	0x61, 0x6c, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x74, 0x79, 0x70, 0x65, 0x73, 0x76,
	0x31, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x0b, 0x63, 0x61, 0x6c, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x22, 0xb7, 0x01, 0x0a, 0x14, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x61, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x0f, 0x66,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x76, 0x31, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6c,
	0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x48, 0x00, 0x52, 0x0e, 0x66, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x45, 0x0a, 0x0e, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x74, 0x79, 0x70, 0x65, 0x73, 0x76,
	0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48,
	0x00, 0x52, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x98, 0x01, 0x0a,
	0x12, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x39, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79,
	0x52, 0x0c, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x47,
	0x0a, 0x0d, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x76, 0x31, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75,
	0x6e, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x66, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x94, 0x01, 0x0a, 0x13, 0x46, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x23, 0x0a, 0x0d, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f,
	0x61, 0x72, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79,
	0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x41, 0x72, 0x67, 0x73, 0x12, 0x1f, 0x0a,
	0x0b, 0x61, 0x72, 0x67, 0x73, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x61, 0x72, 0x67, 0x73, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0x3c,
	0x0a, 0x10, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x41, 0x72,
	0x67, 0x73, 0x12, 0x28, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x22, 0xcf, 0x01, 0x0a,
	0x13, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x12, 0x36, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x76, 0x31, 0x2e, 0x42, 0x6c, 0x75, 0x65, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x3a, 0x0a, 0x0a,
	0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x74, 0x79, 0x70, 0x65, 0x73, 0x76, 0x31,
	0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x09, 0x63,
	0x61, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x12, 0x44, 0x0a, 0x10, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x76, 0x31, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x0f, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x87,
	0x01, 0x0a, 0x0c, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x12,
	0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x23, 0x0a, 0x0d,
	0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x35, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x08,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x94, 0x01, 0x0a, 0x0a, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x44, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x74, 0x79, 0x70, 0x65, 0x73, 0x76, 0x31, 0x2e,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a,
	0x0c, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0b, 0x65, 0x6e, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x3c, 0x0a, 0x0e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x04, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x22, 0xdb, 0x02,
	0x0a, 0x12, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x12, 0x2b, 0x0a, 0x11, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74, 0x65, 0x64, 0x5f,
	0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74, 0x65, 0x64, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x33, 0x0a, 0x15, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74, 0x65, 0x64, 0x5f, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x14, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74, 0x65, 0x64, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x74, 0x79, 0x70, 0x65, 0x73, 0x76, 0x31, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x52, 0x0a, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x35, 0x0a, 0x06, 0x72, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x74, 0x79, 0x70, 0x65, 0x73, 0x76, 0x31, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x52, 0x06, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x12,
	0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x22, 0xec, 0x04, 0x0a, 0x11,
	0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x12, 0x53, 0x0a, 0x10, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x5f, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x74, 0x79, 0x70, 0x65, 0x73, 0x76, 0x31, 0x2e, 0x46, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0f, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x4d, 0x0a, 0x0e, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x74, 0x79, 0x70, 0x65, 0x73, 0x76, 0x31, 0x2e, 0x46,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0d, 0x6c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x4a, 0x0a, 0x0d, 0x6d, 0x61, 0x70, 0x5f, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x74, 0x79, 0x70, 0x65, 0x73, 0x76, 0x31, 0x2e, 0x46, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x70, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x48, 0x00, 0x52, 0x0c, 0x6d, 0x61, 0x70, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x12, 0x53, 0x0a, 0x10, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x74, 0x79, 0x70, 0x65, 0x73, 0x76, 0x31, 0x2e, 0x46, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x5e, 0x0a, 0x17, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x76, 0x31, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x48, 0x00, 0x52,
	0x15, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x59, 0x0a, 0x12, 0x76, 0x61, 0x72, 0x69, 0x61, 0x64,
	0x69, 0x63, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x76, 0x31, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x72, 0x69, 0x61,
	0x64, 0x69, 0x63, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x48, 0x00, 0x52, 0x11,
	0x76, 0x61, 0x72, 0x69, 0x61, 0x64, 0x69, 0x63, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x12, 0x4a, 0x0a, 0x0d, 0x61, 0x6e, 0x79, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x74, 0x79, 0x70, 0x65, 0x73, 0x76, 0x31, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x41, 0x6e, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x48, 0x00, 0x52,
	0x0c, 0x61, 0x6e, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x42, 0x0b, 0x0a,
	0x09, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x22, 0xa0, 0x02, 0x0a, 0x17, 0x46,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x12, 0x3e, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x74, 0x79, 0x70, 0x65, 0x73, 0x76, 0x31, 0x2e, 0x46,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x15, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74, 0x65, 0x64, 0x5f,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x14, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74, 0x65, 0x64, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x5f, 0x6e, 0x75, 0x6c, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0e, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x4e, 0x75, 0x6c, 0x6c, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x22, 0xad, 0x02,
	0x0a, 0x15, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x12, 0x4d, 0x0a, 0x0c, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x76, 0x31, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x15, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74, 0x65, 0x64, 0x5f,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x14, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74, 0x65, 0x64, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x5f, 0x6e, 0x75, 0x6c, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0e, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x4e, 0x75, 0x6c, 0x6c, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x22, 0xac, 0x02,
	0x0a, 0x14, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x70, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x12, 0x4d, 0x0a, 0x0c, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x76, 0x31, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0b, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x33, 0x0a, 0x15, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74, 0x65, 0x64, 0x5f, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x14, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74, 0x65, 0x64, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f,
	0x6e, 0x75, 0x6c, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0e, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x4e, 0x75, 0x6c, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x22, 0xb8, 0x02, 0x0a,
	0x17, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x12, 0x56, 0x0a, 0x11, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x74, 0x79, 0x70, 0x65, 0x73, 0x76, 0x31, 0x2e, 0x46, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x15,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x74, 0x65, 0x64, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x28, 0x0a, 0x10, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x6e, 0x75, 0x6c, 0x6c, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x4e, 0x75, 0x6c, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x22, 0xaf, 0x02, 0x0a, 0x15, 0x46, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x4f, 0x0a, 0x0d, 0x66,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x76, 0x31, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c,
	0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33,
	0x0a, 0x15, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74, 0x65, 0x64, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x6e, 0x75, 0x6c,
	0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x4e, 0x75, 0x6c, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x22, 0xa9, 0x02, 0x0a, 0x19, 0x46, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x64, 0x69, 0x63, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x3e, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x74, 0x79, 0x70, 0x65, 0x73, 0x76, 0x31, 0x2e, 0x46, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0a, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x33, 0x0a, 0x15, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x14, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74, 0x65, 0x64, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x6e,
	0x75, 0x6c, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0e, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x4e, 0x75, 0x6c, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05,
	0x6e, 0x61, 0x6d, 0x65, 0x64, 0x22, 0xaa, 0x02, 0x0a, 0x14, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x41, 0x6e, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x4b, 0x0a, 0x0b, 0x75, 0x6e, 0x69, 0x6f,
	0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x74, 0x79, 0x70, 0x65, 0x73, 0x76, 0x31, 0x2e, 0x46, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x75, 0x6e, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x15, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74, 0x65,
	0x64, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x10,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x6e, 0x75, 0x6c, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x4e, 0x75, 0x6c,
	0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x22, 0xd5, 0x03, 0x0a, 0x0e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x12, 0x4a, 0x0a, 0x0d, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x5f,
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x74, 0x79, 0x70, 0x65, 0x73, 0x76, 0x31, 0x2e, 0x46, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x52, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x52, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x12, 0x44, 0x0a, 0x0b, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x76, 0x31, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x48, 0x00, 0x52, 0x0a, 0x6c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x12, 0x41, 0x0a, 0x0a, 0x6d, 0x61, 0x70, 0x5f, 0x72,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x74, 0x79, 0x70, 0x65, 0x73, 0x76, 0x31, 0x2e, 0x46, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x70, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x48, 0x00, 0x52,
	0x09, 0x6d, 0x61, 0x70, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x12, 0x4a, 0x0a, 0x0d, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x5f, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x74, 0x79, 0x70, 0x65, 0x73, 0x76,
	0x31, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x48, 0x00, 0x52, 0x0c, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x12, 0x55, 0x0a, 0x14, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x76, 0x31, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x48, 0x00, 0x52, 0x12, 0x66, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x12, 0x41, 0x0a,
	0x0a, 0x61, 0x6e, 0x79, 0x5f, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x74, 0x79, 0x70, 0x65, 0x73, 0x76,
	0x31, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x79, 0x52, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x48, 0x00, 0x52, 0x09, 0x61, 0x6e, 0x79, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e,
	0x42, 0x08, 0x0a, 0x06, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x22, 0xad, 0x01, 0x0a, 0x14, 0x46,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x52, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x12, 0x3e, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x74, 0x79, 0x70, 0x65, 0x73, 0x76,
	0x31, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x15, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74,
	0x65, 0x64, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74, 0x65, 0x64, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xba, 0x01, 0x0a, 0x12, 0x46,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x12, 0x4d, 0x0a, 0x0c, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x76, 0x31, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x15, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74, 0x65, 0x64, 0x5f,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x14, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74, 0x65, 0x64, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xb9, 0x01, 0x0a, 0x11, 0x46, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x70, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x12, 0x4d, 0x0a,
	0x0c, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x76, 0x31, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0b, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33,
	0x0a, 0x15, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74, 0x65, 0x64, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0xc5, 0x01, 0x0a, 0x14, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x12, 0x56, 0x0a, 0x11,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x76, 0x31, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x15, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x74, 0x65, 0x64, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74, 0x65, 0x64,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xbc, 0x01, 0x0a, 0x12,
	0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x12, 0x4f, 0x0a, 0x0d, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x74, 0x79, 0x70, 0x65, 0x73, 0x76, 0x31, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x15, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74,
	0x65, 0x64, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74, 0x65, 0x64, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xed, 0x01, 0x0a, 0x11, 0x46,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x79, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e,
	0x12, 0x34, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20,
	0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x74, 0x79, 0x70, 0x65, 0x73, 0x76, 0x31, 0x2e, 0x46,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x4b, 0x0a, 0x0b, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x74, 0x79, 0x70, 0x65, 0x73, 0x76, 0x31, 0x2e, 0x46, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x15, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74,
	0x65, 0x64, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74, 0x65, 0x64, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x87, 0x01, 0x0a, 0x1b, 0x46,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3e, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x74, 0x79, 0x70, 0x65, 0x73, 0x76, 0x31, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x61, 0x6c,
	0x6c, 0x6f, 0x77, 0x5f, 0x6e, 0x75, 0x6c, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x4e, 0x75, 0x6c, 0x6c, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0xe0, 0x04, 0x0a, 0x1b, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5e, 0x0a, 0x11, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x30, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x74, 0x79, 0x70, 0x65, 0x73, 0x76, 0x31, 0x2e,
	0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x00, 0x52, 0x0f, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x58, 0x0a, 0x0f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x74, 0x79, 0x70, 0x65, 0x73, 0x76, 0x31, 0x2e, 0x46, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52,
	0x0d, 0x6c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x55,
	0x0a, 0x0e, 0x6d, 0x61, 0x70, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x76, 0x31, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x61, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0c, 0x6d, 0x61, 0x70, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x5e, 0x0a, 0x11, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x30, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x74, 0x79, 0x70, 0x65, 0x73, 0x76, 0x31,
	0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x60, 0x0a, 0x13, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x76, 0x31, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x00, 0x52, 0x11, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x55, 0x0a, 0x0e, 0x61, 0x6e, 0x79, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2d, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x74, 0x79, 0x70, 0x65, 0x73, 0x76, 0x31, 0x2e,
	0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00,
	0x52, 0x0c, 0x61, 0x6e, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x42, 0x17,
	0x0a, 0x15, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x64, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xed, 0x01, 0x0a, 0x21, 0x46, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x74, 0x79, 0x70, 0x65, 0x73, 0x76, 0x31, 0x2e, 0x46, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x15, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x74, 0x65, 0x64, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x25, 0x0a, 0x0e, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63,
	0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x73, 0x22, 0xdd, 0x01, 0x0a, 0x1f, 0x46, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x0c, 0x65,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x74, 0x79, 0x70, 0x65, 0x73, 0x76,
	0x31, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x65,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x15, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74, 0x65, 0x64, 0x5f,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x14, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74, 0x65, 0x64, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xdc, 0x01, 0x0a, 0x1e, 0x46, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x0c, 0x65, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x74, 0x79, 0x70, 0x65, 0x73, 0x76, 0x31,
	0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x65, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x33, 0x0a, 0x15, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74, 0x65, 0x64, 0x5f, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x14, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74, 0x65, 0x64, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xee, 0x02, 0x0a, 0x21, 0x46, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x6d, 0x0a, 0x0f,
	0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x76, 0x31, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x15, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74, 0x65, 0x64,
	0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x14, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74, 0x65, 0x64, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x6d, 0x0a, 0x13, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x40, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x74, 0x79, 0x70, 0x65, 0x73, 0x76, 0x31,
	0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xd6, 0x01, 0x0a, 0x1f, 0x46, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x0d, 0x66,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x76, 0x31, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x15, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x74, 0x65, 0x64, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x90, 0x02, 0x0a, 0x1e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x79,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x20, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x74, 0x79, 0x70, 0x65, 0x73, 0x76,
	0x31, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x4b, 0x0a, 0x0b, 0x75, 0x6e, 0x69,
	0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x74, 0x79, 0x70, 0x65, 0x73, 0x76, 0x31, 0x2e, 0x46,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x75, 0x6e, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33,
	0x0a, 0x15, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74, 0x65, 0x64, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0xc5, 0x02, 0x0a, 0x15, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x40, 0x0a,
	0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x17, 0x0a, 0x07, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x68, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12,
	0x30, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x74, 0x79, 0x70, 0x65, 0x73, 0x76, 0x31,
	0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x73, 0x12, 0x38, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0xc9, 0x01, 0x0a, 0x16,
	0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5c, 0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2d, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x74, 0x79, 0x70, 0x65, 0x73, 0x76,
	0x31, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x48, 0x00, 0x52, 0x10, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x0e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x74, 0x79, 0x70, 0x65, 0x73, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xf9, 0x01, 0x0a, 0x1e, 0x44, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7a, 0x0a, 0x15, 0x63, 0x6f,
	0x6d, 0x70, 0x75, 0x74, 0x65, 0x64, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x74, 0x79, 0x70, 0x65, 0x73, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65,
	0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x13, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x1a, 0x5b, 0x0a, 0x18, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74,
	0x65, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x29, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x4d, 0x61, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0xa7, 0x03, 0x0a, 0x1c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x48, 0x61, 0x73, 0x53, 0x74, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x73, 0x65, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x74, 0x79, 0x70, 0x65, 0x73, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x68, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64,
	0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x4e, 0x6f,
	0x64, 0x65, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63,
	0x12, 0x51, 0x0a, 0x11, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x74, 0x79, 0x70, 0x65, 0x73, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x10, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x38, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0xde, 0x01,
	0x0a, 0x1d, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x61, 0x73, 0x53, 0x74, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x73, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x6a, 0x0a, 0x1b, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x74, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00,
	0x52, 0x19, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x74, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x45, 0x0a, 0x0e, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x48, 0x00, 0x52, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xd9,
	0x02, 0x0a, 0x16, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x0d, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x74, 0x79, 0x70, 0x65, 0x73, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x68,
	0x6f, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x68, 0x6f,
	0x73, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x43, 0x0a, 0x0e, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x38, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x74, 0x79, 0x70, 0x65, 0x73, 0x76,
	0x31, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0xac, 0x01, 0x0a, 0x17, 0x44,
	0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x48, 0x00, 0x52, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x45, 0x0a, 0x0e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x74, 0x79, 0x70, 0x65, 0x73, 0x76, 0x31, 0x2e, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0d,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x0a, 0x0a,
	0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x35, 0x0a, 0x15, 0x44, 0x65, 0x73,
	0x74, 0x72, 0x6f, 0x79, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x65, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x64, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x65, 0x64,
	0x22, 0x3b, 0x0a, 0x19, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x74, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1e, 0x0a,
	0x0a, 0x73, 0x74, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x73, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x73, 0x65, 0x64, 0x22, 0xb3, 0x07,
	0x0a, 0x07, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x4f, 0x0a, 0x15, 0x61, 0x70, 0x70,
	0x6c, 0x69, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x74, 0x79, 0x70, 0x65, 0x73, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x13, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x75,
	0x73, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0c, 0x6d, 0x75, 0x73, 0x74, 0x52, 0x65, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12,
	0x43, 0x0a, 0x0f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x74, 0x79, 0x70, 0x65, 0x73, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x52, 0x0e, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x6e, 0x65, 0x77, 0x5f, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x74, 0x79, 0x70, 0x65, 0x73, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x52, 0x09, 0x6e, 0x65, 0x77, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12,
	0x25, 0x0a, 0x0e, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x75, 0x6e, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x64, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0f, 0x75, 0x6e, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x64, 0x5f, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x70,
	0x75, 0x74, 0x65, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x40, 0x0a, 0x1d, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x5f, 0x6b, 0x6e, 0x6f, 0x77,
	0x6e, 0x5f, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x19, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x4b,
	0x6e, 0x6f, 0x77, 0x6e, 0x4f, 0x6e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x12, 0x39, 0x0a, 0x19,
	0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f,
	0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x16, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x6e, 0x6f, 0x77, 0x6e, 0x4f,
	0x6e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x12, 0x5a, 0x0a, 0x12, 0x6e, 0x65, 0x77, 0x5f, 0x6f,
	0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x0a, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x2e, 0x4e, 0x65, 0x77, 0x4f,
	0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x10, 0x6e, 0x65, 0x77, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x4c, 0x69,
	0x6e, 0x6b, 0x73, 0x12, 0x63, 0x0a, 0x15, 0x6f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x5f,
	0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x2e, 0x4f, 0x75, 0x74, 0x62, 0x6f,
	0x75, 0x6e, 0x64, 0x4c, 0x69, 0x6e, 0x6b, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x13, 0x6f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x4c, 0x69, 0x6e,
	0x6b, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x16, 0x72, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x64, 0x5f, 0x6f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x6c, 0x69, 0x6e,
	0x6b, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x14, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x64, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x1a, 0x5f,
	0x0a, 0x15, 0x4e, 0x65, 0x77, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x4c, 0x69, 0x6e,
	0x6b, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x74, 0x79, 0x70, 0x65, 0x73, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x62, 0x0a, 0x18, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x4c, 0x69, 0x6e, 0x6b, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x30, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x74, 0x79, 0x70, 0x65, 0x73, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x6e,
	0x6b, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0xb7, 0x01, 0x0a, 0x0b, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x70, 0x61, 0x74,
	0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x50, 0x61,
	0x74, 0x68, 0x12, 0x32, 0x0a, 0x0a, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e,
	0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x70, 0x72, 0x65,
	0x76, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x30, 0x0a, 0x09, 0x6e, 0x65, 0x77, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x2e, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x08,
	0x6e, 0x65, 0x77, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x75, 0x73, 0x74,
	0x5f, 0x72, 0x65, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0c, 0x6d, 0x75, 0x73, 0x74, 0x52, 0x65, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x22, 0xa1, 0x02,
	0x0a, 0x0b, 0x4c, 0x69, 0x6e, 0x6b, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x43, 0x0a,
	0x0f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x52, 0x0e, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x6e, 0x65, 0x77, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x52, 0x09, 0x6e, 0x65, 0x77, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x25, 0x0a,
	0x0e, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x75, 0x6e, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x64, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f,
	0x75, 0x6e, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12,
	0x40, 0x0a, 0x1d, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73,
	0x5f, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x19, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x73, 0x4b, 0x6e, 0x6f, 0x77, 0x6e, 0x4f, 0x6e, 0x44, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x22, 0xa9, 0x02, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x52, 0x0a, 0x16, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x74, 0x79, 0x70, 0x65, 0x73, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x14, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x5e, 0x0a,
	0x1b, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x72,
	0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x52, 0x18, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x57, 0x69, 0x74,
	0x68, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x53, 0x75, 0x62, 0x73, 0x22, 0xb2, 0x07,
	0x0a, 0x0d, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x35, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x74, 0x79, 0x70, 0x65, 0x73, 0x76, 0x31, 0x2e, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x4b, 0x0a, 0x0e, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x65, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x74, 0x79, 0x70, 0x65, 0x73, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x65,
	0x63, 0x69, 0x73, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x3f, 0x0a, 0x1c, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x19, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x12, 0x36, 0x0a, 0x17, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x64, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x15, 0x6c, 0x61, 0x73, 0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x65,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x41, 0x0a, 0x1d, 0x6c, 0x61,
	0x73, 0x74, 0x5f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70,
	0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x1a, 0x6c, 0x61, 0x73, 0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x41, 0x74, 0x74,
	0x65, 0x6d, 0x70, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x30, 0x0a,
	0x09, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x73, 0x70, 0x65, 0x63, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x40, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x30, 0x0a, 0x14, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x73, 0x5f, 0x6f,
	0x6e, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x12, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x73, 0x4f, 0x6e, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x73,
	0x5f, 0x6f, 0x6e, 0x5f, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18, 0x0f, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x11, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x73, 0x4f, 0x6e, 0x43, 0x68, 0x69,
	0x6c, 0x64, 0x72, 0x65, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65,
	0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e,
	0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x64, 0x72, 0x69, 0x66, 0x74, 0x65, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x64, 0x72, 0x69, 0x66, 0x74, 0x65, 0x64, 0x12, 0x5e, 0x0a, 0x1d, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x64, 0x72, 0x69, 0x66, 0x74, 0x5f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1a, 0x6c, 0x61,
	0x73, 0x74, 0x44, 0x72, 0x69, 0x66, 0x74, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x48, 0x0a, 0x09, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x74, 0x79, 0x70, 0x65, 0x73, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x09, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x22, 0xeb, 0x02, 0x0a, 0x10, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x35, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x4e, 0x6f,
	0x64, 0x65, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x43, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x74, 0x79, 0x70, 0x65, 0x73, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x46, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x0d,
	0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x4c, 0x69, 0x6e,
	0x6b, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0c, 0x6c, 0x69, 0x6e, 0x6b, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x27, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x4d,
	0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63,
	0x22, 0xbe, 0x02, 0x0a, 0x18, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x36, 0x0a,
	0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x4d, 0x61, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x2e, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x64, 0x65, 0x52,
	0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4b, 0x0a, 0x06,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x74, 0x79, 0x70, 0x65, 0x73, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73,
	0x6f, 0x6c, 0x76, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x2b, 0x0a, 0x06, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x2e, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x06,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x85, 0x02, 0x0a, 0x19, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x3a, 0x0a, 0x03, 0x61, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x74, 0x79, 0x70, 0x65, 0x73, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73,
	0x6f, 0x6c, 0x76, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x03, 0x61, 0x6e, 0x64, 0x12, 0x38, 0x0a, 0x02, 0x6f,
	0x72, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x02, 0x6f, 0x72, 0x12, 0x3a, 0x0a, 0x03, 0x6e, 0x6f, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x03, 0x6e, 0x6f,
	0x74, 0x12, 0x36, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x2e, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0b, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xe7, 0x01, 0x0a, 0x1b, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x56, 0x0a, 0x18, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f,
	0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x16, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x43, 0x0a, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62,
	0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x11, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70,
	0x74, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x01, 0x52, 0x10, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x22, 0x9a, 0x03, 0x0a, 0x15, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x57, 0x0a, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x41, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x48, 0x0a, 0x06, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x74, 0x79, 0x70, 0x65, 0x73, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x12, 0x2b, 0x0a, 0x06, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x4d, 0x61, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x1a, 0x53, 0x0a, 0x10, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x29, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x4d,
	0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x75, 0x0a, 0x16, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x06, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x74, 0x79, 0x70, 0x65, 0x73, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x19, 0x0a, 0x08,
	0x69, 0x64, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x69, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x22, 0x8d, 0x06, 0x0a, 0x19, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x33, 0x0a, 0x15, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74, 0x65, 0x64, 0x5f, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x14, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74, 0x65, 0x64, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x58, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x74, 0x79, 0x70, 0x65, 0x73, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x12, 0x3e, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x74, 0x79, 0x70, 0x65, 0x73, 0x76, 0x31, 0x2e,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73,
	0x12, 0x47, 0x0a, 0x0a, 0x6d, 0x61, 0x70, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x09,
	0x6d, 0x61, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x3f, 0x0a, 0x06, 0x6f, 0x6e, 0x65,
	0x5f, 0x6f, 0x66, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x74, 0x79, 0x70, 0x65, 0x73, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x52, 0x05, 0x6f, 0x6e, 0x65, 0x4f, 0x66, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x75, 0x6c, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6e, 0x75, 0x6c, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x12, 0x38, 0x0a, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x2e, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0c,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2f, 0x0a, 0x08,
	0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x4e,
	0x6f, 0x64, 0x65, 0x52, 0x08, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x12, 0x1a, 0x0a,
	0x08, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x75, 0x73,
	0x74, 0x5f, 0x72, 0x65, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0c, 0x6d, 0x75, 0x73, 0x74, 0x52, 0x65, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x1a, 0x67,
	0x0a, 0x0f, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x3e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x4f, 0x0a, 0x09, 0x43, 0x61, 0x6e, 0x4c, 0x69,
	0x6e, 0x6b, 0x54, 0x6f, 0x12, 0x42, 0x0a, 0x0e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x74, 0x79, 0x70, 0x65, 0x73, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x22, 0x4a, 0x0a, 0x1a, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e,
	0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2c, 0x0a, 0x12, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x10, 0x69, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x54, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x61, 0x6c, 0x22, 0x92, 0x01, 0x0a, 0x0a, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73,
	0x74, 0x69, 0x63, 0x12, 0x34, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x76, 0x31, 0x2e, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x34, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x76, 0x31, 0x2e, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x22, 0xb7, 0x01, 0x0a, 0x0f, 0x44, 0x69,
	0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x2f, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x74, 0x79, 0x70, 0x65, 0x73, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x2b,
	0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x74, 0x79, 0x70, 0x65, 0x73, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x12, 0x46, 0x0a, 0x0f, 0x63,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x61, 0x63, 0x63, 0x75, 0x72, 0x61, 0x63, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x41, 0x63, 0x63, 0x75, 0x72,
	0x61, 0x63, 0x79, 0x52, 0x0e, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x41, 0x63, 0x63, 0x75, 0x72,
	0x61, 0x63, 0x79, 0x22, 0x22, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xa8, 0x03, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x77, 0x0a, 0x19, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x76,
	0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b,
	0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x74, 0x79, 0x70, 0x65, 0x73, 0x76, 0x31, 0x2e, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x56, 0x61, 0x72,
	0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x17, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x56, 0x61, 0x72, 0x69, 0x61,
	0x62, 0x6c, 0x65, 0x73, 0x12, 0x61, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f,
	0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x34, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x74, 0x79, 0x70, 0x65, 0x73, 0x76, 0x31, 0x2e,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x56, 0x61,
	0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x1a, 0x5f, 0x0a, 0x1c, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c,
	0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x29, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x58, 0x0a, 0x15, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x29, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x53, 0x63, 0x61, 0x6c,
	0x61, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0xd4, 0x06, 0x0a, 0x0f, 0x42, 0x6c, 0x75, 0x65, 0x70, 0x72, 0x69, 0x6e, 0x74,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x77, 0x0a, 0x19, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62,
	0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x74, 0x79, 0x70, 0x65, 0x73, 0x76, 0x31, 0x2e, 0x42, 0x6c, 0x75, 0x65, 0x70, 0x72,
	0x69, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x17, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12,
	0x80, 0x01, 0x0a, 0x1c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x76, 0x31, 0x2e, 0x42, 0x6c, 0x75, 0x65, 0x70, 0x72, 0x69, 0x6e, 0x74,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x1a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72,
	0x6d, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c,
	0x65, 0x73, 0x12, 0x61, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x76, 0x61,
	0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x74, 0x79, 0x70, 0x65, 0x73, 0x76, 0x31, 0x2e, 0x42, 0x6c,
	0x75, 0x65, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x56, 0x61, 0x72, 0x69,
	0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x67, 0x0a, 0x13, 0x62, 0x6c, 0x75, 0x65, 0x70, 0x72, 0x69,
	0x6e, 0x74, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x36, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x76, 0x31, 0x2e, 0x42, 0x6c, 0x75, 0x65, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x2e, 0x42, 0x6c, 0x75, 0x65, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x72, 0x69,
	0x61, 0x62, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x12, 0x62, 0x6c, 0x75, 0x65,
	0x70, 0x72, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x1a, 0x5f,
	0x0a, 0x1c, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x29, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x62, 0x0a, 0x1f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x29, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x53, 0x63, 0x61,
	0x6c, 0x61, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x58, 0x0a, 0x15, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x56, 0x61,
	0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x29,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x5a, 0x0a,
	0x17, 0x42, 0x6c, 0x75, 0x65, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62,
	0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x29, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x87, 0x01, 0x0a, 0x0d, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x74, 0x79, 0x70, 0x65, 0x73, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43,
	0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x2e, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x2a, 0x6d, 0x0a, 0x0a, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x43, 0x41, 0x4c, 0x41, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x43, 0x41,
	0x4c, 0x41, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x47, 0x45, 0x52,
	0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x43, 0x41, 0x4c, 0x41, 0x52, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x46, 0x4c, 0x4f, 0x41, 0x54, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x43, 0x41,
	0x4c, 0x41, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x4f, 0x4f, 0x4c, 0x45, 0x41, 0x4e,
	0x10, 0x03, 0x2a, 0xab, 0x03, 0x0a, 0x11, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x1a, 0x46, 0x55, 0x4e, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x46, 0x55, 0x4e, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x49, 0x4e, 0x54, 0x33, 0x32, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x46, 0x55, 0x4e, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49,
	0x4e, 0x54, 0x36, 0x34, 0x10, 0x02, 0x12, 0x1e, 0x0a, 0x1a, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49,
	0x4e, 0x54, 0x33, 0x32, 0x10, 0x03, 0x12, 0x1e, 0x0a, 0x1a, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49,
	0x4e, 0x54, 0x36, 0x34, 0x10, 0x04, 0x12, 0x1f, 0x0a, 0x1b, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x4c,
	0x4f, 0x41, 0x54, 0x33, 0x32, 0x10, 0x05, 0x12, 0x1f, 0x0a, 0x1b, 0x46, 0x55, 0x4e, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46,
	0x4c, 0x4f, 0x41, 0x54, 0x36, 0x34, 0x10, 0x06, 0x12, 0x1c, 0x0a, 0x18, 0x46, 0x55, 0x4e, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x42, 0x4f, 0x4f, 0x4c, 0x10, 0x07, 0x12, 0x1c, 0x0a, 0x18, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x49,
	0x53, 0x54, 0x10, 0x08, 0x12, 0x1b, 0x0a, 0x17, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x50, 0x10,
	0x09, 0x12, 0x1e, 0x0a, 0x1a, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x56, 0x41,
	0x4c, 0x55, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x10,
	0x0a, 0x12, 0x20, 0x0a, 0x1c, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x56, 0x41,
	0x4c, 0x55, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x10, 0x0b, 0x12, 0x1b, 0x0a, 0x17, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x4e, 0x59, 0x10, 0x0c,
	0x2a, 0xba, 0x03, 0x0a, 0x0e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x17, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00,
	0x12, 0x1c, 0x0a, 0x18, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x1b,
	0x0a, 0x17, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x21, 0x0a, 0x1d, 0x52,
	0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43,
	0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x03, 0x12, 0x1e,
	0x0a, 0x1a, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x44, 0x45, 0x53, 0x54, 0x52, 0x4f, 0x59, 0x49, 0x4e, 0x47, 0x10, 0x04, 0x12, 0x1d,
	0x0a, 0x19, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x44, 0x45, 0x53, 0x54, 0x52, 0x4f, 0x59, 0x45, 0x44, 0x10, 0x05, 0x12, 0x22, 0x0a,
	0x1e, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x44, 0x45, 0x53, 0x54, 0x52, 0x4f, 0x59, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10,
	0x06, 0x12, 0x1c, 0x0a, 0x18, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x07, 0x12,
	0x1b, 0x0a, 0x17, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x44, 0x10, 0x08, 0x12, 0x21, 0x0a, 0x1d,
	0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x09, 0x12,
	0x20, 0x0a, 0x1c, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x52, 0x4f, 0x4c, 0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x42, 0x41, 0x43, 0x4b, 0x10,
	0x0a, 0x12, 0x23, 0x0a, 0x1f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x4f, 0x4c, 0x4c, 0x42, 0x41, 0x43, 0x4b, 0x5f, 0x46, 0x41,
	0x49, 0x4c, 0x45, 0x44, 0x10, 0x0b, 0x12, 0x25, 0x0a, 0x21, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52,
	0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x4f, 0x4c, 0x4c, 0x42, 0x41,
	0x43, 0x4b, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x0c, 0x2a, 0xd3, 0x08,
	0x0a, 0x15, 0x50, 0x72, 0x65, 0x63, 0x69, 0x73, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x23, 0x0a, 0x1f, 0x50, 0x52, 0x45, 0x43, 0x49,
	0x53, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x24, 0x0a, 0x20,
	0x50, 0x52, 0x45, 0x43, 0x49, 0x53, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x4e, 0x47,
	0x10, 0x01, 0x12, 0x2b, 0x0a, 0x27, 0x50, 0x52, 0x45, 0x43, 0x49, 0x53, 0x45, 0x5f, 0x52, 0x45,
	0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x02, 0x12,
	0x23, 0x0a, 0x1f, 0x50, 0x52, 0x45, 0x43, 0x49, 0x53, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55,
	0x52, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54,
	0x45, 0x44, 0x10, 0x03, 0x12, 0x29, 0x0a, 0x25, 0x50, 0x52, 0x45, 0x43, 0x49, 0x53, 0x45, 0x5f,
	0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x04, 0x12,
	0x2f, 0x0a, 0x2b, 0x50, 0x52, 0x45, 0x43, 0x49, 0x53, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55,
	0x52, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54,
	0x45, 0x5f, 0x52, 0x4f, 0x4c, 0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x42, 0x41, 0x43, 0x4b, 0x10, 0x05,
	0x12, 0x32, 0x0a, 0x2e, 0x50, 0x52, 0x45, 0x43, 0x49, 0x53, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x4f,
	0x55, 0x52, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x52, 0x45, 0x41,
	0x54, 0x45, 0x5f, 0x52, 0x4f, 0x4c, 0x4c, 0x42, 0x41, 0x43, 0x4b, 0x5f, 0x46, 0x41, 0x49, 0x4c,
	0x45, 0x44, 0x10, 0x06, 0x12, 0x34, 0x0a, 0x30, 0x50, 0x52, 0x45, 0x43, 0x49, 0x53, 0x45, 0x5f,
	0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x4f, 0x4c, 0x4c, 0x42, 0x41, 0x43, 0x4b, 0x5f,
	0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x07, 0x12, 0x26, 0x0a, 0x22, 0x50, 0x52,
	0x45, 0x43, 0x49, 0x53, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x44, 0x45, 0x53, 0x54, 0x52, 0x4f, 0x59, 0x49, 0x4e, 0x47,
	0x10, 0x08, 0x12, 0x25, 0x0a, 0x21, 0x50, 0x52, 0x45, 0x43, 0x49, 0x53, 0x45, 0x5f, 0x52, 0x45,
	0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x44, 0x45,
	0x53, 0x54, 0x52, 0x4f, 0x59, 0x45, 0x44, 0x10, 0x09, 0x12, 0x2a, 0x0a, 0x26, 0x50, 0x52, 0x45,
	0x43, 0x49, 0x53, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x44, 0x45, 0x53, 0x54, 0x52, 0x4f, 0x59, 0x5f, 0x46, 0x41, 0x49,
	0x4c, 0x45, 0x44, 0x10, 0x0a, 0x12, 0x30, 0x0a, 0x2c, 0x50, 0x52, 0x45, 0x43, 0x49, 0x53, 0x45,
	0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x44, 0x45, 0x53, 0x54, 0x52, 0x4f, 0x59, 0x5f, 0x52, 0x4f, 0x4c, 0x4c, 0x49, 0x4e, 0x47,
	0x5f, 0x42, 0x41, 0x43, 0x4b, 0x10, 0x0b, 0x12, 0x33, 0x0a, 0x2f, 0x50, 0x52, 0x45, 0x43, 0x49,
	0x53, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x44, 0x45, 0x53, 0x54, 0x52, 0x4f, 0x59, 0x5f, 0x52, 0x4f, 0x4c, 0x4c, 0x42,
	0x41, 0x43, 0x4b, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x0c, 0x12, 0x3c, 0x0a, 0x38,
	0x50, 0x52, 0x45, 0x43, 0x49, 0x53, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x44, 0x45, 0x53, 0x54, 0x52, 0x4f, 0x59, 0x5f,
	0x52, 0x4f, 0x4c, 0x4c, 0x42, 0x41, 0x43, 0x4b, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f,
	0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x0d, 0x12, 0x35, 0x0a, 0x31, 0x50, 0x52,
	0x45, 0x43, 0x49, 0x53, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x44, 0x45, 0x53, 0x54, 0x52, 0x4f, 0x59, 0x5f, 0x52, 0x4f,
	0x4c, 0x4c, 0x42, 0x41, 0x43, 0x4b, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x10,
	0x0e, 0x12, 0x24, 0x0a, 0x20, 0x50, 0x52, 0x45, 0x43, 0x49, 0x53, 0x45, 0x5f, 0x52, 0x45, 0x53,
	0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x50, 0x44,
	0x41, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x0f, 0x12, 0x32, 0x0a, 0x2e, 0x50, 0x52, 0x45, 0x43, 0x49,
	0x53, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x10, 0x12, 0x23, 0x0a, 0x1f, 0x50,
	0x52, 0x45, 0x43, 0x49, 0x53, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x44, 0x10, 0x11,
	0x12, 0x29, 0x0a, 0x25, 0x50, 0x52, 0x45, 0x43, 0x49, 0x53, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x4f,
	0x55, 0x52, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x50, 0x44, 0x41,
	0x54, 0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x12, 0x12, 0x2f, 0x0a, 0x2b, 0x50,
	0x52, 0x45, 0x43, 0x49, 0x53, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x4f,
	0x4c, 0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x42, 0x41, 0x43, 0x4b, 0x10, 0x13, 0x12, 0x32, 0x0a, 0x2e,
	0x50, 0x52, 0x45, 0x43, 0x49, 0x53, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x52,
	0x4f, 0x4c, 0x4c, 0x42, 0x41, 0x43, 0x4b, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x14,
	0x12, 0x3b, 0x0a, 0x37, 0x50, 0x52, 0x45, 0x43, 0x49, 0x53, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x4f,
	0x55, 0x52, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x50, 0x44, 0x41,
	0x54, 0x45, 0x5f, 0x52, 0x4f, 0x4c, 0x4c, 0x42, 0x41, 0x43, 0x4b, 0x5f, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x15, 0x12, 0x34, 0x0a,
	0x30, 0x50, 0x52, 0x45, 0x43, 0x49, 0x53, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43,
	0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f,
	0x52, 0x4f, 0x4c, 0x4c, 0x42, 0x41, 0x43, 0x4b, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54,
	0x45, 0x10, 0x16, 0x2a, 0x81, 0x01, 0x0a, 0x0f, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74,
	0x69, 0x63, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x19, 0x0a, 0x15, 0x44, 0x49, 0x41, 0x47, 0x4e,
	0x4f, 0x53, 0x54, 0x49, 0x43, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x4e, 0x4f, 0x4e, 0x45,
	0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x44, 0x49, 0x41, 0x47, 0x4e, 0x4f, 0x53, 0x54, 0x49, 0x43,
	0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x01, 0x12, 0x1c,
	0x0a, 0x18, 0x44, 0x49, 0x41, 0x47, 0x4e, 0x4f, 0x53, 0x54, 0x49, 0x43, 0x5f, 0x4c, 0x45, 0x56,
	0x45, 0x4c, 0x5f, 0x57, 0x41, 0x52, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15,
	0x44, 0x49, 0x41, 0x47, 0x4e, 0x4f, 0x53, 0x54, 0x49, 0x43, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c,
	0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0x03, 0x2a, 0x66, 0x0a, 0x0e, 0x43, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x41, 0x63, 0x63, 0x75, 0x72, 0x61, 0x63, 0x79, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x4f, 0x4c,
	0x55, 0x4d, 0x4e, 0x5f, 0x41, 0x43, 0x43, 0x55, 0x52, 0x41, 0x43, 0x59, 0x5f, 0x4e, 0x4f, 0x4e,
	0x45, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x4f, 0x4c, 0x55, 0x4d, 0x4e, 0x5f, 0x41, 0x43,
	0x43, 0x55, 0x52, 0x41, 0x43, 0x59, 0x5f, 0x45, 0x58, 0x41, 0x43, 0x54, 0x10, 0x01, 0x12, 0x1f,
	0x0a, 0x1b, 0x43, 0x4f, 0x4c, 0x55, 0x4d, 0x4e, 0x5f, 0x41, 0x43, 0x43, 0x55, 0x52, 0x41, 0x43,
	0x59, 0x5f, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x58, 0x49, 0x4d, 0x41, 0x54, 0x45, 0x10, 0x02, 0x2a,
	0x5a, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x19, 0x0a, 0x15,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x45, 0x58, 0x50,
	0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x49, 0x45, 0x4e, 0x54, 0x10,
	0x01, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f,
	0x42, 0x41, 0x44, 0x5f, 0x49, 0x4e, 0x50, 0x55, 0x54, 0x10, 0x02, 0x42, 0x4d, 0x5a, 0x46, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6e, 0x65, 0x77, 0x73, 0x74, 0x61,
	0x63, 0x6b, 0x2d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x69, 0x74,
	0x79, 0x2f, 0x6c, 0x69, 0x62, 0x73, 0x2f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2d, 0x66, 0x72,
	0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x76, 0x31, 0x92, 0x03, 0x02, 0x08, 0x02, 0x62, 0x08, 0x65, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x70, 0xe8, 0x07,
})

var (
	file_plugin_framework_sharedtypesv1_types_proto_rawDescOnce sync.Once
	file_plugin_framework_sharedtypesv1_types_proto_rawDescData []byte
)

func file_plugin_framework_sharedtypesv1_types_proto_rawDescGZIP() []byte {
	file_plugin_framework_sharedtypesv1_types_proto_rawDescOnce.Do(func() {
		file_plugin_framework_sharedtypesv1_types_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_plugin_framework_sharedtypesv1_types_proto_rawDesc), len(file_plugin_framework_sharedtypesv1_types_proto_rawDesc)))
	})
	return file_plugin_framework_sharedtypesv1_types_proto_rawDescData
}

var file_plugin_framework_sharedtypesv1_types_proto_enumTypes = make([]protoimpl.EnumInfo, 7)
var file_plugin_framework_sharedtypesv1_types_proto_msgTypes = make([]protoimpl.MessageInfo, 88)
var file_plugin_framework_sharedtypesv1_types_proto_goTypes = []any{
	(ScalarType)(0),                           // 0: sharedtypesv1.ScalarType
	(FunctionValueType)(0),                    // 1: sharedtypesv1.FunctionValueType
	(ResourceStatus)(0),                       // 2: sharedtypesv1.ResourceStatus
	(PreciseResourceStatus)(0),                // 3: sharedtypesv1.PreciseResourceStatus
	(DiagnosticLevel)(0),                      // 4: sharedtypesv1.DiagnosticLevel
	(ColumnAccuracy)(0),                       // 5: sharedtypesv1.ColumnAccuracy
	(ErrorCode)(0),                            // 6: sharedtypesv1.ErrorCode
	(*ConfigDefinitionResponse)(nil),          // 7: sharedtypesv1.ConfigDefinitionResponse
	(*ConfigDefinition)(nil),                  // 8: sharedtypesv1.ConfigDefinition
	(*ConfigFieldDefinition)(nil),             // 9: sharedtypesv1.ConfigFieldDefinition
	(*ExamplesResponse)(nil),                  // 10: sharedtypesv1.ExamplesResponse
	(*Examples)(nil),                          // 11: sharedtypesv1.Examples
	(*TypeDescriptionResponse)(nil),           // 12: sharedtypesv1.TypeDescriptionResponse
	(*TypeDescription)(nil),                   // 13: sharedtypesv1.TypeDescription
	(*ResourceTypeResponse)(nil),              // 14: sharedtypesv1.ResourceTypeResponse
	(*ResourceTypeInfo)(nil),                  // 15: sharedtypesv1.ResourceTypeInfo
	(*FunctionDefinitionRequest)(nil),         // 16: sharedtypesv1.FunctionDefinitionRequest
	(*FunctionDefinitionResponse)(nil),        // 17: sharedtypesv1.FunctionDefinitionResponse
	(*FunctionCallRequest)(nil),               // 18: sharedtypesv1.FunctionCallRequest
	(*FunctionCallResponse)(nil),              // 19: sharedtypesv1.FunctionCallResponse
	(*FunctionCallResult)(nil),                // 20: sharedtypesv1.FunctionCallResult
	(*FunctionRuntimeInfo)(nil),               // 21: sharedtypesv1.FunctionRuntimeInfo
	(*FunctionCallArgs)(nil),                  // 22: sharedtypesv1.FunctionCallArgs
	(*FunctionCallContext)(nil),               // 23: sharedtypesv1.FunctionCallContext
	(*FunctionCall)(nil),                      // 24: sharedtypesv1.FunctionCall
	(*SourceMeta)(nil),                        // 25: sharedtypesv1.SourceMeta
	(*SourcePosition)(nil),                    // 26: sharedtypesv1.SourcePosition
	(*FunctionDefinition)(nil),                // 27: sharedtypesv1.FunctionDefinition
	(*FunctionParameter)(nil),                 // 28: sharedtypesv1.FunctionParameter
	(*FunctionScalarParameter)(nil),           // 29: sharedtypesv1.FunctionScalarParameter
	(*FunctionListParameter)(nil),             // 30: sharedtypesv1.FunctionListParameter
	(*FunctionMapParameter)(nil),              // 31: sharedtypesv1.FunctionMapParameter
	(*FunctionObjectParameter)(nil),           // 32: sharedtypesv1.FunctionObjectParameter
	(*FunctionTypeParameter)(nil),             // 33: sharedtypesv1.FunctionTypeParameter
	(*FunctionVariadicParameter)(nil),         // 34: sharedtypesv1.FunctionVariadicParameter
	(*FunctionAnyParameter)(nil),              // 35: sharedtypesv1.FunctionAnyParameter
	(*FunctionReturn)(nil),                    // 36: sharedtypesv1.FunctionReturn
	(*FunctionScalarReturn)(nil),              // 37: sharedtypesv1.FunctionScalarReturn
	(*FunctionListReturn)(nil),                // 38: sharedtypesv1.FunctionListReturn
	(*FunctionMapReturn)(nil),                 // 39: sharedtypesv1.FunctionMapReturn
	(*FunctionObjectReturn)(nil),              // 40: sharedtypesv1.FunctionObjectReturn
	(*FunctionTypeReturn)(nil),                // 41: sharedtypesv1.FunctionTypeReturn
	(*FunctionAnyReturn)(nil),                 // 42: sharedtypesv1.FunctionAnyReturn
	(*FunctionObjectAttributeType)(nil),       // 43: sharedtypesv1.FunctionObjectAttributeType
	(*FunctionValueTypeDefinition)(nil),       // 44: sharedtypesv1.FunctionValueTypeDefinition
	(*FunctionScalarValueTypeDefinition)(nil), // 45: sharedtypesv1.FunctionScalarValueTypeDefinition
	(*FunctionListValueTypeDefinition)(nil),   // 46: sharedtypesv1.FunctionListValueTypeDefinition
	(*FunctionMapValueTypeDefinition)(nil),    // 47: sharedtypesv1.FunctionMapValueTypeDefinition
	(*FunctionObjectValueTypeDefinition)(nil), // 48: sharedtypesv1.FunctionObjectValueTypeDefinition
	(*FunctionTypeValueTypeDefinition)(nil),   // 49: sharedtypesv1.FunctionTypeValueTypeDefinition
	(*FunctionAnyValueTypeDefinition)(nil),    // 50: sharedtypesv1.FunctionAnyValueTypeDefinition
	(*DeployResourceRequest)(nil),             // 51: sharedtypesv1.DeployResourceRequest
	(*DeployResourceResponse)(nil),            // 52: sharedtypesv1.DeployResourceResponse
	(*DeployResourceCompleteResponse)(nil),    // 53: sharedtypesv1.DeployResourceCompleteResponse
	(*ResourceHasStabilisedRequest)(nil),      // 54: sharedtypesv1.ResourceHasStabilisedRequest
	(*ResourceHasStabilisedResponse)(nil),     // 55: sharedtypesv1.ResourceHasStabilisedResponse
	(*DestroyResourceRequest)(nil),            // 56: sharedtypesv1.DestroyResourceRequest
	(*DestroyResourceResponse)(nil),           // 57: sharedtypesv1.DestroyResourceResponse
	(*DestroyResourceResult)(nil),             // 58: sharedtypesv1.DestroyResourceResult
	(*ResourceStabilisationInfo)(nil),         // 59: sharedtypesv1.ResourceStabilisationInfo
	(*Changes)(nil),                           // 60: sharedtypesv1.Changes
	(*FieldChange)(nil),                       // 61: sharedtypesv1.FieldChange
	(*LinkChanges)(nil),                       // 62: sharedtypesv1.LinkChanges
	(*ResourceInfo)(nil),                      // 63: sharedtypesv1.ResourceInfo
	(*ResourceState)(nil),                     // 64: sharedtypesv1.ResourceState
	(*ResolvedResource)(nil),                  // 65: sharedtypesv1.ResolvedResource
	(*ResolvedResourceMetadata)(nil),          // 66: sharedtypesv1.ResolvedResourceMetadata
	(*ResolvedResourceCondition)(nil),         // 67: sharedtypesv1.ResolvedResourceCondition
	(*ResourceCompletionDurations)(nil),       // 68: sharedtypesv1.ResourceCompletionDurations
	(*ResourceMetadataState)(nil),             // 69: sharedtypesv1.ResourceMetadataState
	(*ResourceSpecDefinition)(nil),            // 70: sharedtypesv1.ResourceSpecDefinition
	(*ResourceDefinitionsSchema)(nil),         // 71: sharedtypesv1.ResourceDefinitionsSchema
	(*CanLinkTo)(nil),                         // 72: sharedtypesv1.CanLinkTo
	(*ResourceCommonTerminalInfo)(nil),        // 73: sharedtypesv1.ResourceCommonTerminalInfo
	(*Diagnostic)(nil),                        // 74: sharedtypesv1.Diagnostic
	(*DiagnosticRange)(nil),                   // 75: sharedtypesv1.DiagnosticRange
	(*ResourceType)(nil),                      // 76: sharedtypesv1.ResourceType
	(*ProviderContext)(nil),                   // 77: sharedtypesv1.ProviderContext
	(*BlueprintParams)(nil),                   // 78: sharedtypesv1.BlueprintParams
	(*ErrorResponse)(nil),                     // 79: sharedtypesv1.ErrorResponse
	nil,                                       // 80: sharedtypesv1.ConfigDefinition.FieldsEntry
	nil,                                       // 81: sharedtypesv1.FunctionObjectValueTypeDefinition.AttributeTypesEntry
	nil,                                       // 82: sharedtypesv1.DeployResourceCompleteResponse.ComputedFieldValuesEntry
	nil,                                       // 83: sharedtypesv1.Changes.NewOutboundLinksEntry
	nil,                                       // 84: sharedtypesv1.Changes.OutboundLinkChangesEntry
	nil,                                       // 85: sharedtypesv1.ResolvedResourceMetadata.LabelsEntry
	nil,                                       // 86: sharedtypesv1.ResourceMetadataState.AnnotationsEntry
	nil,                                       // 87: sharedtypesv1.ResourceMetadataState.LabelsEntry
	nil,                                       // 88: sharedtypesv1.ResourceDefinitionsSchema.AttributesEntry
	nil,                                       // 89: sharedtypesv1.ProviderContext.ProviderConfigVariablesEntry
	nil,                                       // 90: sharedtypesv1.ProviderContext.ContextVariablesEntry
	nil,                                       // 91: sharedtypesv1.BlueprintParams.ProviderConfigVariablesEntry
	nil,                                       // 92: sharedtypesv1.BlueprintParams.TransformerConfigVariablesEntry
	nil,                                       // 93: sharedtypesv1.BlueprintParams.ContextVariablesEntry
	nil,                                       // 94: sharedtypesv1.BlueprintParams.BlueprintVariablesEntry
	(*schemapb.ScalarValue)(nil),              // 95: schema.ScalarValue
	(*anypb.Any)(nil),                         // 96: google.protobuf.Any
	(*schemapb.MappingNode)(nil),              // 97: schema.MappingNode
	(*wrapperspb.Int64Value)(nil),             // 98: google.protobuf.Int64Value
	(*schemapb.LinkSelector)(nil),             // 99: schema.LinkSelector
	(*wrapperspb.DoubleValue)(nil),            // 100: google.protobuf.DoubleValue
}
var file_plugin_framework_sharedtypesv1_types_proto_depIdxs = []int32{
	8,   // 0: sharedtypesv1.ConfigDefinitionResponse.config_definition:type_name -> sharedtypesv1.ConfigDefinition
	79,  // 1: sharedtypesv1.ConfigDefinitionResponse.error_response:type_name -> sharedtypesv1.ErrorResponse
	80,  // 2: sharedtypesv1.ConfigDefinition.fields:type_name -> sharedtypesv1.ConfigDefinition.FieldsEntry
	0,   // 3: sharedtypesv1.ConfigFieldDefinition.type:type_name -> sharedtypesv1.ScalarType
	95,  // 4: sharedtypesv1.ConfigFieldDefinition.default_value:type_name -> schema.ScalarValue
	95,  // 5: sharedtypesv1.ConfigFieldDefinition.allowed_values:type_name -> schema.ScalarValue
	95,  // 6: sharedtypesv1.ConfigFieldDefinition.examples:type_name -> schema.ScalarValue
	11,  // 7: sharedtypesv1.ExamplesResponse.examples:type_name -> sharedtypesv1.Examples
	79,  // 8: sharedtypesv1.ExamplesResponse.error_response:type_name -> sharedtypesv1.ErrorResponse
	13,  // 9: sharedtypesv1.TypeDescriptionResponse.description:type_name -> sharedtypesv1.TypeDescription
	79,  // 10: sharedtypesv1.TypeDescriptionResponse.error_response:type_name -> sharedtypesv1.ErrorResponse
	15,  // 11: sharedtypesv1.ResourceTypeResponse.resource_type_info:type_name -> sharedtypesv1.ResourceTypeInfo
	79,  // 12: sharedtypesv1.ResourceTypeResponse.error_response:type_name -> sharedtypesv1.ErrorResponse
	76,  // 13: sharedtypesv1.ResourceTypeInfo.type:type_name -> sharedtypesv1.ResourceType
	78,  // 14: sharedtypesv1.FunctionDefinitionRequest.params:type_name -> sharedtypesv1.BlueprintParams
	27,  // 15: sharedtypesv1.FunctionDefinitionResponse.function_definition:type_name -> sharedtypesv1.FunctionDefinition
	79,  // 16: sharedtypesv1.FunctionDefinitionResponse.error_response:type_name -> sharedtypesv1.ErrorResponse
	22,  // 17: sharedtypesv1.FunctionCallRequest.args:type_name -> sharedtypesv1.FunctionCallArgs
	23,  // 18: sharedtypesv1.FunctionCallRequest.call_context:type_name -> sharedtypesv1.FunctionCallContext
	20,  // 19: sharedtypesv1.FunctionCallResponse.function_result:type_name -> sharedtypesv1.FunctionCallResult
	79,  // 20: sharedtypesv1.FunctionCallResponse.error_response:type_name -> sharedtypesv1.ErrorResponse
	96,  // 21: sharedtypesv1.FunctionCallResult.response_data:type_name -> google.protobuf.Any
	21,  // 22: sharedtypesv1.FunctionCallResult.function_info:type_name -> sharedtypesv1.FunctionRuntimeInfo
	96,  // 23: sharedtypesv1.FunctionRuntimeInfo.partial_args:type_name -> google.protobuf.Any
	96,  // 24: sharedtypesv1.FunctionCallArgs.args:type_name -> google.protobuf.Any
	78,  // 25: sharedtypesv1.FunctionCallContext.params:type_name -> sharedtypesv1.BlueprintParams
	24,  // 26: sharedtypesv1.FunctionCallContext.call_stack:type_name -> sharedtypesv1.FunctionCall
	25,  // 27: sharedtypesv1.FunctionCallContext.current_location:type_name -> sharedtypesv1.SourceMeta
	25,  // 28: sharedtypesv1.FunctionCall.location:type_name -> sharedtypesv1.SourceMeta
	26,  // 29: sharedtypesv1.SourceMeta.start_position:type_name -> sharedtypesv1.SourcePosition
	26,  // 30: sharedtypesv1.SourceMeta.end_position:type_name -> sharedtypesv1.SourcePosition
	28,  // 31: sharedtypesv1.FunctionDefinition.parameters:type_name -> sharedtypesv1.FunctionParameter
	36,  // 32: sharedtypesv1.FunctionDefinition.return:type_name -> sharedtypesv1.FunctionReturn
	29,  // 33: sharedtypesv1.FunctionParameter.scalar_parameter:type_name -> sharedtypesv1.FunctionScalarParameter
	30,  // 34: sharedtypesv1.FunctionParameter.list_parameter:type_name -> sharedtypesv1.FunctionListParameter
	31,  // 35: sharedtypesv1.FunctionParameter.map_parameter:type_name -> sharedtypesv1.FunctionMapParameter
	32,  // 36: sharedtypesv1.FunctionParameter.object_parameter:type_name -> sharedtypesv1.FunctionObjectParameter
	33,  // 37: sharedtypesv1.FunctionParameter.function_type_parameter:type_name -> sharedtypesv1.FunctionTypeParameter
	34,  // 38: sharedtypesv1.FunctionParameter.variadic_parameter:type_name -> sharedtypesv1.FunctionVariadicParameter
	35,  // 39: sharedtypesv1.FunctionParameter.any_parameter:type_name -> sharedtypesv1.FunctionAnyParameter
	44,  // 40: sharedtypesv1.FunctionScalarParameter.type:type_name -> sharedtypesv1.FunctionValueTypeDefinition
	44,  // 41: sharedtypesv1.FunctionListParameter.element_type:type_name -> sharedtypesv1.FunctionValueTypeDefinition
	44,  // 42: sharedtypesv1.FunctionMapParameter.element_type:type_name -> sharedtypesv1.FunctionValueTypeDefinition
	44,  // 43: sharedtypesv1.FunctionObjectParameter.object_value_type:type_name -> sharedtypesv1.FunctionValueTypeDefinition
	44,  // 44: sharedtypesv1.FunctionTypeParameter.function_type:type_name -> sharedtypesv1.FunctionValueTypeDefinition
	44,  // 45: sharedtypesv1.FunctionVariadicParameter.type:type_name -> sharedtypesv1.FunctionValueTypeDefinition
	44,  // 46: sharedtypesv1.FunctionAnyParameter.union_types:type_name -> sharedtypesv1.FunctionValueTypeDefinition
	37,  // 47: sharedtypesv1.FunctionReturn.scalar_return:type_name -> sharedtypesv1.FunctionScalarReturn
	38,  // 48: sharedtypesv1.FunctionReturn.list_return:type_name -> sharedtypesv1.FunctionListReturn
	39,  // 49: sharedtypesv1.FunctionReturn.map_return:type_name -> sharedtypesv1.FunctionMapReturn
	40,  // 50: sharedtypesv1.FunctionReturn.object_return:type_name -> sharedtypesv1.FunctionObjectReturn
	41,  // 51: sharedtypesv1.FunctionReturn.function_type_return:type_name -> sharedtypesv1.FunctionTypeReturn
	42,  // 52: sharedtypesv1.FunctionReturn.any_return:type_name -> sharedtypesv1.FunctionAnyReturn
	44,  // 53: sharedtypesv1.FunctionScalarReturn.type:type_name -> sharedtypesv1.FunctionValueTypeDefinition
	44,  // 54: sharedtypesv1.FunctionListReturn.element_type:type_name -> sharedtypesv1.FunctionValueTypeDefinition
	44,  // 55: sharedtypesv1.FunctionMapReturn.element_type:type_name -> sharedtypesv1.FunctionValueTypeDefinition
	44,  // 56: sharedtypesv1.FunctionObjectReturn.object_value_type:type_name -> sharedtypesv1.FunctionValueTypeDefinition
	44,  // 57: sharedtypesv1.FunctionTypeReturn.function_type:type_name -> sharedtypesv1.FunctionValueTypeDefinition
	1,   // 58: sharedtypesv1.FunctionAnyReturn.type:type_name -> sharedtypesv1.FunctionValueType
	44,  // 59: sharedtypesv1.FunctionAnyReturn.union_types:type_name -> sharedtypesv1.FunctionValueTypeDefinition
	44,  // 60: sharedtypesv1.FunctionObjectAttributeType.type:type_name -> sharedtypesv1.FunctionValueTypeDefinition
	45,  // 61: sharedtypesv1.FunctionValueTypeDefinition.scalar_value_type:type_name -> sharedtypesv1.FunctionScalarValueTypeDefinition
	46,  // 62: sharedtypesv1.FunctionValueTypeDefinition.list_value_type:type_name -> sharedtypesv1.FunctionListValueTypeDefinition
	47,  // 63: sharedtypesv1.FunctionValueTypeDefinition.map_value_type:type_name -> sharedtypesv1.FunctionMapValueTypeDefinition
	48,  // 64: sharedtypesv1.FunctionValueTypeDefinition.object_value_type:type_name -> sharedtypesv1.FunctionObjectValueTypeDefinition
	49,  // 65: sharedtypesv1.FunctionValueTypeDefinition.function_value_type:type_name -> sharedtypesv1.FunctionTypeValueTypeDefinition
	50,  // 66: sharedtypesv1.FunctionValueTypeDefinition.any_value_type:type_name -> sharedtypesv1.FunctionAnyValueTypeDefinition
	1,   // 67: sharedtypesv1.FunctionScalarValueTypeDefinition.type:type_name -> sharedtypesv1.FunctionValueType
	44,  // 68: sharedtypesv1.FunctionListValueTypeDefinition.element_type:type_name -> sharedtypesv1.FunctionValueTypeDefinition
	44,  // 69: sharedtypesv1.FunctionMapValueTypeDefinition.element_type:type_name -> sharedtypesv1.FunctionValueTypeDefinition
	81,  // 70: sharedtypesv1.FunctionObjectValueTypeDefinition.attribute_types:type_name -> sharedtypesv1.FunctionObjectValueTypeDefinition.AttributeTypesEntry
	27,  // 71: sharedtypesv1.FunctionTypeValueTypeDefinition.function_type:type_name -> sharedtypesv1.FunctionDefinition
	1,   // 72: sharedtypesv1.FunctionAnyValueTypeDefinition.type:type_name -> sharedtypesv1.FunctionValueType
	44,  // 73: sharedtypesv1.FunctionAnyValueTypeDefinition.union_types:type_name -> sharedtypesv1.FunctionValueTypeDefinition
	76,  // 74: sharedtypesv1.DeployResourceRequest.resource_type:type_name -> sharedtypesv1.ResourceType
	60,  // 75: sharedtypesv1.DeployResourceRequest.changes:type_name -> sharedtypesv1.Changes
	77,  // 76: sharedtypesv1.DeployResourceRequest.context:type_name -> sharedtypesv1.ProviderContext
	53,  // 77: sharedtypesv1.DeployResourceResponse.complete_response:type_name -> sharedtypesv1.DeployResourceCompleteResponse
	79,  // 78: sharedtypesv1.DeployResourceResponse.error_response:type_name -> sharedtypesv1.ErrorResponse
	82,  // 79: sharedtypesv1.DeployResourceCompleteResponse.computed_field_values:type_name -> sharedtypesv1.DeployResourceCompleteResponse.ComputedFieldValuesEntry
	76,  // 80: sharedtypesv1.ResourceHasStabilisedRequest.resource_type:type_name -> sharedtypesv1.ResourceType
	97,  // 81: sharedtypesv1.ResourceHasStabilisedRequest.resource_spec:type_name -> schema.MappingNode
	69,  // 82: sharedtypesv1.ResourceHasStabilisedRequest.resource_metadata:type_name -> sharedtypesv1.ResourceMetadataState
	77,  // 83: sharedtypesv1.ResourceHasStabilisedRequest.context:type_name -> sharedtypesv1.ProviderContext
	59,  // 84: sharedtypesv1.ResourceHasStabilisedResponse.resource_stabilisation_info:type_name -> sharedtypesv1.ResourceStabilisationInfo
	79,  // 85: sharedtypesv1.ResourceHasStabilisedResponse.error_response:type_name -> sharedtypesv1.ErrorResponse
	76,  // 86: sharedtypesv1.DestroyResourceRequest.resource_type:type_name -> sharedtypesv1.ResourceType
	64,  // 87: sharedtypesv1.DestroyResourceRequest.resource_state:type_name -> sharedtypesv1.ResourceState
	77,  // 88: sharedtypesv1.DestroyResourceRequest.context:type_name -> sharedtypesv1.ProviderContext
	58,  // 89: sharedtypesv1.DestroyResourceResponse.result:type_name -> sharedtypesv1.DestroyResourceResult
	79,  // 90: sharedtypesv1.DestroyResourceResponse.error_response:type_name -> sharedtypesv1.ErrorResponse
	63,  // 91: sharedtypesv1.Changes.applied_resource_info:type_name -> sharedtypesv1.ResourceInfo
	61,  // 92: sharedtypesv1.Changes.modified_fields:type_name -> sharedtypesv1.FieldChange
	61,  // 93: sharedtypesv1.Changes.new_fields:type_name -> sharedtypesv1.FieldChange
	83,  // 94: sharedtypesv1.Changes.new_outbound_links:type_name -> sharedtypesv1.Changes.NewOutboundLinksEntry
	84,  // 95: sharedtypesv1.Changes.outbound_link_changes:type_name -> sharedtypesv1.Changes.OutboundLinkChangesEntry
	97,  // 96: sharedtypesv1.FieldChange.prev_value:type_name -> schema.MappingNode
	97,  // 97: sharedtypesv1.FieldChange.new_value:type_name -> schema.MappingNode
	61,  // 98: sharedtypesv1.LinkChanges.modified_fields:type_name -> sharedtypesv1.FieldChange
	61,  // 99: sharedtypesv1.LinkChanges.new_fields:type_name -> sharedtypesv1.FieldChange
	64,  // 100: sharedtypesv1.ResourceInfo.current_resource_state:type_name -> sharedtypesv1.ResourceState
	65,  // 101: sharedtypesv1.ResourceInfo.resource_with_resolved_subs:type_name -> sharedtypesv1.ResolvedResource
	2,   // 102: sharedtypesv1.ResourceState.status:type_name -> sharedtypesv1.ResourceStatus
	3,   // 103: sharedtypesv1.ResourceState.precise_status:type_name -> sharedtypesv1.PreciseResourceStatus
	97,  // 104: sharedtypesv1.ResourceState.spec_data:type_name -> schema.MappingNode
	69,  // 105: sharedtypesv1.ResourceState.metadata:type_name -> sharedtypesv1.ResourceMetadataState
	98,  // 106: sharedtypesv1.ResourceState.last_drift_detected_timestamp:type_name -> google.protobuf.Int64Value
	68,  // 107: sharedtypesv1.ResourceState.durations:type_name -> sharedtypesv1.ResourceCompletionDurations
	76,  // 108: sharedtypesv1.ResolvedResource.type:type_name -> sharedtypesv1.ResourceType
	97,  // 109: sharedtypesv1.ResolvedResource.description:type_name -> schema.MappingNode
	66,  // 110: sharedtypesv1.ResolvedResource.metadata:type_name -> sharedtypesv1.ResolvedResourceMetadata
	67,  // 111: sharedtypesv1.ResolvedResource.condition:type_name -> sharedtypesv1.ResolvedResourceCondition
	99,  // 112: sharedtypesv1.ResolvedResource.link_selector:type_name -> schema.LinkSelector
	97,  // 113: sharedtypesv1.ResolvedResource.spec:type_name -> schema.MappingNode
	97,  // 114: sharedtypesv1.ResolvedResourceMetadata.display_name:type_name -> schema.MappingNode
	97,  // 115: sharedtypesv1.ResolvedResourceMetadata.annotations:type_name -> schema.MappingNode
	85,  // 116: sharedtypesv1.ResolvedResourceMetadata.labels:type_name -> sharedtypesv1.ResolvedResourceMetadata.LabelsEntry
	97,  // 117: sharedtypesv1.ResolvedResourceMetadata.custom:type_name -> schema.MappingNode
	67,  // 118: sharedtypesv1.ResolvedResourceCondition.and:type_name -> sharedtypesv1.ResolvedResourceCondition
	67,  // 119: sharedtypesv1.ResolvedResourceCondition.or:type_name -> sharedtypesv1.ResolvedResourceCondition
	67,  // 120: sharedtypesv1.ResolvedResourceCondition.not:type_name -> sharedtypesv1.ResolvedResourceCondition
	97,  // 121: sharedtypesv1.ResolvedResourceCondition.string_value:type_name -> schema.MappingNode
	100, // 122: sharedtypesv1.ResourceCompletionDurations.config_complete_duration:type_name -> google.protobuf.DoubleValue
	100, // 123: sharedtypesv1.ResourceCompletionDurations.total_duration:type_name -> google.protobuf.DoubleValue
	86,  // 124: sharedtypesv1.ResourceMetadataState.annotations:type_name -> sharedtypesv1.ResourceMetadataState.AnnotationsEntry
	87,  // 125: sharedtypesv1.ResourceMetadataState.labels:type_name -> sharedtypesv1.ResourceMetadataState.LabelsEntry
	97,  // 126: sharedtypesv1.ResourceMetadataState.custom:type_name -> schema.MappingNode
	71,  // 127: sharedtypesv1.ResourceSpecDefinition.schema:type_name -> sharedtypesv1.ResourceDefinitionsSchema
	88,  // 128: sharedtypesv1.ResourceDefinitionsSchema.attributes:type_name -> sharedtypesv1.ResourceDefinitionsSchema.AttributesEntry
	71,  // 129: sharedtypesv1.ResourceDefinitionsSchema.items:type_name -> sharedtypesv1.ResourceDefinitionsSchema
	71,  // 130: sharedtypesv1.ResourceDefinitionsSchema.map_values:type_name -> sharedtypesv1.ResourceDefinitionsSchema
	71,  // 131: sharedtypesv1.ResourceDefinitionsSchema.one_of:type_name -> sharedtypesv1.ResourceDefinitionsSchema
	97,  // 132: sharedtypesv1.ResourceDefinitionsSchema.default_value:type_name -> schema.MappingNode
	97,  // 133: sharedtypesv1.ResourceDefinitionsSchema.examples:type_name -> schema.MappingNode
	76,  // 134: sharedtypesv1.CanLinkTo.resource_types:type_name -> sharedtypesv1.ResourceType
	4,   // 135: sharedtypesv1.Diagnostic.level:type_name -> sharedtypesv1.DiagnosticLevel
	75,  // 136: sharedtypesv1.Diagnostic.range:type_name -> sharedtypesv1.DiagnosticRange
	25,  // 137: sharedtypesv1.DiagnosticRange.start:type_name -> sharedtypesv1.SourceMeta
	25,  // 138: sharedtypesv1.DiagnosticRange.end:type_name -> sharedtypesv1.SourceMeta
	5,   // 139: sharedtypesv1.DiagnosticRange.column_accuracy:type_name -> sharedtypesv1.ColumnAccuracy
	89,  // 140: sharedtypesv1.ProviderContext.provider_config_variables:type_name -> sharedtypesv1.ProviderContext.ProviderConfigVariablesEntry
	90,  // 141: sharedtypesv1.ProviderContext.context_variables:type_name -> sharedtypesv1.ProviderContext.ContextVariablesEntry
	91,  // 142: sharedtypesv1.BlueprintParams.provider_config_variables:type_name -> sharedtypesv1.BlueprintParams.ProviderConfigVariablesEntry
	92,  // 143: sharedtypesv1.BlueprintParams.transformer_config_variables:type_name -> sharedtypesv1.BlueprintParams.TransformerConfigVariablesEntry
	93,  // 144: sharedtypesv1.BlueprintParams.context_variables:type_name -> sharedtypesv1.BlueprintParams.ContextVariablesEntry
	94,  // 145: sharedtypesv1.BlueprintParams.blueprint_variables:type_name -> sharedtypesv1.BlueprintParams.BlueprintVariablesEntry
	6,   // 146: sharedtypesv1.ErrorResponse.code:type_name -> sharedtypesv1.ErrorCode
	96,  // 147: sharedtypesv1.ErrorResponse.details:type_name -> google.protobuf.Any
	9,   // 148: sharedtypesv1.ConfigDefinition.FieldsEntry.value:type_name -> sharedtypesv1.ConfigFieldDefinition
	43,  // 149: sharedtypesv1.FunctionObjectValueTypeDefinition.AttributeTypesEntry.value:type_name -> sharedtypesv1.FunctionObjectAttributeType
	97,  // 150: sharedtypesv1.DeployResourceCompleteResponse.ComputedFieldValuesEntry.value:type_name -> schema.MappingNode
	62,  // 151: sharedtypesv1.Changes.NewOutboundLinksEntry.value:type_name -> sharedtypesv1.LinkChanges
	62,  // 152: sharedtypesv1.Changes.OutboundLinkChangesEntry.value:type_name -> sharedtypesv1.LinkChanges
	97,  // 153: sharedtypesv1.ResourceMetadataState.AnnotationsEntry.value:type_name -> schema.MappingNode
	71,  // 154: sharedtypesv1.ResourceDefinitionsSchema.AttributesEntry.value:type_name -> sharedtypesv1.ResourceDefinitionsSchema
	95,  // 155: sharedtypesv1.ProviderContext.ProviderConfigVariablesEntry.value:type_name -> schema.ScalarValue
	95,  // 156: sharedtypesv1.ProviderContext.ContextVariablesEntry.value:type_name -> schema.ScalarValue
	95,  // 157: sharedtypesv1.BlueprintParams.ProviderConfigVariablesEntry.value:type_name -> schema.ScalarValue
	95,  // 158: sharedtypesv1.BlueprintParams.TransformerConfigVariablesEntry.value:type_name -> schema.ScalarValue
	95,  // 159: sharedtypesv1.BlueprintParams.ContextVariablesEntry.value:type_name -> schema.ScalarValue
	95,  // 160: sharedtypesv1.BlueprintParams.BlueprintVariablesEntry.value:type_name -> schema.ScalarValue
	161, // [161:161] is the sub-list for method output_type
	161, // [161:161] is the sub-list for method input_type
	161, // [161:161] is the sub-list for extension type_name
	161, // [161:161] is the sub-list for extension extendee
	0,   // [0:161] is the sub-list for field type_name
}

func init() { file_plugin_framework_sharedtypesv1_types_proto_init() }
func file_plugin_framework_sharedtypesv1_types_proto_init() {
	if File_plugin_framework_sharedtypesv1_types_proto != nil {
		return
	}
	file_plugin_framework_sharedtypesv1_types_proto_msgTypes[0].OneofWrappers = []any{
		(*ConfigDefinitionResponse_ConfigDefinition)(nil),
		(*ConfigDefinitionResponse_ErrorResponse)(nil),
	}
	file_plugin_framework_sharedtypesv1_types_proto_msgTypes[3].OneofWrappers = []any{
		(*ExamplesResponse_Examples)(nil),
		(*ExamplesResponse_ErrorResponse)(nil),
	}
	file_plugin_framework_sharedtypesv1_types_proto_msgTypes[5].OneofWrappers = []any{
		(*TypeDescriptionResponse_Description)(nil),
		(*TypeDescriptionResponse_ErrorResponse)(nil),
	}
	file_plugin_framework_sharedtypesv1_types_proto_msgTypes[7].OneofWrappers = []any{
		(*ResourceTypeResponse_ResourceTypeInfo)(nil),
		(*ResourceTypeResponse_ErrorResponse)(nil),
	}
	file_plugin_framework_sharedtypesv1_types_proto_msgTypes[10].OneofWrappers = []any{
		(*FunctionDefinitionResponse_FunctionDefinition)(nil),
		(*FunctionDefinitionResponse_ErrorResponse)(nil),
	}
	file_plugin_framework_sharedtypesv1_types_proto_msgTypes[12].OneofWrappers = []any{
		(*FunctionCallResponse_FunctionResult)(nil),
		(*FunctionCallResponse_ErrorResponse)(nil),
	}
	file_plugin_framework_sharedtypesv1_types_proto_msgTypes[21].OneofWrappers = []any{
		(*FunctionParameter_ScalarParameter)(nil),
		(*FunctionParameter_ListParameter)(nil),
		(*FunctionParameter_MapParameter)(nil),
		(*FunctionParameter_ObjectParameter)(nil),
		(*FunctionParameter_FunctionTypeParameter)(nil),
		(*FunctionParameter_VariadicParameter)(nil),
		(*FunctionParameter_AnyParameter)(nil),
	}
	file_plugin_framework_sharedtypesv1_types_proto_msgTypes[29].OneofWrappers = []any{
		(*FunctionReturn_ScalarReturn)(nil),
		(*FunctionReturn_ListReturn)(nil),
		(*FunctionReturn_MapReturn)(nil),
		(*FunctionReturn_ObjectReturn)(nil),
		(*FunctionReturn_FunctionTypeReturn)(nil),
		(*FunctionReturn_AnyReturn)(nil),
	}
	file_plugin_framework_sharedtypesv1_types_proto_msgTypes[37].OneofWrappers = []any{
		(*FunctionValueTypeDefinition_ScalarValueType)(nil),
		(*FunctionValueTypeDefinition_ListValueType)(nil),
		(*FunctionValueTypeDefinition_MapValueType)(nil),
		(*FunctionValueTypeDefinition_ObjectValueType)(nil),
		(*FunctionValueTypeDefinition_FunctionValueType)(nil),
		(*FunctionValueTypeDefinition_AnyValueType)(nil),
	}
	file_plugin_framework_sharedtypesv1_types_proto_msgTypes[45].OneofWrappers = []any{
		(*DeployResourceResponse_CompleteResponse)(nil),
		(*DeployResourceResponse_ErrorResponse)(nil),
	}
	file_plugin_framework_sharedtypesv1_types_proto_msgTypes[48].OneofWrappers = []any{
		(*ResourceHasStabilisedResponse_ResourceStabilisationInfo)(nil),
		(*ResourceHasStabilisedResponse_ErrorResponse)(nil),
	}
	file_plugin_framework_sharedtypesv1_types_proto_msgTypes[50].OneofWrappers = []any{
		(*DestroyResourceResponse_Result)(nil),
		(*DestroyResourceResponse_ErrorResponse)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_plugin_framework_sharedtypesv1_types_proto_rawDesc), len(file_plugin_framework_sharedtypesv1_types_proto_rawDesc)),
			NumEnums:      7,
			NumMessages:   88,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_plugin_framework_sharedtypesv1_types_proto_goTypes,
		DependencyIndexes: file_plugin_framework_sharedtypesv1_types_proto_depIdxs,
		EnumInfos:         file_plugin_framework_sharedtypesv1_types_proto_enumTypes,
		MessageInfos:      file_plugin_framework_sharedtypesv1_types_proto_msgTypes,
	}.Build()
	File_plugin_framework_sharedtypesv1_types_proto = out.File
	file_plugin_framework_sharedtypesv1_types_proto_goTypes = nil
	file_plugin_framework_sharedtypesv1_types_proto_depIdxs = nil
}
