edition = "2023";

import "google/protobuf/wrappers.proto";
import "blueprint/schema.proto";
import "plugin-framework/sharedtypesv1/types.proto";

option features.field_presence = IMPLICIT;
option go_package = "github.com/two-hundred/celerity/libs/plugin-framework/providerserverv1";

package providerserverv1;

// Interface exported by a provider plugin server.
service Provider {

    //////////////////////////////////////////////////////////////////////
    // Provider methods
    //////////////////////////////////////////////////////////////////////

    // GetNamespace returns the namespace of the provider
    // used to route resource and data source types
    // to the correct provider.
    rpc GetNamespace(ProviderRequest) returns (NamespaceResponse) {}
    // ConfigDefinition retrieves a detailed definition of the configuration
    // that is required for the provider.
    rpc GetConfigDefinition(ProviderRequest) returns (sharedtypesv1.ConfigDefinitionResponse) {}
    // ListResourceTypes retrieves a list of all the resource types
    // that are implemented by the provider.
    // This is primarily used in tools and documentation to provide
    // a list of available resource types.
    rpc ListResourceTypes(ProviderRequest) returns (ResourceTypesResponse) {}
    // ListDataSourceTypes retrieves a list of all the data source types
    // that are implemented by the provider.
    // This is primarily used in tools and documentation to provide a list of
	// available data source types.
    rpc ListDataSourceTypes(ProviderRequest) returns (DataSourceTypesResponse) {}
	// ListCustomVariableTypes retrieves a list of all the custom variable types
    // that are implemented by the provider.
    // This is primarily used in tools and documentation to provide a list of
	// available custom variable types.
    rpc ListCustomVariableTypes(ProviderRequest) returns (CustomVariableTypesResponse) {}
    // ListFunctions retrieves a list of all the functions that are implemented by the provider.
    // This is primarily used to assign the correct provider to a function
	// as functions are globally named. When multiple providers provide the same function,
	// an error is reported during initialisation.
    rpc ListFunctions(ProviderRequest) returns (FunctionListResponse) {}
	// GetRetryPolicy retrieves the retry policy that should be used for the provider
	// for resource, link and data source operations.
	// The retry policy will be applied for resources when deploying, updating and removing
	// resources, for links when creating and removing links and for data sources when
	// querying the upstream data source.
	// The retry behaviour only kicks in when the provider resource, data source or link
	// implementation returns an error response with the `TRANSIENT` error code,
	// in which case the retry policy will be applied.
	// A retry policy is optional and if not provided, a default retry policy
	// provided by the host tool will be used.
    rpc GetRetryPolicy(ProviderRequest) returns (RetryPolicyResponse) {}

    //////////////////////////////////////////////////////////////////////
    // Resource methods
    //////////////////////////////////////////////////////////////////////

    // CustomValidateResource deals with carrying out custom validation for
    // a resource that goes beyond the built-in resource spec validation.
    rpc CustomValidateResource(CustomValidateResourceRequest) returns (CustomValidateResourceResponse) {}
    // GetResourceSpecDefinition retrieves the spec definition for a resource,
    // this is used as the first line of validation for a resource in a blueprint
    // and is also useful for validating references to a resource instance
    // in a blueprint and for providing definitions for docs and tooling.
    // The spec defines both the schema for the resource spec fields that can be defined
    // by users in a blueprint and computed fields that are derived from the deployed
    // resource in the external provider (e.g. Lambda ARN in AWS).
    rpc GetResourceSpecDefinition(ResourceRequest) returns (ResourceSpecDefinitionResponse) {}
    // CanResourceLinkTo produces a list of all the resource types
    // that the given resource type can link to.
    rpc CanResourceLinkTo(ResourceRequest) returns (CanResourceLinkToResponse) {}
    // GetResourceStabilisedDeps retrieves a list of resource types
    // that must be stabilised before the current resource can be deployed when
    // another resource of one of the specified types is a dependency of
    // the current resource in a blueprint.
    rpc GetResourceStabilisedDeps(ResourceRequest) returns (ResourceStabilisedDepsResponse) {}
    // IsResourceCommonTerminal specifies whether the given resource type is expected
    // to have a common use-case as a terminal resource that does not link out to other resources.
    // This is useful for providing warnings to users about their blueprints
    // without overloading them with warnings for all resources that don't have any outbound
    // links that could have.
    rpc IsResourceCommonTerminal(ResourceRequest) returns (IsResourceCommonTerminalResponse) {}
    // GetResourceType retrieves the type of a resource in a blueprint spec
    // that can be used for documentation and tooling.
    // This allows callers to get a human-readable label for the already known
    // resource type.
    rpc GetResourceType(ResourceRequest) returns (sharedtypesv1.ResourceTypeResponse) {}
    // GetResourceTypeDescription retrieves the description for a resource type
    // in a blueprint spec that can be used for documentation and tooling.
    // Markdown and plain text formats are supported.
    rpc GetResourceTypeDescription(ResourceRequest) returns (sharedtypesv1.TypeDescriptionResponse) {}
    // GetResourceExamples deals with retrieving a list of examples for a resource type
    // in a blueprint spec that can be used for documentation and tooling.
    // Markdown and plain text formats are supported.
    rpc GetResourceExamples(ResourceRequest) returns (sharedtypesv1.ExamplesResponse) {}
    // DeployResource deals with deploying a resource with the upstream resource provider.
    // THe behaviour of deploy is to create or update the resource configuration and return
    // the resource spec state once the configuration has been created or updated.
    // DeployResource should not wait for the resource to be in a stable state before returning,
    // the framework will call the HasStabilised method periodically when waiting for a resource
    // to stabilise.
	// Parameters are passed into DeployResource for extra context, blueprint variables will have already
	// been substituted at this stage and must be used instead of the passed in params argument
	// to ensure consistency between the staged changes that are reviewed and the deployment itself.
    rpc DeployResource(sharedtypesv1.DeployResourceRequest) returns (sharedtypesv1.DeployResourceResponse) {}
	// ResourceHasStabilised deals with checking if a resource has stabilised after being deployed.
	// This is important for resources that require a stable state before other resources can be deployed.
	// This is only used when creating or updating a resource, not when destroying a resource.
    rpc ResourceHasStabilised(sharedtypesv1.ResourceHasStabilisedRequest) returns (sharedtypesv1.ResourceHasStabilisedResponse) {}
    // GetResourceExternalState deals with getting the state of the resource from the resource provider.
    // (e.g. AWS or Google Cloud)
    rpc GetResourceExternalState(GetResourceExternalStateRequest) returns (GetResourceExternalStateResponse) {}
	// DestroyResource deals with destroying a resource instance if its current
	// state is successfully deployed or cleaning up a corrupt or partially deployed
	// resource instance.
	// The resource instance should be completely removed from the external provider
	// as a result of this operation; this is essential for when
	// another element to be removed from a blueprint
	// requires a resource to be completely removed from the external provider.
	// There is no "config complete" equivalent for destroying a resource and
	// "HasStabilised" is designed to be used for resources being created or
	// updated.
    rpc DestroyResource(sharedtypesv1.DestroyResourceRequest) returns (sharedtypesv1.DestroyResourceResponse) {}

    //////////////////////////////////////////////////////////////////////
    // Link methods
    //////////////////////////////////////////////////////////////////////

    // StageLinkChanges details the changes that will be made to a link between
    // two resources in a blueprint deployment.
    // Unlike resources, links do not map to a specification for a single deployable unit,
    // so link implementations must specify the changes that will be made across multiple resources.
    rpc StageLinkChanges(StageLinkChangesRequest) returns (StageLinkChangesResponse) {}
	// UpdateLinkResourceA deals with applying the changes to the first of the two linked resources
	// for the creation or removal of a link between two resources.
	// The value of the `link_data` field returned in the response will be combined
	// with the link data output from updating resource B and intermediary resources
	// to form the final link data that will be persisted in the state of the blueprint instance.
	// Parameters are passed into UpdateLinkResourceA for extra context, blueprint variables will have already
	// been substituted at this stage and must be used instead of the passed in params argument
	// to ensure consistency between the staged changes that are reviewed and the deployment itself.
    rpc UpdateLinkResourceA(UpdateLinkResourceRequest) returns (UpdateLinkResourceResponse) {}
	// UpdateLinkResourceB deals with applying the changes to the second of the two linked resources
	// for the creation or removal of a link between two resources.
	// The value of the `link_data` field returned in the output will be combined
	// with the link data output from updating resource A and intermediary resources
	// to form the final link data that will be persisted in the state of the blueprint instance.
	// Parameters are passed into UpdateResourceB for extra context, blueprint variables will have already
	// been substituted at this stage and must be used instead of the passed in params argument
	// to ensure consistency between the staged changes that are reviewed and the deployment itself.
    rpc UpdateLinkResourceB(UpdateLinkResourceRequest) returns (UpdateLinkResourceResponse) {}
    // UpdateLinkIntermediaryResources deals with creating, updating or deleting intermediary resources
	// that are required for the link between two resources.
	// This is called for both the creation and removal of a link between two resources.
	// The value of the `link_data` field returned in the output will be combined
	// with the link data output from updating resource A and B
	// to form the final link data that will be persisted in the state of the blueprint instance.
	// Parameters are passed into UpdateIntermediaryResources for extra context, blueprint variables will have already
	// been substituted at this stage and must be used instead of the passed in params argument
	// to ensure consistency between the staged changes that are reviewed and the deployment itself.
    rpc UpdateLinkIntermediaryResources(UpdateLinkIntermediaryResourcesRequest) returns (UpdateLinkIntermediaryResourcesResponse) {}
	// GetLinkPriorityResource retrieves the resource in the relationship
	// that must be deployed first. This will be empty for links where one resource does not
	// need to be deployed before the other.
    rpc GetLinkPriorityResource(LinkRequest) returns (LinkPriorityResourceResponse) {}
	// GetLinkTypeDescription deals with retrieving the description for a link type in a blueprint spec
	// that can be used for documentation and tooling.
	// Markdown and plain text formats are supported.
    rpc GetLinkTypeDescription(LinkRequest) returns (sharedtypesv1.TypeDescriptionResponse) {}
	// GetLinkAnnotationDefinitions retrieves the annotation definitions for the link type.
	// Annotations provide a way to fine tune the behaviour of a link in a blueprint spec
	// in the linked resource metadata sections.
    rpc GetLinkAnnotationDefinitions(LinkRequest) returns (LinkAnnotationDefinitionsResponse) {}
	// GetKind tells us whether the link is a "hard" or "soft" link.
	// A hard link is where the priority resource type must be created first.
	// A soft link is where it does not matter which resource type in the relationship
	// is created first.
    rpc GetLinkKind(LinkRequest) returns (LinkKindResponse) {}

    //////////////////////////////////////////////////////////////////////
    // Data source methods
    //////////////////////////////////////////////////////////////////////

    // GetDataSourceType retrieves the type of a data source in a blueprint spec
    // that can be used for documentation and tooling.
    // This allows callers to get a human-readable label for the already known
    // data source type.
    rpc GetDataSourceType(DataSourceRequest) returns (DataSourceTypeResponse) {}
    // GetDataSourceTypeDescription deals with retrieving the description for a data source type in a blueprint spec
	// that can be used for documentation and tooling.
	// Markdown and plain text formats are supported.
    rpc GetDataSourceTypeDescription(DataSourceRequest) returns (sharedtypesv1.TypeDescriptionResponse) {}
    // GetDataSourceExamples deals with retrieving a list of examples for a data source type
    // in a blueprint spec that can be used for documentation and tooling.
    // Markdown and plain text formats are supported.
    rpc GetDataSourceExamples(DataSourceRequest) returns (sharedtypesv1.ExamplesResponse) {}
	// CustomValidateDataSource provides support for custom validation that goes beyond
	// the spec schema validation provided by the data source's spec definition.
    rpc CustomValidateDataSource(CustomValidateDataSourceRequest) returns (CustomValidateDataSourceResponse) {}
	// GetDataSourceSpecDefinition retrieves the spec definition for a data source.
	// This definition specifies all the fields that can be exported from a data source
	// to be used in a blueprint.
	// This is the first line of validation for a data source in a blueprint and is also
	// useful for validating references to a data source instance
	// in a blueprint and for providing definitions for docs and tooling.
    rpc GetDataSourceSpecDefinition(DataSourceRequest) returns (DataSourceSpecDefinitionResponse) {}
	// GetDataSourceFilterFields provides the fields that can be used in a filter when querying
    // a data source.
    rpc GetDataSourceFilterFields(DataSourceRequest) returns (DataSourceFilterFieldsResponse) {}
    // FetchDataSource deals with loading the data from the upstream data source
	// and returning the exported fields defined in the spec.
    rpc FetchDataSource(FetchDataSourceRequest) returns (FetchDataSourceResponse) {}

    //////////////////////////////////////////////////////////////////////
    // Custom variable type methods
    //////////////////////////////////////////////////////////////////////

    // GetCustomVariableType retrieves the type of a custom variable type in a blueprint spec
    // that can be used for documentation and tooling.
    // This allows callers to get a human-readable label for the already known
    // custom variable type.
    rpc GetCustomVariableType(CustomVariableTypeRequest) returns (CustomVariableTypeResponse) {}
	// GetCustomVariableTypeDescription deals with retrieving the description
    // for a custom variable type in a blueprint spec that can be used for
    // documentation and tooling.
    // Markdown and plain text formats are supported.
    rpc GetCustomVariableTypeDescription(CustomVariableTypeRequest) returns (sharedtypesv1.TypeDescriptionResponse) {}
    // GetCustomVariableTypeOptions loads a set of fixed possible values available
    // for the custom variable type.
    // In the returned options, each one is keyed by a label, essentially
    // behaving as a runtime enum.
    rpc GetCustomVariableTypeOptions(CustomVariableTypeRequest) returns (CustomVariableTypeOptionsResponse) {}
    // GetCustomVariableTypeExamples deals with retrieving a list of examples for a custom
    // variable type in a blueprint spec that can be used for documentation and tooling.
    // Markdown and plain text formats are supported.
    rpc GetCustomVariableTypeExamples(CustomVariableTypeRequest) returns (sharedtypesv1.ExamplesResponse) {}

    //////////////////////////////////////////////////////////////////////
    // Function methods
    //////////////////////////////////////////////////////////////////////

	// GetFunctionDefinition returns the definition of the function
	// that includes allowed parameters and return types.
	// This would usually be called during initialisation of a provider
	// to pre-fetch function definitions and cache them to validate
	// the returned values from plugin function calls.
    rpc GetFunctionDefinition(sharedtypesv1.FunctionDefinitionRequest) returns (sharedtypesv1.FunctionDefinitionResponse) {}
    // CallFunction is called when a function is used in a blueprint.
	rpc CallFunction(sharedtypesv1.FunctionCallRequest) returns (sharedtypesv1.FunctionCallResponse) {}
}

// NamespaceResponse contains the response
// for requesting the namespace of the provider.
message NamespaceResponse {
    oneof response {
        Namespace namespace = 1;
        sharedtypesv1.ErrorResponse error_response = 2;
    }
}

// Namespace of a provider used to route resource
// and data source types to the correct provider.
message Namespace {
    string namespace = 1;
}

// ResourceTypesResponse contains the response
// for requesting a list of all the resource types
// that are implemented by the provider.
message ResourceTypesResponse {
    oneof response {
        ResourceTypes resource_types = 1;
        sharedtypesv1.ErrorResponse error_response = 2;
    }
}

// ResourceTypes holds a list of resource types
// that are implemented by the provider.
message ResourceTypes {
    repeated sharedtypesv1.ResourceType resource_types = 1;
}

// DataSourceTypesResponse contains the response
// for requesting a list of all the data source types
// that are implemented by the provider.
message DataSourceTypesResponse {
    oneof response {
        DataSourceTypes data_source_types = 1;
        sharedtypesv1.ErrorResponse error_response = 2;
    }
}

// DataSourceTypes holds a list of data source types
// that are implemented by the provider.
message DataSourceTypes {
    repeated DataSourceType data_source_types = 1;
}

// CustomVariableTypesResponse contains the response
// for requesting a list of all the custom variable types
// that are implemented by the provider.
message CustomVariableTypesResponse {
    oneof response {
        CustomVariableTypes custom_variable_types = 1;
        sharedtypesv1.ErrorResponse error_response = 2;
    }
}

// CustomVariableTypes holds a list of custom variable types
// that are implemented by the provider.
message CustomVariableTypes {
    repeated CustomVariableType custom_variable_types = 1;
}

// FunctionListResponse contains the response
// for requesting a list of all the functions that are implemented by the provider.
message FunctionListResponse {
    oneof response {
        FunctionList function_list = 1;
        sharedtypesv1.ErrorResponse error_response = 2;
    }
}

// FunctionList holds a list of functions that are implemented by the provider.
message FunctionList {
    repeated string functions = 1;
}

// RetryPolicyResponse contains the response
// for requesting the retry policy that should be used for the provider.
message RetryPolicyResponse {
    oneof response {
        RetryPolicy retry_policy = 1;
        sharedtypesv1.ErrorResponse error_response = 2;
    }
}

// RetryPolicy defines the retry policy that should be used for the provider
// with resource, link and data source operations.
message RetryPolicy {
    // The maximum number of retries that should be attempted
    // for a resource, link or data source operation.
	// If this is 0, no retries should be attempted. 
    int32 max_retries = 1;
    // The delay in seconds that should be used before the first retry
    // attempt.
    // Fractional seconds are supported.
    double first_retry_delay = 2;
    // The maximum internval in seconds to wait between retries.
    // If -1 is provided, no maximum delay is enforced.
    // Fractional seconds are supported.
    double max_delay = 3;
    // The factor that should be used to calculate the backoff time
    // between retries.
	// This AWS blog post from 2015 provides a good insight into how exponential backoff works:
	// https://aws.amazon.com/blogs/architecture/exponential-backoff-and-jitter/
    double backoff_factor = 4;
    // Determines whether to apply jitter to the retry interval.
	// This AWS blog post from 2015 provides a good insight into how jitter works:
	// https://aws.amazon.com/blogs/architecture/exponential-backoff-and-jitter/
    bool jitter = 5;
}

// CustomValidateResourceRequest is the request
// for custom resource validation.
message CustomValidateResourceRequest {
    // The type of resource being validate.
    sharedtypesv1.ResourceType resource_type = 1;
    // The ID of the host making the request
    // to the provider.
    string host_id = 2;
    // The resource schema as parsed within a blueprint.
    schema.Resource schema_resource = 3;
    // Runtime configuration for the current environment
    // specific to the current provider.
    sharedtypesv1.ProviderContext context = 4;
}

// CustomValidateResourceResponse is the response
// for custom resource validation, can be a validation
// complete response or an error response.
message CustomValidateResourceResponse {
    oneof response {
        CustomValidateResourceCompleteResponse complete_response = 1;
        sharedtypesv1.ErrorResponse error_response = 2;
    }
}

// CustomValidateResourceCompleteResponse is the response
// returned by the provider plugin when custom resource
// validation has been completed.
message CustomValidateResourceCompleteResponse {
    repeated sharedtypesv1.Diagnostic diagnostics = 1;
}

// ResourceSpecDefinitionResponse is the response
// containing the spec definition for a given resource type.
message ResourceSpecDefinitionResponse {
    oneof response {
        sharedtypesv1.ResourceSpecDefinition spec_definition = 1;
        sharedtypesv1.ErrorResponse error_response = 2;
    }
}

// CanResourceLinkToResponse is the response
// for a request to get all the resource types
// that a given resource type can link to.
message CanResourceLinkToResponse {
    oneof response {
        sharedtypesv1.CanLinkTo resource_types = 1;
        sharedtypesv1.ErrorResponse error_response = 2;
    }
}

// ResourceStabilisedDepsResponse is the response
// containing the list of resource types that must be
// stabilised before the current resource can be deployed.
message ResourceStabilisedDepsResponse {
    oneof response {
        StabilisedDependencies stabilised_dependencies = 1;
        sharedtypesv1.ErrorResponse error_response = 2;
    }
}

// StabilisedDependencies holds a list of resource types
// that must be stabilised before the current resource can be deployed.
message StabilisedDependencies {
    repeated sharedtypesv1.ResourceType resource_types = 1;
}

// IsResourceCommonTerminalResponse is the response
// for a request to check if a given resource type is
// expected to have a common use-case as a terminal resource.
message IsResourceCommonTerminalResponse {
    oneof response {
        sharedtypesv1.ResourceCommonTerminalInfo data = 1;
        sharedtypesv1.ErrorResponse error_response = 2;
    }
}

// GetResourceExternalStateRequest is the request that contains
// the input data needed to get the live state of a resource from the
// upstream provider.
message GetResourceExternalStateRequest {
    sharedtypesv1.ResourceType resource_type = 1;
    // The ID of the host making the request
    // to the provider.
    string host_id = 2;
    string instance_id = 3;
    string resource_id = 4;
    schema.MappingNode current_resource_spec = 5;
    sharedtypesv1.ResourceMetadataState current_resource_metadata = 6;
    sharedtypesv1.ProviderContext context = 7;
}

// GetResourceExternalStateResponse is the response
// containing the live state of a resource derived from
// the upstream provider.
message GetResourceExternalStateResponse {
    oneof response {
        schema.MappingNode resource_spec_state = 1;
        sharedtypesv1.ErrorResponse error_response = 2;
    }
}

// ProviderRequest is the request input
// for general provider requests that only require
// a host ID.
message ProviderRequest {
    // The ID of the host making the request
    // to the provider.
    string host_id = 1;
}

// ResourceRequest is the request input
// for general resource type requests that only require
// a resource type and the current context.
message ResourceRequest {
    // The type of resource to carry out an action on or retrieve
    // some information about.
    sharedtypesv1.ResourceType resource_type = 1;
    // The ID of the host making the request
    // to the provider.
    string host_id = 2;
    // Runtime configuration for the current environment
    // specific to the current provider.
    sharedtypesv1.ProviderContext context = 3;
}

// DataSourceRequest is the request input
// for general data source type requests that only require
// a data source type and the current context.
message DataSourceRequest {
    // The type of data source to carry out an action on or retrieve
    // some information about.
    DataSourceType data_source_type = 1;
    // The ID of the host making the request
    // to the provider.
    string host_id = 2;
    // Runtime configuration for the current environment
    // specific to the current provider.
    sharedtypesv1.ProviderContext context = 3;
}

// CustomVariableTypeRequest is the request input
// for custom variable type requests that only require
// a custom variable type and the current context.
message CustomVariableTypeRequest {
    // The type of custom variable type to carry out an action
    // on or retrieve some information about.
    CustomVariableType custom_variable_type = 1;
    // The ID of the host making the request
    // to the provider.
    string host_id = 2;
    // Runtime configuration for the current environment
    // specific to the current provider.
    sharedtypesv1.ProviderContext context = 3;
}

// StageLinkChangesRequest provides the input data needed to stage
// changes for a link between two resources.
message StageLinkChangesRequest {
    LinkType link_type = 1;
    // The ID of the host making the request
    // to the provider.
    string host_id = 2;
    sharedtypesv1.Changes resource_a_changes = 3;
    sharedtypesv1.Changes resource_b_changes = 4;
    LinkState current_link_state = 5;
    LinkContext context = 6;
}

// StageLinkChangesResponse is the response
// containing the result of staging changes for a link.
message StageLinkChangesResponse {
    oneof response {
        StageLinkChangesCompleteResponse complete_response = 1;
        sharedtypesv1.ErrorResponse error_response = 2;
    }
}

// StageLinkChangesCompleteResponse is the response
// returned by the provider plugin when changes for a link have been staged.
message StageLinkChangesCompleteResponse {
    sharedtypesv1.LinkChanges changes = 1;
}


// UpdateLinkResourceRequest provides the input data needed to update
// a link between two resources.
message UpdateLinkResourceRequest {
    LinkType link_type = 1;
    // The ID of the host making the request
    // to the provider.
    string host_id = 2;
    sharedtypesv1.LinkChanges changes = 3;
    sharedtypesv1.ResourceInfo resource_info = 4;
    sharedtypesv1.ResourceInfo other_resource_info = 5;
    LinkUpdateType update_type = 6;
    LinkContext context = 7;
}

// UpdateLinkResourceResponse is the response
// containing the result of updating a resource as a part
// of a link.
message UpdateLinkResourceResponse {
    oneof response {
        UpdateLinkResourceCompleteResponse complete_response = 1;
        sharedtypesv1.ErrorResponse error_response = 2;
    }
}

// UpdateLinkResourceCompleteResponse contains the result of updating
// a resource as a part of a link.
// The returned link data will be merged with the results from other
// link component updates to form the final link data that will be persisted
// in the blueprint instance state.
message UpdateLinkResourceCompleteResponse {
    schema.MappingNode link_data = 1;
}

// UpdateLinkIntermediaryResourcesRequest provides the input data needed
// to update intermediary resources for a link between two resources.
message UpdateLinkIntermediaryResourcesRequest {
    LinkType link_type = 1;
    // The ID of the host making the request
    // to the provider.
    string host_id = 2;
    sharedtypesv1.ResourceInfo resource_a_info = 3;
    sharedtypesv1.ResourceInfo resource_b_info = 4;
    sharedtypesv1.LinkChanges changes = 5;
    LinkUpdateType update_type = 6;
    LinkContext context = 7;
}

// UpdateLinkIntermediaryResourcesResponse is the response
// containing the result of updating intermediary resources for a link.
message UpdateLinkIntermediaryResourcesResponse {
    oneof response {
        UpdateLinkIntermediaryResourcesCompleteResponse complete_response = 1;
        sharedtypesv1.ErrorResponse error_response = 2;
    }
}

// UpdateLinkIntermediaryResourcesCompleteResponse contains the result
// of updating intermediary resources for a link.
message UpdateLinkIntermediaryResourcesCompleteResponse {
    repeated LinkIntermediaryResourceState intermediary_resource_states = 1;
    schema.MappingNode link_data = 2;
}

// LinkPriorityResourceResponse is the response
// containing the priority resource for a link.
message LinkPriorityResourceResponse {
    oneof response {
        LinkPriorityResourceInfo priority_info = 1;
        sharedtypesv1.ErrorResponse error_response = 2;
    }
}

// CustomValidateDataSourceRequest is the request input
// for custom data source validation requests.
message CustomValidateDataSourceRequest {
    DataSourceType data_source_type = 1;
    // The ID of the host making the request
    // to the provider.
    string host_id = 2;
    schema.DataSource schema_data_source = 3;
    sharedtypesv1.ProviderContext context = 4;
}

// CustomValidateDataSourceResponse is the response
// containing the result of custom data source validation.
message CustomValidateDataSourceResponse {
    oneof response {
        CustomValidateDataSourceCompleteResponse complete_response = 1;
        sharedtypesv1.ErrorResponse error_response = 2;
    }
}

// CustomValidateDataSourceCompleteResponse contains the result
// of custom data source validation.
message CustomValidateDataSourceCompleteResponse {
    repeated sharedtypesv1.Diagnostic diagnostics = 1;
}

// DataSourceSpecDefinitionResponse is the response
// containing the definition for a data source spec.
message DataSourceSpecDefinitionResponse {
    oneof response {
        DataSourceSpecDefinition spec_definition = 1;
        sharedtypesv1.ErrorResponse error_response = 2;
    }
}

// DataSourceFilterFieldsResponse is the response
// containing the fields that can be filtered on for a data source.
message DataSourceFilterFieldsResponse {
    oneof response {
        DataSourceFilterFields filter_fields = 1;
        sharedtypesv1.ErrorResponse error_response = 2;
    }
}

// FetchDataSourceRequest is the request input for fetching
// data from an upstream data source.
message FetchDataSourceRequest {
    // A version of a data source for which all ${..}
	// substitutions have been applied.
    ResolvedDataSource data_source_with_resolved_subs = 1;
    // The ID of the host making the request
    // to the provider.
    string host_id = 2;
    sharedtypesv1.ProviderContext context = 3;
}

// FetchDataSourceResponse is the response
// containing the result of fetching data from an upstream data source.
message FetchDataSourceResponse {
    oneof response {
        FetchDataSourceCompleteResponse complete_response = 1;
        sharedtypesv1.ErrorResponse error_response = 2;
    }
}

// CustomVariableTypeOptionsResponse is the response
// containing the options for a custom variable type.
message CustomVariableTypeOptionsResponse {
    oneof response {
        CustomVariableTypeOptions options = 1;
        sharedtypesv1.ErrorResponse error_response = 2;
    }
}

// CustomVariableTypeOptions provides options for a custom variable type.
message CustomVariableTypeOptions {
    map<string, CustomVariableTypeOption> options = 1;
}

// CustomVariableTypeOption is an option for a custom variable type
// containing a value, label and description.
message CustomVariableTypeOption {
    // The value of the custom variable type option.
    schema.ScalarValue value = 1;
    // The human-readable label for the custom variable type option.
    string label = 2;
    // The human-readable description for the custom variable type option.
    string description = 3;
    // The human-readable description for the custom variable type option
    // that is formatted with markdown.
    string formatted_description = 4;
}

// CustomVariableTypeResponse is the response
// containing the type information for a custom variable type.
message CustomVariableTypeResponse {
    oneof response {
        CustomVariableTypeInfo custom_var_type_info = 1;
        sharedtypesv1.ErrorResponse error_response = 2;
    }
}

// CustomVariableTypeInfo provides information about a custom variable type
// that can be used for documentation and tooling.
message CustomVariableTypeInfo {
    // The type of the data source.
    CustomVariableType type = 1;
    // The human-readable label for the data source type.
    string label = 2;
}

// FetchDataSourceCompleteResponse is the response
// returned by the provider plugin when data has been fetched from an upstream data source.
// This should contain the resolved data source fields that have been fetched.
message FetchDataSourceCompleteResponse {
    map<string, schema.MappingNode> data = 1;
}

// ResolvedDataSource is a data source for which all ${..}
// substitutions have been applied.
message ResolvedDataSource {
    DataSourceType type = 1;
    ResolvedDataSourceMetadata data_source_metadata = 2;
    ResolvedDataSourceFilter filter = 3;
    map<string, ResolvedDataSourceFieldExport> exports = 4;
    schema.MappingNode description = 5;
}

// ResolvedDataSourceMetadata provides metadata for which all ${..}
// substitutions have been applied.
message ResolvedDataSourceMetadata {
    schema.MappingNode display_name = 1;
    schema.MappingNode annotations = 2;
    schema.MappingNode custom = 3;
}

// ResolvedDataSourceFilter provides a filter for which all ${..}
// substitutions have been applied.
message ResolvedDataSourceFilter {
    repeated schema.MappingNode values = 1;
}

// DataSourceFilterFields provides the fields that can be filtered on
// for a data source.
message DataSourceFilterFields {
    repeated string fields = 1;
}

// ResolvedDataSourceFieldExport provides a field export for which all ${..}
// substitutions have been applied.
message ResolvedDataSourceFieldExport {
    DataSourceType type = 1;
    schema.ScalarValue alias_for = 2;
    schema.MappingNode description = 3;
}

// DataSourceSpecDefinition provides the definition for a data source spec
// that can be used for validation, docs and tooling.
message DataSourceSpecDefinition {
	// Holds a mapping of schemas for
	// fields that can be exported from a data source.
	// Unlike resource specs, data source specs are restricted
	// in that they only support primitives or arrays of primitives.
    map<string, DataSourceSpecSchema> fields = 1;
}

// DataSourceSpecSchema provides a schema that can be used
// to validate a data source spec.
message DataSourceSpecSchema {
    // The type of the data source spec.
    DataSourceSpecSchemaType type = 1;
    // The human-readable label for the data source spec.
    string label = 2;
    // A human-readable description for the data source spec
    // without any formatting.
    string description = 3;
    // A human-readable description for the data source spec
    // that is formatted with markdown.
    string formatted_description = 4;
    // Holds the schema for the items in a data source spec schema array.
    // Items are expected to be of a primitive type, if an array type is provided here,
    // an error will occur.
    DataSourceSpecSchema items = 5;
    // Specifices whether the data source spec schema can be null.
    // This essentially means that the data source implementation can provide
    // a null value for the field.
    bool nullable = 6;
}

// DataSourceSpecSchemaType represents the type of a data source spec schema.
// This will be translated to a string enum representation in the deploy engine.
enum DataSourceSpecSchemaType {
    DATA_SOURCE_SPEC_STRING = 0;
    DATA_SOURCE_SPEC_INTEGER = 1;
    DATA_SOURCE_SPEC_FLOAT = 2;
    DATA_SOURCE_SPEC_BOOLEAN = 3;
    DATA_SOURCE_SPEC_ARRAY = 4;
}

// DataSourceTypeResponse is the response
// containing the type information for a data source.
message DataSourceTypeResponse {
    oneof response {
        DataSourceTypeInfo data_source_type_info = 1;
        sharedtypesv1.ErrorResponse error_response = 2;
    }
}

// DataSourceTypeInfo provides information about a data source type
// that can be used for documentation and tooling.
message DataSourceTypeInfo {
    // The type of the data source.
    DataSourceType type = 1;
    // The human-readable label for the data source type.
    string label = 2;
}

// LinkPriorityResourceInfo contains information about the priority resource
// for a link.
message LinkPriorityResourceInfo {
    LinkPriorityResource priority_resource = 1;
    sharedtypesv1.ResourceType priority_resource_type = 2;
}

// LinkPriorityResource holds the type of resource that must be deployed
// first in a link relationship.
enum LinkPriorityResource {
    // This is used when there is no priority resource
    // in the link relationship.
    LINK_PRIORITY_RESOURCE_NONE = 0;
    // This is used when the priority resource is the first
    // resource in the link relationship.
    LINK_PRIORITY_RESOURCE_A = 1;
    // This is used when the priority resource is the second
    // resource in the link relationship.
    LINK_PRIORITY_RESOURCE_B = 2;
}

// LinkKindResponse is the response
// containing the kind of a requested link type.
message LinkKindResponse {
    oneof response {
        LinkKindInfo link_kind_info = 1;
        sharedtypesv1.ErrorResponse error_response = 2;
    }
}

// LinkKindInfo contains the kind of a requested link type.
message LinkKindInfo {
    LinkKind kind = 1;
}

// LinkKind represents the kind of a requested link type,
// a link type can either be a hard or soft link.
// This is translated to a string enum representation in the deploy
// engine.
enum LinkKind {
    LINK_KIND_HARD = 0;
    LINK_KIND_SOFT = 1;
}

// LinkUpdateType represents the type of update that should be carried out
// on a link between two resources.
enum LinkUpdateType {
    // The type for when a link is being created.
    LINK_UPDATE_TYPE_CREATE = 0;
    // The type for when a link is being destroyed.
    LINK_UPDATE_TYPE_DESTROY = 1;
    // The type for when a link is being updated.
    LINK_UPDATE_TYPE_UPDATE = 2;
}

// LinkState provides a way to store some state for links
// between resources.
// This is useful for holding state about intermediary resources
// managed by a provider's implementation of a link in addition
// to tracking the deployment status for a link. 
message LinkState {
    // A globally unique identifier for the link.
    string id = 1;
    // The logical name of the link in the blueprint.
	// This is a combination of the logical names of the 2 resources that are linked.
	// For example, if a link is between a VPC and a subnet,
	// the link name would be "vpc::subnet".
    string name = 2;
    string instance_id = 3;
    LinkStatus status = 4;
    PreciseLinkStatus precise_status = 5;
    // The unix timestamp for when the link deployment status was last updated.
    int64 last_status_update_timestamp = 6;
    // The unix timestamp for when the link was last deployed.
    int64 last_deployed_timestamp = 7;
    // The unix timestamp for when an attempt was last made to deploy the link.
    int64 last_deploy_attempt_timestamp = 8;
    // The state of intermediary resources that are created
    // by a provider's implementation of a link.
    repeated LinkIntermediaryResourceState intermediary_resource_states = 9;
    // A mapping that holds the structure of the "raw" link data
    // to hold information about a link that is not
    // stored directly in the resources that are linked and is not stored
    // in intermediary resources.
    // This should hold information that may incolde values that are populated
    // in one or both of the resources in the link relationship.
    map<string, schema.MappingNode> data = 10;
    // A list of the latest reasons for failures in deploying a link,
    // this only ever holds the results of the latest deployment attempt.
    repeated string failure_reasons = 11;
    // Holds the duration information for the latest deployment of the link.
    LinkCompletionDurations durations = 12;
}

// LinkIntermediaryResourceState holds information about the state
// of an intermediary resources created for a link.
message LinkIntermediaryResourceState {
    // A globally unique identifier for the resource.
    string resource_id = 1;
    string instance_id = 2;
    sharedtypesv1.ResourceStatus status = 3;
    sharedtypesv1.PreciseResourceStatus precise_status = 4;
    // The unix timestamp when the resource was last deployed.
    int64 last_deployed_timestamp = 5;
    // The unix timestamp when an attempt was last made to deploy the resource.
    int64 last_deploy_attempt_timestamp = 6;
    // The resolved resource spec for the currently deployed version
    // of the resource along with computed fields derived from the deployed resource
    // in the provider.
    schema.MappingNode resource_spec_data = 7;
}

// LinkCompletionDurations holds duration information
// for the deployment of a link change.
message LinkCompletionDurations {
    // The duration information for the update of resource A in the link.
    // This will only be present if the link has reached resource A updated status.
    LinkComponentCompletionDurations resource_a_update = 1;
    // The duration information for the update of resource B in the link.
    // This will only be present if the link has reached resource B updated status.
    LinkComponentCompletionDurations resource_b_update = 2;
    // The druation information for the update, creation or removal of intermediary
    // resources in the link.
    // This will only be present if the link has reached intermediary resources updated status.
    LinkComponentCompletionDurations intermediary_resources = 3;
    // The duration in milliseconds for the link change to reach the final status.
    google.protobuf.DoubleValue total_duration = 4;
}

// LinkComponentCompletionDurations holds duration information for
// a single component of a link change.
message LinkComponentCompletionDurations {
    // The duration in milliseconds for the link component change to reach the final status.
    google.protobuf.DoubleValue total_duration = 1;
    // Holds a list of durations in milliseconds for each attempt to deploy the link
    // component.
    // Attempt durations are in order as per the "attempt" field in a status update message.
    repeated double attempt_durations = 2;
}

// LinkRequest is the request input for general link type requests
// that only require a link type and the current context.
message LinkRequest {
    // The type of link to carry out an action on or retrieve
    // some information about.
    // This should be in the form of `{resourceTypeA}::{resourceTypeB}`.
    LinkType link_type = 1;
    // The ID of the host making the request
    // to the provider.
    string host_id = 2;
    // Runtime configuration for the current environment
    // specific to the current provider.
    sharedtypesv1.ProviderContext context = 3;
}

// LinkStatus represents the current state of a link
// in a blueprint instance.
enum LinkStatus {
    // The status for when we can't determine
    // an accurate status for a link.
    LINK_STATUS_UNKNOWN = 0;
    // The status for when an initial link deployment
    // is currently in progress.
    LINK_STATUS_CREATING = 1;
    // The status for when a link has been deployed
    // successfully.
    LINK_STATUS_CREATED = 2;
    // The status for when the first creation of a link failed.
    LINK_STATUS_CREATE_FAILED = 3;
    // The status for when another change in the same blueprint has failed
    // and the creation of the current link is being rolled back.
    LINK_STATUS_CREATE_ROLLING_BACK = 4;
    // The status for when another element change in the same blueprint
    // has failed and the creation of the current link could not be rolled back.
    LINK_STATUS_CREATE_ROLLBACK_FAILED = 5;
    // The status for when another change in the same blueprint has failed
    // and the creation of the current link has been rolled back.
    LINK_STATUS_CREATE_ROLLBACK_COMPLETE = 6;
    // The status for when a link is in the process of being destroyed.
    LINK_STATUS_DESTROYING = 7;
    // The status for when a link has been destroyed.
    LINK_STATUS_DESTROYED = 8;
    // The status for when the destruction of a link fails.
    LINK_STATUS_DESTROY_FAILED = 9;
    // The status for when another change in the same blueprint has failed
    // and the removal of the current link is being rolled back.
    LINK_STATUS_DESTROY_ROLLING_BACK = 10;
    // The status for when another change in the same blueprint has failed
    // and the removal of the current link could not be rolled back.
    LINK_STATUS_DESTROY_ROLLBACK_FAILED = 11;
    // The status for when another change in the same blueprint has failed
    // and the removal of the current link has been rolled back.
    LINK_STATUS_DESTROY_ROLLBACK_COMPLETE = 12;
    // The status for when a link is being updated.
    LINK_STATUS_UPDATING = 13;
    // The status for when a link has been updated.
    LINK_STATUS_UPDATED = 14;
    // The status for when the update of a link fails.
    LINK_STATUS_UPDATE_FAILED = 15;
    // The status for when another change in the same blueprint has failed
    // and the update of the current link is being rolled back.
    LINK_STATUS_UPDATE_ROLLING_BACK = 16;
    // The status for when another change in the same blueprint has failed
    // and the update of the current link could not be rolled back.
    LINK_STATUS_UPDATE_ROLLBACK_FAILED = 17;
    // The status for when another change in the same blueprint has failed
    // and the update of the current link has been rolled back.
    LINK_STATUS_UPDATE_ROLLBACK_COMPLETE = 18;
}

// PreciseLinkStatus is used to represent a more precise
// current state of a link in a blueprint instance.
enum PreciseLinkStatus {
    // The status for when we can't determine
    // an accurate status for a link.
    PRECISE_LINK_STATUS_UNKNOWN = 0;
    // The status for when the configuration for a link is being applied
    // to resource A in the link.
    PRECISE_LINK_STATUS_UPDATING_RESOURCE_A = 1;
    // The status for when the configuration for a link has been applied to
    // resource A in the link.
    PRECISE_LINK_STATUS_RESOURCE_A_UPDATED = 2;
    // The status for when the configuration for a link has failed to
    // be applied to resource A in the link.
    PRECISE_LINK_STATUS_RESOURCE_A_UPDATE_FAILED = 3;
    // The status for when another change in the same blueprint has
    // failed and the current for which resource A was successfully updated
    // is being rolled back.
    PRECISE_LINK_STATUS_RESOURCE_A_UPDATE_ROLLING_BACK = 4;
    // The status for when another change in the same blueprint has
    // failed and the current for which resource A was successfully updated
    // could not be rolled back.
    PRECISE_LINK_STATUS_RESOURCE_A_UPDATE_ROLLBACK_FAILED = 5;
    // The status for when another change in the same blueprint has
    // failed and the current for which resource A was successfully updated
    // has been rolled back.
    PRECISE_LINK_STATUS_RESOURCE_A_UPDATE_ROLLBACK_COMPLETE = 6;
    // The status for when the configuration for a link is being applied
    // to resource B in the link.
    PRECISE_LINK_STATUS_UPDATING_RESOURCE_B = 7;
    // The status for when the configuration for a link has been applied to
    // resource B in the link.
    PRECISE_LINK_STATUS_RESOURCE_B_UPDATED = 8;
    // The status for when the configuration for a link has failed to
    // be applied to resource B in the link.
    PRECISE_LINK_STATUS_RESOURCE_B_UPDATE_FAILED = 9;
    // The status for when another change in the same blueprint has
    // failed and the current for which resource B was successfully updated
    // is being rolled back.
    PRECISE_LINK_STATUS_RESOURCE_B_UPDATE_ROLLING_BACK = 10;
    // The status for when another change in the same blueprint has
    // failed and the current for which resource B was successfully updated
    // could not be rolled back.
    PRECISE_LINK_STATUS_RESOURCE_B_UPDATE_ROLLBACK_FAILED = 11;
    // The status for when another change in the same blueprint has
    // failed and the current for which resource B was successfully updated
    // has been rolled back.
    PRECISE_LINK_STATUS_RESOURCE_B_UPDATE_ROLLBACK_COMPLETE = 12;
    // The status for when intermediary resources are being created, updated
    // or destroyed.
    // This status is a high level indication of progress,
    // the status of each intermediary resource should be checked to determien
    // the exact state of each intermediary resource in the link.
    PRECISE_LINK_STATUS_UPDATING_INTERMEDIARY_RESOURCES = 13;
    // The status for when all intermediary resources has been successfully
    // updated, created or destroyed.
    PRECISE_LINK_STATUS_INTERMEDIARY_RESOURCES_UPDATED = 14;
    // The status for when an intermediary resource has failed to be updated,
    // created or destroyed.
    PRECISE_LINK_STATUS_INTERMEDIARY_RESOURCE_UPDATED_FAILED = 15;
    // The status for when another change in the same blueprint has failed
    // and the current link for which intermediary resources were successfully
    // updated is being rolled back.
    PRECISE_LINK_STATUS_INTERMEDIARY_RESOURCE_UPDATE_ROLLING_BACK = 16;
    // The status for when another change in the same blueprint has failed
    // and the current link for which intermediary resources were successfully
    // updated failed to be rolled back.
    PRECISE_LINK_STATUS_INTERMEDIARY_RESOURCE_UPDATE_ROLLBACK_FAILED = 17;
    // The status for when another change in the same blueprint has failed
    // and the current link for which intermediary resources were successfully
    // updated has been rolled back.
    PRECISE_LINK_STATUS_INTERMEDIARY_RESOURCE_UPDATE_ROLLBACK_COMPLETE = 18;
}

// LinkAnnotationDefinitionsResponse is the response
// containing the annotation definitions for a link.
message LinkAnnotationDefinitionsResponse {
    oneof response {
        LinkAnnotationDefinitions annotation_definitions = 1;
        sharedtypesv1.ErrorResponse error_response = 2;
    }
}

// LinkAnnotationDefinition provides a definition for an annotation
// that can be applied to either of the resources in a link.
message LinkAnnotationDefinitions {
    // A mapping of annotation definitions for a link.
    // The keys are expected to be in the format `{resourceType}::{annotationKey}`.
    // For example, `aws/lambda/function::aws.lambda.dynamodb.accessType`.
    // The resource type in the key represents the resource type in a link
    // that the annotation can be applied to.
    map<string, LinkAnnotationDefinition> definitions = 1;
}

// LinkAnnotationDefinition provides a way to define annotations
// for a link type.
message LinkAnnotationDefinition {
    string name = 1;
    string label = 2;
    sharedtypesv1.ScalarType type = 3;
    string description = 4;
    schema.ScalarValue default_value = 5;
    repeated schema.ScalarValue allowed_values = 6;
    repeated schema.ScalarValue examples = 7;
    bool required = 8;
}

// LinkContext holds the environment configuration
// across multiple providers.
// A special context is required for links,
// even though links are housed in a single provider,
// they can involve resources that in different providers.
message LinkContext {
    // Configuration parameters for multiple providers.
    // Keys are expected to be in the format `{providerNamespace}::{variableName}`.
    map<string, schema.ScalarValue> provider_config_variables = 1;
    // Context-wide variables for the current deploy engine run.
    map<string, schema.ScalarValue> context_variables = 2;
}

// The type of data source to retrieve data used in a blueprint from.
message DataSourceType {
    string type = 1;
}

// The type of custom variable to be used to determine the available
// values for a variable in a blueprint.
message CustomVariableType {
    string type = 1;
}

// The type of link to carry out an action on or retrieve
// some information about.
message LinkType {
    // The type of link in the form of `{resourceTypeA}::{resourceTypeB}`.
    string type = 1;
}
