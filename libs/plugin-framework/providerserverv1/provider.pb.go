// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.27.0
// source: plugin-framework/providerserverv1/provider.proto

package providerserverv1

import (
	schemapb "github.com/newstack-cloud/celerity/libs/blueprint/schemapb"
	sharedtypesv1 "github.com/newstack-cloud/celerity/libs/plugin-framework/sharedtypesv1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// DataSourceSpecSchemaType represents the type of a data source spec schema.
// This will be translated to a string enum representation in the deploy engine.
type DataSourceSpecSchemaType int32

const (
	DataSourceSpecSchemaType_DATA_SOURCE_SPEC_STRING  DataSourceSpecSchemaType = 0
	DataSourceSpecSchemaType_DATA_SOURCE_SPEC_INTEGER DataSourceSpecSchemaType = 1
	DataSourceSpecSchemaType_DATA_SOURCE_SPEC_FLOAT   DataSourceSpecSchemaType = 2
	DataSourceSpecSchemaType_DATA_SOURCE_SPEC_BOOLEAN DataSourceSpecSchemaType = 3
	DataSourceSpecSchemaType_DATA_SOURCE_SPEC_ARRAY   DataSourceSpecSchemaType = 4
)

// Enum value maps for DataSourceSpecSchemaType.
var (
	DataSourceSpecSchemaType_name = map[int32]string{
		0: "DATA_SOURCE_SPEC_STRING",
		1: "DATA_SOURCE_SPEC_INTEGER",
		2: "DATA_SOURCE_SPEC_FLOAT",
		3: "DATA_SOURCE_SPEC_BOOLEAN",
		4: "DATA_SOURCE_SPEC_ARRAY",
	}
	DataSourceSpecSchemaType_value = map[string]int32{
		"DATA_SOURCE_SPEC_STRING":  0,
		"DATA_SOURCE_SPEC_INTEGER": 1,
		"DATA_SOURCE_SPEC_FLOAT":   2,
		"DATA_SOURCE_SPEC_BOOLEAN": 3,
		"DATA_SOURCE_SPEC_ARRAY":   4,
	}
)

func (x DataSourceSpecSchemaType) Enum() *DataSourceSpecSchemaType {
	p := new(DataSourceSpecSchemaType)
	*p = x
	return p
}

func (x DataSourceSpecSchemaType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DataSourceSpecSchemaType) Descriptor() protoreflect.EnumDescriptor {
	return file_plugin_framework_providerserverv1_provider_proto_enumTypes[0].Descriptor()
}

func (DataSourceSpecSchemaType) Type() protoreflect.EnumType {
	return &file_plugin_framework_providerserverv1_provider_proto_enumTypes[0]
}

func (x DataSourceSpecSchemaType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DataSourceSpecSchemaType.Descriptor instead.
func (DataSourceSpecSchemaType) EnumDescriptor() ([]byte, []int) {
	return file_plugin_framework_providerserverv1_provider_proto_rawDescGZIP(), []int{0}
}

// LinkPriorityResource holds the type of resource that must be deployed
// first in a link relationship.
type LinkPriorityResource int32

const (
	// This is used when there is no priority resource
	// in the link relationship.
	LinkPriorityResource_LINK_PRIORITY_RESOURCE_NONE LinkPriorityResource = 0
	// This is used when the priority resource is the first
	// resource in the link relationship.
	LinkPriorityResource_LINK_PRIORITY_RESOURCE_A LinkPriorityResource = 1
	// This is used when the priority resource is the second
	// resource in the link relationship.
	LinkPriorityResource_LINK_PRIORITY_RESOURCE_B LinkPriorityResource = 2
)

// Enum value maps for LinkPriorityResource.
var (
	LinkPriorityResource_name = map[int32]string{
		0: "LINK_PRIORITY_RESOURCE_NONE",
		1: "LINK_PRIORITY_RESOURCE_A",
		2: "LINK_PRIORITY_RESOURCE_B",
	}
	LinkPriorityResource_value = map[string]int32{
		"LINK_PRIORITY_RESOURCE_NONE": 0,
		"LINK_PRIORITY_RESOURCE_A":    1,
		"LINK_PRIORITY_RESOURCE_B":    2,
	}
)

func (x LinkPriorityResource) Enum() *LinkPriorityResource {
	p := new(LinkPriorityResource)
	*p = x
	return p
}

func (x LinkPriorityResource) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LinkPriorityResource) Descriptor() protoreflect.EnumDescriptor {
	return file_plugin_framework_providerserverv1_provider_proto_enumTypes[1].Descriptor()
}

func (LinkPriorityResource) Type() protoreflect.EnumType {
	return &file_plugin_framework_providerserverv1_provider_proto_enumTypes[1]
}

func (x LinkPriorityResource) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LinkPriorityResource.Descriptor instead.
func (LinkPriorityResource) EnumDescriptor() ([]byte, []int) {
	return file_plugin_framework_providerserverv1_provider_proto_rawDescGZIP(), []int{1}
}

// LinkKind represents the kind of a requested link type,
// a link type can either be a hard or soft link.
// This is translated to a string enum representation in the deploy
// engine.
type LinkKind int32

const (
	LinkKind_LINK_KIND_HARD LinkKind = 0
	LinkKind_LINK_KIND_SOFT LinkKind = 1
)

// Enum value maps for LinkKind.
var (
	LinkKind_name = map[int32]string{
		0: "LINK_KIND_HARD",
		1: "LINK_KIND_SOFT",
	}
	LinkKind_value = map[string]int32{
		"LINK_KIND_HARD": 0,
		"LINK_KIND_SOFT": 1,
	}
)

func (x LinkKind) Enum() *LinkKind {
	p := new(LinkKind)
	*p = x
	return p
}

func (x LinkKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LinkKind) Descriptor() protoreflect.EnumDescriptor {
	return file_plugin_framework_providerserverv1_provider_proto_enumTypes[2].Descriptor()
}

func (LinkKind) Type() protoreflect.EnumType {
	return &file_plugin_framework_providerserverv1_provider_proto_enumTypes[2]
}

func (x LinkKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LinkKind.Descriptor instead.
func (LinkKind) EnumDescriptor() ([]byte, []int) {
	return file_plugin_framework_providerserverv1_provider_proto_rawDescGZIP(), []int{2}
}

// LinkUpdateType represents the type of update that should be carried out
// on a link between two resources.
type LinkUpdateType int32

const (
	// The type for when a link is being created.
	LinkUpdateType_LINK_UPDATE_TYPE_CREATE LinkUpdateType = 0
	// The type for when a link is being destroyed.
	LinkUpdateType_LINK_UPDATE_TYPE_DESTROY LinkUpdateType = 1
	// The type for when a link is being updated.
	LinkUpdateType_LINK_UPDATE_TYPE_UPDATE LinkUpdateType = 2
)

// Enum value maps for LinkUpdateType.
var (
	LinkUpdateType_name = map[int32]string{
		0: "LINK_UPDATE_TYPE_CREATE",
		1: "LINK_UPDATE_TYPE_DESTROY",
		2: "LINK_UPDATE_TYPE_UPDATE",
	}
	LinkUpdateType_value = map[string]int32{
		"LINK_UPDATE_TYPE_CREATE":  0,
		"LINK_UPDATE_TYPE_DESTROY": 1,
		"LINK_UPDATE_TYPE_UPDATE":  2,
	}
)

func (x LinkUpdateType) Enum() *LinkUpdateType {
	p := new(LinkUpdateType)
	*p = x
	return p
}

func (x LinkUpdateType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LinkUpdateType) Descriptor() protoreflect.EnumDescriptor {
	return file_plugin_framework_providerserverv1_provider_proto_enumTypes[3].Descriptor()
}

func (LinkUpdateType) Type() protoreflect.EnumType {
	return &file_plugin_framework_providerserverv1_provider_proto_enumTypes[3]
}

func (x LinkUpdateType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LinkUpdateType.Descriptor instead.
func (LinkUpdateType) EnumDescriptor() ([]byte, []int) {
	return file_plugin_framework_providerserverv1_provider_proto_rawDescGZIP(), []int{3}
}

// LinkStatus represents the current state of a link
// in a blueprint instance.
type LinkStatus int32

const (
	// The status for when we can't determine
	// an accurate status for a link.
	LinkStatus_LINK_STATUS_UNKNOWN LinkStatus = 0
	// The status for when an initial link deployment
	// is currently in progress.
	LinkStatus_LINK_STATUS_CREATING LinkStatus = 1
	// The status for when a link has been deployed
	// successfully.
	LinkStatus_LINK_STATUS_CREATED LinkStatus = 2
	// The status for when the first creation of a link failed.
	LinkStatus_LINK_STATUS_CREATE_FAILED LinkStatus = 3
	// The status for when another change in the same blueprint has failed
	// and the creation of the current link is being rolled back.
	LinkStatus_LINK_STATUS_CREATE_ROLLING_BACK LinkStatus = 4
	// The status for when another element change in the same blueprint
	// has failed and the creation of the current link could not be rolled back.
	LinkStatus_LINK_STATUS_CREATE_ROLLBACK_FAILED LinkStatus = 5
	// The status for when another change in the same blueprint has failed
	// and the creation of the current link has been rolled back.
	LinkStatus_LINK_STATUS_CREATE_ROLLBACK_COMPLETE LinkStatus = 6
	// The status for when a link is in the process of being destroyed.
	LinkStatus_LINK_STATUS_DESTROYING LinkStatus = 7
	// The status for when a link has been destroyed.
	LinkStatus_LINK_STATUS_DESTROYED LinkStatus = 8
	// The status for when the destruction of a link fails.
	LinkStatus_LINK_STATUS_DESTROY_FAILED LinkStatus = 9
	// The status for when another change in the same blueprint has failed
	// and the removal of the current link is being rolled back.
	LinkStatus_LINK_STATUS_DESTROY_ROLLING_BACK LinkStatus = 10
	// The status for when another change in the same blueprint has failed
	// and the removal of the current link could not be rolled back.
	LinkStatus_LINK_STATUS_DESTROY_ROLLBACK_FAILED LinkStatus = 11
	// The status for when another change in the same blueprint has failed
	// and the removal of the current link has been rolled back.
	LinkStatus_LINK_STATUS_DESTROY_ROLLBACK_COMPLETE LinkStatus = 12
	// The status for when a link is being updated.
	LinkStatus_LINK_STATUS_UPDATING LinkStatus = 13
	// The status for when a link has been updated.
	LinkStatus_LINK_STATUS_UPDATED LinkStatus = 14
	// The status for when the update of a link fails.
	LinkStatus_LINK_STATUS_UPDATE_FAILED LinkStatus = 15
	// The status for when another change in the same blueprint has failed
	// and the update of the current link is being rolled back.
	LinkStatus_LINK_STATUS_UPDATE_ROLLING_BACK LinkStatus = 16
	// The status for when another change in the same blueprint has failed
	// and the update of the current link could not be rolled back.
	LinkStatus_LINK_STATUS_UPDATE_ROLLBACK_FAILED LinkStatus = 17
	// The status for when another change in the same blueprint has failed
	// and the update of the current link has been rolled back.
	LinkStatus_LINK_STATUS_UPDATE_ROLLBACK_COMPLETE LinkStatus = 18
)

// Enum value maps for LinkStatus.
var (
	LinkStatus_name = map[int32]string{
		0:  "LINK_STATUS_UNKNOWN",
		1:  "LINK_STATUS_CREATING",
		2:  "LINK_STATUS_CREATED",
		3:  "LINK_STATUS_CREATE_FAILED",
		4:  "LINK_STATUS_CREATE_ROLLING_BACK",
		5:  "LINK_STATUS_CREATE_ROLLBACK_FAILED",
		6:  "LINK_STATUS_CREATE_ROLLBACK_COMPLETE",
		7:  "LINK_STATUS_DESTROYING",
		8:  "LINK_STATUS_DESTROYED",
		9:  "LINK_STATUS_DESTROY_FAILED",
		10: "LINK_STATUS_DESTROY_ROLLING_BACK",
		11: "LINK_STATUS_DESTROY_ROLLBACK_FAILED",
		12: "LINK_STATUS_DESTROY_ROLLBACK_COMPLETE",
		13: "LINK_STATUS_UPDATING",
		14: "LINK_STATUS_UPDATED",
		15: "LINK_STATUS_UPDATE_FAILED",
		16: "LINK_STATUS_UPDATE_ROLLING_BACK",
		17: "LINK_STATUS_UPDATE_ROLLBACK_FAILED",
		18: "LINK_STATUS_UPDATE_ROLLBACK_COMPLETE",
	}
	LinkStatus_value = map[string]int32{
		"LINK_STATUS_UNKNOWN":                   0,
		"LINK_STATUS_CREATING":                  1,
		"LINK_STATUS_CREATED":                   2,
		"LINK_STATUS_CREATE_FAILED":             3,
		"LINK_STATUS_CREATE_ROLLING_BACK":       4,
		"LINK_STATUS_CREATE_ROLLBACK_FAILED":    5,
		"LINK_STATUS_CREATE_ROLLBACK_COMPLETE":  6,
		"LINK_STATUS_DESTROYING":                7,
		"LINK_STATUS_DESTROYED":                 8,
		"LINK_STATUS_DESTROY_FAILED":            9,
		"LINK_STATUS_DESTROY_ROLLING_BACK":      10,
		"LINK_STATUS_DESTROY_ROLLBACK_FAILED":   11,
		"LINK_STATUS_DESTROY_ROLLBACK_COMPLETE": 12,
		"LINK_STATUS_UPDATING":                  13,
		"LINK_STATUS_UPDATED":                   14,
		"LINK_STATUS_UPDATE_FAILED":             15,
		"LINK_STATUS_UPDATE_ROLLING_BACK":       16,
		"LINK_STATUS_UPDATE_ROLLBACK_FAILED":    17,
		"LINK_STATUS_UPDATE_ROLLBACK_COMPLETE":  18,
	}
)

func (x LinkStatus) Enum() *LinkStatus {
	p := new(LinkStatus)
	*p = x
	return p
}

func (x LinkStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LinkStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_plugin_framework_providerserverv1_provider_proto_enumTypes[4].Descriptor()
}

func (LinkStatus) Type() protoreflect.EnumType {
	return &file_plugin_framework_providerserverv1_provider_proto_enumTypes[4]
}

func (x LinkStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LinkStatus.Descriptor instead.
func (LinkStatus) EnumDescriptor() ([]byte, []int) {
	return file_plugin_framework_providerserverv1_provider_proto_rawDescGZIP(), []int{4}
}

// PreciseLinkStatus is used to represent a more precise
// current state of a link in a blueprint instance.
type PreciseLinkStatus int32

const (
	// The status for when we can't determine
	// an accurate status for a link.
	PreciseLinkStatus_PRECISE_LINK_STATUS_UNKNOWN PreciseLinkStatus = 0
	// The status for when the configuration for a link is being applied
	// to resource A in the link.
	PreciseLinkStatus_PRECISE_LINK_STATUS_UPDATING_RESOURCE_A PreciseLinkStatus = 1
	// The status for when the configuration for a link has been applied to
	// resource A in the link.
	PreciseLinkStatus_PRECISE_LINK_STATUS_RESOURCE_A_UPDATED PreciseLinkStatus = 2
	// The status for when the configuration for a link has failed to
	// be applied to resource A in the link.
	PreciseLinkStatus_PRECISE_LINK_STATUS_RESOURCE_A_UPDATE_FAILED PreciseLinkStatus = 3
	// The status for when another change in the same blueprint has
	// failed and the current for which resource A was successfully updated
	// is being rolled back.
	PreciseLinkStatus_PRECISE_LINK_STATUS_RESOURCE_A_UPDATE_ROLLING_BACK PreciseLinkStatus = 4
	// The status for when another change in the same blueprint has
	// failed and the current for which resource A was successfully updated
	// could not be rolled back.
	PreciseLinkStatus_PRECISE_LINK_STATUS_RESOURCE_A_UPDATE_ROLLBACK_FAILED PreciseLinkStatus = 5
	// The status for when another change in the same blueprint has
	// failed and the current for which resource A was successfully updated
	// has been rolled back.
	PreciseLinkStatus_PRECISE_LINK_STATUS_RESOURCE_A_UPDATE_ROLLBACK_COMPLETE PreciseLinkStatus = 6
	// The status for when the configuration for a link is being applied
	// to resource B in the link.
	PreciseLinkStatus_PRECISE_LINK_STATUS_UPDATING_RESOURCE_B PreciseLinkStatus = 7
	// The status for when the configuration for a link has been applied to
	// resource B in the link.
	PreciseLinkStatus_PRECISE_LINK_STATUS_RESOURCE_B_UPDATED PreciseLinkStatus = 8
	// The status for when the configuration for a link has failed to
	// be applied to resource B in the link.
	PreciseLinkStatus_PRECISE_LINK_STATUS_RESOURCE_B_UPDATE_FAILED PreciseLinkStatus = 9
	// The status for when another change in the same blueprint has
	// failed and the current for which resource B was successfully updated
	// is being rolled back.
	PreciseLinkStatus_PRECISE_LINK_STATUS_RESOURCE_B_UPDATE_ROLLING_BACK PreciseLinkStatus = 10
	// The status for when another change in the same blueprint has
	// failed and the current for which resource B was successfully updated
	// could not be rolled back.
	PreciseLinkStatus_PRECISE_LINK_STATUS_RESOURCE_B_UPDATE_ROLLBACK_FAILED PreciseLinkStatus = 11
	// The status for when another change in the same blueprint has
	// failed and the current for which resource B was successfully updated
	// has been rolled back.
	PreciseLinkStatus_PRECISE_LINK_STATUS_RESOURCE_B_UPDATE_ROLLBACK_COMPLETE PreciseLinkStatus = 12
	// The status for when intermediary resources are being created, updated
	// or destroyed.
	// This status is a high level indication of progress,
	// the status of each intermediary resource should be checked to determien
	// the exact state of each intermediary resource in the link.
	PreciseLinkStatus_PRECISE_LINK_STATUS_UPDATING_INTERMEDIARY_RESOURCES PreciseLinkStatus = 13
	// The status for when all intermediary resources has been successfully
	// updated, created or destroyed.
	PreciseLinkStatus_PRECISE_LINK_STATUS_INTERMEDIARY_RESOURCES_UPDATED PreciseLinkStatus = 14
	// The status for when an intermediary resource has failed to be updated,
	// created or destroyed.
	PreciseLinkStatus_PRECISE_LINK_STATUS_INTERMEDIARY_RESOURCE_UPDATED_FAILED PreciseLinkStatus = 15
	// The status for when another change in the same blueprint has failed
	// and the current link for which intermediary resources were successfully
	// updated is being rolled back.
	PreciseLinkStatus_PRECISE_LINK_STATUS_INTERMEDIARY_RESOURCE_UPDATE_ROLLING_BACK PreciseLinkStatus = 16
	// The status for when another change in the same blueprint has failed
	// and the current link for which intermediary resources were successfully
	// updated failed to be rolled back.
	PreciseLinkStatus_PRECISE_LINK_STATUS_INTERMEDIARY_RESOURCE_UPDATE_ROLLBACK_FAILED PreciseLinkStatus = 17
	// The status for when another change in the same blueprint has failed
	// and the current link for which intermediary resources were successfully
	// updated has been rolled back.
	PreciseLinkStatus_PRECISE_LINK_STATUS_INTERMEDIARY_RESOURCE_UPDATE_ROLLBACK_COMPLETE PreciseLinkStatus = 18
)

// Enum value maps for PreciseLinkStatus.
var (
	PreciseLinkStatus_name = map[int32]string{
		0:  "PRECISE_LINK_STATUS_UNKNOWN",
		1:  "PRECISE_LINK_STATUS_UPDATING_RESOURCE_A",
		2:  "PRECISE_LINK_STATUS_RESOURCE_A_UPDATED",
		3:  "PRECISE_LINK_STATUS_RESOURCE_A_UPDATE_FAILED",
		4:  "PRECISE_LINK_STATUS_RESOURCE_A_UPDATE_ROLLING_BACK",
		5:  "PRECISE_LINK_STATUS_RESOURCE_A_UPDATE_ROLLBACK_FAILED",
		6:  "PRECISE_LINK_STATUS_RESOURCE_A_UPDATE_ROLLBACK_COMPLETE",
		7:  "PRECISE_LINK_STATUS_UPDATING_RESOURCE_B",
		8:  "PRECISE_LINK_STATUS_RESOURCE_B_UPDATED",
		9:  "PRECISE_LINK_STATUS_RESOURCE_B_UPDATE_FAILED",
		10: "PRECISE_LINK_STATUS_RESOURCE_B_UPDATE_ROLLING_BACK",
		11: "PRECISE_LINK_STATUS_RESOURCE_B_UPDATE_ROLLBACK_FAILED",
		12: "PRECISE_LINK_STATUS_RESOURCE_B_UPDATE_ROLLBACK_COMPLETE",
		13: "PRECISE_LINK_STATUS_UPDATING_INTERMEDIARY_RESOURCES",
		14: "PRECISE_LINK_STATUS_INTERMEDIARY_RESOURCES_UPDATED",
		15: "PRECISE_LINK_STATUS_INTERMEDIARY_RESOURCE_UPDATED_FAILED",
		16: "PRECISE_LINK_STATUS_INTERMEDIARY_RESOURCE_UPDATE_ROLLING_BACK",
		17: "PRECISE_LINK_STATUS_INTERMEDIARY_RESOURCE_UPDATE_ROLLBACK_FAILED",
		18: "PRECISE_LINK_STATUS_INTERMEDIARY_RESOURCE_UPDATE_ROLLBACK_COMPLETE",
	}
	PreciseLinkStatus_value = map[string]int32{
		"PRECISE_LINK_STATUS_UNKNOWN":                                        0,
		"PRECISE_LINK_STATUS_UPDATING_RESOURCE_A":                            1,
		"PRECISE_LINK_STATUS_RESOURCE_A_UPDATED":                             2,
		"PRECISE_LINK_STATUS_RESOURCE_A_UPDATE_FAILED":                       3,
		"PRECISE_LINK_STATUS_RESOURCE_A_UPDATE_ROLLING_BACK":                 4,
		"PRECISE_LINK_STATUS_RESOURCE_A_UPDATE_ROLLBACK_FAILED":              5,
		"PRECISE_LINK_STATUS_RESOURCE_A_UPDATE_ROLLBACK_COMPLETE":            6,
		"PRECISE_LINK_STATUS_UPDATING_RESOURCE_B":                            7,
		"PRECISE_LINK_STATUS_RESOURCE_B_UPDATED":                             8,
		"PRECISE_LINK_STATUS_RESOURCE_B_UPDATE_FAILED":                       9,
		"PRECISE_LINK_STATUS_RESOURCE_B_UPDATE_ROLLING_BACK":                 10,
		"PRECISE_LINK_STATUS_RESOURCE_B_UPDATE_ROLLBACK_FAILED":              11,
		"PRECISE_LINK_STATUS_RESOURCE_B_UPDATE_ROLLBACK_COMPLETE":            12,
		"PRECISE_LINK_STATUS_UPDATING_INTERMEDIARY_RESOURCES":                13,
		"PRECISE_LINK_STATUS_INTERMEDIARY_RESOURCES_UPDATED":                 14,
		"PRECISE_LINK_STATUS_INTERMEDIARY_RESOURCE_UPDATED_FAILED":           15,
		"PRECISE_LINK_STATUS_INTERMEDIARY_RESOURCE_UPDATE_ROLLING_BACK":      16,
		"PRECISE_LINK_STATUS_INTERMEDIARY_RESOURCE_UPDATE_ROLLBACK_FAILED":   17,
		"PRECISE_LINK_STATUS_INTERMEDIARY_RESOURCE_UPDATE_ROLLBACK_COMPLETE": 18,
	}
)

func (x PreciseLinkStatus) Enum() *PreciseLinkStatus {
	p := new(PreciseLinkStatus)
	*p = x
	return p
}

func (x PreciseLinkStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PreciseLinkStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_plugin_framework_providerserverv1_provider_proto_enumTypes[5].Descriptor()
}

func (PreciseLinkStatus) Type() protoreflect.EnumType {
	return &file_plugin_framework_providerserverv1_provider_proto_enumTypes[5]
}

func (x PreciseLinkStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PreciseLinkStatus.Descriptor instead.
func (PreciseLinkStatus) EnumDescriptor() ([]byte, []int) {
	return file_plugin_framework_providerserverv1_provider_proto_rawDescGZIP(), []int{5}
}

// NamespaceResponse contains the response
// for requesting the namespace of the provider.
type NamespaceResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Response:
	//
	//	*NamespaceResponse_Namespace
	//	*NamespaceResponse_ErrorResponse
	Response      isNamespaceResponse_Response `protobuf_oneof:"response"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NamespaceResponse) Reset() {
	*x = NamespaceResponse{}
	mi := &file_plugin_framework_providerserverv1_provider_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NamespaceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NamespaceResponse) ProtoMessage() {}

func (x *NamespaceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_framework_providerserverv1_provider_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NamespaceResponse.ProtoReflect.Descriptor instead.
func (*NamespaceResponse) Descriptor() ([]byte, []int) {
	return file_plugin_framework_providerserverv1_provider_proto_rawDescGZIP(), []int{0}
}

func (x *NamespaceResponse) GetResponse() isNamespaceResponse_Response {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *NamespaceResponse) GetNamespace() *Namespace {
	if x != nil {
		if x, ok := x.Response.(*NamespaceResponse_Namespace); ok {
			return x.Namespace
		}
	}
	return nil
}

func (x *NamespaceResponse) GetErrorResponse() *sharedtypesv1.ErrorResponse {
	if x != nil {
		if x, ok := x.Response.(*NamespaceResponse_ErrorResponse); ok {
			return x.ErrorResponse
		}
	}
	return nil
}

type isNamespaceResponse_Response interface {
	isNamespaceResponse_Response()
}

type NamespaceResponse_Namespace struct {
	Namespace *Namespace `protobuf:"bytes,1,opt,name=namespace,oneof"`
}

type NamespaceResponse_ErrorResponse struct {
	ErrorResponse *sharedtypesv1.ErrorResponse `protobuf:"bytes,2,opt,name=error_response,json=errorResponse,oneof"`
}

func (*NamespaceResponse_Namespace) isNamespaceResponse_Response() {}

func (*NamespaceResponse_ErrorResponse) isNamespaceResponse_Response() {}

// Namespace of a provider used to route resource
// and data source types to the correct provider.
type Namespace struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Namespace     string                 `protobuf:"bytes,1,opt,name=namespace" json:"namespace,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Namespace) Reset() {
	*x = Namespace{}
	mi := &file_plugin_framework_providerserverv1_provider_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Namespace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Namespace) ProtoMessage() {}

func (x *Namespace) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_framework_providerserverv1_provider_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Namespace.ProtoReflect.Descriptor instead.
func (*Namespace) Descriptor() ([]byte, []int) {
	return file_plugin_framework_providerserverv1_provider_proto_rawDescGZIP(), []int{1}
}

func (x *Namespace) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

// ResourceTypesResponse contains the response
// for requesting a list of all the resource types
// that are implemented by the provider.
type ResourceTypesResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Response:
	//
	//	*ResourceTypesResponse_ResourceTypes
	//	*ResourceTypesResponse_ErrorResponse
	Response      isResourceTypesResponse_Response `protobuf_oneof:"response"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResourceTypesResponse) Reset() {
	*x = ResourceTypesResponse{}
	mi := &file_plugin_framework_providerserverv1_provider_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResourceTypesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceTypesResponse) ProtoMessage() {}

func (x *ResourceTypesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_framework_providerserverv1_provider_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceTypesResponse.ProtoReflect.Descriptor instead.
func (*ResourceTypesResponse) Descriptor() ([]byte, []int) {
	return file_plugin_framework_providerserverv1_provider_proto_rawDescGZIP(), []int{2}
}

func (x *ResourceTypesResponse) GetResponse() isResourceTypesResponse_Response {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *ResourceTypesResponse) GetResourceTypes() *ResourceTypes {
	if x != nil {
		if x, ok := x.Response.(*ResourceTypesResponse_ResourceTypes); ok {
			return x.ResourceTypes
		}
	}
	return nil
}

func (x *ResourceTypesResponse) GetErrorResponse() *sharedtypesv1.ErrorResponse {
	if x != nil {
		if x, ok := x.Response.(*ResourceTypesResponse_ErrorResponse); ok {
			return x.ErrorResponse
		}
	}
	return nil
}

type isResourceTypesResponse_Response interface {
	isResourceTypesResponse_Response()
}

type ResourceTypesResponse_ResourceTypes struct {
	ResourceTypes *ResourceTypes `protobuf:"bytes,1,opt,name=resource_types,json=resourceTypes,oneof"`
}

type ResourceTypesResponse_ErrorResponse struct {
	ErrorResponse *sharedtypesv1.ErrorResponse `protobuf:"bytes,2,opt,name=error_response,json=errorResponse,oneof"`
}

func (*ResourceTypesResponse_ResourceTypes) isResourceTypesResponse_Response() {}

func (*ResourceTypesResponse_ErrorResponse) isResourceTypesResponse_Response() {}

// ResourceTypes holds a list of resource types
// that are implemented by the provider.
type ResourceTypes struct {
	state         protoimpl.MessageState        `protogen:"open.v1"`
	ResourceTypes []*sharedtypesv1.ResourceType `protobuf:"bytes,1,rep,name=resource_types,json=resourceTypes" json:"resource_types,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResourceTypes) Reset() {
	*x = ResourceTypes{}
	mi := &file_plugin_framework_providerserverv1_provider_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResourceTypes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceTypes) ProtoMessage() {}

func (x *ResourceTypes) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_framework_providerserverv1_provider_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceTypes.ProtoReflect.Descriptor instead.
func (*ResourceTypes) Descriptor() ([]byte, []int) {
	return file_plugin_framework_providerserverv1_provider_proto_rawDescGZIP(), []int{3}
}

func (x *ResourceTypes) GetResourceTypes() []*sharedtypesv1.ResourceType {
	if x != nil {
		return x.ResourceTypes
	}
	return nil
}

// LinkTypesResponse contains the response
// for requesting a list of all the link types
// that are implemented by the provider.
type LinkTypesResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Response:
	//
	//	*LinkTypesResponse_LinkTypes
	//	*LinkTypesResponse_ErrorResponse
	Response      isLinkTypesResponse_Response `protobuf_oneof:"response"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LinkTypesResponse) Reset() {
	*x = LinkTypesResponse{}
	mi := &file_plugin_framework_providerserverv1_provider_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LinkTypesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinkTypesResponse) ProtoMessage() {}

func (x *LinkTypesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_framework_providerserverv1_provider_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinkTypesResponse.ProtoReflect.Descriptor instead.
func (*LinkTypesResponse) Descriptor() ([]byte, []int) {
	return file_plugin_framework_providerserverv1_provider_proto_rawDescGZIP(), []int{4}
}

func (x *LinkTypesResponse) GetResponse() isLinkTypesResponse_Response {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *LinkTypesResponse) GetLinkTypes() *LinkTypes {
	if x != nil {
		if x, ok := x.Response.(*LinkTypesResponse_LinkTypes); ok {
			return x.LinkTypes
		}
	}
	return nil
}

func (x *LinkTypesResponse) GetErrorResponse() *sharedtypesv1.ErrorResponse {
	if x != nil {
		if x, ok := x.Response.(*LinkTypesResponse_ErrorResponse); ok {
			return x.ErrorResponse
		}
	}
	return nil
}

type isLinkTypesResponse_Response interface {
	isLinkTypesResponse_Response()
}

type LinkTypesResponse_LinkTypes struct {
	LinkTypes *LinkTypes `protobuf:"bytes,1,opt,name=link_types,json=linkTypes,oneof"`
}

type LinkTypesResponse_ErrorResponse struct {
	ErrorResponse *sharedtypesv1.ErrorResponse `protobuf:"bytes,2,opt,name=error_response,json=errorResponse,oneof"`
}

func (*LinkTypesResponse_LinkTypes) isLinkTypesResponse_Response() {}

func (*LinkTypesResponse_ErrorResponse) isLinkTypesResponse_Response() {}

// LinkTypes holds a list of link types
// that are implemented by the provider.
type LinkTypes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	LinkTypes     []*LinkType            `protobuf:"bytes,1,rep,name=link_types,json=linkTypes" json:"link_types,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LinkTypes) Reset() {
	*x = LinkTypes{}
	mi := &file_plugin_framework_providerserverv1_provider_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LinkTypes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinkTypes) ProtoMessage() {}

func (x *LinkTypes) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_framework_providerserverv1_provider_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinkTypes.ProtoReflect.Descriptor instead.
func (*LinkTypes) Descriptor() ([]byte, []int) {
	return file_plugin_framework_providerserverv1_provider_proto_rawDescGZIP(), []int{5}
}

func (x *LinkTypes) GetLinkTypes() []*LinkType {
	if x != nil {
		return x.LinkTypes
	}
	return nil
}

// DataSourceTypesResponse contains the response
// for requesting a list of all the data source types
// that are implemented by the provider.
type DataSourceTypesResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Response:
	//
	//	*DataSourceTypesResponse_DataSourceTypes
	//	*DataSourceTypesResponse_ErrorResponse
	Response      isDataSourceTypesResponse_Response `protobuf_oneof:"response"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DataSourceTypesResponse) Reset() {
	*x = DataSourceTypesResponse{}
	mi := &file_plugin_framework_providerserverv1_provider_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DataSourceTypesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataSourceTypesResponse) ProtoMessage() {}

func (x *DataSourceTypesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_framework_providerserverv1_provider_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataSourceTypesResponse.ProtoReflect.Descriptor instead.
func (*DataSourceTypesResponse) Descriptor() ([]byte, []int) {
	return file_plugin_framework_providerserverv1_provider_proto_rawDescGZIP(), []int{6}
}

func (x *DataSourceTypesResponse) GetResponse() isDataSourceTypesResponse_Response {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *DataSourceTypesResponse) GetDataSourceTypes() *DataSourceTypes {
	if x != nil {
		if x, ok := x.Response.(*DataSourceTypesResponse_DataSourceTypes); ok {
			return x.DataSourceTypes
		}
	}
	return nil
}

func (x *DataSourceTypesResponse) GetErrorResponse() *sharedtypesv1.ErrorResponse {
	if x != nil {
		if x, ok := x.Response.(*DataSourceTypesResponse_ErrorResponse); ok {
			return x.ErrorResponse
		}
	}
	return nil
}

type isDataSourceTypesResponse_Response interface {
	isDataSourceTypesResponse_Response()
}

type DataSourceTypesResponse_DataSourceTypes struct {
	DataSourceTypes *DataSourceTypes `protobuf:"bytes,1,opt,name=data_source_types,json=dataSourceTypes,oneof"`
}

type DataSourceTypesResponse_ErrorResponse struct {
	ErrorResponse *sharedtypesv1.ErrorResponse `protobuf:"bytes,2,opt,name=error_response,json=errorResponse,oneof"`
}

func (*DataSourceTypesResponse_DataSourceTypes) isDataSourceTypesResponse_Response() {}

func (*DataSourceTypesResponse_ErrorResponse) isDataSourceTypesResponse_Response() {}

// DataSourceTypes holds a list of data source types
// that are implemented by the provider.
type DataSourceTypes struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	DataSourceTypes []*DataSourceType      `protobuf:"bytes,1,rep,name=data_source_types,json=dataSourceTypes" json:"data_source_types,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *DataSourceTypes) Reset() {
	*x = DataSourceTypes{}
	mi := &file_plugin_framework_providerserverv1_provider_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DataSourceTypes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataSourceTypes) ProtoMessage() {}

func (x *DataSourceTypes) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_framework_providerserverv1_provider_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataSourceTypes.ProtoReflect.Descriptor instead.
func (*DataSourceTypes) Descriptor() ([]byte, []int) {
	return file_plugin_framework_providerserverv1_provider_proto_rawDescGZIP(), []int{7}
}

func (x *DataSourceTypes) GetDataSourceTypes() []*DataSourceType {
	if x != nil {
		return x.DataSourceTypes
	}
	return nil
}

// CustomVariableTypesResponse contains the response
// for requesting a list of all the custom variable types
// that are implemented by the provider.
type CustomVariableTypesResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Response:
	//
	//	*CustomVariableTypesResponse_CustomVariableTypes
	//	*CustomVariableTypesResponse_ErrorResponse
	Response      isCustomVariableTypesResponse_Response `protobuf_oneof:"response"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CustomVariableTypesResponse) Reset() {
	*x = CustomVariableTypesResponse{}
	mi := &file_plugin_framework_providerserverv1_provider_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CustomVariableTypesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomVariableTypesResponse) ProtoMessage() {}

func (x *CustomVariableTypesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_framework_providerserverv1_provider_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomVariableTypesResponse.ProtoReflect.Descriptor instead.
func (*CustomVariableTypesResponse) Descriptor() ([]byte, []int) {
	return file_plugin_framework_providerserverv1_provider_proto_rawDescGZIP(), []int{8}
}

func (x *CustomVariableTypesResponse) GetResponse() isCustomVariableTypesResponse_Response {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *CustomVariableTypesResponse) GetCustomVariableTypes() *CustomVariableTypes {
	if x != nil {
		if x, ok := x.Response.(*CustomVariableTypesResponse_CustomVariableTypes); ok {
			return x.CustomVariableTypes
		}
	}
	return nil
}

func (x *CustomVariableTypesResponse) GetErrorResponse() *sharedtypesv1.ErrorResponse {
	if x != nil {
		if x, ok := x.Response.(*CustomVariableTypesResponse_ErrorResponse); ok {
			return x.ErrorResponse
		}
	}
	return nil
}

type isCustomVariableTypesResponse_Response interface {
	isCustomVariableTypesResponse_Response()
}

type CustomVariableTypesResponse_CustomVariableTypes struct {
	CustomVariableTypes *CustomVariableTypes `protobuf:"bytes,1,opt,name=custom_variable_types,json=customVariableTypes,oneof"`
}

type CustomVariableTypesResponse_ErrorResponse struct {
	ErrorResponse *sharedtypesv1.ErrorResponse `protobuf:"bytes,2,opt,name=error_response,json=errorResponse,oneof"`
}

func (*CustomVariableTypesResponse_CustomVariableTypes) isCustomVariableTypesResponse_Response() {}

func (*CustomVariableTypesResponse_ErrorResponse) isCustomVariableTypesResponse_Response() {}

// CustomVariableTypes holds a list of custom variable types
// that are implemented by the provider.
type CustomVariableTypes struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	CustomVariableTypes []*CustomVariableType  `protobuf:"bytes,1,rep,name=custom_variable_types,json=customVariableTypes" json:"custom_variable_types,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *CustomVariableTypes) Reset() {
	*x = CustomVariableTypes{}
	mi := &file_plugin_framework_providerserverv1_provider_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CustomVariableTypes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomVariableTypes) ProtoMessage() {}

func (x *CustomVariableTypes) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_framework_providerserverv1_provider_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomVariableTypes.ProtoReflect.Descriptor instead.
func (*CustomVariableTypes) Descriptor() ([]byte, []int) {
	return file_plugin_framework_providerserverv1_provider_proto_rawDescGZIP(), []int{9}
}

func (x *CustomVariableTypes) GetCustomVariableTypes() []*CustomVariableType {
	if x != nil {
		return x.CustomVariableTypes
	}
	return nil
}

// FunctionListResponse contains the response
// for requesting a list of all the functions that are implemented by the provider.
type FunctionListResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Response:
	//
	//	*FunctionListResponse_FunctionList
	//	*FunctionListResponse_ErrorResponse
	Response      isFunctionListResponse_Response `protobuf_oneof:"response"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FunctionListResponse) Reset() {
	*x = FunctionListResponse{}
	mi := &file_plugin_framework_providerserverv1_provider_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FunctionListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FunctionListResponse) ProtoMessage() {}

func (x *FunctionListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_framework_providerserverv1_provider_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FunctionListResponse.ProtoReflect.Descriptor instead.
func (*FunctionListResponse) Descriptor() ([]byte, []int) {
	return file_plugin_framework_providerserverv1_provider_proto_rawDescGZIP(), []int{10}
}

func (x *FunctionListResponse) GetResponse() isFunctionListResponse_Response {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *FunctionListResponse) GetFunctionList() *FunctionList {
	if x != nil {
		if x, ok := x.Response.(*FunctionListResponse_FunctionList); ok {
			return x.FunctionList
		}
	}
	return nil
}

func (x *FunctionListResponse) GetErrorResponse() *sharedtypesv1.ErrorResponse {
	if x != nil {
		if x, ok := x.Response.(*FunctionListResponse_ErrorResponse); ok {
			return x.ErrorResponse
		}
	}
	return nil
}

type isFunctionListResponse_Response interface {
	isFunctionListResponse_Response()
}

type FunctionListResponse_FunctionList struct {
	FunctionList *FunctionList `protobuf:"bytes,1,opt,name=function_list,json=functionList,oneof"`
}

type FunctionListResponse_ErrorResponse struct {
	ErrorResponse *sharedtypesv1.ErrorResponse `protobuf:"bytes,2,opt,name=error_response,json=errorResponse,oneof"`
}

func (*FunctionListResponse_FunctionList) isFunctionListResponse_Response() {}

func (*FunctionListResponse_ErrorResponse) isFunctionListResponse_Response() {}

// FunctionList holds a list of functions that are implemented by the provider.
type FunctionList struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Functions     []string               `protobuf:"bytes,1,rep,name=functions" json:"functions,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FunctionList) Reset() {
	*x = FunctionList{}
	mi := &file_plugin_framework_providerserverv1_provider_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FunctionList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FunctionList) ProtoMessage() {}

func (x *FunctionList) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_framework_providerserverv1_provider_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FunctionList.ProtoReflect.Descriptor instead.
func (*FunctionList) Descriptor() ([]byte, []int) {
	return file_plugin_framework_providerserverv1_provider_proto_rawDescGZIP(), []int{11}
}

func (x *FunctionList) GetFunctions() []string {
	if x != nil {
		return x.Functions
	}
	return nil
}

// RetryPolicyResponse contains the response
// for requesting the retry policy that should be used for the provider.
type RetryPolicyResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Response:
	//
	//	*RetryPolicyResponse_RetryPolicy
	//	*RetryPolicyResponse_ErrorResponse
	Response      isRetryPolicyResponse_Response `protobuf_oneof:"response"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RetryPolicyResponse) Reset() {
	*x = RetryPolicyResponse{}
	mi := &file_plugin_framework_providerserverv1_provider_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RetryPolicyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetryPolicyResponse) ProtoMessage() {}

func (x *RetryPolicyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_framework_providerserverv1_provider_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetryPolicyResponse.ProtoReflect.Descriptor instead.
func (*RetryPolicyResponse) Descriptor() ([]byte, []int) {
	return file_plugin_framework_providerserverv1_provider_proto_rawDescGZIP(), []int{12}
}

func (x *RetryPolicyResponse) GetResponse() isRetryPolicyResponse_Response {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *RetryPolicyResponse) GetRetryPolicy() *RetryPolicy {
	if x != nil {
		if x, ok := x.Response.(*RetryPolicyResponse_RetryPolicy); ok {
			return x.RetryPolicy
		}
	}
	return nil
}

func (x *RetryPolicyResponse) GetErrorResponse() *sharedtypesv1.ErrorResponse {
	if x != nil {
		if x, ok := x.Response.(*RetryPolicyResponse_ErrorResponse); ok {
			return x.ErrorResponse
		}
	}
	return nil
}

type isRetryPolicyResponse_Response interface {
	isRetryPolicyResponse_Response()
}

type RetryPolicyResponse_RetryPolicy struct {
	RetryPolicy *RetryPolicy `protobuf:"bytes,1,opt,name=retry_policy,json=retryPolicy,oneof"`
}

type RetryPolicyResponse_ErrorResponse struct {
	ErrorResponse *sharedtypesv1.ErrorResponse `protobuf:"bytes,2,opt,name=error_response,json=errorResponse,oneof"`
}

func (*RetryPolicyResponse_RetryPolicy) isRetryPolicyResponse_Response() {}

func (*RetryPolicyResponse_ErrorResponse) isRetryPolicyResponse_Response() {}

// RetryPolicy defines the retry policy that should be used for the provider
// with resource, link and data source operations.
type RetryPolicy struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The maximum number of retries that should be attempted
	// for a resource, link or data source operation.
	// If this is 0, no retries should be attempted.
	MaxRetries int32 `protobuf:"varint,1,opt,name=max_retries,json=maxRetries" json:"max_retries,omitempty"`
	// The delay in seconds that should be used before the first retry
	// attempt.
	// Fractional seconds are supported.
	FirstRetryDelay float64 `protobuf:"fixed64,2,opt,name=first_retry_delay,json=firstRetryDelay" json:"first_retry_delay,omitempty"`
	// The maximum internval in seconds to wait between retries.
	// If -1 is provided, no maximum delay is enforced.
	// Fractional seconds are supported.
	MaxDelay float64 `protobuf:"fixed64,3,opt,name=max_delay,json=maxDelay" json:"max_delay,omitempty"`
	// The factor that should be used to calculate the backoff time
	// between retries.
	// This AWS blog post from 2015 provides a good insight into how exponential backoff works:
	// https://aws.amazon.com/blogs/architecture/exponential-backoff-and-jitter/
	BackoffFactor float64 `protobuf:"fixed64,4,opt,name=backoff_factor,json=backoffFactor" json:"backoff_factor,omitempty"`
	// Determines whether to apply jitter to the retry interval.
	// This AWS blog post from 2015 provides a good insight into how jitter works:
	// https://aws.amazon.com/blogs/architecture/exponential-backoff-and-jitter/
	Jitter        bool `protobuf:"varint,5,opt,name=jitter" json:"jitter,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RetryPolicy) Reset() {
	*x = RetryPolicy{}
	mi := &file_plugin_framework_providerserverv1_provider_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RetryPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetryPolicy) ProtoMessage() {}

func (x *RetryPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_framework_providerserverv1_provider_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetryPolicy.ProtoReflect.Descriptor instead.
func (*RetryPolicy) Descriptor() ([]byte, []int) {
	return file_plugin_framework_providerserverv1_provider_proto_rawDescGZIP(), []int{13}
}

func (x *RetryPolicy) GetMaxRetries() int32 {
	if x != nil {
		return x.MaxRetries
	}
	return 0
}

func (x *RetryPolicy) GetFirstRetryDelay() float64 {
	if x != nil {
		return x.FirstRetryDelay
	}
	return 0
}

func (x *RetryPolicy) GetMaxDelay() float64 {
	if x != nil {
		return x.MaxDelay
	}
	return 0
}

func (x *RetryPolicy) GetBackoffFactor() float64 {
	if x != nil {
		return x.BackoffFactor
	}
	return 0
}

func (x *RetryPolicy) GetJitter() bool {
	if x != nil {
		return x.Jitter
	}
	return false
}

// CustomValidateResourceRequest is the request
// for custom resource validation.
type CustomValidateResourceRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The type of resource being validate.
	ResourceType *sharedtypesv1.ResourceType `protobuf:"bytes,1,opt,name=resource_type,json=resourceType" json:"resource_type,omitempty"`
	// The ID of the host making the request
	// to the provider.
	HostId string `protobuf:"bytes,2,opt,name=host_id,json=hostId" json:"host_id,omitempty"`
	// The resource schema as parsed within a blueprint.
	SchemaResource *schemapb.Resource `protobuf:"bytes,3,opt,name=schema_resource,json=schemaResource" json:"schema_resource,omitempty"`
	// Runtime configuration for the current environment
	// specific to the current provider.
	Context       *sharedtypesv1.ProviderContext `protobuf:"bytes,4,opt,name=context" json:"context,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CustomValidateResourceRequest) Reset() {
	*x = CustomValidateResourceRequest{}
	mi := &file_plugin_framework_providerserverv1_provider_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CustomValidateResourceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomValidateResourceRequest) ProtoMessage() {}

func (x *CustomValidateResourceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_framework_providerserverv1_provider_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomValidateResourceRequest.ProtoReflect.Descriptor instead.
func (*CustomValidateResourceRequest) Descriptor() ([]byte, []int) {
	return file_plugin_framework_providerserverv1_provider_proto_rawDescGZIP(), []int{14}
}

func (x *CustomValidateResourceRequest) GetResourceType() *sharedtypesv1.ResourceType {
	if x != nil {
		return x.ResourceType
	}
	return nil
}

func (x *CustomValidateResourceRequest) GetHostId() string {
	if x != nil {
		return x.HostId
	}
	return ""
}

func (x *CustomValidateResourceRequest) GetSchemaResource() *schemapb.Resource {
	if x != nil {
		return x.SchemaResource
	}
	return nil
}

func (x *CustomValidateResourceRequest) GetContext() *sharedtypesv1.ProviderContext {
	if x != nil {
		return x.Context
	}
	return nil
}

// CustomValidateResourceResponse is the response
// for custom resource validation, can be a validation
// complete response or an error response.
type CustomValidateResourceResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Response:
	//
	//	*CustomValidateResourceResponse_CompleteResponse
	//	*CustomValidateResourceResponse_ErrorResponse
	Response      isCustomValidateResourceResponse_Response `protobuf_oneof:"response"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CustomValidateResourceResponse) Reset() {
	*x = CustomValidateResourceResponse{}
	mi := &file_plugin_framework_providerserverv1_provider_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CustomValidateResourceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomValidateResourceResponse) ProtoMessage() {}

func (x *CustomValidateResourceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_framework_providerserverv1_provider_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomValidateResourceResponse.ProtoReflect.Descriptor instead.
func (*CustomValidateResourceResponse) Descriptor() ([]byte, []int) {
	return file_plugin_framework_providerserverv1_provider_proto_rawDescGZIP(), []int{15}
}

func (x *CustomValidateResourceResponse) GetResponse() isCustomValidateResourceResponse_Response {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *CustomValidateResourceResponse) GetCompleteResponse() *CustomValidateResourceCompleteResponse {
	if x != nil {
		if x, ok := x.Response.(*CustomValidateResourceResponse_CompleteResponse); ok {
			return x.CompleteResponse
		}
	}
	return nil
}

func (x *CustomValidateResourceResponse) GetErrorResponse() *sharedtypesv1.ErrorResponse {
	if x != nil {
		if x, ok := x.Response.(*CustomValidateResourceResponse_ErrorResponse); ok {
			return x.ErrorResponse
		}
	}
	return nil
}

type isCustomValidateResourceResponse_Response interface {
	isCustomValidateResourceResponse_Response()
}

type CustomValidateResourceResponse_CompleteResponse struct {
	CompleteResponse *CustomValidateResourceCompleteResponse `protobuf:"bytes,1,opt,name=complete_response,json=completeResponse,oneof"`
}

type CustomValidateResourceResponse_ErrorResponse struct {
	ErrorResponse *sharedtypesv1.ErrorResponse `protobuf:"bytes,2,opt,name=error_response,json=errorResponse,oneof"`
}

func (*CustomValidateResourceResponse_CompleteResponse) isCustomValidateResourceResponse_Response() {}

func (*CustomValidateResourceResponse_ErrorResponse) isCustomValidateResourceResponse_Response() {}

// CustomValidateResourceCompleteResponse is the response
// returned by the provider plugin when custom resource
// validation has been completed.
type CustomValidateResourceCompleteResponse struct {
	state         protoimpl.MessageState      `protogen:"open.v1"`
	Diagnostics   []*sharedtypesv1.Diagnostic `protobuf:"bytes,1,rep,name=diagnostics" json:"diagnostics,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CustomValidateResourceCompleteResponse) Reset() {
	*x = CustomValidateResourceCompleteResponse{}
	mi := &file_plugin_framework_providerserverv1_provider_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CustomValidateResourceCompleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomValidateResourceCompleteResponse) ProtoMessage() {}

func (x *CustomValidateResourceCompleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_framework_providerserverv1_provider_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomValidateResourceCompleteResponse.ProtoReflect.Descriptor instead.
func (*CustomValidateResourceCompleteResponse) Descriptor() ([]byte, []int) {
	return file_plugin_framework_providerserverv1_provider_proto_rawDescGZIP(), []int{16}
}

func (x *CustomValidateResourceCompleteResponse) GetDiagnostics() []*sharedtypesv1.Diagnostic {
	if x != nil {
		return x.Diagnostics
	}
	return nil
}

// ResourceSpecDefinitionResponse is the response
// containing the spec definition for a given resource type.
type ResourceSpecDefinitionResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Response:
	//
	//	*ResourceSpecDefinitionResponse_SpecDefinition
	//	*ResourceSpecDefinitionResponse_ErrorResponse
	Response      isResourceSpecDefinitionResponse_Response `protobuf_oneof:"response"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResourceSpecDefinitionResponse) Reset() {
	*x = ResourceSpecDefinitionResponse{}
	mi := &file_plugin_framework_providerserverv1_provider_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResourceSpecDefinitionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceSpecDefinitionResponse) ProtoMessage() {}

func (x *ResourceSpecDefinitionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_framework_providerserverv1_provider_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceSpecDefinitionResponse.ProtoReflect.Descriptor instead.
func (*ResourceSpecDefinitionResponse) Descriptor() ([]byte, []int) {
	return file_plugin_framework_providerserverv1_provider_proto_rawDescGZIP(), []int{17}
}

func (x *ResourceSpecDefinitionResponse) GetResponse() isResourceSpecDefinitionResponse_Response {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *ResourceSpecDefinitionResponse) GetSpecDefinition() *sharedtypesv1.ResourceSpecDefinition {
	if x != nil {
		if x, ok := x.Response.(*ResourceSpecDefinitionResponse_SpecDefinition); ok {
			return x.SpecDefinition
		}
	}
	return nil
}

func (x *ResourceSpecDefinitionResponse) GetErrorResponse() *sharedtypesv1.ErrorResponse {
	if x != nil {
		if x, ok := x.Response.(*ResourceSpecDefinitionResponse_ErrorResponse); ok {
			return x.ErrorResponse
		}
	}
	return nil
}

type isResourceSpecDefinitionResponse_Response interface {
	isResourceSpecDefinitionResponse_Response()
}

type ResourceSpecDefinitionResponse_SpecDefinition struct {
	SpecDefinition *sharedtypesv1.ResourceSpecDefinition `protobuf:"bytes,1,opt,name=spec_definition,json=specDefinition,oneof"`
}

type ResourceSpecDefinitionResponse_ErrorResponse struct {
	ErrorResponse *sharedtypesv1.ErrorResponse `protobuf:"bytes,2,opt,name=error_response,json=errorResponse,oneof"`
}

func (*ResourceSpecDefinitionResponse_SpecDefinition) isResourceSpecDefinitionResponse_Response() {}

func (*ResourceSpecDefinitionResponse_ErrorResponse) isResourceSpecDefinitionResponse_Response() {}

// CanResourceLinkToResponse is the response
// for a request to get all the resource types
// that a given resource type can link to.
type CanResourceLinkToResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Response:
	//
	//	*CanResourceLinkToResponse_ResourceTypes
	//	*CanResourceLinkToResponse_ErrorResponse
	Response      isCanResourceLinkToResponse_Response `protobuf_oneof:"response"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CanResourceLinkToResponse) Reset() {
	*x = CanResourceLinkToResponse{}
	mi := &file_plugin_framework_providerserverv1_provider_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CanResourceLinkToResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CanResourceLinkToResponse) ProtoMessage() {}

func (x *CanResourceLinkToResponse) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_framework_providerserverv1_provider_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CanResourceLinkToResponse.ProtoReflect.Descriptor instead.
func (*CanResourceLinkToResponse) Descriptor() ([]byte, []int) {
	return file_plugin_framework_providerserverv1_provider_proto_rawDescGZIP(), []int{18}
}

func (x *CanResourceLinkToResponse) GetResponse() isCanResourceLinkToResponse_Response {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *CanResourceLinkToResponse) GetResourceTypes() *sharedtypesv1.CanLinkTo {
	if x != nil {
		if x, ok := x.Response.(*CanResourceLinkToResponse_ResourceTypes); ok {
			return x.ResourceTypes
		}
	}
	return nil
}

func (x *CanResourceLinkToResponse) GetErrorResponse() *sharedtypesv1.ErrorResponse {
	if x != nil {
		if x, ok := x.Response.(*CanResourceLinkToResponse_ErrorResponse); ok {
			return x.ErrorResponse
		}
	}
	return nil
}

type isCanResourceLinkToResponse_Response interface {
	isCanResourceLinkToResponse_Response()
}

type CanResourceLinkToResponse_ResourceTypes struct {
	ResourceTypes *sharedtypesv1.CanLinkTo `protobuf:"bytes,1,opt,name=resource_types,json=resourceTypes,oneof"`
}

type CanResourceLinkToResponse_ErrorResponse struct {
	ErrorResponse *sharedtypesv1.ErrorResponse `protobuf:"bytes,2,opt,name=error_response,json=errorResponse,oneof"`
}

func (*CanResourceLinkToResponse_ResourceTypes) isCanResourceLinkToResponse_Response() {}

func (*CanResourceLinkToResponse_ErrorResponse) isCanResourceLinkToResponse_Response() {}

// ResourceStabilisedDepsResponse is the response
// containing the list of resource types that must be
// stabilised before the current resource can be deployed.
type ResourceStabilisedDepsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Response:
	//
	//	*ResourceStabilisedDepsResponse_StabilisedDependencies
	//	*ResourceStabilisedDepsResponse_ErrorResponse
	Response      isResourceStabilisedDepsResponse_Response `protobuf_oneof:"response"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResourceStabilisedDepsResponse) Reset() {
	*x = ResourceStabilisedDepsResponse{}
	mi := &file_plugin_framework_providerserverv1_provider_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResourceStabilisedDepsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceStabilisedDepsResponse) ProtoMessage() {}

func (x *ResourceStabilisedDepsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_framework_providerserverv1_provider_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceStabilisedDepsResponse.ProtoReflect.Descriptor instead.
func (*ResourceStabilisedDepsResponse) Descriptor() ([]byte, []int) {
	return file_plugin_framework_providerserverv1_provider_proto_rawDescGZIP(), []int{19}
}

func (x *ResourceStabilisedDepsResponse) GetResponse() isResourceStabilisedDepsResponse_Response {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *ResourceStabilisedDepsResponse) GetStabilisedDependencies() *StabilisedDependencies {
	if x != nil {
		if x, ok := x.Response.(*ResourceStabilisedDepsResponse_StabilisedDependencies); ok {
			return x.StabilisedDependencies
		}
	}
	return nil
}

func (x *ResourceStabilisedDepsResponse) GetErrorResponse() *sharedtypesv1.ErrorResponse {
	if x != nil {
		if x, ok := x.Response.(*ResourceStabilisedDepsResponse_ErrorResponse); ok {
			return x.ErrorResponse
		}
	}
	return nil
}

type isResourceStabilisedDepsResponse_Response interface {
	isResourceStabilisedDepsResponse_Response()
}

type ResourceStabilisedDepsResponse_StabilisedDependencies struct {
	StabilisedDependencies *StabilisedDependencies `protobuf:"bytes,1,opt,name=stabilised_dependencies,json=stabilisedDependencies,oneof"`
}

type ResourceStabilisedDepsResponse_ErrorResponse struct {
	ErrorResponse *sharedtypesv1.ErrorResponse `protobuf:"bytes,2,opt,name=error_response,json=errorResponse,oneof"`
}

func (*ResourceStabilisedDepsResponse_StabilisedDependencies) isResourceStabilisedDepsResponse_Response() {
}

func (*ResourceStabilisedDepsResponse_ErrorResponse) isResourceStabilisedDepsResponse_Response() {}

// StabilisedDependencies holds a list of resource types
// that must be stabilised before the current resource can be deployed.
type StabilisedDependencies struct {
	state         protoimpl.MessageState        `protogen:"open.v1"`
	ResourceTypes []*sharedtypesv1.ResourceType `protobuf:"bytes,1,rep,name=resource_types,json=resourceTypes" json:"resource_types,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StabilisedDependencies) Reset() {
	*x = StabilisedDependencies{}
	mi := &file_plugin_framework_providerserverv1_provider_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StabilisedDependencies) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StabilisedDependencies) ProtoMessage() {}

func (x *StabilisedDependencies) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_framework_providerserverv1_provider_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StabilisedDependencies.ProtoReflect.Descriptor instead.
func (*StabilisedDependencies) Descriptor() ([]byte, []int) {
	return file_plugin_framework_providerserverv1_provider_proto_rawDescGZIP(), []int{20}
}

func (x *StabilisedDependencies) GetResourceTypes() []*sharedtypesv1.ResourceType {
	if x != nil {
		return x.ResourceTypes
	}
	return nil
}

// IsResourceCommonTerminalResponse is the response
// for a request to check if a given resource type is
// expected to have a common use-case as a terminal resource.
type IsResourceCommonTerminalResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Response:
	//
	//	*IsResourceCommonTerminalResponse_Data
	//	*IsResourceCommonTerminalResponse_ErrorResponse
	Response      isIsResourceCommonTerminalResponse_Response `protobuf_oneof:"response"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IsResourceCommonTerminalResponse) Reset() {
	*x = IsResourceCommonTerminalResponse{}
	mi := &file_plugin_framework_providerserverv1_provider_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IsResourceCommonTerminalResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsResourceCommonTerminalResponse) ProtoMessage() {}

func (x *IsResourceCommonTerminalResponse) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_framework_providerserverv1_provider_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsResourceCommonTerminalResponse.ProtoReflect.Descriptor instead.
func (*IsResourceCommonTerminalResponse) Descriptor() ([]byte, []int) {
	return file_plugin_framework_providerserverv1_provider_proto_rawDescGZIP(), []int{21}
}

func (x *IsResourceCommonTerminalResponse) GetResponse() isIsResourceCommonTerminalResponse_Response {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *IsResourceCommonTerminalResponse) GetData() *sharedtypesv1.ResourceCommonTerminalInfo {
	if x != nil {
		if x, ok := x.Response.(*IsResourceCommonTerminalResponse_Data); ok {
			return x.Data
		}
	}
	return nil
}

func (x *IsResourceCommonTerminalResponse) GetErrorResponse() *sharedtypesv1.ErrorResponse {
	if x != nil {
		if x, ok := x.Response.(*IsResourceCommonTerminalResponse_ErrorResponse); ok {
			return x.ErrorResponse
		}
	}
	return nil
}

type isIsResourceCommonTerminalResponse_Response interface {
	isIsResourceCommonTerminalResponse_Response()
}

type IsResourceCommonTerminalResponse_Data struct {
	Data *sharedtypesv1.ResourceCommonTerminalInfo `protobuf:"bytes,1,opt,name=data,oneof"`
}

type IsResourceCommonTerminalResponse_ErrorResponse struct {
	ErrorResponse *sharedtypesv1.ErrorResponse `protobuf:"bytes,2,opt,name=error_response,json=errorResponse,oneof"`
}

func (*IsResourceCommonTerminalResponse_Data) isIsResourceCommonTerminalResponse_Response() {}

func (*IsResourceCommonTerminalResponse_ErrorResponse) isIsResourceCommonTerminalResponse_Response() {
}

// GetResourceExternalStateRequest is the request that contains
// the input data needed to get the live state of a resource from the
// upstream provider.
type GetResourceExternalStateRequest struct {
	state        protoimpl.MessageState      `protogen:"open.v1"`
	ResourceType *sharedtypesv1.ResourceType `protobuf:"bytes,1,opt,name=resource_type,json=resourceType" json:"resource_type,omitempty"`
	// The ID of the host making the request
	// to the provider.
	HostId                  string                               `protobuf:"bytes,2,opt,name=host_id,json=hostId" json:"host_id,omitempty"`
	InstanceId              string                               `protobuf:"bytes,3,opt,name=instance_id,json=instanceId" json:"instance_id,omitempty"`
	InstanceName            string                               `protobuf:"bytes,4,opt,name=instance_name,json=instanceName" json:"instance_name,omitempty"`
	ResourceId              string                               `protobuf:"bytes,5,opt,name=resource_id,json=resourceId" json:"resource_id,omitempty"`
	CurrentResourceSpec     *schemapb.MappingNode                `protobuf:"bytes,6,opt,name=current_resource_spec,json=currentResourceSpec" json:"current_resource_spec,omitempty"`
	CurrentResourceMetadata *sharedtypesv1.ResourceMetadataState `protobuf:"bytes,7,opt,name=current_resource_metadata,json=currentResourceMetadata" json:"current_resource_metadata,omitempty"`
	Context                 *sharedtypesv1.ProviderContext       `protobuf:"bytes,8,opt,name=context" json:"context,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *GetResourceExternalStateRequest) Reset() {
	*x = GetResourceExternalStateRequest{}
	mi := &file_plugin_framework_providerserverv1_provider_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetResourceExternalStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetResourceExternalStateRequest) ProtoMessage() {}

func (x *GetResourceExternalStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_framework_providerserverv1_provider_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetResourceExternalStateRequest.ProtoReflect.Descriptor instead.
func (*GetResourceExternalStateRequest) Descriptor() ([]byte, []int) {
	return file_plugin_framework_providerserverv1_provider_proto_rawDescGZIP(), []int{22}
}

func (x *GetResourceExternalStateRequest) GetResourceType() *sharedtypesv1.ResourceType {
	if x != nil {
		return x.ResourceType
	}
	return nil
}

func (x *GetResourceExternalStateRequest) GetHostId() string {
	if x != nil {
		return x.HostId
	}
	return ""
}

func (x *GetResourceExternalStateRequest) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *GetResourceExternalStateRequest) GetInstanceName() string {
	if x != nil {
		return x.InstanceName
	}
	return ""
}

func (x *GetResourceExternalStateRequest) GetResourceId() string {
	if x != nil {
		return x.ResourceId
	}
	return ""
}

func (x *GetResourceExternalStateRequest) GetCurrentResourceSpec() *schemapb.MappingNode {
	if x != nil {
		return x.CurrentResourceSpec
	}
	return nil
}

func (x *GetResourceExternalStateRequest) GetCurrentResourceMetadata() *sharedtypesv1.ResourceMetadataState {
	if x != nil {
		return x.CurrentResourceMetadata
	}
	return nil
}

func (x *GetResourceExternalStateRequest) GetContext() *sharedtypesv1.ProviderContext {
	if x != nil {
		return x.Context
	}
	return nil
}

// GetResourceExternalStateResponse is the response
// containing the live state of a resource derived from
// the upstream provider.
type GetResourceExternalStateResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Response:
	//
	//	*GetResourceExternalStateResponse_ResourceSpecState
	//	*GetResourceExternalStateResponse_ErrorResponse
	Response      isGetResourceExternalStateResponse_Response `protobuf_oneof:"response"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetResourceExternalStateResponse) Reset() {
	*x = GetResourceExternalStateResponse{}
	mi := &file_plugin_framework_providerserverv1_provider_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetResourceExternalStateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetResourceExternalStateResponse) ProtoMessage() {}

func (x *GetResourceExternalStateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_framework_providerserverv1_provider_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetResourceExternalStateResponse.ProtoReflect.Descriptor instead.
func (*GetResourceExternalStateResponse) Descriptor() ([]byte, []int) {
	return file_plugin_framework_providerserverv1_provider_proto_rawDescGZIP(), []int{23}
}

func (x *GetResourceExternalStateResponse) GetResponse() isGetResourceExternalStateResponse_Response {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *GetResourceExternalStateResponse) GetResourceSpecState() *schemapb.MappingNode {
	if x != nil {
		if x, ok := x.Response.(*GetResourceExternalStateResponse_ResourceSpecState); ok {
			return x.ResourceSpecState
		}
	}
	return nil
}

func (x *GetResourceExternalStateResponse) GetErrorResponse() *sharedtypesv1.ErrorResponse {
	if x != nil {
		if x, ok := x.Response.(*GetResourceExternalStateResponse_ErrorResponse); ok {
			return x.ErrorResponse
		}
	}
	return nil
}

type isGetResourceExternalStateResponse_Response interface {
	isGetResourceExternalStateResponse_Response()
}

type GetResourceExternalStateResponse_ResourceSpecState struct {
	ResourceSpecState *schemapb.MappingNode `protobuf:"bytes,1,opt,name=resource_spec_state,json=resourceSpecState,oneof"`
}

type GetResourceExternalStateResponse_ErrorResponse struct {
	ErrorResponse *sharedtypesv1.ErrorResponse `protobuf:"bytes,2,opt,name=error_response,json=errorResponse,oneof"`
}

func (*GetResourceExternalStateResponse_ResourceSpecState) isGetResourceExternalStateResponse_Response() {
}

func (*GetResourceExternalStateResponse_ErrorResponse) isGetResourceExternalStateResponse_Response() {
}

// ProviderRequest is the request input
// for general provider requests that only require
// a host ID.
type ProviderRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The ID of the host making the request
	// to the provider.
	HostId        string `protobuf:"bytes,1,opt,name=host_id,json=hostId" json:"host_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProviderRequest) Reset() {
	*x = ProviderRequest{}
	mi := &file_plugin_framework_providerserverv1_provider_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProviderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProviderRequest) ProtoMessage() {}

func (x *ProviderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_framework_providerserverv1_provider_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProviderRequest.ProtoReflect.Descriptor instead.
func (*ProviderRequest) Descriptor() ([]byte, []int) {
	return file_plugin_framework_providerserverv1_provider_proto_rawDescGZIP(), []int{24}
}

func (x *ProviderRequest) GetHostId() string {
	if x != nil {
		return x.HostId
	}
	return ""
}

// ResourceRequest is the request input
// for general resource type requests that only require
// a resource type and the current context.
type ResourceRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The type of resource to carry out an action on or retrieve
	// some information about.
	ResourceType *sharedtypesv1.ResourceType `protobuf:"bytes,1,opt,name=resource_type,json=resourceType" json:"resource_type,omitempty"`
	// The ID of the host making the request
	// to the provider.
	HostId string `protobuf:"bytes,2,opt,name=host_id,json=hostId" json:"host_id,omitempty"`
	// Runtime configuration for the current environment
	// specific to the current provider.
	Context       *sharedtypesv1.ProviderContext `protobuf:"bytes,3,opt,name=context" json:"context,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResourceRequest) Reset() {
	*x = ResourceRequest{}
	mi := &file_plugin_framework_providerserverv1_provider_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResourceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceRequest) ProtoMessage() {}

func (x *ResourceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_framework_providerserverv1_provider_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceRequest.ProtoReflect.Descriptor instead.
func (*ResourceRequest) Descriptor() ([]byte, []int) {
	return file_plugin_framework_providerserverv1_provider_proto_rawDescGZIP(), []int{25}
}

func (x *ResourceRequest) GetResourceType() *sharedtypesv1.ResourceType {
	if x != nil {
		return x.ResourceType
	}
	return nil
}

func (x *ResourceRequest) GetHostId() string {
	if x != nil {
		return x.HostId
	}
	return ""
}

func (x *ResourceRequest) GetContext() *sharedtypesv1.ProviderContext {
	if x != nil {
		return x.Context
	}
	return nil
}

// DataSourceRequest is the request input
// for general data source type requests that only require
// a data source type and the current context.
type DataSourceRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The type of data source to carry out an action on or retrieve
	// some information about.
	DataSourceType *DataSourceType `protobuf:"bytes,1,opt,name=data_source_type,json=dataSourceType" json:"data_source_type,omitempty"`
	// The ID of the host making the request
	// to the provider.
	HostId string `protobuf:"bytes,2,opt,name=host_id,json=hostId" json:"host_id,omitempty"`
	// Runtime configuration for the current environment
	// specific to the current provider.
	Context       *sharedtypesv1.ProviderContext `protobuf:"bytes,3,opt,name=context" json:"context,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DataSourceRequest) Reset() {
	*x = DataSourceRequest{}
	mi := &file_plugin_framework_providerserverv1_provider_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DataSourceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataSourceRequest) ProtoMessage() {}

func (x *DataSourceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_framework_providerserverv1_provider_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataSourceRequest.ProtoReflect.Descriptor instead.
func (*DataSourceRequest) Descriptor() ([]byte, []int) {
	return file_plugin_framework_providerserverv1_provider_proto_rawDescGZIP(), []int{26}
}

func (x *DataSourceRequest) GetDataSourceType() *DataSourceType {
	if x != nil {
		return x.DataSourceType
	}
	return nil
}

func (x *DataSourceRequest) GetHostId() string {
	if x != nil {
		return x.HostId
	}
	return ""
}

func (x *DataSourceRequest) GetContext() *sharedtypesv1.ProviderContext {
	if x != nil {
		return x.Context
	}
	return nil
}

// CustomVariableTypeRequest is the request input
// for custom variable type requests that only require
// a custom variable type and the current context.
type CustomVariableTypeRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The type of custom variable type to carry out an action
	// on or retrieve some information about.
	CustomVariableType *CustomVariableType `protobuf:"bytes,1,opt,name=custom_variable_type,json=customVariableType" json:"custom_variable_type,omitempty"`
	// The ID of the host making the request
	// to the provider.
	HostId string `protobuf:"bytes,2,opt,name=host_id,json=hostId" json:"host_id,omitempty"`
	// Runtime configuration for the current environment
	// specific to the current provider.
	Context       *sharedtypesv1.ProviderContext `protobuf:"bytes,3,opt,name=context" json:"context,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CustomVariableTypeRequest) Reset() {
	*x = CustomVariableTypeRequest{}
	mi := &file_plugin_framework_providerserverv1_provider_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CustomVariableTypeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomVariableTypeRequest) ProtoMessage() {}

func (x *CustomVariableTypeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_framework_providerserverv1_provider_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomVariableTypeRequest.ProtoReflect.Descriptor instead.
func (*CustomVariableTypeRequest) Descriptor() ([]byte, []int) {
	return file_plugin_framework_providerserverv1_provider_proto_rawDescGZIP(), []int{27}
}

func (x *CustomVariableTypeRequest) GetCustomVariableType() *CustomVariableType {
	if x != nil {
		return x.CustomVariableType
	}
	return nil
}

func (x *CustomVariableTypeRequest) GetHostId() string {
	if x != nil {
		return x.HostId
	}
	return ""
}

func (x *CustomVariableTypeRequest) GetContext() *sharedtypesv1.ProviderContext {
	if x != nil {
		return x.Context
	}
	return nil
}

// StageLinkChangesRequest provides the input data needed to stage
// changes for a link between two resources.
type StageLinkChangesRequest struct {
	state    protoimpl.MessageState `protogen:"open.v1"`
	LinkType *LinkType              `protobuf:"bytes,1,opt,name=link_type,json=linkType" json:"link_type,omitempty"`
	// The ID of the host making the request
	// to the provider.
	HostId           string                 `protobuf:"bytes,2,opt,name=host_id,json=hostId" json:"host_id,omitempty"`
	ResourceAChanges *sharedtypesv1.Changes `protobuf:"bytes,3,opt,name=resource_a_changes,json=resourceAChanges" json:"resource_a_changes,omitempty"`
	ResourceBChanges *sharedtypesv1.Changes `protobuf:"bytes,4,opt,name=resource_b_changes,json=resourceBChanges" json:"resource_b_changes,omitempty"`
	CurrentLinkState *LinkState             `protobuf:"bytes,5,opt,name=current_link_state,json=currentLinkState" json:"current_link_state,omitempty"`
	Context          *LinkContext           `protobuf:"bytes,6,opt,name=context" json:"context,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *StageLinkChangesRequest) Reset() {
	*x = StageLinkChangesRequest{}
	mi := &file_plugin_framework_providerserverv1_provider_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StageLinkChangesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StageLinkChangesRequest) ProtoMessage() {}

func (x *StageLinkChangesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_framework_providerserverv1_provider_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StageLinkChangesRequest.ProtoReflect.Descriptor instead.
func (*StageLinkChangesRequest) Descriptor() ([]byte, []int) {
	return file_plugin_framework_providerserverv1_provider_proto_rawDescGZIP(), []int{28}
}

func (x *StageLinkChangesRequest) GetLinkType() *LinkType {
	if x != nil {
		return x.LinkType
	}
	return nil
}

func (x *StageLinkChangesRequest) GetHostId() string {
	if x != nil {
		return x.HostId
	}
	return ""
}

func (x *StageLinkChangesRequest) GetResourceAChanges() *sharedtypesv1.Changes {
	if x != nil {
		return x.ResourceAChanges
	}
	return nil
}

func (x *StageLinkChangesRequest) GetResourceBChanges() *sharedtypesv1.Changes {
	if x != nil {
		return x.ResourceBChanges
	}
	return nil
}

func (x *StageLinkChangesRequest) GetCurrentLinkState() *LinkState {
	if x != nil {
		return x.CurrentLinkState
	}
	return nil
}

func (x *StageLinkChangesRequest) GetContext() *LinkContext {
	if x != nil {
		return x.Context
	}
	return nil
}

// StageLinkChangesResponse is the response
// containing the result of staging changes for a link.
type StageLinkChangesResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Response:
	//
	//	*StageLinkChangesResponse_CompleteResponse
	//	*StageLinkChangesResponse_ErrorResponse
	Response      isStageLinkChangesResponse_Response `protobuf_oneof:"response"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StageLinkChangesResponse) Reset() {
	*x = StageLinkChangesResponse{}
	mi := &file_plugin_framework_providerserverv1_provider_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StageLinkChangesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StageLinkChangesResponse) ProtoMessage() {}

func (x *StageLinkChangesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_framework_providerserverv1_provider_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StageLinkChangesResponse.ProtoReflect.Descriptor instead.
func (*StageLinkChangesResponse) Descriptor() ([]byte, []int) {
	return file_plugin_framework_providerserverv1_provider_proto_rawDescGZIP(), []int{29}
}

func (x *StageLinkChangesResponse) GetResponse() isStageLinkChangesResponse_Response {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *StageLinkChangesResponse) GetCompleteResponse() *StageLinkChangesCompleteResponse {
	if x != nil {
		if x, ok := x.Response.(*StageLinkChangesResponse_CompleteResponse); ok {
			return x.CompleteResponse
		}
	}
	return nil
}

func (x *StageLinkChangesResponse) GetErrorResponse() *sharedtypesv1.ErrorResponse {
	if x != nil {
		if x, ok := x.Response.(*StageLinkChangesResponse_ErrorResponse); ok {
			return x.ErrorResponse
		}
	}
	return nil
}

type isStageLinkChangesResponse_Response interface {
	isStageLinkChangesResponse_Response()
}

type StageLinkChangesResponse_CompleteResponse struct {
	CompleteResponse *StageLinkChangesCompleteResponse `protobuf:"bytes,1,opt,name=complete_response,json=completeResponse,oneof"`
}

type StageLinkChangesResponse_ErrorResponse struct {
	ErrorResponse *sharedtypesv1.ErrorResponse `protobuf:"bytes,2,opt,name=error_response,json=errorResponse,oneof"`
}

func (*StageLinkChangesResponse_CompleteResponse) isStageLinkChangesResponse_Response() {}

func (*StageLinkChangesResponse_ErrorResponse) isStageLinkChangesResponse_Response() {}

// StageLinkChangesCompleteResponse is the response
// returned by the provider plugin when changes for a link have been staged.
type StageLinkChangesCompleteResponse struct {
	state         protoimpl.MessageState     `protogen:"open.v1"`
	Changes       *sharedtypesv1.LinkChanges `protobuf:"bytes,1,opt,name=changes" json:"changes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StageLinkChangesCompleteResponse) Reset() {
	*x = StageLinkChangesCompleteResponse{}
	mi := &file_plugin_framework_providerserverv1_provider_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StageLinkChangesCompleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StageLinkChangesCompleteResponse) ProtoMessage() {}

func (x *StageLinkChangesCompleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_framework_providerserverv1_provider_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StageLinkChangesCompleteResponse.ProtoReflect.Descriptor instead.
func (*StageLinkChangesCompleteResponse) Descriptor() ([]byte, []int) {
	return file_plugin_framework_providerserverv1_provider_proto_rawDescGZIP(), []int{30}
}

func (x *StageLinkChangesCompleteResponse) GetChanges() *sharedtypesv1.LinkChanges {
	if x != nil {
		return x.Changes
	}
	return nil
}

// UpdateLinkResourceRequest provides the input data needed to update
// a link between two resources.
type UpdateLinkResourceRequest struct {
	state    protoimpl.MessageState `protogen:"open.v1"`
	LinkType *LinkType              `protobuf:"bytes,1,opt,name=link_type,json=linkType" json:"link_type,omitempty"`
	// The ID of the host making the request
	// to the provider.
	HostId            string                      `protobuf:"bytes,2,opt,name=host_id,json=hostId" json:"host_id,omitempty"`
	Changes           *sharedtypesv1.LinkChanges  `protobuf:"bytes,3,opt,name=changes" json:"changes,omitempty"`
	ResourceInfo      *sharedtypesv1.ResourceInfo `protobuf:"bytes,4,opt,name=resource_info,json=resourceInfo" json:"resource_info,omitempty"`
	OtherResourceInfo *sharedtypesv1.ResourceInfo `protobuf:"bytes,5,opt,name=other_resource_info,json=otherResourceInfo" json:"other_resource_info,omitempty"`
	InstanceName      string                      `protobuf:"bytes,6,opt,name=instance_name,json=instanceName" json:"instance_name,omitempty"`
	UpdateType        LinkUpdateType              `protobuf:"varint,7,opt,name=update_type,json=updateType,enum=providerserverv1.LinkUpdateType" json:"update_type,omitempty"`
	Context           *LinkContext                `protobuf:"bytes,8,opt,name=context" json:"context,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *UpdateLinkResourceRequest) Reset() {
	*x = UpdateLinkResourceRequest{}
	mi := &file_plugin_framework_providerserverv1_provider_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateLinkResourceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateLinkResourceRequest) ProtoMessage() {}

func (x *UpdateLinkResourceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_framework_providerserverv1_provider_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateLinkResourceRequest.ProtoReflect.Descriptor instead.
func (*UpdateLinkResourceRequest) Descriptor() ([]byte, []int) {
	return file_plugin_framework_providerserverv1_provider_proto_rawDescGZIP(), []int{31}
}

func (x *UpdateLinkResourceRequest) GetLinkType() *LinkType {
	if x != nil {
		return x.LinkType
	}
	return nil
}

func (x *UpdateLinkResourceRequest) GetHostId() string {
	if x != nil {
		return x.HostId
	}
	return ""
}

func (x *UpdateLinkResourceRequest) GetChanges() *sharedtypesv1.LinkChanges {
	if x != nil {
		return x.Changes
	}
	return nil
}

func (x *UpdateLinkResourceRequest) GetResourceInfo() *sharedtypesv1.ResourceInfo {
	if x != nil {
		return x.ResourceInfo
	}
	return nil
}

func (x *UpdateLinkResourceRequest) GetOtherResourceInfo() *sharedtypesv1.ResourceInfo {
	if x != nil {
		return x.OtherResourceInfo
	}
	return nil
}

func (x *UpdateLinkResourceRequest) GetInstanceName() string {
	if x != nil {
		return x.InstanceName
	}
	return ""
}

func (x *UpdateLinkResourceRequest) GetUpdateType() LinkUpdateType {
	if x != nil {
		return x.UpdateType
	}
	return LinkUpdateType_LINK_UPDATE_TYPE_CREATE
}

func (x *UpdateLinkResourceRequest) GetContext() *LinkContext {
	if x != nil {
		return x.Context
	}
	return nil
}

// UpdateLinkResourceResponse is the response
// containing the result of updating a resource as a part
// of a link.
type UpdateLinkResourceResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Response:
	//
	//	*UpdateLinkResourceResponse_CompleteResponse
	//	*UpdateLinkResourceResponse_ErrorResponse
	Response      isUpdateLinkResourceResponse_Response `protobuf_oneof:"response"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateLinkResourceResponse) Reset() {
	*x = UpdateLinkResourceResponse{}
	mi := &file_plugin_framework_providerserverv1_provider_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateLinkResourceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateLinkResourceResponse) ProtoMessage() {}

func (x *UpdateLinkResourceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_framework_providerserverv1_provider_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateLinkResourceResponse.ProtoReflect.Descriptor instead.
func (*UpdateLinkResourceResponse) Descriptor() ([]byte, []int) {
	return file_plugin_framework_providerserverv1_provider_proto_rawDescGZIP(), []int{32}
}

func (x *UpdateLinkResourceResponse) GetResponse() isUpdateLinkResourceResponse_Response {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *UpdateLinkResourceResponse) GetCompleteResponse() *UpdateLinkResourceCompleteResponse {
	if x != nil {
		if x, ok := x.Response.(*UpdateLinkResourceResponse_CompleteResponse); ok {
			return x.CompleteResponse
		}
	}
	return nil
}

func (x *UpdateLinkResourceResponse) GetErrorResponse() *sharedtypesv1.ErrorResponse {
	if x != nil {
		if x, ok := x.Response.(*UpdateLinkResourceResponse_ErrorResponse); ok {
			return x.ErrorResponse
		}
	}
	return nil
}

type isUpdateLinkResourceResponse_Response interface {
	isUpdateLinkResourceResponse_Response()
}

type UpdateLinkResourceResponse_CompleteResponse struct {
	CompleteResponse *UpdateLinkResourceCompleteResponse `protobuf:"bytes,1,opt,name=complete_response,json=completeResponse,oneof"`
}

type UpdateLinkResourceResponse_ErrorResponse struct {
	ErrorResponse *sharedtypesv1.ErrorResponse `protobuf:"bytes,2,opt,name=error_response,json=errorResponse,oneof"`
}

func (*UpdateLinkResourceResponse_CompleteResponse) isUpdateLinkResourceResponse_Response() {}

func (*UpdateLinkResourceResponse_ErrorResponse) isUpdateLinkResourceResponse_Response() {}

// UpdateLinkResourceCompleteResponse contains the result of updating
// a resource as a part of a link.
// The returned link data will be merged with the results from other
// link component updates to form the final link data that will be persisted
// in the blueprint instance state.
type UpdateLinkResourceCompleteResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	LinkData      *schemapb.MappingNode  `protobuf:"bytes,1,opt,name=link_data,json=linkData" json:"link_data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateLinkResourceCompleteResponse) Reset() {
	*x = UpdateLinkResourceCompleteResponse{}
	mi := &file_plugin_framework_providerserverv1_provider_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateLinkResourceCompleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateLinkResourceCompleteResponse) ProtoMessage() {}

func (x *UpdateLinkResourceCompleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_framework_providerserverv1_provider_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateLinkResourceCompleteResponse.ProtoReflect.Descriptor instead.
func (*UpdateLinkResourceCompleteResponse) Descriptor() ([]byte, []int) {
	return file_plugin_framework_providerserverv1_provider_proto_rawDescGZIP(), []int{33}
}

func (x *UpdateLinkResourceCompleteResponse) GetLinkData() *schemapb.MappingNode {
	if x != nil {
		return x.LinkData
	}
	return nil
}

// UpdateLinkIntermediaryResourcesRequest provides the input data needed
// to update intermediary resources for a link between two resources.
type UpdateLinkIntermediaryResourcesRequest struct {
	state    protoimpl.MessageState `protogen:"open.v1"`
	LinkType *LinkType              `protobuf:"bytes,1,opt,name=link_type,json=linkType" json:"link_type,omitempty"`
	// The ID of the host making the request
	// to the provider.
	HostId        string                      `protobuf:"bytes,2,opt,name=host_id,json=hostId" json:"host_id,omitempty"`
	ResourceAInfo *sharedtypesv1.ResourceInfo `protobuf:"bytes,3,opt,name=resource_a_info,json=resourceAInfo" json:"resource_a_info,omitempty"`
	ResourceBInfo *sharedtypesv1.ResourceInfo `protobuf:"bytes,4,opt,name=resource_b_info,json=resourceBInfo" json:"resource_b_info,omitempty"`
	Changes       *sharedtypesv1.LinkChanges  `protobuf:"bytes,5,opt,name=changes" json:"changes,omitempty"`
	InstanceName  string                      `protobuf:"bytes,6,opt,name=instance_name,json=instanceName" json:"instance_name,omitempty"`
	UpdateType    LinkUpdateType              `protobuf:"varint,7,opt,name=update_type,json=updateType,enum=providerserverv1.LinkUpdateType" json:"update_type,omitempty"`
	Context       *LinkContext                `protobuf:"bytes,8,opt,name=context" json:"context,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateLinkIntermediaryResourcesRequest) Reset() {
	*x = UpdateLinkIntermediaryResourcesRequest{}
	mi := &file_plugin_framework_providerserverv1_provider_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateLinkIntermediaryResourcesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateLinkIntermediaryResourcesRequest) ProtoMessage() {}

func (x *UpdateLinkIntermediaryResourcesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_framework_providerserverv1_provider_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateLinkIntermediaryResourcesRequest.ProtoReflect.Descriptor instead.
func (*UpdateLinkIntermediaryResourcesRequest) Descriptor() ([]byte, []int) {
	return file_plugin_framework_providerserverv1_provider_proto_rawDescGZIP(), []int{34}
}

func (x *UpdateLinkIntermediaryResourcesRequest) GetLinkType() *LinkType {
	if x != nil {
		return x.LinkType
	}
	return nil
}

func (x *UpdateLinkIntermediaryResourcesRequest) GetHostId() string {
	if x != nil {
		return x.HostId
	}
	return ""
}

func (x *UpdateLinkIntermediaryResourcesRequest) GetResourceAInfo() *sharedtypesv1.ResourceInfo {
	if x != nil {
		return x.ResourceAInfo
	}
	return nil
}

func (x *UpdateLinkIntermediaryResourcesRequest) GetResourceBInfo() *sharedtypesv1.ResourceInfo {
	if x != nil {
		return x.ResourceBInfo
	}
	return nil
}

func (x *UpdateLinkIntermediaryResourcesRequest) GetChanges() *sharedtypesv1.LinkChanges {
	if x != nil {
		return x.Changes
	}
	return nil
}

func (x *UpdateLinkIntermediaryResourcesRequest) GetInstanceName() string {
	if x != nil {
		return x.InstanceName
	}
	return ""
}

func (x *UpdateLinkIntermediaryResourcesRequest) GetUpdateType() LinkUpdateType {
	if x != nil {
		return x.UpdateType
	}
	return LinkUpdateType_LINK_UPDATE_TYPE_CREATE
}

func (x *UpdateLinkIntermediaryResourcesRequest) GetContext() *LinkContext {
	if x != nil {
		return x.Context
	}
	return nil
}

// UpdateLinkIntermediaryResourcesResponse is the response
// containing the result of updating intermediary resources for a link.
type UpdateLinkIntermediaryResourcesResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Response:
	//
	//	*UpdateLinkIntermediaryResourcesResponse_CompleteResponse
	//	*UpdateLinkIntermediaryResourcesResponse_ErrorResponse
	Response      isUpdateLinkIntermediaryResourcesResponse_Response `protobuf_oneof:"response"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateLinkIntermediaryResourcesResponse) Reset() {
	*x = UpdateLinkIntermediaryResourcesResponse{}
	mi := &file_plugin_framework_providerserverv1_provider_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateLinkIntermediaryResourcesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateLinkIntermediaryResourcesResponse) ProtoMessage() {}

func (x *UpdateLinkIntermediaryResourcesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_framework_providerserverv1_provider_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateLinkIntermediaryResourcesResponse.ProtoReflect.Descriptor instead.
func (*UpdateLinkIntermediaryResourcesResponse) Descriptor() ([]byte, []int) {
	return file_plugin_framework_providerserverv1_provider_proto_rawDescGZIP(), []int{35}
}

func (x *UpdateLinkIntermediaryResourcesResponse) GetResponse() isUpdateLinkIntermediaryResourcesResponse_Response {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *UpdateLinkIntermediaryResourcesResponse) GetCompleteResponse() *UpdateLinkIntermediaryResourcesCompleteResponse {
	if x != nil {
		if x, ok := x.Response.(*UpdateLinkIntermediaryResourcesResponse_CompleteResponse); ok {
			return x.CompleteResponse
		}
	}
	return nil
}

func (x *UpdateLinkIntermediaryResourcesResponse) GetErrorResponse() *sharedtypesv1.ErrorResponse {
	if x != nil {
		if x, ok := x.Response.(*UpdateLinkIntermediaryResourcesResponse_ErrorResponse); ok {
			return x.ErrorResponse
		}
	}
	return nil
}

type isUpdateLinkIntermediaryResourcesResponse_Response interface {
	isUpdateLinkIntermediaryResourcesResponse_Response()
}

type UpdateLinkIntermediaryResourcesResponse_CompleteResponse struct {
	CompleteResponse *UpdateLinkIntermediaryResourcesCompleteResponse `protobuf:"bytes,1,opt,name=complete_response,json=completeResponse,oneof"`
}

type UpdateLinkIntermediaryResourcesResponse_ErrorResponse struct {
	ErrorResponse *sharedtypesv1.ErrorResponse `protobuf:"bytes,2,opt,name=error_response,json=errorResponse,oneof"`
}

func (*UpdateLinkIntermediaryResourcesResponse_CompleteResponse) isUpdateLinkIntermediaryResourcesResponse_Response() {
}

func (*UpdateLinkIntermediaryResourcesResponse_ErrorResponse) isUpdateLinkIntermediaryResourcesResponse_Response() {
}

// UpdateLinkIntermediaryResourcesCompleteResponse contains the result
// of updating intermediary resources for a link.
type UpdateLinkIntermediaryResourcesCompleteResponse struct {
	state                      protoimpl.MessageState           `protogen:"open.v1"`
	IntermediaryResourceStates []*LinkIntermediaryResourceState `protobuf:"bytes,1,rep,name=intermediary_resource_states,json=intermediaryResourceStates" json:"intermediary_resource_states,omitempty"`
	LinkData                   *schemapb.MappingNode            `protobuf:"bytes,2,opt,name=link_data,json=linkData" json:"link_data,omitempty"`
	unknownFields              protoimpl.UnknownFields
	sizeCache                  protoimpl.SizeCache
}

func (x *UpdateLinkIntermediaryResourcesCompleteResponse) Reset() {
	*x = UpdateLinkIntermediaryResourcesCompleteResponse{}
	mi := &file_plugin_framework_providerserverv1_provider_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateLinkIntermediaryResourcesCompleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateLinkIntermediaryResourcesCompleteResponse) ProtoMessage() {}

func (x *UpdateLinkIntermediaryResourcesCompleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_framework_providerserverv1_provider_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateLinkIntermediaryResourcesCompleteResponse.ProtoReflect.Descriptor instead.
func (*UpdateLinkIntermediaryResourcesCompleteResponse) Descriptor() ([]byte, []int) {
	return file_plugin_framework_providerserverv1_provider_proto_rawDescGZIP(), []int{36}
}

func (x *UpdateLinkIntermediaryResourcesCompleteResponse) GetIntermediaryResourceStates() []*LinkIntermediaryResourceState {
	if x != nil {
		return x.IntermediaryResourceStates
	}
	return nil
}

func (x *UpdateLinkIntermediaryResourcesCompleteResponse) GetLinkData() *schemapb.MappingNode {
	if x != nil {
		return x.LinkData
	}
	return nil
}

// LinkPriorityResourceResponse is the response
// containing the priority resource for a link.
type LinkPriorityResourceResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Response:
	//
	//	*LinkPriorityResourceResponse_PriorityInfo
	//	*LinkPriorityResourceResponse_ErrorResponse
	Response      isLinkPriorityResourceResponse_Response `protobuf_oneof:"response"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LinkPriorityResourceResponse) Reset() {
	*x = LinkPriorityResourceResponse{}
	mi := &file_plugin_framework_providerserverv1_provider_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LinkPriorityResourceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinkPriorityResourceResponse) ProtoMessage() {}

func (x *LinkPriorityResourceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_framework_providerserverv1_provider_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinkPriorityResourceResponse.ProtoReflect.Descriptor instead.
func (*LinkPriorityResourceResponse) Descriptor() ([]byte, []int) {
	return file_plugin_framework_providerserverv1_provider_proto_rawDescGZIP(), []int{37}
}

func (x *LinkPriorityResourceResponse) GetResponse() isLinkPriorityResourceResponse_Response {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *LinkPriorityResourceResponse) GetPriorityInfo() *LinkPriorityResourceInfo {
	if x != nil {
		if x, ok := x.Response.(*LinkPriorityResourceResponse_PriorityInfo); ok {
			return x.PriorityInfo
		}
	}
	return nil
}

func (x *LinkPriorityResourceResponse) GetErrorResponse() *sharedtypesv1.ErrorResponse {
	if x != nil {
		if x, ok := x.Response.(*LinkPriorityResourceResponse_ErrorResponse); ok {
			return x.ErrorResponse
		}
	}
	return nil
}

type isLinkPriorityResourceResponse_Response interface {
	isLinkPriorityResourceResponse_Response()
}

type LinkPriorityResourceResponse_PriorityInfo struct {
	PriorityInfo *LinkPriorityResourceInfo `protobuf:"bytes,1,opt,name=priority_info,json=priorityInfo,oneof"`
}

type LinkPriorityResourceResponse_ErrorResponse struct {
	ErrorResponse *sharedtypesv1.ErrorResponse `protobuf:"bytes,2,opt,name=error_response,json=errorResponse,oneof"`
}

func (*LinkPriorityResourceResponse_PriorityInfo) isLinkPriorityResourceResponse_Response() {}

func (*LinkPriorityResourceResponse_ErrorResponse) isLinkPriorityResourceResponse_Response() {}

// CustomValidateDataSourceRequest is the request input
// for custom data source validation requests.
type CustomValidateDataSourceRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	DataSourceType *DataSourceType        `protobuf:"bytes,1,opt,name=data_source_type,json=dataSourceType" json:"data_source_type,omitempty"`
	// The ID of the host making the request
	// to the provider.
	HostId           string                         `protobuf:"bytes,2,opt,name=host_id,json=hostId" json:"host_id,omitempty"`
	SchemaDataSource *schemapb.DataSource           `protobuf:"bytes,3,opt,name=schema_data_source,json=schemaDataSource" json:"schema_data_source,omitempty"`
	Context          *sharedtypesv1.ProviderContext `protobuf:"bytes,4,opt,name=context" json:"context,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *CustomValidateDataSourceRequest) Reset() {
	*x = CustomValidateDataSourceRequest{}
	mi := &file_plugin_framework_providerserverv1_provider_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CustomValidateDataSourceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomValidateDataSourceRequest) ProtoMessage() {}

func (x *CustomValidateDataSourceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_framework_providerserverv1_provider_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomValidateDataSourceRequest.ProtoReflect.Descriptor instead.
func (*CustomValidateDataSourceRequest) Descriptor() ([]byte, []int) {
	return file_plugin_framework_providerserverv1_provider_proto_rawDescGZIP(), []int{38}
}

func (x *CustomValidateDataSourceRequest) GetDataSourceType() *DataSourceType {
	if x != nil {
		return x.DataSourceType
	}
	return nil
}

func (x *CustomValidateDataSourceRequest) GetHostId() string {
	if x != nil {
		return x.HostId
	}
	return ""
}

func (x *CustomValidateDataSourceRequest) GetSchemaDataSource() *schemapb.DataSource {
	if x != nil {
		return x.SchemaDataSource
	}
	return nil
}

func (x *CustomValidateDataSourceRequest) GetContext() *sharedtypesv1.ProviderContext {
	if x != nil {
		return x.Context
	}
	return nil
}

// CustomValidateDataSourceResponse is the response
// containing the result of custom data source validation.
type CustomValidateDataSourceResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Response:
	//
	//	*CustomValidateDataSourceResponse_CompleteResponse
	//	*CustomValidateDataSourceResponse_ErrorResponse
	Response      isCustomValidateDataSourceResponse_Response `protobuf_oneof:"response"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CustomValidateDataSourceResponse) Reset() {
	*x = CustomValidateDataSourceResponse{}
	mi := &file_plugin_framework_providerserverv1_provider_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CustomValidateDataSourceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomValidateDataSourceResponse) ProtoMessage() {}

func (x *CustomValidateDataSourceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_framework_providerserverv1_provider_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomValidateDataSourceResponse.ProtoReflect.Descriptor instead.
func (*CustomValidateDataSourceResponse) Descriptor() ([]byte, []int) {
	return file_plugin_framework_providerserverv1_provider_proto_rawDescGZIP(), []int{39}
}

func (x *CustomValidateDataSourceResponse) GetResponse() isCustomValidateDataSourceResponse_Response {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *CustomValidateDataSourceResponse) GetCompleteResponse() *CustomValidateDataSourceCompleteResponse {
	if x != nil {
		if x, ok := x.Response.(*CustomValidateDataSourceResponse_CompleteResponse); ok {
			return x.CompleteResponse
		}
	}
	return nil
}

func (x *CustomValidateDataSourceResponse) GetErrorResponse() *sharedtypesv1.ErrorResponse {
	if x != nil {
		if x, ok := x.Response.(*CustomValidateDataSourceResponse_ErrorResponse); ok {
			return x.ErrorResponse
		}
	}
	return nil
}

type isCustomValidateDataSourceResponse_Response interface {
	isCustomValidateDataSourceResponse_Response()
}

type CustomValidateDataSourceResponse_CompleteResponse struct {
	CompleteResponse *CustomValidateDataSourceCompleteResponse `protobuf:"bytes,1,opt,name=complete_response,json=completeResponse,oneof"`
}

type CustomValidateDataSourceResponse_ErrorResponse struct {
	ErrorResponse *sharedtypesv1.ErrorResponse `protobuf:"bytes,2,opt,name=error_response,json=errorResponse,oneof"`
}

func (*CustomValidateDataSourceResponse_CompleteResponse) isCustomValidateDataSourceResponse_Response() {
}

func (*CustomValidateDataSourceResponse_ErrorResponse) isCustomValidateDataSourceResponse_Response() {
}

// CustomValidateDataSourceCompleteResponse contains the result
// of custom data source validation.
type CustomValidateDataSourceCompleteResponse struct {
	state         protoimpl.MessageState      `protogen:"open.v1"`
	Diagnostics   []*sharedtypesv1.Diagnostic `protobuf:"bytes,1,rep,name=diagnostics" json:"diagnostics,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CustomValidateDataSourceCompleteResponse) Reset() {
	*x = CustomValidateDataSourceCompleteResponse{}
	mi := &file_plugin_framework_providerserverv1_provider_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CustomValidateDataSourceCompleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomValidateDataSourceCompleteResponse) ProtoMessage() {}

func (x *CustomValidateDataSourceCompleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_framework_providerserverv1_provider_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomValidateDataSourceCompleteResponse.ProtoReflect.Descriptor instead.
func (*CustomValidateDataSourceCompleteResponse) Descriptor() ([]byte, []int) {
	return file_plugin_framework_providerserverv1_provider_proto_rawDescGZIP(), []int{40}
}

func (x *CustomValidateDataSourceCompleteResponse) GetDiagnostics() []*sharedtypesv1.Diagnostic {
	if x != nil {
		return x.Diagnostics
	}
	return nil
}

// DataSourceSpecDefinitionResponse is the response
// containing the definition for a data source spec.
type DataSourceSpecDefinitionResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Response:
	//
	//	*DataSourceSpecDefinitionResponse_SpecDefinition
	//	*DataSourceSpecDefinitionResponse_ErrorResponse
	Response      isDataSourceSpecDefinitionResponse_Response `protobuf_oneof:"response"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DataSourceSpecDefinitionResponse) Reset() {
	*x = DataSourceSpecDefinitionResponse{}
	mi := &file_plugin_framework_providerserverv1_provider_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DataSourceSpecDefinitionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataSourceSpecDefinitionResponse) ProtoMessage() {}

func (x *DataSourceSpecDefinitionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_framework_providerserverv1_provider_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataSourceSpecDefinitionResponse.ProtoReflect.Descriptor instead.
func (*DataSourceSpecDefinitionResponse) Descriptor() ([]byte, []int) {
	return file_plugin_framework_providerserverv1_provider_proto_rawDescGZIP(), []int{41}
}

func (x *DataSourceSpecDefinitionResponse) GetResponse() isDataSourceSpecDefinitionResponse_Response {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *DataSourceSpecDefinitionResponse) GetSpecDefinition() *DataSourceSpecDefinition {
	if x != nil {
		if x, ok := x.Response.(*DataSourceSpecDefinitionResponse_SpecDefinition); ok {
			return x.SpecDefinition
		}
	}
	return nil
}

func (x *DataSourceSpecDefinitionResponse) GetErrorResponse() *sharedtypesv1.ErrorResponse {
	if x != nil {
		if x, ok := x.Response.(*DataSourceSpecDefinitionResponse_ErrorResponse); ok {
			return x.ErrorResponse
		}
	}
	return nil
}

type isDataSourceSpecDefinitionResponse_Response interface {
	isDataSourceSpecDefinitionResponse_Response()
}

type DataSourceSpecDefinitionResponse_SpecDefinition struct {
	SpecDefinition *DataSourceSpecDefinition `protobuf:"bytes,1,opt,name=spec_definition,json=specDefinition,oneof"`
}

type DataSourceSpecDefinitionResponse_ErrorResponse struct {
	ErrorResponse *sharedtypesv1.ErrorResponse `protobuf:"bytes,2,opt,name=error_response,json=errorResponse,oneof"`
}

func (*DataSourceSpecDefinitionResponse_SpecDefinition) isDataSourceSpecDefinitionResponse_Response() {
}

func (*DataSourceSpecDefinitionResponse_ErrorResponse) isDataSourceSpecDefinitionResponse_Response() {
}

// DataSourceFilterFieldsResponse is the response
// containing the fields that can be filtered on for a data source.
type DataSourceFilterFieldsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Response:
	//
	//	*DataSourceFilterFieldsResponse_FilterFields
	//	*DataSourceFilterFieldsResponse_ErrorResponse
	Response      isDataSourceFilterFieldsResponse_Response `protobuf_oneof:"response"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DataSourceFilterFieldsResponse) Reset() {
	*x = DataSourceFilterFieldsResponse{}
	mi := &file_plugin_framework_providerserverv1_provider_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DataSourceFilterFieldsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataSourceFilterFieldsResponse) ProtoMessage() {}

func (x *DataSourceFilterFieldsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_framework_providerserverv1_provider_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataSourceFilterFieldsResponse.ProtoReflect.Descriptor instead.
func (*DataSourceFilterFieldsResponse) Descriptor() ([]byte, []int) {
	return file_plugin_framework_providerserverv1_provider_proto_rawDescGZIP(), []int{42}
}

func (x *DataSourceFilterFieldsResponse) GetResponse() isDataSourceFilterFieldsResponse_Response {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *DataSourceFilterFieldsResponse) GetFilterFields() *DataSourceFilterFields {
	if x != nil {
		if x, ok := x.Response.(*DataSourceFilterFieldsResponse_FilterFields); ok {
			return x.FilterFields
		}
	}
	return nil
}

func (x *DataSourceFilterFieldsResponse) GetErrorResponse() *sharedtypesv1.ErrorResponse {
	if x != nil {
		if x, ok := x.Response.(*DataSourceFilterFieldsResponse_ErrorResponse); ok {
			return x.ErrorResponse
		}
	}
	return nil
}

type isDataSourceFilterFieldsResponse_Response interface {
	isDataSourceFilterFieldsResponse_Response()
}

type DataSourceFilterFieldsResponse_FilterFields struct {
	FilterFields *DataSourceFilterFields `protobuf:"bytes,1,opt,name=filter_fields,json=filterFields,oneof"`
}

type DataSourceFilterFieldsResponse_ErrorResponse struct {
	ErrorResponse *sharedtypesv1.ErrorResponse `protobuf:"bytes,2,opt,name=error_response,json=errorResponse,oneof"`
}

func (*DataSourceFilterFieldsResponse_FilterFields) isDataSourceFilterFieldsResponse_Response() {}

func (*DataSourceFilterFieldsResponse_ErrorResponse) isDataSourceFilterFieldsResponse_Response() {}

// FetchDataSourceRequest is the request input for fetching
// data from an upstream data source.
type FetchDataSourceRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	DataSourceType *DataSourceType        `protobuf:"bytes,1,opt,name=data_source_type,json=dataSourceType" json:"data_source_type,omitempty"`
	// A version of a data source for which all ${..}
	// substitutions have been applied.
	DataSourceWithResolvedSubs *ResolvedDataSource `protobuf:"bytes,2,opt,name=data_source_with_resolved_subs,json=dataSourceWithResolvedSubs" json:"data_source_with_resolved_subs,omitempty"`
	// The ID of the host making the request
	// to the provider.
	HostId        string                         `protobuf:"bytes,3,opt,name=host_id,json=hostId" json:"host_id,omitempty"`
	Context       *sharedtypesv1.ProviderContext `protobuf:"bytes,4,opt,name=context" json:"context,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FetchDataSourceRequest) Reset() {
	*x = FetchDataSourceRequest{}
	mi := &file_plugin_framework_providerserverv1_provider_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FetchDataSourceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchDataSourceRequest) ProtoMessage() {}

func (x *FetchDataSourceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_framework_providerserverv1_provider_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchDataSourceRequest.ProtoReflect.Descriptor instead.
func (*FetchDataSourceRequest) Descriptor() ([]byte, []int) {
	return file_plugin_framework_providerserverv1_provider_proto_rawDescGZIP(), []int{43}
}

func (x *FetchDataSourceRequest) GetDataSourceType() *DataSourceType {
	if x != nil {
		return x.DataSourceType
	}
	return nil
}

func (x *FetchDataSourceRequest) GetDataSourceWithResolvedSubs() *ResolvedDataSource {
	if x != nil {
		return x.DataSourceWithResolvedSubs
	}
	return nil
}

func (x *FetchDataSourceRequest) GetHostId() string {
	if x != nil {
		return x.HostId
	}
	return ""
}

func (x *FetchDataSourceRequest) GetContext() *sharedtypesv1.ProviderContext {
	if x != nil {
		return x.Context
	}
	return nil
}

// FetchDataSourceResponse is the response
// containing the result of fetching data from an upstream data source.
type FetchDataSourceResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Response:
	//
	//	*FetchDataSourceResponse_CompleteResponse
	//	*FetchDataSourceResponse_ErrorResponse
	Response      isFetchDataSourceResponse_Response `protobuf_oneof:"response"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FetchDataSourceResponse) Reset() {
	*x = FetchDataSourceResponse{}
	mi := &file_plugin_framework_providerserverv1_provider_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FetchDataSourceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchDataSourceResponse) ProtoMessage() {}

func (x *FetchDataSourceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_framework_providerserverv1_provider_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchDataSourceResponse.ProtoReflect.Descriptor instead.
func (*FetchDataSourceResponse) Descriptor() ([]byte, []int) {
	return file_plugin_framework_providerserverv1_provider_proto_rawDescGZIP(), []int{44}
}

func (x *FetchDataSourceResponse) GetResponse() isFetchDataSourceResponse_Response {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *FetchDataSourceResponse) GetCompleteResponse() *FetchDataSourceCompleteResponse {
	if x != nil {
		if x, ok := x.Response.(*FetchDataSourceResponse_CompleteResponse); ok {
			return x.CompleteResponse
		}
	}
	return nil
}

func (x *FetchDataSourceResponse) GetErrorResponse() *sharedtypesv1.ErrorResponse {
	if x != nil {
		if x, ok := x.Response.(*FetchDataSourceResponse_ErrorResponse); ok {
			return x.ErrorResponse
		}
	}
	return nil
}

type isFetchDataSourceResponse_Response interface {
	isFetchDataSourceResponse_Response()
}

type FetchDataSourceResponse_CompleteResponse struct {
	CompleteResponse *FetchDataSourceCompleteResponse `protobuf:"bytes,1,opt,name=complete_response,json=completeResponse,oneof"`
}

type FetchDataSourceResponse_ErrorResponse struct {
	ErrorResponse *sharedtypesv1.ErrorResponse `protobuf:"bytes,2,opt,name=error_response,json=errorResponse,oneof"`
}

func (*FetchDataSourceResponse_CompleteResponse) isFetchDataSourceResponse_Response() {}

func (*FetchDataSourceResponse_ErrorResponse) isFetchDataSourceResponse_Response() {}

// CustomVariableTypeOptionsResponse is the response
// containing the options for a custom variable type.
type CustomVariableTypeOptionsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Response:
	//
	//	*CustomVariableTypeOptionsResponse_Options
	//	*CustomVariableTypeOptionsResponse_ErrorResponse
	Response      isCustomVariableTypeOptionsResponse_Response `protobuf_oneof:"response"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CustomVariableTypeOptionsResponse) Reset() {
	*x = CustomVariableTypeOptionsResponse{}
	mi := &file_plugin_framework_providerserverv1_provider_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CustomVariableTypeOptionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomVariableTypeOptionsResponse) ProtoMessage() {}

func (x *CustomVariableTypeOptionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_framework_providerserverv1_provider_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomVariableTypeOptionsResponse.ProtoReflect.Descriptor instead.
func (*CustomVariableTypeOptionsResponse) Descriptor() ([]byte, []int) {
	return file_plugin_framework_providerserverv1_provider_proto_rawDescGZIP(), []int{45}
}

func (x *CustomVariableTypeOptionsResponse) GetResponse() isCustomVariableTypeOptionsResponse_Response {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *CustomVariableTypeOptionsResponse) GetOptions() *CustomVariableTypeOptions {
	if x != nil {
		if x, ok := x.Response.(*CustomVariableTypeOptionsResponse_Options); ok {
			return x.Options
		}
	}
	return nil
}

func (x *CustomVariableTypeOptionsResponse) GetErrorResponse() *sharedtypesv1.ErrorResponse {
	if x != nil {
		if x, ok := x.Response.(*CustomVariableTypeOptionsResponse_ErrorResponse); ok {
			return x.ErrorResponse
		}
	}
	return nil
}

type isCustomVariableTypeOptionsResponse_Response interface {
	isCustomVariableTypeOptionsResponse_Response()
}

type CustomVariableTypeOptionsResponse_Options struct {
	Options *CustomVariableTypeOptions `protobuf:"bytes,1,opt,name=options,oneof"`
}

type CustomVariableTypeOptionsResponse_ErrorResponse struct {
	ErrorResponse *sharedtypesv1.ErrorResponse `protobuf:"bytes,2,opt,name=error_response,json=errorResponse,oneof"`
}

func (*CustomVariableTypeOptionsResponse_Options) isCustomVariableTypeOptionsResponse_Response() {}

func (*CustomVariableTypeOptionsResponse_ErrorResponse) isCustomVariableTypeOptionsResponse_Response() {
}

// CustomVariableTypeOptions provides options for a custom variable type.
type CustomVariableTypeOptions struct {
	state         protoimpl.MessageState               `protogen:"open.v1"`
	Options       map[string]*CustomVariableTypeOption `protobuf:"bytes,1,rep,name=options" json:"options,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CustomVariableTypeOptions) Reset() {
	*x = CustomVariableTypeOptions{}
	mi := &file_plugin_framework_providerserverv1_provider_proto_msgTypes[46]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CustomVariableTypeOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomVariableTypeOptions) ProtoMessage() {}

func (x *CustomVariableTypeOptions) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_framework_providerserverv1_provider_proto_msgTypes[46]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomVariableTypeOptions.ProtoReflect.Descriptor instead.
func (*CustomVariableTypeOptions) Descriptor() ([]byte, []int) {
	return file_plugin_framework_providerserverv1_provider_proto_rawDescGZIP(), []int{46}
}

func (x *CustomVariableTypeOptions) GetOptions() map[string]*CustomVariableTypeOption {
	if x != nil {
		return x.Options
	}
	return nil
}

// CustomVariableTypeOption is an option for a custom variable type
// containing a value, label and description.
type CustomVariableTypeOption struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The value of the custom variable type option.
	Value *schemapb.ScalarValue `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
	// The human-readable label for the custom variable type option.
	Label string `protobuf:"bytes,2,opt,name=label" json:"label,omitempty"`
	// The human-readable description for the custom variable type option.
	Description string `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
	// The human-readable description for the custom variable type option
	// that is formatted with markdown.
	FormattedDescription string `protobuf:"bytes,4,opt,name=formatted_description,json=formattedDescription" json:"formatted_description,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *CustomVariableTypeOption) Reset() {
	*x = CustomVariableTypeOption{}
	mi := &file_plugin_framework_providerserverv1_provider_proto_msgTypes[47]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CustomVariableTypeOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomVariableTypeOption) ProtoMessage() {}

func (x *CustomVariableTypeOption) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_framework_providerserverv1_provider_proto_msgTypes[47]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomVariableTypeOption.ProtoReflect.Descriptor instead.
func (*CustomVariableTypeOption) Descriptor() ([]byte, []int) {
	return file_plugin_framework_providerserverv1_provider_proto_rawDescGZIP(), []int{47}
}

func (x *CustomVariableTypeOption) GetValue() *schemapb.ScalarValue {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *CustomVariableTypeOption) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *CustomVariableTypeOption) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CustomVariableTypeOption) GetFormattedDescription() string {
	if x != nil {
		return x.FormattedDescription
	}
	return ""
}

// CustomVariableTypeResponse is the response
// containing the type information for a custom variable type.
type CustomVariableTypeResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Response:
	//
	//	*CustomVariableTypeResponse_CustomVarTypeInfo
	//	*CustomVariableTypeResponse_ErrorResponse
	Response      isCustomVariableTypeResponse_Response `protobuf_oneof:"response"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CustomVariableTypeResponse) Reset() {
	*x = CustomVariableTypeResponse{}
	mi := &file_plugin_framework_providerserverv1_provider_proto_msgTypes[48]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CustomVariableTypeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomVariableTypeResponse) ProtoMessage() {}

func (x *CustomVariableTypeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_framework_providerserverv1_provider_proto_msgTypes[48]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomVariableTypeResponse.ProtoReflect.Descriptor instead.
func (*CustomVariableTypeResponse) Descriptor() ([]byte, []int) {
	return file_plugin_framework_providerserverv1_provider_proto_rawDescGZIP(), []int{48}
}

func (x *CustomVariableTypeResponse) GetResponse() isCustomVariableTypeResponse_Response {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *CustomVariableTypeResponse) GetCustomVarTypeInfo() *CustomVariableTypeInfo {
	if x != nil {
		if x, ok := x.Response.(*CustomVariableTypeResponse_CustomVarTypeInfo); ok {
			return x.CustomVarTypeInfo
		}
	}
	return nil
}

func (x *CustomVariableTypeResponse) GetErrorResponse() *sharedtypesv1.ErrorResponse {
	if x != nil {
		if x, ok := x.Response.(*CustomVariableTypeResponse_ErrorResponse); ok {
			return x.ErrorResponse
		}
	}
	return nil
}

type isCustomVariableTypeResponse_Response interface {
	isCustomVariableTypeResponse_Response()
}

type CustomVariableTypeResponse_CustomVarTypeInfo struct {
	CustomVarTypeInfo *CustomVariableTypeInfo `protobuf:"bytes,1,opt,name=custom_var_type_info,json=customVarTypeInfo,oneof"`
}

type CustomVariableTypeResponse_ErrorResponse struct {
	ErrorResponse *sharedtypesv1.ErrorResponse `protobuf:"bytes,2,opt,name=error_response,json=errorResponse,oneof"`
}

func (*CustomVariableTypeResponse_CustomVarTypeInfo) isCustomVariableTypeResponse_Response() {}

func (*CustomVariableTypeResponse_ErrorResponse) isCustomVariableTypeResponse_Response() {}

// CustomVariableTypeInfo provides information about a custom variable type
// that can be used for documentation and tooling.
type CustomVariableTypeInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The type of the data source.
	Type *CustomVariableType `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	// The human-readable label for the data source type.
	Label         string `protobuf:"bytes,2,opt,name=label" json:"label,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CustomVariableTypeInfo) Reset() {
	*x = CustomVariableTypeInfo{}
	mi := &file_plugin_framework_providerserverv1_provider_proto_msgTypes[49]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CustomVariableTypeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomVariableTypeInfo) ProtoMessage() {}

func (x *CustomVariableTypeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_framework_providerserverv1_provider_proto_msgTypes[49]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomVariableTypeInfo.ProtoReflect.Descriptor instead.
func (*CustomVariableTypeInfo) Descriptor() ([]byte, []int) {
	return file_plugin_framework_providerserverv1_provider_proto_rawDescGZIP(), []int{49}
}

func (x *CustomVariableTypeInfo) GetType() *CustomVariableType {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *CustomVariableTypeInfo) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

// FetchDataSourceCompleteResponse is the response
// returned by the provider plugin when data has been fetched from an upstream data source.
// This should contain the resolved data source fields that have been fetched.
type FetchDataSourceCompleteResponse struct {
	state         protoimpl.MessageState           `protogen:"open.v1"`
	Data          map[string]*schemapb.MappingNode `protobuf:"bytes,1,rep,name=data" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FetchDataSourceCompleteResponse) Reset() {
	*x = FetchDataSourceCompleteResponse{}
	mi := &file_plugin_framework_providerserverv1_provider_proto_msgTypes[50]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FetchDataSourceCompleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchDataSourceCompleteResponse) ProtoMessage() {}

func (x *FetchDataSourceCompleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_framework_providerserverv1_provider_proto_msgTypes[50]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchDataSourceCompleteResponse.ProtoReflect.Descriptor instead.
func (*FetchDataSourceCompleteResponse) Descriptor() ([]byte, []int) {
	return file_plugin_framework_providerserverv1_provider_proto_rawDescGZIP(), []int{50}
}

func (x *FetchDataSourceCompleteResponse) GetData() map[string]*schemapb.MappingNode {
	if x != nil {
		return x.Data
	}
	return nil
}

// ResolvedDataSource is a data source for which all ${..}
// substitutions have been applied.
type ResolvedDataSource struct {
	state              protoimpl.MessageState                    `protogen:"open.v1"`
	Type               *DataSourceType                           `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	DataSourceMetadata *ResolvedDataSourceMetadata               `protobuf:"bytes,2,opt,name=data_source_metadata,json=dataSourceMetadata" json:"data_source_metadata,omitempty"`
	Filter             []*ResolvedDataSourceFilter               `protobuf:"bytes,3,rep,name=filter" json:"filter,omitempty"`
	Exports            map[string]*ResolvedDataSourceFieldExport `protobuf:"bytes,4,rep,name=exports" json:"exports,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Description        *schemapb.MappingNode                     `protobuf:"bytes,5,opt,name=description" json:"description,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *ResolvedDataSource) Reset() {
	*x = ResolvedDataSource{}
	mi := &file_plugin_framework_providerserverv1_provider_proto_msgTypes[51]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResolvedDataSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResolvedDataSource) ProtoMessage() {}

func (x *ResolvedDataSource) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_framework_providerserverv1_provider_proto_msgTypes[51]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResolvedDataSource.ProtoReflect.Descriptor instead.
func (*ResolvedDataSource) Descriptor() ([]byte, []int) {
	return file_plugin_framework_providerserverv1_provider_proto_rawDescGZIP(), []int{51}
}

func (x *ResolvedDataSource) GetType() *DataSourceType {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *ResolvedDataSource) GetDataSourceMetadata() *ResolvedDataSourceMetadata {
	if x != nil {
		return x.DataSourceMetadata
	}
	return nil
}

func (x *ResolvedDataSource) GetFilter() []*ResolvedDataSourceFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *ResolvedDataSource) GetExports() map[string]*ResolvedDataSourceFieldExport {
	if x != nil {
		return x.Exports
	}
	return nil
}

func (x *ResolvedDataSource) GetDescription() *schemapb.MappingNode {
	if x != nil {
		return x.Description
	}
	return nil
}

// ResolvedDataSourceMetadata provides metadata for which all ${..}
// substitutions have been applied.
type ResolvedDataSourceMetadata struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DisplayName   *schemapb.MappingNode  `protobuf:"bytes,1,opt,name=display_name,json=displayName" json:"display_name,omitempty"`
	Annotations   *schemapb.MappingNode  `protobuf:"bytes,2,opt,name=annotations" json:"annotations,omitempty"`
	Custom        *schemapb.MappingNode  `protobuf:"bytes,3,opt,name=custom" json:"custom,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResolvedDataSourceMetadata) Reset() {
	*x = ResolvedDataSourceMetadata{}
	mi := &file_plugin_framework_providerserverv1_provider_proto_msgTypes[52]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResolvedDataSourceMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResolvedDataSourceMetadata) ProtoMessage() {}

func (x *ResolvedDataSourceMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_framework_providerserverv1_provider_proto_msgTypes[52]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResolvedDataSourceMetadata.ProtoReflect.Descriptor instead.
func (*ResolvedDataSourceMetadata) Descriptor() ([]byte, []int) {
	return file_plugin_framework_providerserverv1_provider_proto_rawDescGZIP(), []int{52}
}

func (x *ResolvedDataSourceMetadata) GetDisplayName() *schemapb.MappingNode {
	if x != nil {
		return x.DisplayName
	}
	return nil
}

func (x *ResolvedDataSourceMetadata) GetAnnotations() *schemapb.MappingNode {
	if x != nil {
		return x.Annotations
	}
	return nil
}

func (x *ResolvedDataSourceMetadata) GetCustom() *schemapb.MappingNode {
	if x != nil {
		return x.Custom
	}
	return nil
}

// ResolvedDataSourceFilter provides a filter for which all ${..}
// substitutions have been applied.
type ResolvedDataSourceFilter struct {
	state         protoimpl.MessageState          `protogen:"open.v1"`
	Field         *schemapb.ScalarValue           `protobuf:"bytes,1,opt,name=field" json:"field,omitempty"`
	Operator      string                          `protobuf:"bytes,2,opt,name=operator" json:"operator,omitempty"`
	Search        *ResolvedDataSourceFilterSearch `protobuf:"bytes,3,opt,name=search" json:"search,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResolvedDataSourceFilter) Reset() {
	*x = ResolvedDataSourceFilter{}
	mi := &file_plugin_framework_providerserverv1_provider_proto_msgTypes[53]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResolvedDataSourceFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResolvedDataSourceFilter) ProtoMessage() {}

func (x *ResolvedDataSourceFilter) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_framework_providerserverv1_provider_proto_msgTypes[53]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResolvedDataSourceFilter.ProtoReflect.Descriptor instead.
func (*ResolvedDataSourceFilter) Descriptor() ([]byte, []int) {
	return file_plugin_framework_providerserverv1_provider_proto_rawDescGZIP(), []int{53}
}

func (x *ResolvedDataSourceFilter) GetField() *schemapb.ScalarValue {
	if x != nil {
		return x.Field
	}
	return nil
}

func (x *ResolvedDataSourceFilter) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

func (x *ResolvedDataSourceFilter) GetSearch() *ResolvedDataSourceFilterSearch {
	if x != nil {
		return x.Search
	}
	return nil
}

// ResolvedDataSourceFilterSearch provides data source
// filter search terms for which all ${..} substitutions have been applied.
type ResolvedDataSourceFilterSearch struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Values        []*schemapb.MappingNode `protobuf:"bytes,1,rep,name=values" json:"values,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResolvedDataSourceFilterSearch) Reset() {
	*x = ResolvedDataSourceFilterSearch{}
	mi := &file_plugin_framework_providerserverv1_provider_proto_msgTypes[54]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResolvedDataSourceFilterSearch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResolvedDataSourceFilterSearch) ProtoMessage() {}

func (x *ResolvedDataSourceFilterSearch) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_framework_providerserverv1_provider_proto_msgTypes[54]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResolvedDataSourceFilterSearch.ProtoReflect.Descriptor instead.
func (*ResolvedDataSourceFilterSearch) Descriptor() ([]byte, []int) {
	return file_plugin_framework_providerserverv1_provider_proto_rawDescGZIP(), []int{54}
}

func (x *ResolvedDataSourceFilterSearch) GetValues() []*schemapb.MappingNode {
	if x != nil {
		return x.Values
	}
	return nil
}

// DataSourceFilterFields provides the fields that can be filtered on
// for a data source.
type DataSourceFilterFields struct {
	state         protoimpl.MessageState                  `protogen:"open.v1"`
	FilterFields  map[string]*DataSourceFilterFieldSchema `protobuf:"bytes,1,rep,name=filter_fields,json=filterFields" json:"filter_fields,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DataSourceFilterFields) Reset() {
	*x = DataSourceFilterFields{}
	mi := &file_plugin_framework_providerserverv1_provider_proto_msgTypes[55]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DataSourceFilterFields) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataSourceFilterFields) ProtoMessage() {}

func (x *DataSourceFilterFields) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_framework_providerserverv1_provider_proto_msgTypes[55]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataSourceFilterFields.ProtoReflect.Descriptor instead.
func (*DataSourceFilterFields) Descriptor() ([]byte, []int) {
	return file_plugin_framework_providerserverv1_provider_proto_rawDescGZIP(), []int{55}
}

func (x *DataSourceFilterFields) GetFilterFields() map[string]*DataSourceFilterFieldSchema {
	if x != nil {
		return x.FilterFields
	}
	return nil
}

// DataSourceFilterFieldSchema provides the schema for a data source filter field.
type DataSourceFilterFieldSchema struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	Type                 string                 `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	Description          string                 `protobuf:"bytes,2,opt,name=description" json:"description,omitempty"`
	FormattedDescription string                 `protobuf:"bytes,3,opt,name=formatted_description,json=formattedDescription" json:"formatted_description,omitempty"`
	SupportedOperators   []string               `protobuf:"bytes,4,rep,name=supported_operators,json=supportedOperators" json:"supported_operators,omitempty"`
	ConflictsWith        []string               `protobuf:"bytes,5,rep,name=conflicts_with,json=conflictsWith" json:"conflicts_with,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *DataSourceFilterFieldSchema) Reset() {
	*x = DataSourceFilterFieldSchema{}
	mi := &file_plugin_framework_providerserverv1_provider_proto_msgTypes[56]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DataSourceFilterFieldSchema) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataSourceFilterFieldSchema) ProtoMessage() {}

func (x *DataSourceFilterFieldSchema) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_framework_providerserverv1_provider_proto_msgTypes[56]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataSourceFilterFieldSchema.ProtoReflect.Descriptor instead.
func (*DataSourceFilterFieldSchema) Descriptor() ([]byte, []int) {
	return file_plugin_framework_providerserverv1_provider_proto_rawDescGZIP(), []int{56}
}

func (x *DataSourceFilterFieldSchema) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *DataSourceFilterFieldSchema) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *DataSourceFilterFieldSchema) GetFormattedDescription() string {
	if x != nil {
		return x.FormattedDescription
	}
	return ""
}

func (x *DataSourceFilterFieldSchema) GetSupportedOperators() []string {
	if x != nil {
		return x.SupportedOperators
	}
	return nil
}

func (x *DataSourceFilterFieldSchema) GetConflictsWith() []string {
	if x != nil {
		return x.ConflictsWith
	}
	return nil
}

// ResolvedDataSourceFieldExport provides a field export for which all ${..}
// substitutions have been applied.
type ResolvedDataSourceFieldExport struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Type          string                 `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	AliasFor      *schemapb.ScalarValue  `protobuf:"bytes,2,opt,name=alias_for,json=aliasFor" json:"alias_for,omitempty"`
	Description   *schemapb.MappingNode  `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResolvedDataSourceFieldExport) Reset() {
	*x = ResolvedDataSourceFieldExport{}
	mi := &file_plugin_framework_providerserverv1_provider_proto_msgTypes[57]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResolvedDataSourceFieldExport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResolvedDataSourceFieldExport) ProtoMessage() {}

func (x *ResolvedDataSourceFieldExport) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_framework_providerserverv1_provider_proto_msgTypes[57]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResolvedDataSourceFieldExport.ProtoReflect.Descriptor instead.
func (*ResolvedDataSourceFieldExport) Descriptor() ([]byte, []int) {
	return file_plugin_framework_providerserverv1_provider_proto_rawDescGZIP(), []int{57}
}

func (x *ResolvedDataSourceFieldExport) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ResolvedDataSourceFieldExport) GetAliasFor() *schemapb.ScalarValue {
	if x != nil {
		return x.AliasFor
	}
	return nil
}

func (x *ResolvedDataSourceFieldExport) GetDescription() *schemapb.MappingNode {
	if x != nil {
		return x.Description
	}
	return nil
}

// DataSourceSpecDefinition provides the definition for a data source spec
// that can be used for validation, docs and tooling.
type DataSourceSpecDefinition struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Holds a mapping of schemas for
	// fields that can be exported from a data source.
	// Unlike resource specs, data source specs are restricted
	// in that they only support primitives or arrays of primitives.
	Fields        map[string]*DataSourceSpecSchema `protobuf:"bytes,1,rep,name=fields" json:"fields,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DataSourceSpecDefinition) Reset() {
	*x = DataSourceSpecDefinition{}
	mi := &file_plugin_framework_providerserverv1_provider_proto_msgTypes[58]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DataSourceSpecDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataSourceSpecDefinition) ProtoMessage() {}

func (x *DataSourceSpecDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_framework_providerserverv1_provider_proto_msgTypes[58]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataSourceSpecDefinition.ProtoReflect.Descriptor instead.
func (*DataSourceSpecDefinition) Descriptor() ([]byte, []int) {
	return file_plugin_framework_providerserverv1_provider_proto_rawDescGZIP(), []int{58}
}

func (x *DataSourceSpecDefinition) GetFields() map[string]*DataSourceSpecSchema {
	if x != nil {
		return x.Fields
	}
	return nil
}

// DataSourceSpecSchema provides a schema that can be used
// to validate a data source spec.
type DataSourceSpecSchema struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The type of the data source spec.
	Type DataSourceSpecSchemaType `protobuf:"varint,1,opt,name=type,enum=providerserverv1.DataSourceSpecSchemaType" json:"type,omitempty"`
	// The human-readable label for the data source spec.
	Label string `protobuf:"bytes,2,opt,name=label" json:"label,omitempty"`
	// A human-readable description for the data source spec
	// without any formatting.
	Description string `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
	// A human-readable description for the data source spec
	// that is formatted with markdown.
	FormattedDescription string `protobuf:"bytes,4,opt,name=formatted_description,json=formattedDescription" json:"formatted_description,omitempty"`
	// Holds the schema for the items in a data source spec schema array.
	// Items are expected to be of a primitive type, if an array type is provided here,
	// an error will occur.
	Items *DataSourceSpecSchema `protobuf:"bytes,5,opt,name=items" json:"items,omitempty"`
	// Specifices whether the data source spec schema can be null.
	// This essentially means that the data source implementation can provide
	// a null value for the field.
	Nullable      bool `protobuf:"varint,6,opt,name=nullable" json:"nullable,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DataSourceSpecSchema) Reset() {
	*x = DataSourceSpecSchema{}
	mi := &file_plugin_framework_providerserverv1_provider_proto_msgTypes[59]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DataSourceSpecSchema) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataSourceSpecSchema) ProtoMessage() {}

func (x *DataSourceSpecSchema) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_framework_providerserverv1_provider_proto_msgTypes[59]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataSourceSpecSchema.ProtoReflect.Descriptor instead.
func (*DataSourceSpecSchema) Descriptor() ([]byte, []int) {
	return file_plugin_framework_providerserverv1_provider_proto_rawDescGZIP(), []int{59}
}

func (x *DataSourceSpecSchema) GetType() DataSourceSpecSchemaType {
	if x != nil {
		return x.Type
	}
	return DataSourceSpecSchemaType_DATA_SOURCE_SPEC_STRING
}

func (x *DataSourceSpecSchema) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *DataSourceSpecSchema) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *DataSourceSpecSchema) GetFormattedDescription() string {
	if x != nil {
		return x.FormattedDescription
	}
	return ""
}

func (x *DataSourceSpecSchema) GetItems() *DataSourceSpecSchema {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *DataSourceSpecSchema) GetNullable() bool {
	if x != nil {
		return x.Nullable
	}
	return false
}

// DataSourceTypeResponse is the response
// containing the type information for a data source.
type DataSourceTypeResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Response:
	//
	//	*DataSourceTypeResponse_DataSourceTypeInfo
	//	*DataSourceTypeResponse_ErrorResponse
	Response      isDataSourceTypeResponse_Response `protobuf_oneof:"response"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DataSourceTypeResponse) Reset() {
	*x = DataSourceTypeResponse{}
	mi := &file_plugin_framework_providerserverv1_provider_proto_msgTypes[60]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DataSourceTypeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataSourceTypeResponse) ProtoMessage() {}

func (x *DataSourceTypeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_framework_providerserverv1_provider_proto_msgTypes[60]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataSourceTypeResponse.ProtoReflect.Descriptor instead.
func (*DataSourceTypeResponse) Descriptor() ([]byte, []int) {
	return file_plugin_framework_providerserverv1_provider_proto_rawDescGZIP(), []int{60}
}

func (x *DataSourceTypeResponse) GetResponse() isDataSourceTypeResponse_Response {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *DataSourceTypeResponse) GetDataSourceTypeInfo() *DataSourceTypeInfo {
	if x != nil {
		if x, ok := x.Response.(*DataSourceTypeResponse_DataSourceTypeInfo); ok {
			return x.DataSourceTypeInfo
		}
	}
	return nil
}

func (x *DataSourceTypeResponse) GetErrorResponse() *sharedtypesv1.ErrorResponse {
	if x != nil {
		if x, ok := x.Response.(*DataSourceTypeResponse_ErrorResponse); ok {
			return x.ErrorResponse
		}
	}
	return nil
}

type isDataSourceTypeResponse_Response interface {
	isDataSourceTypeResponse_Response()
}

type DataSourceTypeResponse_DataSourceTypeInfo struct {
	DataSourceTypeInfo *DataSourceTypeInfo `protobuf:"bytes,1,opt,name=data_source_type_info,json=dataSourceTypeInfo,oneof"`
}

type DataSourceTypeResponse_ErrorResponse struct {
	ErrorResponse *sharedtypesv1.ErrorResponse `protobuf:"bytes,2,opt,name=error_response,json=errorResponse,oneof"`
}

func (*DataSourceTypeResponse_DataSourceTypeInfo) isDataSourceTypeResponse_Response() {}

func (*DataSourceTypeResponse_ErrorResponse) isDataSourceTypeResponse_Response() {}

// DataSourceTypeInfo provides information about a data source type
// that can be used for documentation and tooling.
type DataSourceTypeInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The type of the data source.
	Type *DataSourceType `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	// The human-readable label for the data source type.
	Label         string `protobuf:"bytes,2,opt,name=label" json:"label,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DataSourceTypeInfo) Reset() {
	*x = DataSourceTypeInfo{}
	mi := &file_plugin_framework_providerserverv1_provider_proto_msgTypes[61]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DataSourceTypeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataSourceTypeInfo) ProtoMessage() {}

func (x *DataSourceTypeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_framework_providerserverv1_provider_proto_msgTypes[61]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataSourceTypeInfo.ProtoReflect.Descriptor instead.
func (*DataSourceTypeInfo) Descriptor() ([]byte, []int) {
	return file_plugin_framework_providerserverv1_provider_proto_rawDescGZIP(), []int{61}
}

func (x *DataSourceTypeInfo) GetType() *DataSourceType {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *DataSourceTypeInfo) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

// LinkPriorityResourceInfo contains information about the priority resource
// for a link.
type LinkPriorityResourceInfo struct {
	state                protoimpl.MessageState      `protogen:"open.v1"`
	PriorityResource     LinkPriorityResource        `protobuf:"varint,1,opt,name=priority_resource,json=priorityResource,enum=providerserverv1.LinkPriorityResource" json:"priority_resource,omitempty"`
	PriorityResourceType *sharedtypesv1.ResourceType `protobuf:"bytes,2,opt,name=priority_resource_type,json=priorityResourceType" json:"priority_resource_type,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *LinkPriorityResourceInfo) Reset() {
	*x = LinkPriorityResourceInfo{}
	mi := &file_plugin_framework_providerserverv1_provider_proto_msgTypes[62]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LinkPriorityResourceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinkPriorityResourceInfo) ProtoMessage() {}

func (x *LinkPriorityResourceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_framework_providerserverv1_provider_proto_msgTypes[62]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinkPriorityResourceInfo.ProtoReflect.Descriptor instead.
func (*LinkPriorityResourceInfo) Descriptor() ([]byte, []int) {
	return file_plugin_framework_providerserverv1_provider_proto_rawDescGZIP(), []int{62}
}

func (x *LinkPriorityResourceInfo) GetPriorityResource() LinkPriorityResource {
	if x != nil {
		return x.PriorityResource
	}
	return LinkPriorityResource_LINK_PRIORITY_RESOURCE_NONE
}

func (x *LinkPriorityResourceInfo) GetPriorityResourceType() *sharedtypesv1.ResourceType {
	if x != nil {
		return x.PriorityResourceType
	}
	return nil
}

// LinkKindResponse is the response
// containing the kind of a requested link type.
type LinkKindResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Response:
	//
	//	*LinkKindResponse_LinkKindInfo
	//	*LinkKindResponse_ErrorResponse
	Response      isLinkKindResponse_Response `protobuf_oneof:"response"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LinkKindResponse) Reset() {
	*x = LinkKindResponse{}
	mi := &file_plugin_framework_providerserverv1_provider_proto_msgTypes[63]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LinkKindResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinkKindResponse) ProtoMessage() {}

func (x *LinkKindResponse) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_framework_providerserverv1_provider_proto_msgTypes[63]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinkKindResponse.ProtoReflect.Descriptor instead.
func (*LinkKindResponse) Descriptor() ([]byte, []int) {
	return file_plugin_framework_providerserverv1_provider_proto_rawDescGZIP(), []int{63}
}

func (x *LinkKindResponse) GetResponse() isLinkKindResponse_Response {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *LinkKindResponse) GetLinkKindInfo() *LinkKindInfo {
	if x != nil {
		if x, ok := x.Response.(*LinkKindResponse_LinkKindInfo); ok {
			return x.LinkKindInfo
		}
	}
	return nil
}

func (x *LinkKindResponse) GetErrorResponse() *sharedtypesv1.ErrorResponse {
	if x != nil {
		if x, ok := x.Response.(*LinkKindResponse_ErrorResponse); ok {
			return x.ErrorResponse
		}
	}
	return nil
}

type isLinkKindResponse_Response interface {
	isLinkKindResponse_Response()
}

type LinkKindResponse_LinkKindInfo struct {
	LinkKindInfo *LinkKindInfo `protobuf:"bytes,1,opt,name=link_kind_info,json=linkKindInfo,oneof"`
}

type LinkKindResponse_ErrorResponse struct {
	ErrorResponse *sharedtypesv1.ErrorResponse `protobuf:"bytes,2,opt,name=error_response,json=errorResponse,oneof"`
}

func (*LinkKindResponse_LinkKindInfo) isLinkKindResponse_Response() {}

func (*LinkKindResponse_ErrorResponse) isLinkKindResponse_Response() {}

// LinkKindInfo contains the kind of a requested link type.
type LinkKindInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Kind          LinkKind               `protobuf:"varint,1,opt,name=kind,enum=providerserverv1.LinkKind" json:"kind,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LinkKindInfo) Reset() {
	*x = LinkKindInfo{}
	mi := &file_plugin_framework_providerserverv1_provider_proto_msgTypes[64]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LinkKindInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinkKindInfo) ProtoMessage() {}

func (x *LinkKindInfo) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_framework_providerserverv1_provider_proto_msgTypes[64]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinkKindInfo.ProtoReflect.Descriptor instead.
func (*LinkKindInfo) Descriptor() ([]byte, []int) {
	return file_plugin_framework_providerserverv1_provider_proto_rawDescGZIP(), []int{64}
}

func (x *LinkKindInfo) GetKind() LinkKind {
	if x != nil {
		return x.Kind
	}
	return LinkKind_LINK_KIND_HARD
}

// LinkState provides a way to store some state for links
// between resources.
// This is useful for holding state about intermediary resources
// managed by a provider's implementation of a link in addition
// to tracking the deployment status for a link.
type LinkState struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// A globally unique identifier for the link.
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// The logical name of the link in the blueprint.
	// This is a combination of the logical names of the 2 resources that are linked.
	// For example, if a link is between a VPC and a subnet,
	// the link name would be "vpc::subnet".
	Name          string            `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	InstanceId    string            `protobuf:"bytes,3,opt,name=instance_id,json=instanceId" json:"instance_id,omitempty"`
	Status        LinkStatus        `protobuf:"varint,4,opt,name=status,enum=providerserverv1.LinkStatus" json:"status,omitempty"`
	PreciseStatus PreciseLinkStatus `protobuf:"varint,5,opt,name=precise_status,json=preciseStatus,enum=providerserverv1.PreciseLinkStatus" json:"precise_status,omitempty"`
	// The unix timestamp for when the link deployment status was last updated.
	LastStatusUpdateTimestamp int64 `protobuf:"varint,6,opt,name=last_status_update_timestamp,json=lastStatusUpdateTimestamp" json:"last_status_update_timestamp,omitempty"`
	// The unix timestamp for when the link was last deployed.
	LastDeployedTimestamp int64 `protobuf:"varint,7,opt,name=last_deployed_timestamp,json=lastDeployedTimestamp" json:"last_deployed_timestamp,omitempty"`
	// The unix timestamp for when an attempt was last made to deploy the link.
	LastDeployAttemptTimestamp int64 `protobuf:"varint,8,opt,name=last_deploy_attempt_timestamp,json=lastDeployAttemptTimestamp" json:"last_deploy_attempt_timestamp,omitempty"`
	// The state of intermediary resources that are created
	// by a provider's implementation of a link.
	IntermediaryResourceStates []*LinkIntermediaryResourceState `protobuf:"bytes,9,rep,name=intermediary_resource_states,json=intermediaryResourceStates" json:"intermediary_resource_states,omitempty"`
	// A mapping that holds the structure of the "raw" link data
	// to hold information about a link that is not
	// stored directly in the resources that are linked and is not stored
	// in intermediary resources.
	// This should hold information that may incolde values that are populated
	// in one or both of the resources in the link relationship.
	Data map[string]*schemapb.MappingNode `protobuf:"bytes,10,rep,name=data" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// A list of the latest reasons for failures in deploying a link,
	// this only ever holds the results of the latest deployment attempt.
	FailureReasons []string `protobuf:"bytes,11,rep,name=failure_reasons,json=failureReasons" json:"failure_reasons,omitempty"`
	// Holds the duration information for the latest deployment of the link.
	Durations     *LinkCompletionDurations `protobuf:"bytes,12,opt,name=durations" json:"durations,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LinkState) Reset() {
	*x = LinkState{}
	mi := &file_plugin_framework_providerserverv1_provider_proto_msgTypes[65]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LinkState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinkState) ProtoMessage() {}

func (x *LinkState) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_framework_providerserverv1_provider_proto_msgTypes[65]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinkState.ProtoReflect.Descriptor instead.
func (*LinkState) Descriptor() ([]byte, []int) {
	return file_plugin_framework_providerserverv1_provider_proto_rawDescGZIP(), []int{65}
}

func (x *LinkState) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *LinkState) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *LinkState) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *LinkState) GetStatus() LinkStatus {
	if x != nil {
		return x.Status
	}
	return LinkStatus_LINK_STATUS_UNKNOWN
}

func (x *LinkState) GetPreciseStatus() PreciseLinkStatus {
	if x != nil {
		return x.PreciseStatus
	}
	return PreciseLinkStatus_PRECISE_LINK_STATUS_UNKNOWN
}

func (x *LinkState) GetLastStatusUpdateTimestamp() int64 {
	if x != nil {
		return x.LastStatusUpdateTimestamp
	}
	return 0
}

func (x *LinkState) GetLastDeployedTimestamp() int64 {
	if x != nil {
		return x.LastDeployedTimestamp
	}
	return 0
}

func (x *LinkState) GetLastDeployAttemptTimestamp() int64 {
	if x != nil {
		return x.LastDeployAttemptTimestamp
	}
	return 0
}

func (x *LinkState) GetIntermediaryResourceStates() []*LinkIntermediaryResourceState {
	if x != nil {
		return x.IntermediaryResourceStates
	}
	return nil
}

func (x *LinkState) GetData() map[string]*schemapb.MappingNode {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *LinkState) GetFailureReasons() []string {
	if x != nil {
		return x.FailureReasons
	}
	return nil
}

func (x *LinkState) GetDurations() *LinkCompletionDurations {
	if x != nil {
		return x.Durations
	}
	return nil
}

// LinkIntermediaryResourceState holds information about the state
// of an intermediary resources created for a link.
type LinkIntermediaryResourceState struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// A globally unique identifier for the resource.
	ResourceId    string                              `protobuf:"bytes,1,opt,name=resource_id,json=resourceId" json:"resource_id,omitempty"`
	InstanceId    string                              `protobuf:"bytes,2,opt,name=instance_id,json=instanceId" json:"instance_id,omitempty"`
	Status        sharedtypesv1.ResourceStatus        `protobuf:"varint,3,opt,name=status,enum=sharedtypesv1.ResourceStatus" json:"status,omitempty"`
	PreciseStatus sharedtypesv1.PreciseResourceStatus `protobuf:"varint,4,opt,name=precise_status,json=preciseStatus,enum=sharedtypesv1.PreciseResourceStatus" json:"precise_status,omitempty"`
	// The unix timestamp when the resource was last deployed.
	LastDeployedTimestamp int64 `protobuf:"varint,5,opt,name=last_deployed_timestamp,json=lastDeployedTimestamp" json:"last_deployed_timestamp,omitempty"`
	// The unix timestamp when an attempt was last made to deploy the resource.
	LastDeployAttemptTimestamp int64 `protobuf:"varint,6,opt,name=last_deploy_attempt_timestamp,json=lastDeployAttemptTimestamp" json:"last_deploy_attempt_timestamp,omitempty"`
	// The resolved resource spec for the currently deployed version
	// of the resource along with computed fields derived from the deployed resource
	// in the provider.
	ResourceSpecData *schemapb.MappingNode `protobuf:"bytes,7,opt,name=resource_spec_data,json=resourceSpecData" json:"resource_spec_data,omitempty"`
	// A list of the latest reasons for failures in deploying the resource,
	// this only ever holds the results of the latest deployment attempt.
	FailureReasons []string `protobuf:"bytes,8,rep,name=failure_reasons,json=failureReasons" json:"failure_reasons,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *LinkIntermediaryResourceState) Reset() {
	*x = LinkIntermediaryResourceState{}
	mi := &file_plugin_framework_providerserverv1_provider_proto_msgTypes[66]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LinkIntermediaryResourceState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinkIntermediaryResourceState) ProtoMessage() {}

func (x *LinkIntermediaryResourceState) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_framework_providerserverv1_provider_proto_msgTypes[66]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinkIntermediaryResourceState.ProtoReflect.Descriptor instead.
func (*LinkIntermediaryResourceState) Descriptor() ([]byte, []int) {
	return file_plugin_framework_providerserverv1_provider_proto_rawDescGZIP(), []int{66}
}

func (x *LinkIntermediaryResourceState) GetResourceId() string {
	if x != nil {
		return x.ResourceId
	}
	return ""
}

func (x *LinkIntermediaryResourceState) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *LinkIntermediaryResourceState) GetStatus() sharedtypesv1.ResourceStatus {
	if x != nil {
		return x.Status
	}
	return sharedtypesv1.ResourceStatus(0)
}

func (x *LinkIntermediaryResourceState) GetPreciseStatus() sharedtypesv1.PreciseResourceStatus {
	if x != nil {
		return x.PreciseStatus
	}
	return sharedtypesv1.PreciseResourceStatus(0)
}

func (x *LinkIntermediaryResourceState) GetLastDeployedTimestamp() int64 {
	if x != nil {
		return x.LastDeployedTimestamp
	}
	return 0
}

func (x *LinkIntermediaryResourceState) GetLastDeployAttemptTimestamp() int64 {
	if x != nil {
		return x.LastDeployAttemptTimestamp
	}
	return 0
}

func (x *LinkIntermediaryResourceState) GetResourceSpecData() *schemapb.MappingNode {
	if x != nil {
		return x.ResourceSpecData
	}
	return nil
}

func (x *LinkIntermediaryResourceState) GetFailureReasons() []string {
	if x != nil {
		return x.FailureReasons
	}
	return nil
}

// LinkCompletionDurations holds duration information
// for the deployment of a link change.
type LinkCompletionDurations struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The duration information for the update of resource A in the link.
	// This will only be present if the link has reached resource A updated status.
	ResourceAUpdate *LinkComponentCompletionDurations `protobuf:"bytes,1,opt,name=resource_a_update,json=resourceAUpdate" json:"resource_a_update,omitempty"`
	// The duration information for the update of resource B in the link.
	// This will only be present if the link has reached resource B updated status.
	ResourceBUpdate *LinkComponentCompletionDurations `protobuf:"bytes,2,opt,name=resource_b_update,json=resourceBUpdate" json:"resource_b_update,omitempty"`
	// The druation information for the update, creation or removal of intermediary
	// resources in the link.
	// This will only be present if the link has reached intermediary resources updated status.
	IntermediaryResources *LinkComponentCompletionDurations `protobuf:"bytes,3,opt,name=intermediary_resources,json=intermediaryResources" json:"intermediary_resources,omitempty"`
	// The duration in milliseconds for the link change to reach the final status.
	TotalDuration *wrapperspb.DoubleValue `protobuf:"bytes,4,opt,name=total_duration,json=totalDuration" json:"total_duration,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LinkCompletionDurations) Reset() {
	*x = LinkCompletionDurations{}
	mi := &file_plugin_framework_providerserverv1_provider_proto_msgTypes[67]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LinkCompletionDurations) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinkCompletionDurations) ProtoMessage() {}

func (x *LinkCompletionDurations) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_framework_providerserverv1_provider_proto_msgTypes[67]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinkCompletionDurations.ProtoReflect.Descriptor instead.
func (*LinkCompletionDurations) Descriptor() ([]byte, []int) {
	return file_plugin_framework_providerserverv1_provider_proto_rawDescGZIP(), []int{67}
}

func (x *LinkCompletionDurations) GetResourceAUpdate() *LinkComponentCompletionDurations {
	if x != nil {
		return x.ResourceAUpdate
	}
	return nil
}

func (x *LinkCompletionDurations) GetResourceBUpdate() *LinkComponentCompletionDurations {
	if x != nil {
		return x.ResourceBUpdate
	}
	return nil
}

func (x *LinkCompletionDurations) GetIntermediaryResources() *LinkComponentCompletionDurations {
	if x != nil {
		return x.IntermediaryResources
	}
	return nil
}

func (x *LinkCompletionDurations) GetTotalDuration() *wrapperspb.DoubleValue {
	if x != nil {
		return x.TotalDuration
	}
	return nil
}

// LinkComponentCompletionDurations holds duration information for
// a single component of a link change.
type LinkComponentCompletionDurations struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The duration in milliseconds for the link component change to reach the final status.
	TotalDuration *wrapperspb.DoubleValue `protobuf:"bytes,1,opt,name=total_duration,json=totalDuration" json:"total_duration,omitempty"`
	// Holds a list of durations in milliseconds for each attempt to deploy the link
	// component.
	// Attempt durations are in order as per the "attempt" field in a status update message.
	AttemptDurations []float64 `protobuf:"fixed64,2,rep,packed,name=attempt_durations,json=attemptDurations" json:"attempt_durations,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *LinkComponentCompletionDurations) Reset() {
	*x = LinkComponentCompletionDurations{}
	mi := &file_plugin_framework_providerserverv1_provider_proto_msgTypes[68]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LinkComponentCompletionDurations) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinkComponentCompletionDurations) ProtoMessage() {}

func (x *LinkComponentCompletionDurations) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_framework_providerserverv1_provider_proto_msgTypes[68]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinkComponentCompletionDurations.ProtoReflect.Descriptor instead.
func (*LinkComponentCompletionDurations) Descriptor() ([]byte, []int) {
	return file_plugin_framework_providerserverv1_provider_proto_rawDescGZIP(), []int{68}
}

func (x *LinkComponentCompletionDurations) GetTotalDuration() *wrapperspb.DoubleValue {
	if x != nil {
		return x.TotalDuration
	}
	return nil
}

func (x *LinkComponentCompletionDurations) GetAttemptDurations() []float64 {
	if x != nil {
		return x.AttemptDurations
	}
	return nil
}

// LinkRequest is the request input for general link type requests
// that only require a link type and the current context.
type LinkRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The type of link to carry out an action on or retrieve
	// some information about.
	// This should be in the form of `{resourceTypeA}::{resourceTypeB}`.
	LinkType *LinkType `protobuf:"bytes,1,opt,name=link_type,json=linkType" json:"link_type,omitempty"`
	// The ID of the host making the request
	// to the provider.
	HostId string `protobuf:"bytes,2,opt,name=host_id,json=hostId" json:"host_id,omitempty"`
	// Runtime configuration for the current environment.
	Context       *LinkContext `protobuf:"bytes,3,opt,name=context" json:"context,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LinkRequest) Reset() {
	*x = LinkRequest{}
	mi := &file_plugin_framework_providerserverv1_provider_proto_msgTypes[69]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LinkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinkRequest) ProtoMessage() {}

func (x *LinkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_framework_providerserverv1_provider_proto_msgTypes[69]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinkRequest.ProtoReflect.Descriptor instead.
func (*LinkRequest) Descriptor() ([]byte, []int) {
	return file_plugin_framework_providerserverv1_provider_proto_rawDescGZIP(), []int{69}
}

func (x *LinkRequest) GetLinkType() *LinkType {
	if x != nil {
		return x.LinkType
	}
	return nil
}

func (x *LinkRequest) GetHostId() string {
	if x != nil {
		return x.HostId
	}
	return ""
}

func (x *LinkRequest) GetContext() *LinkContext {
	if x != nil {
		return x.Context
	}
	return nil
}

// LinkAnnotationDefinitionsResponse is the response
// containing the annotation definitions for a link.
type LinkAnnotationDefinitionsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Response:
	//
	//	*LinkAnnotationDefinitionsResponse_AnnotationDefinitions
	//	*LinkAnnotationDefinitionsResponse_ErrorResponse
	Response      isLinkAnnotationDefinitionsResponse_Response `protobuf_oneof:"response"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LinkAnnotationDefinitionsResponse) Reset() {
	*x = LinkAnnotationDefinitionsResponse{}
	mi := &file_plugin_framework_providerserverv1_provider_proto_msgTypes[70]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LinkAnnotationDefinitionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinkAnnotationDefinitionsResponse) ProtoMessage() {}

func (x *LinkAnnotationDefinitionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_framework_providerserverv1_provider_proto_msgTypes[70]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinkAnnotationDefinitionsResponse.ProtoReflect.Descriptor instead.
func (*LinkAnnotationDefinitionsResponse) Descriptor() ([]byte, []int) {
	return file_plugin_framework_providerserverv1_provider_proto_rawDescGZIP(), []int{70}
}

func (x *LinkAnnotationDefinitionsResponse) GetResponse() isLinkAnnotationDefinitionsResponse_Response {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *LinkAnnotationDefinitionsResponse) GetAnnotationDefinitions() *LinkAnnotationDefinitions {
	if x != nil {
		if x, ok := x.Response.(*LinkAnnotationDefinitionsResponse_AnnotationDefinitions); ok {
			return x.AnnotationDefinitions
		}
	}
	return nil
}

func (x *LinkAnnotationDefinitionsResponse) GetErrorResponse() *sharedtypesv1.ErrorResponse {
	if x != nil {
		if x, ok := x.Response.(*LinkAnnotationDefinitionsResponse_ErrorResponse); ok {
			return x.ErrorResponse
		}
	}
	return nil
}

type isLinkAnnotationDefinitionsResponse_Response interface {
	isLinkAnnotationDefinitionsResponse_Response()
}

type LinkAnnotationDefinitionsResponse_AnnotationDefinitions struct {
	AnnotationDefinitions *LinkAnnotationDefinitions `protobuf:"bytes,1,opt,name=annotation_definitions,json=annotationDefinitions,oneof"`
}

type LinkAnnotationDefinitionsResponse_ErrorResponse struct {
	ErrorResponse *sharedtypesv1.ErrorResponse `protobuf:"bytes,2,opt,name=error_response,json=errorResponse,oneof"`
}

func (*LinkAnnotationDefinitionsResponse_AnnotationDefinitions) isLinkAnnotationDefinitionsResponse_Response() {
}

func (*LinkAnnotationDefinitionsResponse_ErrorResponse) isLinkAnnotationDefinitionsResponse_Response() {
}

// LinkAnnotationDefinition provides a definition for an annotation
// that can be applied to either of the resources in a link.
type LinkAnnotationDefinitions struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// A mapping of annotation definitions for a link.
	// The keys are expected to be in the format `{resourceType}::{annotationKey}`.
	// For example, `aws/lambda/function::aws.lambda.dynamodb.accessType`.
	// The resource type in the key represents the resource type in a link
	// that the annotation can be applied to.
	Definitions   map[string]*LinkAnnotationDefinition `protobuf:"bytes,1,rep,name=definitions" json:"definitions,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LinkAnnotationDefinitions) Reset() {
	*x = LinkAnnotationDefinitions{}
	mi := &file_plugin_framework_providerserverv1_provider_proto_msgTypes[71]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LinkAnnotationDefinitions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinkAnnotationDefinitions) ProtoMessage() {}

func (x *LinkAnnotationDefinitions) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_framework_providerserverv1_provider_proto_msgTypes[71]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinkAnnotationDefinitions.ProtoReflect.Descriptor instead.
func (*LinkAnnotationDefinitions) Descriptor() ([]byte, []int) {
	return file_plugin_framework_providerserverv1_provider_proto_rawDescGZIP(), []int{71}
}

func (x *LinkAnnotationDefinitions) GetDefinitions() map[string]*LinkAnnotationDefinition {
	if x != nil {
		return x.Definitions
	}
	return nil
}

// LinkAnnotationDefinition provides a way to define annotations
// for a link type.
type LinkAnnotationDefinition struct {
	state         protoimpl.MessageState   `protogen:"open.v1"`
	Name          string                   `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Label         string                   `protobuf:"bytes,2,opt,name=label" json:"label,omitempty"`
	Type          sharedtypesv1.ScalarType `protobuf:"varint,3,opt,name=type,enum=sharedtypesv1.ScalarType" json:"type,omitempty"`
	Description   string                   `protobuf:"bytes,4,opt,name=description" json:"description,omitempty"`
	DefaultValue  *schemapb.ScalarValue    `protobuf:"bytes,5,opt,name=default_value,json=defaultValue" json:"default_value,omitempty"`
	AllowedValues []*schemapb.ScalarValue  `protobuf:"bytes,6,rep,name=allowed_values,json=allowedValues" json:"allowed_values,omitempty"`
	Examples      []*schemapb.ScalarValue  `protobuf:"bytes,7,rep,name=examples" json:"examples,omitempty"`
	Required      bool                     `protobuf:"varint,8,opt,name=required" json:"required,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LinkAnnotationDefinition) Reset() {
	*x = LinkAnnotationDefinition{}
	mi := &file_plugin_framework_providerserverv1_provider_proto_msgTypes[72]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LinkAnnotationDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinkAnnotationDefinition) ProtoMessage() {}

func (x *LinkAnnotationDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_framework_providerserverv1_provider_proto_msgTypes[72]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinkAnnotationDefinition.ProtoReflect.Descriptor instead.
func (*LinkAnnotationDefinition) Descriptor() ([]byte, []int) {
	return file_plugin_framework_providerserverv1_provider_proto_rawDescGZIP(), []int{72}
}

func (x *LinkAnnotationDefinition) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *LinkAnnotationDefinition) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *LinkAnnotationDefinition) GetType() sharedtypesv1.ScalarType {
	if x != nil {
		return x.Type
	}
	return sharedtypesv1.ScalarType(0)
}

func (x *LinkAnnotationDefinition) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *LinkAnnotationDefinition) GetDefaultValue() *schemapb.ScalarValue {
	if x != nil {
		return x.DefaultValue
	}
	return nil
}

func (x *LinkAnnotationDefinition) GetAllowedValues() []*schemapb.ScalarValue {
	if x != nil {
		return x.AllowedValues
	}
	return nil
}

func (x *LinkAnnotationDefinition) GetExamples() []*schemapb.ScalarValue {
	if x != nil {
		return x.Examples
	}
	return nil
}

func (x *LinkAnnotationDefinition) GetRequired() bool {
	if x != nil {
		return x.Required
	}
	return false
}

// LinkContext holds the environment configuration
// across multiple providers.
// A special context is required for links,
// even though links are housed in a single provider,
// they can involve resources that in different providers.
type LinkContext struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Configuration parameters for multiple providers.
	// Keys are expected to be in the format `{providerNamespace}::{variableName}`.
	ProviderConfigVariables map[string]*schemapb.ScalarValue `protobuf:"bytes,1,rep,name=provider_config_variables,json=providerConfigVariables" json:"provider_config_variables,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Context-wide variables for the current deploy engine run.
	ContextVariables map[string]*schemapb.ScalarValue `protobuf:"bytes,2,rep,name=context_variables,json=contextVariables" json:"context_variables,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *LinkContext) Reset() {
	*x = LinkContext{}
	mi := &file_plugin_framework_providerserverv1_provider_proto_msgTypes[73]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LinkContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinkContext) ProtoMessage() {}

func (x *LinkContext) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_framework_providerserverv1_provider_proto_msgTypes[73]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinkContext.ProtoReflect.Descriptor instead.
func (*LinkContext) Descriptor() ([]byte, []int) {
	return file_plugin_framework_providerserverv1_provider_proto_rawDescGZIP(), []int{73}
}

func (x *LinkContext) GetProviderConfigVariables() map[string]*schemapb.ScalarValue {
	if x != nil {
		return x.ProviderConfigVariables
	}
	return nil
}

func (x *LinkContext) GetContextVariables() map[string]*schemapb.ScalarValue {
	if x != nil {
		return x.ContextVariables
	}
	return nil
}

// The type of data source to retrieve data used in a blueprint from.
type DataSourceType struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Type          string                 `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DataSourceType) Reset() {
	*x = DataSourceType{}
	mi := &file_plugin_framework_providerserverv1_provider_proto_msgTypes[74]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DataSourceType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataSourceType) ProtoMessage() {}

func (x *DataSourceType) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_framework_providerserverv1_provider_proto_msgTypes[74]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataSourceType.ProtoReflect.Descriptor instead.
func (*DataSourceType) Descriptor() ([]byte, []int) {
	return file_plugin_framework_providerserverv1_provider_proto_rawDescGZIP(), []int{74}
}

func (x *DataSourceType) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

// The type of custom variable to be used to determine the available
// values for a variable in a blueprint.
type CustomVariableType struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Type          string                 `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CustomVariableType) Reset() {
	*x = CustomVariableType{}
	mi := &file_plugin_framework_providerserverv1_provider_proto_msgTypes[75]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CustomVariableType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomVariableType) ProtoMessage() {}

func (x *CustomVariableType) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_framework_providerserverv1_provider_proto_msgTypes[75]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomVariableType.ProtoReflect.Descriptor instead.
func (*CustomVariableType) Descriptor() ([]byte, []int) {
	return file_plugin_framework_providerserverv1_provider_proto_rawDescGZIP(), []int{75}
}

func (x *CustomVariableType) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

// The type of link to carry out an action on or retrieve
// some information about.
type LinkType struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The type of link in the form of `{resourceTypeA}::{resourceTypeB}`.
	Type          string `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LinkType) Reset() {
	*x = LinkType{}
	mi := &file_plugin_framework_providerserverv1_provider_proto_msgTypes[76]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LinkType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinkType) ProtoMessage() {}

func (x *LinkType) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_framework_providerserverv1_provider_proto_msgTypes[76]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinkType.ProtoReflect.Descriptor instead.
func (*LinkType) Descriptor() ([]byte, []int) {
	return file_plugin_framework_providerserverv1_provider_proto_rawDescGZIP(), []int{76}
}

func (x *LinkType) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

var File_plugin_framework_providerserverv1_provider_proto protoreflect.FileDescriptor

var file_plugin_framework_providerserverv1_provider_proto_rawDesc = string([]byte{
	0x0a, 0x30, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2d, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f,
	0x72, 0x6b, 0x2f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x10, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x76, 0x31, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x62, 0x6c, 0x75, 0x65, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x2f,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2a, 0x70, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x2d, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x74, 0x79, 0x70, 0x65, 0x73, 0x76, 0x31, 0x2f, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa3, 0x01, 0x0a, 0x11, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b,
	0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x76, 0x31, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x48, 0x00,
	0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x45, 0x0a, 0x0e, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x48, 0x00, 0x52, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x29,
	0x0a, 0x09, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x22, 0xb4, 0x01, 0x0a, 0x15, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x0e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x48, 0x00, 0x52, 0x0d,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x45, 0x0a,
	0x0e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x53, 0x0a, 0x0d, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x73, 0x12, 0x42, 0x0a, 0x0e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x74, 0x79, 0x70, 0x65, 0x73, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x73, 0x22, 0xa4, 0x01, 0x0a, 0x11, 0x4c, 0x69, 0x6e, 0x6b, 0x54, 0x79,
	0x70, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x0a, 0x6c,
	0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x76, 0x31, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x73, 0x48, 0x00, 0x52, 0x09,
	0x6c, 0x69, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x45, 0x0a, 0x0e, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x74, 0x79, 0x70, 0x65, 0x73, 0x76,
	0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48,
	0x00, 0x52, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x46, 0x0a, 0x09,
	0x4c, 0x69, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x6c, 0x69, 0x6e,
	0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x76, 0x31,
	0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x6c, 0x69, 0x6e, 0x6b, 0x54,
	0x79, 0x70, 0x65, 0x73, 0x22, 0xbd, 0x01, 0x0a, 0x17, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x4f, 0x0a, 0x11, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x76, 0x31, 0x2e, 0x44,
	0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x48, 0x00,
	0x52, 0x0f, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x73, 0x12, 0x45, 0x0a, 0x0e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x74, 0x79, 0x70, 0x65, 0x73, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5f, 0x0a, 0x0f, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x4c, 0x0a, 0x11, 0x64, 0x61, 0x74, 0x61, 0x5f,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x73, 0x22, 0xcd, 0x01, 0x0a, 0x1b, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5b, 0x0a, 0x15, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f,
	0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x56, 0x61,
	0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x48, 0x00, 0x52, 0x13, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x73, 0x12, 0x45, 0x0a, 0x0e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x74, 0x79, 0x70, 0x65, 0x73, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x6f, 0x0a, 0x13, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x56,
	0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x58, 0x0a, 0x15,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x76, 0x31, 0x2e, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x13, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x22, 0xb0, 0x01, 0x0a, 0x14, 0x46, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x45, 0x0a, 0x0d, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x76, 0x31, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x45, 0x0a, 0x0e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x74, 0x79, 0x70, 0x65, 0x73, 0x76, 0x31, 0x2e, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0d,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x0a, 0x0a,
	0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2c, 0x0a, 0x0c, 0x46, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x66, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xac, 0x01, 0x0a, 0x13, 0x52, 0x65, 0x74, 0x72,
	0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x42, 0x0a, 0x0c, 0x72, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x79, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x48, 0x00, 0x52, 0x0b, 0x72, 0x65, 0x74, 0x72, 0x79, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x12, 0x45, 0x0a, 0x0e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x74, 0x79, 0x70, 0x65, 0x73, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xb6, 0x01, 0x0a, 0x0b, 0x52, 0x65, 0x74, 0x72, 0x79,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x65,
	0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6d, 0x61, 0x78,
	0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x66, 0x69, 0x72, 0x73, 0x74,
	0x5f, 0x72, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x52, 0x65, 0x74, 0x72, 0x79, 0x44, 0x65,
	0x6c, 0x61, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x44, 0x65, 0x6c, 0x61, 0x79,
	0x12, 0x25, 0x0a, 0x0e, 0x62, 0x61, 0x63, 0x6b, 0x6f, 0x66, 0x66, 0x5f, 0x66, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x62, 0x61, 0x63, 0x6b, 0x6f, 0x66,
	0x66, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x6a, 0x69, 0x74, 0x74, 0x65,
	0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6a, 0x69, 0x74, 0x74, 0x65, 0x72, 0x22,
	0xef, 0x01, 0x0a, 0x1d, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x40, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x74, 0x79, 0x70, 0x65, 0x73, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x68, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x0f,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x0e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x38, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x74, 0x79, 0x70, 0x65, 0x73, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x22, 0xdc, 0x01, 0x0a, 0x1e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x67, 0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65,
	0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x38, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x76, 0x31, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x10, 0x63, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a,
	0x0e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x65, 0x0a, 0x26, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x64, 0x69,
	0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x74, 0x79, 0x70, 0x65, 0x73, 0x76, 0x31, 0x2e,
	0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x52, 0x0b, 0x64, 0x69, 0x61, 0x67,
	0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x22, 0xc5, 0x01, 0x0a, 0x1e, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x0f, 0x73, 0x70,
	0x65, 0x63, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0e, 0x73, 0x70,
	0x65, 0x63, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x45, 0x0a, 0x0e,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0xb1, 0x01, 0x0a, 0x19, 0x43, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c,
	0x69, 0x6e, 0x6b, 0x54, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a,
	0x0e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x6e, 0x4c, 0x69, 0x6e, 0x6b, 0x54, 0x6f, 0x48,
	0x00, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73,
	0x12, 0x45, 0x0a, 0x0e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x74, 0x79, 0x70, 0x65, 0x73, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0xd8, 0x01, 0x0a, 0x1e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x53, 0x74, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x73, 0x65, 0x64, 0x44, 0x65, 0x70, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x63, 0x0a, 0x17, 0x73, 0x74, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x73, 0x65, 0x64, 0x5f, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x73, 0x65, 0x64, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65,
	0x73, 0x48, 0x00, 0x52, 0x16, 0x73, 0x74, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x73, 0x65, 0x64, 0x44,
	0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x12, 0x45, 0x0a, 0x0e, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x48, 0x00, 0x52, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5c,
	0x0a, 0x16, 0x53, 0x74, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x73, 0x65, 0x64, 0x44, 0x65, 0x70, 0x65,
	0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x12, 0x42, 0x0a, 0x0e, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x74, 0x79, 0x70, 0x65, 0x73, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x22, 0xb6, 0x01, 0x0a,
	0x20, 0x49, 0x73, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x3f, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x74, 0x79, 0x70, 0x65, 0x73, 0x76, 0x31, 0x2e,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x54, 0x65,
	0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x45, 0x0a, 0x0e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x74, 0x79, 0x70, 0x65, 0x73, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xc8, 0x03, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x0d, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x74, 0x79, 0x70, 0x65, 0x73, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x68,
	0x6f, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x68, 0x6f,
	0x73, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x47, 0x0a, 0x15, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f,
	0x73, 0x70, 0x65, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x2e, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x64, 0x65, 0x52,
	0x13, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x53, 0x70, 0x65, 0x63, 0x12, 0x60, 0x0a, 0x19, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x17, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x38, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x22, 0xbc, 0x01, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x13, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x4d, 0x61, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x11, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x45, 0x0a, 0x0e,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x2a, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x68, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x22, 0xa6, 0x01, 0x0a, 0x0f,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x40, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x17, 0x0a, 0x07, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x68, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x74, 0x79, 0x70, 0x65, 0x73, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x22, 0xb2, 0x01, 0x0a, 0x11, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4a, 0x0a, 0x10, 0x64, 0x61,
	0x74, 0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x68, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x12,
	0x38, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x74, 0x79, 0x70, 0x65, 0x73, 0x76, 0x31,
	0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0xc6, 0x01, 0x0a, 0x19, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x56, 0x0a, 0x14, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x56,
	0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x12, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x17, 0x0a, 0x07, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x68, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x74, 0x79, 0x70, 0x65, 0x73, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x22, 0xfb, 0x02, 0x0a, 0x17, 0x53, 0x74, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x6e, 0x6b,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x37,
	0x0a, 0x09, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x6c,
	0x69, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x68, 0x6f, 0x73, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x68, 0x6f, 0x73, 0x74, 0x49, 0x64,
	0x12, 0x44, 0x0a, 0x12, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x61, 0x5f, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x74, 0x79, 0x70, 0x65, 0x73, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x73, 0x52, 0x10, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x44, 0x0a, 0x12, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x62, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x52, 0x10, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x42, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x49, 0x0a, 0x12,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x6e, 0x6b,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x10, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4c, 0x69,
	0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x37, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x6e, 0x6b,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x22, 0xd0, 0x01, 0x0a, 0x18, 0x53, 0x74, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x61, 0x0a,
	0x11, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x67,
	0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x10,
	0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x45, 0x0a, 0x0e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x74, 0x79, 0x70, 0x65, 0x73, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x58, 0x0a, 0x20, 0x53, 0x74, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x6e, 0x6b,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x74, 0x79, 0x70, 0x65, 0x73, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x73, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x22, 0xd3, 0x03,
	0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x09, 0x6c,
	0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x76,
	0x31, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x6c, 0x69, 0x6e, 0x6b,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x68, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x12, 0x34, 0x0a,
	0x07, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x74, 0x79, 0x70, 0x65, 0x73, 0x76, 0x31, 0x2e, 0x4c,
	0x69, 0x6e, 0x6b, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x73, 0x12, 0x40, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x74, 0x79, 0x70, 0x65, 0x73, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4b, 0x0a, 0x13, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x11, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x76, 0x31, 0x2e,
	0x4c, 0x69, 0x6e, 0x6b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x37, 0x0a, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x76, 0x31, 0x2e, 0x4c,
	0x69, 0x6e, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x22, 0xd4, 0x01, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x69,
	0x6e, 0x6b, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x63, 0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x76, 0x31,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x10, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x0e, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x74, 0x79, 0x70, 0x65, 0x73, 0x76, 0x31, 0x2e,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52,
	0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x0a,
	0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x56, 0x0a, 0x22, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x30, 0x0a, 0x09, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x4d, 0x61, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x6c, 0x69, 0x6e, 0x6b, 0x44, 0x61,
	0x74, 0x61, 0x22, 0xdb, 0x03, 0x0a, 0x26, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6e,
	0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x72, 0x79, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x37, 0x0a,
	0x09, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x6c, 0x69,
	0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x68, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x12,
	0x43, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x61, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x74, 0x79, 0x70, 0x65, 0x73, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x43, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x62, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x74, 0x79, 0x70, 0x65, 0x73, 0x76, 0x31, 0x2e, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x42, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x34, 0x0a, 0x07, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x74, 0x79, 0x70, 0x65, 0x73, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12,
	0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x6e,
	0x6b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x37, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x6e, 0x6b,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x22, 0xee, 0x01, 0x0a, 0x27, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x72, 0x79, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x70, 0x0a, 0x11,
	0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x72,
	0x79, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x10, 0x63, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45,
	0x0a, 0x0e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0xd6, 0x01, 0x0a, 0x2f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6e, 0x6b,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x72, 0x79, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x71, 0x0a, 0x1c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x65,
	0x64, 0x69, 0x61, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x76, 0x31, 0x2e, 0x4c,
	0x69, 0x6e, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x72, 0x79, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x1a, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x72, 0x79, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x09, 0x6c, 0x69, 0x6e, 0x6b,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x2e, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x64, 0x65,
	0x52, 0x08, 0x6c, 0x69, 0x6e, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x22, 0xc4, 0x01, 0x0a, 0x1c, 0x4c,
	0x69, 0x6e, 0x6b, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x51, 0x0a, 0x0d, 0x70,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00,
	0x52, 0x0c, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x45,
	0x0a, 0x0e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x82, 0x02, 0x0a, 0x1f, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4a, 0x0a, 0x10, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x17, 0x0a, 0x07, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x68, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x12, 0x40, 0x0a, 0x12, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e,
	0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x10, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x38, 0x0a, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x74, 0x79, 0x70, 0x65, 0x73, 0x76, 0x31, 0x2e, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0xe0, 0x01, 0x0a, 0x20, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x69, 0x0a, 0x11, 0x63,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x48, 0x00, 0x52, 0x10, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x0e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x74, 0x79, 0x70, 0x65, 0x73, 0x76, 0x31, 0x2e, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0d,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x0a, 0x0a,
	0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x67, 0x0a, 0x28, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x74, 0x79, 0x70, 0x65, 0x73, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x61, 0x67, 0x6e,
	0x6f, 0x73, 0x74, 0x69, 0x63, 0x52, 0x0b, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x22, 0xcc, 0x01, 0x0a, 0x20, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x53, 0x70, 0x65, 0x63, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x55, 0x0a, 0x0f, 0x73, 0x70, 0x65, 0x63, 0x5f,
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x70,
	0x65, 0x63, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0e,
	0x73, 0x70, 0x65, 0x63, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x45,
	0x0a, 0x0e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0xc4, 0x01, 0x0a, 0x1e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x0d, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x76, 0x31, 0x2e, 0x44,
	0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x73, 0x48, 0x00, 0x52, 0x0c, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x45, 0x0a, 0x0e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x74, 0x79, 0x70, 0x65, 0x73, 0x76, 0x31, 0x2e, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x0a, 0x0a, 0x08,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xa1, 0x02, 0x0a, 0x16, 0x46, 0x65, 0x74,
	0x63, 0x68, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x4a, 0x0a, 0x10, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x76, 0x31,
	0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0e, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x68, 0x0a, 0x1e, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x77,
	0x69, 0x74, 0x68, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x5f, 0x73, 0x75, 0x62,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c,
	0x76, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x1a, 0x64,
	0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x57, 0x69, 0x74, 0x68, 0x52, 0x65, 0x73,
	0x6f, 0x6c, 0x76, 0x65, 0x64, 0x53, 0x75, 0x62, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x68, 0x6f, 0x73,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x68, 0x6f, 0x73, 0x74,
	0x49, 0x64, 0x12, 0x38, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0xce, 0x01, 0x0a,
	0x17, 0x46, 0x65, 0x74, 0x63, 0x68, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x60, 0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x44, 0x61, 0x74, 0x61,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x10, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x0e, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x48, 0x00, 0x52, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xbf, 0x01,
	0x0a, 0x21, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x56, 0x61,
	0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x48, 0x00, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x45, 0x0a, 0x0e,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0xd7, 0x01, 0x0a, 0x19, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62,
	0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x52, 0x0a,
	0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38,
	0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x76,
	0x31, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x1a, 0x66, 0x0a, 0x0c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x40, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x56, 0x61, 0x72, 0x69,
	0x61, 0x62, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xb2, 0x01, 0x0a, 0x18, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x53,
	0x63, 0x61, 0x6c, 0x61, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x15, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x74, 0x65, 0x64, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xcc,
	0x01, 0x0a, 0x1a, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5b, 0x0a,
	0x14, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x76, 0x61, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x76, 0x31, 0x2e, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x11, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x56,
	0x61, 0x72, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x45, 0x0a, 0x0e, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x48, 0x00, 0x52, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x68, 0x0a,
	0x16, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x38, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x56,
	0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x22, 0xc0, 0x01, 0x0a, 0x1f, 0x46, 0x65, 0x74, 0x63,
	0x68, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x74,
	0x63, 0x68, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44, 0x61, 0x74,
	0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x4c, 0x0a, 0x09,
	0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x29, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x2e, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x64, 0x65, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xdf, 0x03, 0x0a, 0x12, 0x52,
	0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x12, 0x34, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x5e, 0x0a, 0x14, 0x64, 0x61, 0x74, 0x61, 0x5f,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65,
	0x64, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x52, 0x12, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x42, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c,
	0x76, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x4b, 0x0a, 0x07, 0x65,
	0x78, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x76, 0x31, 0x2e,
	0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x07, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x35, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x4e, 0x6f,
	0x64, 0x65, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x1a,
	0x6b, 0x0a, 0x0c, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x45, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2f, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x45, 0x78, 0x70, 0x6f, 0x72,
	0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xb8, 0x01, 0x0a,
	0x1a, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x36, 0x0a, 0x0c, 0x64,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x4d, 0x61, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x2e, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0b, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2b, 0x0a, 0x06, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x2e, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x64, 0x65, 0x52,
	0x06, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x22, 0xab, 0x01, 0x0a, 0x18, 0x52, 0x65, 0x73, 0x6f,
	0x6c, 0x76, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x53, 0x63, 0x61,
	0x6c, 0x61, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x48, 0x0a, 0x06, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x06, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x22, 0x4d, 0x0a, 0x1e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65,
	0x64, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x2b, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x2e, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x22, 0xe9, 0x01, 0x0a, 0x16, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12,
	0x5f, 0x0a, 0x0d, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0c, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x1a, 0x6e, 0x0a, 0x11, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x43, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x53,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0xe0, 0x01, 0x0a, 0x1b, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x15, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x74, 0x65, 0x64, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74, 0x65, 0x64,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x13, 0x73,
	0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x65, 0x64, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x25, 0x0a, 0x0e,
	0x63, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x73, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x73, 0x57,
	0x69, 0x74, 0x68, 0x22, 0x9c, 0x01, 0x0a, 0x1d, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64,
	0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x45,
	0x78, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x09, 0x61, 0x6c, 0x69,
	0x61, 0x73, 0x5f, 0x66, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x08, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x46, 0x6f, 0x72, 0x12, 0x35, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0xcd, 0x01, 0x0a, 0x18, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x53, 0x70, 0x65, 0x63, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x4e, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x36, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x70, 0x65,
	0x63, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x1a,
	0x61, 0x0a, 0x0b, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x3c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x70, 0x65,
	0x63, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x9d, 0x02, 0x0a, 0x14, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x53, 0x70, 0x65, 0x63, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x3e, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74,
	0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x15, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74, 0x65, 0x64,
	0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x14, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74, 0x65, 0x64, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52,
	0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x75, 0x6c, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6e, 0x75, 0x6c, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x22, 0xc6, 0x01, 0x0a, 0x16, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x59, 0x0a,
	0x15, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x76, 0x31, 0x2e,
	0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x48, 0x00, 0x52, 0x12, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x45, 0x0a, 0x0e, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x74, 0x79, 0x70, 0x65, 0x73, 0x76, 0x31,
	0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00,
	0x52, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42,
	0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x60, 0x0a, 0x12, 0x44,
	0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x34, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x22, 0xc2, 0x01,
	0x0a, 0x18, 0x4c, 0x69, 0x6e, 0x6b, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x53, 0x0a, 0x11, 0x70, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x50, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x10, 0x70,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12,
	0x51, 0x0a, 0x16, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x74, 0x79, 0x70, 0x65, 0x73, 0x76, 0x31, 0x2e,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x14, 0x70, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x22, 0xad, 0x01, 0x0a, 0x10, 0x4c, 0x69, 0x6e, 0x6b, 0x4b, 0x69, 0x6e, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x0e, 0x6c, 0x69, 0x6e, 0x6b, 0x5f,
	0x6b, 0x69, 0x6e, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x76, 0x31, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x4b, 0x69, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x48,
	0x00, 0x52, 0x0c, 0x6c, 0x69, 0x6e, 0x6b, 0x4b, 0x69, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x45, 0x0a, 0x0e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x3e, 0x0a, 0x0c, 0x4c, 0x69, 0x6e, 0x6b, 0x4b, 0x69, 0x6e, 0x64, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x2e, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x04, 0x6b, 0x69,
	0x6e, 0x64, 0x22, 0xfc, 0x05, 0x0a, 0x09, 0x4c, 0x69, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x4a, 0x0a, 0x0e, 0x70,
	0x72, 0x65, 0x63, 0x69, 0x73, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x65, 0x63, 0x69, 0x73, 0x65, 0x4c, 0x69,
	0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3f, 0x0a, 0x1c, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x19, 0x6c,
	0x61, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x36, 0x0a, 0x17, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x6c, 0x61, 0x73, 0x74, 0x44,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x12, 0x41, 0x0a, 0x1d, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x5f,
	0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1a, 0x6c, 0x61, 0x73, 0x74, 0x44, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x12, 0x71, 0x0a, 0x1c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x6e,
	0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x72, 0x79, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x1a, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x72, 0x79, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x12, 0x39, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0a,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x27, 0x0a, 0x0f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x66, 0x61, 0x69, 0x6c,
	0x75, 0x72, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x12, 0x47, 0x0a, 0x09, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x76, 0x31,
	0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x09, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x1a, 0x4c, 0x0a, 0x09, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x29, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x4d, 0x61, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0xcc, 0x03, 0x0a, 0x1d, 0x4c, 0x69, 0x6e, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x72, 0x79, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x4b, 0x0a, 0x0e,
	0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x65, 0x63, 0x69, 0x73, 0x65, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x63,
	0x69, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x36, 0x0a, 0x17, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x6c, 0x61, 0x73, 0x74,
	0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x12, 0x41, 0x0a, 0x1d, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x5f, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1a, 0x6c, 0x61, 0x73, 0x74, 0x44, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x41, 0x0a, 0x12, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x10, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53,
	0x70, 0x65, 0x63, 0x44, 0x61, 0x74, 0x61, 0x12, 0x27, 0x0a, 0x0f, 0x66, 0x61, 0x69, 0x6c, 0x75,
	0x72, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0e, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73,
	0x22, 0x89, 0x03, 0x0a, 0x17, 0x4c, 0x69, 0x6e, 0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x5e, 0x0a, 0x11,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x61, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x43,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0f, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x5e, 0x0a, 0x11,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x62, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x43,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0f, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x69, 0x0a, 0x16,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x76, 0x31, 0x2e,
	0x4c, 0x69, 0x6e, 0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x15, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x72, 0x79, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x43, 0x0a, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x94, 0x01, 0x0a,
	0x20, 0x4c, 0x69, 0x6e, 0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x43, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x43, 0x0a, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62,
	0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x11, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70,
	0x74, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x01, 0x52, 0x10, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x22, 0x98, 0x01, 0x0a, 0x0b, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x09, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x08, 0x6c, 0x69, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07,
	0x68, 0x6f, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x68,
	0x6f, 0x73, 0x74, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0xdc,
	0x01, 0x0a, 0x21, 0x4c, 0x69, 0x6e, 0x6b, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x64, 0x0a, 0x16, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x41, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x48, 0x00, 0x52, 0x15, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x45, 0x0a, 0x0e, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x48, 0x00, 0x52, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xe7, 0x01,
	0x0a, 0x19, 0x4c, 0x69, 0x6e, 0x6b, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x5e, 0x0a, 0x0b, 0x64,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x3c, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b,
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x6a, 0x0a, 0x10, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x40, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xd8, 0x02, 0x0a, 0x18, 0x4c, 0x69, 0x6e, 0x6b,
	0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x2d,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x74, 0x79, 0x70, 0x65, 0x73, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x61,
	0x6c, 0x61, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x38, 0x0a, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e,
	0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3a, 0x0a, 0x0e, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x65, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x61,
	0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x2f, 0x0a, 0x08, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x2e, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x65, 0x78,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x64, 0x22, 0xa2, 0x03, 0x0a, 0x0b, 0x4c, 0x69, 0x6e, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x12, 0x76, 0x0a, 0x19, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x17, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x60, 0x0a, 0x11, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x56, 0x61, 0x72, 0x69,
	0x61, 0x62, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x1a, 0x5f, 0x0a, 0x1c,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x56, 0x61,
	0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x29,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x58, 0x0a,
	0x15, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x29, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x2e, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x24, 0x0a, 0x0e, 0x44, 0x61, 0x74, 0x61, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x28, 0x0a,
	0x12, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x1e, 0x0a, 0x08, 0x4c, 0x69, 0x6e, 0x6b, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x2a, 0xab, 0x01, 0x0a, 0x18, 0x44, 0x61, 0x74, 0x61,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x53, 0x4f, 0x55,
	0x52, 0x43, 0x45, 0x5f, 0x53, 0x50, 0x45, 0x43, 0x5f, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x10,
	0x00, 0x12, 0x1c, 0x0a, 0x18, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45,
	0x5f, 0x53, 0x50, 0x45, 0x43, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x47, 0x45, 0x52, 0x10, 0x01, 0x12,
	0x1a, 0x0a, 0x16, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x53,
	0x50, 0x45, 0x43, 0x5f, 0x46, 0x4c, 0x4f, 0x41, 0x54, 0x10, 0x02, 0x12, 0x1c, 0x0a, 0x18, 0x44,
	0x41, 0x54, 0x41, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x53, 0x50, 0x45, 0x43, 0x5f,
	0x42, 0x4f, 0x4f, 0x4c, 0x45, 0x41, 0x4e, 0x10, 0x03, 0x12, 0x1a, 0x0a, 0x16, 0x44, 0x41, 0x54,
	0x41, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x53, 0x50, 0x45, 0x43, 0x5f, 0x41, 0x52,
	0x52, 0x41, 0x59, 0x10, 0x04, 0x2a, 0x73, 0x0a, 0x14, 0x4c, 0x69, 0x6e, 0x6b, 0x50, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1f, 0x0a,
	0x1b, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x50, 0x52, 0x49, 0x4f, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x52,
	0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x1c,
	0x0a, 0x18, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x50, 0x52, 0x49, 0x4f, 0x52, 0x49, 0x54, 0x59, 0x5f,
	0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x41, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18,
	0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x50, 0x52, 0x49, 0x4f, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x52, 0x45,
	0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x42, 0x10, 0x02, 0x2a, 0x32, 0x0a, 0x08, 0x4c, 0x69,
	0x6e, 0x6b, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x12, 0x0a, 0x0e, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x4b,
	0x49, 0x4e, 0x44, 0x5f, 0x48, 0x41, 0x52, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x4c, 0x49,
	0x4e, 0x4b, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x53, 0x4f, 0x46, 0x54, 0x10, 0x01, 0x2a, 0x68,
	0x0a, 0x0e, 0x4c, 0x69, 0x6e, 0x6b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1b, 0x0a, 0x17, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x10, 0x00, 0x12, 0x1c, 0x0a,
	0x18, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x44, 0x45, 0x53, 0x54, 0x52, 0x4f, 0x59, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x4c,
	0x49, 0x4e, 0x4b, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x02, 0x2a, 0x88, 0x05, 0x0a, 0x0a, 0x4c, 0x69, 0x6e,
	0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x17, 0x0a, 0x13, 0x4c, 0x49, 0x4e, 0x4b, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00,
	0x12, 0x18, 0x0a, 0x14, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x4c, 0x49,
	0x4e, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45,
	0x44, 0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44,
	0x10, 0x03, 0x12, 0x23, 0x0a, 0x1f, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x4f, 0x4c, 0x4c, 0x49, 0x4e, 0x47,
	0x5f, 0x42, 0x41, 0x43, 0x4b, 0x10, 0x04, 0x12, 0x26, 0x0a, 0x22, 0x4c, 0x49, 0x4e, 0x4b, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x4f,
	0x4c, 0x4c, 0x42, 0x41, 0x43, 0x4b, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x05, 0x12,
	0x28, 0x0a, 0x24, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43,
	0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x4f, 0x4c, 0x4c, 0x42, 0x41, 0x43, 0x4b, 0x5f, 0x43,
	0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x06, 0x12, 0x1a, 0x0a, 0x16, 0x4c, 0x49, 0x4e,
	0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x44, 0x45, 0x53, 0x54, 0x52, 0x4f, 0x59,
	0x49, 0x4e, 0x47, 0x10, 0x07, 0x12, 0x19, 0x0a, 0x15, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x44, 0x45, 0x53, 0x54, 0x52, 0x4f, 0x59, 0x45, 0x44, 0x10, 0x08,
	0x12, 0x1e, 0x0a, 0x1a, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x44, 0x45, 0x53, 0x54, 0x52, 0x4f, 0x59, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x09,
	0x12, 0x24, 0x0a, 0x20, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x44, 0x45, 0x53, 0x54, 0x52, 0x4f, 0x59, 0x5f, 0x52, 0x4f, 0x4c, 0x4c, 0x49, 0x4e, 0x47, 0x5f,
	0x42, 0x41, 0x43, 0x4b, 0x10, 0x0a, 0x12, 0x27, 0x0a, 0x23, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x44, 0x45, 0x53, 0x54, 0x52, 0x4f, 0x59, 0x5f, 0x52, 0x4f,
	0x4c, 0x4c, 0x42, 0x41, 0x43, 0x4b, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x0b, 0x12,
	0x29, 0x0a, 0x25, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x44,
	0x45, 0x53, 0x54, 0x52, 0x4f, 0x59, 0x5f, 0x52, 0x4f, 0x4c, 0x4c, 0x42, 0x41, 0x43, 0x4b, 0x5f,
	0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x0c, 0x12, 0x18, 0x0a, 0x14, 0x4c, 0x49,
	0x4e, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x49,
	0x4e, 0x47, 0x10, 0x0d, 0x12, 0x17, 0x0a, 0x13, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x44, 0x10, 0x0e, 0x12, 0x1d, 0x0a,
	0x19, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x50, 0x44,
	0x41, 0x54, 0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x0f, 0x12, 0x23, 0x0a, 0x1f,
	0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x50, 0x44, 0x41,
	0x54, 0x45, 0x5f, 0x52, 0x4f, 0x4c, 0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x42, 0x41, 0x43, 0x4b, 0x10,
	0x10, 0x12, 0x26, 0x0a, 0x22, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x4f, 0x4c, 0x4c, 0x42, 0x41, 0x43, 0x4b,
	0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x11, 0x12, 0x28, 0x0a, 0x24, 0x4c, 0x49, 0x4e,
	0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f,
	0x52, 0x4f, 0x4c, 0x4c, 0x42, 0x41, 0x43, 0x4b, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54,
	0x45, 0x10, 0x12, 0x2a, 0xaa, 0x08, 0x0a, 0x11, 0x50, 0x72, 0x65, 0x63, 0x69, 0x73, 0x65, 0x4c,
	0x69, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x1b, 0x50, 0x52, 0x45,
	0x43, 0x49, 0x53, 0x45, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x2b, 0x0a, 0x27, 0x50, 0x52,
	0x45, 0x43, 0x49, 0x53, 0x45, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55,
	0x52, 0x43, 0x45, 0x5f, 0x41, 0x10, 0x01, 0x12, 0x2a, 0x0a, 0x26, 0x50, 0x52, 0x45, 0x43, 0x49,
	0x53, 0x45, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52,
	0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x41, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45,
	0x44, 0x10, 0x02, 0x12, 0x30, 0x0a, 0x2c, 0x50, 0x52, 0x45, 0x43, 0x49, 0x53, 0x45, 0x5f, 0x4c,
	0x49, 0x4e, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55,
	0x52, 0x43, 0x45, 0x5f, 0x41, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x46, 0x41, 0x49,
	0x4c, 0x45, 0x44, 0x10, 0x03, 0x12, 0x36, 0x0a, 0x32, 0x50, 0x52, 0x45, 0x43, 0x49, 0x53, 0x45,
	0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x45, 0x53,
	0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x41, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x52,
	0x4f, 0x4c, 0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x42, 0x41, 0x43, 0x4b, 0x10, 0x04, 0x12, 0x39, 0x0a,
	0x35, 0x50, 0x52, 0x45, 0x43, 0x49, 0x53, 0x45, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x41, 0x5f,
	0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x4f, 0x4c, 0x4c, 0x42, 0x41, 0x43, 0x4b, 0x5f,
	0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x05, 0x12, 0x3b, 0x0a, 0x37, 0x50, 0x52, 0x45, 0x43,
	0x49, 0x53, 0x45, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x41, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54,
	0x45, 0x5f, 0x52, 0x4f, 0x4c, 0x4c, 0x42, 0x41, 0x43, 0x4b, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c,
	0x45, 0x54, 0x45, 0x10, 0x06, 0x12, 0x2b, 0x0a, 0x27, 0x50, 0x52, 0x45, 0x43, 0x49, 0x53, 0x45,
	0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x50, 0x44,
	0x41, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x42,
	0x10, 0x07, 0x12, 0x2a, 0x0a, 0x26, 0x50, 0x52, 0x45, 0x43, 0x49, 0x53, 0x45, 0x5f, 0x4c, 0x49,
	0x4e, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52,
	0x43, 0x45, 0x5f, 0x42, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x44, 0x10, 0x08, 0x12, 0x30,
	0x0a, 0x2c, 0x50, 0x52, 0x45, 0x43, 0x49, 0x53, 0x45, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x42,
	0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x09,
	0x12, 0x36, 0x0a, 0x32, 0x50, 0x52, 0x45, 0x43, 0x49, 0x53, 0x45, 0x5f, 0x4c, 0x49, 0x4e, 0x4b,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45,
	0x5f, 0x42, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x4f, 0x4c, 0x4c, 0x49, 0x4e,
	0x47, 0x5f, 0x42, 0x41, 0x43, 0x4b, 0x10, 0x0a, 0x12, 0x39, 0x0a, 0x35, 0x50, 0x52, 0x45, 0x43,
	0x49, 0x53, 0x45, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x42, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54,
	0x45, 0x5f, 0x52, 0x4f, 0x4c, 0x4c, 0x42, 0x41, 0x43, 0x4b, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45,
	0x44, 0x10, 0x0b, 0x12, 0x3b, 0x0a, 0x37, 0x50, 0x52, 0x45, 0x43, 0x49, 0x53, 0x45, 0x5f, 0x4c,
	0x49, 0x4e, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55,
	0x52, 0x43, 0x45, 0x5f, 0x42, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x4f, 0x4c,
	0x4c, 0x42, 0x41, 0x43, 0x4b, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x0c,
	0x12, 0x37, 0x0a, 0x33, 0x50, 0x52, 0x45, 0x43, 0x49, 0x53, 0x45, 0x5f, 0x4c, 0x49, 0x4e, 0x4b,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x49, 0x4e, 0x47,
	0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x52, 0x59, 0x5f, 0x52, 0x45,
	0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x53, 0x10, 0x0d, 0x12, 0x36, 0x0a, 0x32, 0x50, 0x52, 0x45,
	0x43, 0x49, 0x53, 0x45, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x52, 0x59, 0x5f, 0x52, 0x45,
	0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x53, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x44, 0x10,
	0x0e, 0x12, 0x3c, 0x0a, 0x38, 0x50, 0x52, 0x45, 0x43, 0x49, 0x53, 0x45, 0x5f, 0x4c, 0x49, 0x4e,
	0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4d, 0x45,
	0x44, 0x49, 0x41, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x55,
	0x50, 0x44, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x0f, 0x12,
	0x41, 0x0a, 0x3d, 0x50, 0x52, 0x45, 0x43, 0x49, 0x53, 0x45, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4d, 0x45, 0x44, 0x49,
	0x41, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x55, 0x50, 0x44,
	0x41, 0x54, 0x45, 0x5f, 0x52, 0x4f, 0x4c, 0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x42, 0x41, 0x43, 0x4b,
	0x10, 0x10, 0x12, 0x44, 0x0a, 0x40, 0x50, 0x52, 0x45, 0x43, 0x49, 0x53, 0x45, 0x5f, 0x4c, 0x49,
	0x4e, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4d,
	0x45, 0x44, 0x49, 0x41, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f,
	0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x4f, 0x4c, 0x4c, 0x42, 0x41, 0x43, 0x4b, 0x5f,
	0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x11, 0x12, 0x46, 0x0a, 0x42, 0x50, 0x52, 0x45, 0x43,
	0x49, 0x53, 0x45, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x49, 0x4e, 0x54, 0x45, 0x52, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x53,
	0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x4f, 0x4c,
	0x4c, 0x42, 0x41, 0x43, 0x4b, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x12,
	0x32, 0x93, 0x23, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x58, 0x0a,
	0x0c, 0x47, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x21, 0x2e,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x76, 0x31,
	0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x76, 0x31, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x63, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21,
	0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x76,
	0x31, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x27, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x74, 0x79, 0x70, 0x65, 0x73, 0x76,
	0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x61, 0x0a, 0x11,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x73, 0x12, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x59, 0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x73,
	0x12, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x65, 0x0a, 0x13, 0x4c, 0x69,
	0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x73, 0x12, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x6d, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x56,
	0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x21, 0x2e, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x76, 0x31, 0x2e,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2d, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x76, 0x31, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x5c, 0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x76, 0x31, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5c,
	0x0a, 0x0e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x74, 0x72, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x12, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x79, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7d, 0x0a, 0x16,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x2f, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x72, 0x0a, 0x19, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x65, 0x0a, 0x11, 0x43, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x69,
	0x6e, 0x6b, 0x54, 0x6f, 0x12, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x6e, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x54, 0x6f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x72, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x74, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x73, 0x65, 0x64, 0x44,
	0x65, 0x70, 0x73, 0x12, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x53, 0x74, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x73, 0x65, 0x64, 0x44, 0x65, 0x70, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x73, 0x0a, 0x18, 0x49, 0x73,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x54, 0x65,
	0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x12, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x76, 0x31, 0x2e, 0x49, 0x73, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x54, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x5b, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x69, 0x0a, 0x1a,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x2e, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x76, 0x31, 0x2e, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x74, 0x79, 0x70, 0x65, 0x73, 0x76, 0x31, 0x2e, 0x54, 0x79,
	0x70, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x12, 0x21,
	0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1f, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x74, 0x79, 0x70, 0x65, 0x73, 0x76,
	0x31, 0x2e, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x5f, 0x0a, 0x0e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x24, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x74, 0x79, 0x70, 0x65, 0x73, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x74, 0x0a, 0x15, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x48, 0x61, 0x73, 0x53, 0x74, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x73, 0x65, 0x64, 0x12, 0x2b,
	0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x74, 0x79, 0x70, 0x65, 0x73, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x61, 0x73, 0x53, 0x74, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x73, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x74, 0x79, 0x70, 0x65, 0x73, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x48, 0x61, 0x73, 0x53, 0x74, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x73, 0x65,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x83, 0x01, 0x0a, 0x18,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x45, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x62, 0x0a, 0x0f, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x12, 0x25, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x74, 0x79, 0x70, 0x65, 0x73, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x74,
	0x72, 0x6f, 0x79, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6b, 0x0a, 0x10, 0x53, 0x74, 0x61, 0x67, 0x65, 0x4c, 0x69,
	0x6e, 0x6b, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x29, 0x2e, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61,
	0x67, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x6e,
	0x6b, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x72, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6e, 0x6b,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x12, 0x2b, 0x2e, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x72, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x12, 0x2b, 0x2e,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x76, 0x31,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x76, 0x31, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x98, 0x01, 0x0a, 0x1f, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x65,
	0x64, 0x69, 0x61, 0x72, 0x79, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x38,
	0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x76,
	0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x72, 0x79, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x72, 0x79, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6a, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x6e, 0x6b,
	0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x12, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2e, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x76, 0x31, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x61, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x2e, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x76, 0x31, 0x2e, 0x4c,
	0x69, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x74, 0x79, 0x70, 0x65, 0x73, 0x76, 0x31, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x74, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x41,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x41, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x52, 0x0a, 0x0b, 0x47, 0x65,
	0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x6e,
	0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x6e, 0x6b,
	0x4b, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x64,
	0x0a, 0x11, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x6d, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x74, 0x79, 0x70, 0x65, 0x73, 0x76, 0x31, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x5f, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x12, 0x23, 0x2e, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x76, 0x31, 0x2e,
	0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1f, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x74, 0x79, 0x70, 0x65, 0x73, 0x76,
	0x31, 0x2e, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x83, 0x01, 0x0a, 0x18, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x12, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x78, 0x0a, 0x1b, 0x47, 0x65,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74,
	0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x76,
	0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x74, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x12, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x68, 0x0a, 0x0f, 0x46, 0x65,
	0x74, 0x63, 0x68, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x28, 0x2e,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x76, 0x31,
	0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68,
	0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x74, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2b, 0x2e,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x76, 0x31,
	0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x76, 0x31, 0x2e, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x79, 0x0a, 0x20, 0x47, 0x65,
	0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b,
	0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x76,
	0x31, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x74, 0x79, 0x70, 0x65, 0x73, 0x76, 0x31, 0x2e, 0x54, 0x79, 0x70, 0x65,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x82, 0x01, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2b, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x56, 0x61, 0x72,
	0x69, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6f, 0x0a, 0x1d, 0x47, 0x65,
	0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x12, 0x2b, 0x2e, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x76, 0x31, 0x2e, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x74, 0x79, 0x70, 0x65, 0x73, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6e, 0x0a, 0x15, 0x47,
	0x65, 0x74, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x76, 0x31, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29,
	0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x74, 0x79, 0x70, 0x65, 0x73, 0x76, 0x31, 0x2e, 0x46,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x59, 0x0a, 0x0c, 0x43,
	0x61, 0x6c, 0x6c, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x2e, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x74, 0x79, 0x70, 0x65, 0x73, 0x76, 0x31, 0x2e, 0x46, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x23, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x74, 0x79, 0x70, 0x65, 0x73, 0x76, 0x31, 0x2e,
	0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x50, 0x5a, 0x49, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6e, 0x65, 0x77, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2d, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2f, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x69, 0x74, 0x79, 0x2f, 0x6c, 0x69, 0x62,
	0x73, 0x2f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2d, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f,
	0x72, 0x6b, 0x2f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x76, 0x31, 0x92, 0x03, 0x02, 0x08, 0x02, 0x62, 0x08, 0x65, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x70, 0xe8, 0x07,
})

var (
	file_plugin_framework_providerserverv1_provider_proto_rawDescOnce sync.Once
	file_plugin_framework_providerserverv1_provider_proto_rawDescData []byte
)

func file_plugin_framework_providerserverv1_provider_proto_rawDescGZIP() []byte {
	file_plugin_framework_providerserverv1_provider_proto_rawDescOnce.Do(func() {
		file_plugin_framework_providerserverv1_provider_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_plugin_framework_providerserverv1_provider_proto_rawDesc), len(file_plugin_framework_providerserverv1_provider_proto_rawDesc)))
	})
	return file_plugin_framework_providerserverv1_provider_proto_rawDescData
}

var file_plugin_framework_providerserverv1_provider_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_plugin_framework_providerserverv1_provider_proto_msgTypes = make([]protoimpl.MessageInfo, 86)
var file_plugin_framework_providerserverv1_provider_proto_goTypes = []any{
	(DataSourceSpecSchemaType)(0),                           // 0: providerserverv1.DataSourceSpecSchemaType
	(LinkPriorityResource)(0),                               // 1: providerserverv1.LinkPriorityResource
	(LinkKind)(0),                                           // 2: providerserverv1.LinkKind
	(LinkUpdateType)(0),                                     // 3: providerserverv1.LinkUpdateType
	(LinkStatus)(0),                                         // 4: providerserverv1.LinkStatus
	(PreciseLinkStatus)(0),                                  // 5: providerserverv1.PreciseLinkStatus
	(*NamespaceResponse)(nil),                               // 6: providerserverv1.NamespaceResponse
	(*Namespace)(nil),                                       // 7: providerserverv1.Namespace
	(*ResourceTypesResponse)(nil),                           // 8: providerserverv1.ResourceTypesResponse
	(*ResourceTypes)(nil),                                   // 9: providerserverv1.ResourceTypes
	(*LinkTypesResponse)(nil),                               // 10: providerserverv1.LinkTypesResponse
	(*LinkTypes)(nil),                                       // 11: providerserverv1.LinkTypes
	(*DataSourceTypesResponse)(nil),                         // 12: providerserverv1.DataSourceTypesResponse
	(*DataSourceTypes)(nil),                                 // 13: providerserverv1.DataSourceTypes
	(*CustomVariableTypesResponse)(nil),                     // 14: providerserverv1.CustomVariableTypesResponse
	(*CustomVariableTypes)(nil),                             // 15: providerserverv1.CustomVariableTypes
	(*FunctionListResponse)(nil),                            // 16: providerserverv1.FunctionListResponse
	(*FunctionList)(nil),                                    // 17: providerserverv1.FunctionList
	(*RetryPolicyResponse)(nil),                             // 18: providerserverv1.RetryPolicyResponse
	(*RetryPolicy)(nil),                                     // 19: providerserverv1.RetryPolicy
	(*CustomValidateResourceRequest)(nil),                   // 20: providerserverv1.CustomValidateResourceRequest
	(*CustomValidateResourceResponse)(nil),                  // 21: providerserverv1.CustomValidateResourceResponse
	(*CustomValidateResourceCompleteResponse)(nil),          // 22: providerserverv1.CustomValidateResourceCompleteResponse
	(*ResourceSpecDefinitionResponse)(nil),                  // 23: providerserverv1.ResourceSpecDefinitionResponse
	(*CanResourceLinkToResponse)(nil),                       // 24: providerserverv1.CanResourceLinkToResponse
	(*ResourceStabilisedDepsResponse)(nil),                  // 25: providerserverv1.ResourceStabilisedDepsResponse
	(*StabilisedDependencies)(nil),                          // 26: providerserverv1.StabilisedDependencies
	(*IsResourceCommonTerminalResponse)(nil),                // 27: providerserverv1.IsResourceCommonTerminalResponse
	(*GetResourceExternalStateRequest)(nil),                 // 28: providerserverv1.GetResourceExternalStateRequest
	(*GetResourceExternalStateResponse)(nil),                // 29: providerserverv1.GetResourceExternalStateResponse
	(*ProviderRequest)(nil),                                 // 30: providerserverv1.ProviderRequest
	(*ResourceRequest)(nil),                                 // 31: providerserverv1.ResourceRequest
	(*DataSourceRequest)(nil),                               // 32: providerserverv1.DataSourceRequest
	(*CustomVariableTypeRequest)(nil),                       // 33: providerserverv1.CustomVariableTypeRequest
	(*StageLinkChangesRequest)(nil),                         // 34: providerserverv1.StageLinkChangesRequest
	(*StageLinkChangesResponse)(nil),                        // 35: providerserverv1.StageLinkChangesResponse
	(*StageLinkChangesCompleteResponse)(nil),                // 36: providerserverv1.StageLinkChangesCompleteResponse
	(*UpdateLinkResourceRequest)(nil),                       // 37: providerserverv1.UpdateLinkResourceRequest
	(*UpdateLinkResourceResponse)(nil),                      // 38: providerserverv1.UpdateLinkResourceResponse
	(*UpdateLinkResourceCompleteResponse)(nil),              // 39: providerserverv1.UpdateLinkResourceCompleteResponse
	(*UpdateLinkIntermediaryResourcesRequest)(nil),          // 40: providerserverv1.UpdateLinkIntermediaryResourcesRequest
	(*UpdateLinkIntermediaryResourcesResponse)(nil),         // 41: providerserverv1.UpdateLinkIntermediaryResourcesResponse
	(*UpdateLinkIntermediaryResourcesCompleteResponse)(nil), // 42: providerserverv1.UpdateLinkIntermediaryResourcesCompleteResponse
	(*LinkPriorityResourceResponse)(nil),                    // 43: providerserverv1.LinkPriorityResourceResponse
	(*CustomValidateDataSourceRequest)(nil),                 // 44: providerserverv1.CustomValidateDataSourceRequest
	(*CustomValidateDataSourceResponse)(nil),                // 45: providerserverv1.CustomValidateDataSourceResponse
	(*CustomValidateDataSourceCompleteResponse)(nil),        // 46: providerserverv1.CustomValidateDataSourceCompleteResponse
	(*DataSourceSpecDefinitionResponse)(nil),                // 47: providerserverv1.DataSourceSpecDefinitionResponse
	(*DataSourceFilterFieldsResponse)(nil),                  // 48: providerserverv1.DataSourceFilterFieldsResponse
	(*FetchDataSourceRequest)(nil),                          // 49: providerserverv1.FetchDataSourceRequest
	(*FetchDataSourceResponse)(nil),                         // 50: providerserverv1.FetchDataSourceResponse
	(*CustomVariableTypeOptionsResponse)(nil),               // 51: providerserverv1.CustomVariableTypeOptionsResponse
	(*CustomVariableTypeOptions)(nil),                       // 52: providerserverv1.CustomVariableTypeOptions
	(*CustomVariableTypeOption)(nil),                        // 53: providerserverv1.CustomVariableTypeOption
	(*CustomVariableTypeResponse)(nil),                      // 54: providerserverv1.CustomVariableTypeResponse
	(*CustomVariableTypeInfo)(nil),                          // 55: providerserverv1.CustomVariableTypeInfo
	(*FetchDataSourceCompleteResponse)(nil),                 // 56: providerserverv1.FetchDataSourceCompleteResponse
	(*ResolvedDataSource)(nil),                              // 57: providerserverv1.ResolvedDataSource
	(*ResolvedDataSourceMetadata)(nil),                      // 58: providerserverv1.ResolvedDataSourceMetadata
	(*ResolvedDataSourceFilter)(nil),                        // 59: providerserverv1.ResolvedDataSourceFilter
	(*ResolvedDataSourceFilterSearch)(nil),                  // 60: providerserverv1.ResolvedDataSourceFilterSearch
	(*DataSourceFilterFields)(nil),                          // 61: providerserverv1.DataSourceFilterFields
	(*DataSourceFilterFieldSchema)(nil),                     // 62: providerserverv1.DataSourceFilterFieldSchema
	(*ResolvedDataSourceFieldExport)(nil),                   // 63: providerserverv1.ResolvedDataSourceFieldExport
	(*DataSourceSpecDefinition)(nil),                        // 64: providerserverv1.DataSourceSpecDefinition
	(*DataSourceSpecSchema)(nil),                            // 65: providerserverv1.DataSourceSpecSchema
	(*DataSourceTypeResponse)(nil),                          // 66: providerserverv1.DataSourceTypeResponse
	(*DataSourceTypeInfo)(nil),                              // 67: providerserverv1.DataSourceTypeInfo
	(*LinkPriorityResourceInfo)(nil),                        // 68: providerserverv1.LinkPriorityResourceInfo
	(*LinkKindResponse)(nil),                                // 69: providerserverv1.LinkKindResponse
	(*LinkKindInfo)(nil),                                    // 70: providerserverv1.LinkKindInfo
	(*LinkState)(nil),                                       // 71: providerserverv1.LinkState
	(*LinkIntermediaryResourceState)(nil),                   // 72: providerserverv1.LinkIntermediaryResourceState
	(*LinkCompletionDurations)(nil),                         // 73: providerserverv1.LinkCompletionDurations
	(*LinkComponentCompletionDurations)(nil),                // 74: providerserverv1.LinkComponentCompletionDurations
	(*LinkRequest)(nil),                                     // 75: providerserverv1.LinkRequest
	(*LinkAnnotationDefinitionsResponse)(nil),               // 76: providerserverv1.LinkAnnotationDefinitionsResponse
	(*LinkAnnotationDefinitions)(nil),                       // 77: providerserverv1.LinkAnnotationDefinitions
	(*LinkAnnotationDefinition)(nil),                        // 78: providerserverv1.LinkAnnotationDefinition
	(*LinkContext)(nil),                                     // 79: providerserverv1.LinkContext
	(*DataSourceType)(nil),                                  // 80: providerserverv1.DataSourceType
	(*CustomVariableType)(nil),                              // 81: providerserverv1.CustomVariableType
	(*LinkType)(nil),                                        // 82: providerserverv1.LinkType
	nil,                                                     // 83: providerserverv1.CustomVariableTypeOptions.OptionsEntry
	nil,                                                     // 84: providerserverv1.FetchDataSourceCompleteResponse.DataEntry
	nil,                                                     // 85: providerserverv1.ResolvedDataSource.ExportsEntry
	nil,                                                     // 86: providerserverv1.DataSourceFilterFields.FilterFieldsEntry
	nil,                                                     // 87: providerserverv1.DataSourceSpecDefinition.FieldsEntry
	nil,                                                     // 88: providerserverv1.LinkState.DataEntry
	nil,                                                     // 89: providerserverv1.LinkAnnotationDefinitions.DefinitionsEntry
	nil,                                                     // 90: providerserverv1.LinkContext.ProviderConfigVariablesEntry
	nil,                                                     // 91: providerserverv1.LinkContext.ContextVariablesEntry
	(*sharedtypesv1.ErrorResponse)(nil),                     // 92: sharedtypesv1.ErrorResponse
	(*sharedtypesv1.ResourceType)(nil),                      // 93: sharedtypesv1.ResourceType
	(*schemapb.Resource)(nil),                               // 94: schema.Resource
	(*sharedtypesv1.ProviderContext)(nil),                   // 95: sharedtypesv1.ProviderContext
	(*sharedtypesv1.Diagnostic)(nil),                        // 96: sharedtypesv1.Diagnostic
	(*sharedtypesv1.ResourceSpecDefinition)(nil),            // 97: sharedtypesv1.ResourceSpecDefinition
	(*sharedtypesv1.CanLinkTo)(nil),                         // 98: sharedtypesv1.CanLinkTo
	(*sharedtypesv1.ResourceCommonTerminalInfo)(nil),        // 99: sharedtypesv1.ResourceCommonTerminalInfo
	(*schemapb.MappingNode)(nil),                            // 100: schema.MappingNode
	(*sharedtypesv1.ResourceMetadataState)(nil),             // 101: sharedtypesv1.ResourceMetadataState
	(*sharedtypesv1.Changes)(nil),                           // 102: sharedtypesv1.Changes
	(*sharedtypesv1.LinkChanges)(nil),                       // 103: sharedtypesv1.LinkChanges
	(*sharedtypesv1.ResourceInfo)(nil),                      // 104: sharedtypesv1.ResourceInfo
	(*schemapb.DataSource)(nil),                             // 105: schema.DataSource
	(*schemapb.ScalarValue)(nil),                            // 106: schema.ScalarValue
	(sharedtypesv1.ResourceStatus)(0),                       // 107: sharedtypesv1.ResourceStatus
	(sharedtypesv1.PreciseResourceStatus)(0),                // 108: sharedtypesv1.PreciseResourceStatus
	(*wrapperspb.DoubleValue)(nil),                          // 109: google.protobuf.DoubleValue
	(sharedtypesv1.ScalarType)(0),                           // 110: sharedtypesv1.ScalarType
	(*sharedtypesv1.DeployResourceRequest)(nil),             // 111: sharedtypesv1.DeployResourceRequest
	(*sharedtypesv1.ResourceHasStabilisedRequest)(nil),      // 112: sharedtypesv1.ResourceHasStabilisedRequest
	(*sharedtypesv1.DestroyResourceRequest)(nil),            // 113: sharedtypesv1.DestroyResourceRequest
	(*sharedtypesv1.FunctionDefinitionRequest)(nil),         // 114: sharedtypesv1.FunctionDefinitionRequest
	(*sharedtypesv1.FunctionCallRequest)(nil),               // 115: sharedtypesv1.FunctionCallRequest
	(*sharedtypesv1.ConfigDefinitionResponse)(nil),          // 116: sharedtypesv1.ConfigDefinitionResponse
	(*sharedtypesv1.ResourceTypeResponse)(nil),              // 117: sharedtypesv1.ResourceTypeResponse
	(*sharedtypesv1.TypeDescriptionResponse)(nil),           // 118: sharedtypesv1.TypeDescriptionResponse
	(*sharedtypesv1.ExamplesResponse)(nil),                  // 119: sharedtypesv1.ExamplesResponse
	(*sharedtypesv1.DeployResourceResponse)(nil),            // 120: sharedtypesv1.DeployResourceResponse
	(*sharedtypesv1.ResourceHasStabilisedResponse)(nil),     // 121: sharedtypesv1.ResourceHasStabilisedResponse
	(*sharedtypesv1.DestroyResourceResponse)(nil),           // 122: sharedtypesv1.DestroyResourceResponse
	(*sharedtypesv1.FunctionDefinitionResponse)(nil),        // 123: sharedtypesv1.FunctionDefinitionResponse
	(*sharedtypesv1.FunctionCallResponse)(nil),              // 124: sharedtypesv1.FunctionCallResponse
}
var file_plugin_framework_providerserverv1_provider_proto_depIdxs = []int32{
	7,   // 0: providerserverv1.NamespaceResponse.namespace:type_name -> providerserverv1.Namespace
	92,  // 1: providerserverv1.NamespaceResponse.error_response:type_name -> sharedtypesv1.ErrorResponse
	9,   // 2: providerserverv1.ResourceTypesResponse.resource_types:type_name -> providerserverv1.ResourceTypes
	92,  // 3: providerserverv1.ResourceTypesResponse.error_response:type_name -> sharedtypesv1.ErrorResponse
	93,  // 4: providerserverv1.ResourceTypes.resource_types:type_name -> sharedtypesv1.ResourceType
	11,  // 5: providerserverv1.LinkTypesResponse.link_types:type_name -> providerserverv1.LinkTypes
	92,  // 6: providerserverv1.LinkTypesResponse.error_response:type_name -> sharedtypesv1.ErrorResponse
	82,  // 7: providerserverv1.LinkTypes.link_types:type_name -> providerserverv1.LinkType
	13,  // 8: providerserverv1.DataSourceTypesResponse.data_source_types:type_name -> providerserverv1.DataSourceTypes
	92,  // 9: providerserverv1.DataSourceTypesResponse.error_response:type_name -> sharedtypesv1.ErrorResponse
	80,  // 10: providerserverv1.DataSourceTypes.data_source_types:type_name -> providerserverv1.DataSourceType
	15,  // 11: providerserverv1.CustomVariableTypesResponse.custom_variable_types:type_name -> providerserverv1.CustomVariableTypes
	92,  // 12: providerserverv1.CustomVariableTypesResponse.error_response:type_name -> sharedtypesv1.ErrorResponse
	81,  // 13: providerserverv1.CustomVariableTypes.custom_variable_types:type_name -> providerserverv1.CustomVariableType
	17,  // 14: providerserverv1.FunctionListResponse.function_list:type_name -> providerserverv1.FunctionList
	92,  // 15: providerserverv1.FunctionListResponse.error_response:type_name -> sharedtypesv1.ErrorResponse
	19,  // 16: providerserverv1.RetryPolicyResponse.retry_policy:type_name -> providerserverv1.RetryPolicy
	92,  // 17: providerserverv1.RetryPolicyResponse.error_response:type_name -> sharedtypesv1.ErrorResponse
	93,  // 18: providerserverv1.CustomValidateResourceRequest.resource_type:type_name -> sharedtypesv1.ResourceType
	94,  // 19: providerserverv1.CustomValidateResourceRequest.schema_resource:type_name -> schema.Resource
	95,  // 20: providerserverv1.CustomValidateResourceRequest.context:type_name -> sharedtypesv1.ProviderContext
	22,  // 21: providerserverv1.CustomValidateResourceResponse.complete_response:type_name -> providerserverv1.CustomValidateResourceCompleteResponse
	92,  // 22: providerserverv1.CustomValidateResourceResponse.error_response:type_name -> sharedtypesv1.ErrorResponse
	96,  // 23: providerserverv1.CustomValidateResourceCompleteResponse.diagnostics:type_name -> sharedtypesv1.Diagnostic
	97,  // 24: providerserverv1.ResourceSpecDefinitionResponse.spec_definition:type_name -> sharedtypesv1.ResourceSpecDefinition
	92,  // 25: providerserverv1.ResourceSpecDefinitionResponse.error_response:type_name -> sharedtypesv1.ErrorResponse
	98,  // 26: providerserverv1.CanResourceLinkToResponse.resource_types:type_name -> sharedtypesv1.CanLinkTo
	92,  // 27: providerserverv1.CanResourceLinkToResponse.error_response:type_name -> sharedtypesv1.ErrorResponse
	26,  // 28: providerserverv1.ResourceStabilisedDepsResponse.stabilised_dependencies:type_name -> providerserverv1.StabilisedDependencies
	92,  // 29: providerserverv1.ResourceStabilisedDepsResponse.error_response:type_name -> sharedtypesv1.ErrorResponse
	93,  // 30: providerserverv1.StabilisedDependencies.resource_types:type_name -> sharedtypesv1.ResourceType
	99,  // 31: providerserverv1.IsResourceCommonTerminalResponse.data:type_name -> sharedtypesv1.ResourceCommonTerminalInfo
	92,  // 32: providerserverv1.IsResourceCommonTerminalResponse.error_response:type_name -> sharedtypesv1.ErrorResponse
	93,  // 33: providerserverv1.GetResourceExternalStateRequest.resource_type:type_name -> sharedtypesv1.ResourceType
	100, // 34: providerserverv1.GetResourceExternalStateRequest.current_resource_spec:type_name -> schema.MappingNode
	101, // 35: providerserverv1.GetResourceExternalStateRequest.current_resource_metadata:type_name -> sharedtypesv1.ResourceMetadataState
	95,  // 36: providerserverv1.GetResourceExternalStateRequest.context:type_name -> sharedtypesv1.ProviderContext
	100, // 37: providerserverv1.GetResourceExternalStateResponse.resource_spec_state:type_name -> schema.MappingNode
	92,  // 38: providerserverv1.GetResourceExternalStateResponse.error_response:type_name -> sharedtypesv1.ErrorResponse
	93,  // 39: providerserverv1.ResourceRequest.resource_type:type_name -> sharedtypesv1.ResourceType
	95,  // 40: providerserverv1.ResourceRequest.context:type_name -> sharedtypesv1.ProviderContext
	80,  // 41: providerserverv1.DataSourceRequest.data_source_type:type_name -> providerserverv1.DataSourceType
	95,  // 42: providerserverv1.DataSourceRequest.context:type_name -> sharedtypesv1.ProviderContext
	81,  // 43: providerserverv1.CustomVariableTypeRequest.custom_variable_type:type_name -> providerserverv1.CustomVariableType
	95,  // 44: providerserverv1.CustomVariableTypeRequest.context:type_name -> sharedtypesv1.ProviderContext
	82,  // 45: providerserverv1.StageLinkChangesRequest.link_type:type_name -> providerserverv1.LinkType
	102, // 46: providerserverv1.StageLinkChangesRequest.resource_a_changes:type_name -> sharedtypesv1.Changes
	102, // 47: providerserverv1.StageLinkChangesRequest.resource_b_changes:type_name -> sharedtypesv1.Changes
	71,  // 48: providerserverv1.StageLinkChangesRequest.current_link_state:type_name -> providerserverv1.LinkState
	79,  // 49: providerserverv1.StageLinkChangesRequest.context:type_name -> providerserverv1.LinkContext
	36,  // 50: providerserverv1.StageLinkChangesResponse.complete_response:type_name -> providerserverv1.StageLinkChangesCompleteResponse
	92,  // 51: providerserverv1.StageLinkChangesResponse.error_response:type_name -> sharedtypesv1.ErrorResponse
	103, // 52: providerserverv1.StageLinkChangesCompleteResponse.changes:type_name -> sharedtypesv1.LinkChanges
	82,  // 53: providerserverv1.UpdateLinkResourceRequest.link_type:type_name -> providerserverv1.LinkType
	103, // 54: providerserverv1.UpdateLinkResourceRequest.changes:type_name -> sharedtypesv1.LinkChanges
	104, // 55: providerserverv1.UpdateLinkResourceRequest.resource_info:type_name -> sharedtypesv1.ResourceInfo
	104, // 56: providerserverv1.UpdateLinkResourceRequest.other_resource_info:type_name -> sharedtypesv1.ResourceInfo
	3,   // 57: providerserverv1.UpdateLinkResourceRequest.update_type:type_name -> providerserverv1.LinkUpdateType
	79,  // 58: providerserverv1.UpdateLinkResourceRequest.context:type_name -> providerserverv1.LinkContext
	39,  // 59: providerserverv1.UpdateLinkResourceResponse.complete_response:type_name -> providerserverv1.UpdateLinkResourceCompleteResponse
	92,  // 60: providerserverv1.UpdateLinkResourceResponse.error_response:type_name -> sharedtypesv1.ErrorResponse
	100, // 61: providerserverv1.UpdateLinkResourceCompleteResponse.link_data:type_name -> schema.MappingNode
	82,  // 62: providerserverv1.UpdateLinkIntermediaryResourcesRequest.link_type:type_name -> providerserverv1.LinkType
	104, // 63: providerserverv1.UpdateLinkIntermediaryResourcesRequest.resource_a_info:type_name -> sharedtypesv1.ResourceInfo
	104, // 64: providerserverv1.UpdateLinkIntermediaryResourcesRequest.resource_b_info:type_name -> sharedtypesv1.ResourceInfo
	103, // 65: providerserverv1.UpdateLinkIntermediaryResourcesRequest.changes:type_name -> sharedtypesv1.LinkChanges
	3,   // 66: providerserverv1.UpdateLinkIntermediaryResourcesRequest.update_type:type_name -> providerserverv1.LinkUpdateType
	79,  // 67: providerserverv1.UpdateLinkIntermediaryResourcesRequest.context:type_name -> providerserverv1.LinkContext
	42,  // 68: providerserverv1.UpdateLinkIntermediaryResourcesResponse.complete_response:type_name -> providerserverv1.UpdateLinkIntermediaryResourcesCompleteResponse
	92,  // 69: providerserverv1.UpdateLinkIntermediaryResourcesResponse.error_response:type_name -> sharedtypesv1.ErrorResponse
	72,  // 70: providerserverv1.UpdateLinkIntermediaryResourcesCompleteResponse.intermediary_resource_states:type_name -> providerserverv1.LinkIntermediaryResourceState
	100, // 71: providerserverv1.UpdateLinkIntermediaryResourcesCompleteResponse.link_data:type_name -> schema.MappingNode
	68,  // 72: providerserverv1.LinkPriorityResourceResponse.priority_info:type_name -> providerserverv1.LinkPriorityResourceInfo
	92,  // 73: providerserverv1.LinkPriorityResourceResponse.error_response:type_name -> sharedtypesv1.ErrorResponse
	80,  // 74: providerserverv1.CustomValidateDataSourceRequest.data_source_type:type_name -> providerserverv1.DataSourceType
	105, // 75: providerserverv1.CustomValidateDataSourceRequest.schema_data_source:type_name -> schema.DataSource
	95,  // 76: providerserverv1.CustomValidateDataSourceRequest.context:type_name -> sharedtypesv1.ProviderContext
	46,  // 77: providerserverv1.CustomValidateDataSourceResponse.complete_response:type_name -> providerserverv1.CustomValidateDataSourceCompleteResponse
	92,  // 78: providerserverv1.CustomValidateDataSourceResponse.error_response:type_name -> sharedtypesv1.ErrorResponse
	96,  // 79: providerserverv1.CustomValidateDataSourceCompleteResponse.diagnostics:type_name -> sharedtypesv1.Diagnostic
	64,  // 80: providerserverv1.DataSourceSpecDefinitionResponse.spec_definition:type_name -> providerserverv1.DataSourceSpecDefinition
	92,  // 81: providerserverv1.DataSourceSpecDefinitionResponse.error_response:type_name -> sharedtypesv1.ErrorResponse
	61,  // 82: providerserverv1.DataSourceFilterFieldsResponse.filter_fields:type_name -> providerserverv1.DataSourceFilterFields
	92,  // 83: providerserverv1.DataSourceFilterFieldsResponse.error_response:type_name -> sharedtypesv1.ErrorResponse
	80,  // 84: providerserverv1.FetchDataSourceRequest.data_source_type:type_name -> providerserverv1.DataSourceType
	57,  // 85: providerserverv1.FetchDataSourceRequest.data_source_with_resolved_subs:type_name -> providerserverv1.ResolvedDataSource
	95,  // 86: providerserverv1.FetchDataSourceRequest.context:type_name -> sharedtypesv1.ProviderContext
	56,  // 87: providerserverv1.FetchDataSourceResponse.complete_response:type_name -> providerserverv1.FetchDataSourceCompleteResponse
	92,  // 88: providerserverv1.FetchDataSourceResponse.error_response:type_name -> sharedtypesv1.ErrorResponse
	52,  // 89: providerserverv1.CustomVariableTypeOptionsResponse.options:type_name -> providerserverv1.CustomVariableTypeOptions
	92,  // 90: providerserverv1.CustomVariableTypeOptionsResponse.error_response:type_name -> sharedtypesv1.ErrorResponse
	83,  // 91: providerserverv1.CustomVariableTypeOptions.options:type_name -> providerserverv1.CustomVariableTypeOptions.OptionsEntry
	106, // 92: providerserverv1.CustomVariableTypeOption.value:type_name -> schema.ScalarValue
	55,  // 93: providerserverv1.CustomVariableTypeResponse.custom_var_type_info:type_name -> providerserverv1.CustomVariableTypeInfo
	92,  // 94: providerserverv1.CustomVariableTypeResponse.error_response:type_name -> sharedtypesv1.ErrorResponse
	81,  // 95: providerserverv1.CustomVariableTypeInfo.type:type_name -> providerserverv1.CustomVariableType
	84,  // 96: providerserverv1.FetchDataSourceCompleteResponse.data:type_name -> providerserverv1.FetchDataSourceCompleteResponse.DataEntry
	80,  // 97: providerserverv1.ResolvedDataSource.type:type_name -> providerserverv1.DataSourceType
	58,  // 98: providerserverv1.ResolvedDataSource.data_source_metadata:type_name -> providerserverv1.ResolvedDataSourceMetadata
	59,  // 99: providerserverv1.ResolvedDataSource.filter:type_name -> providerserverv1.ResolvedDataSourceFilter
	85,  // 100: providerserverv1.ResolvedDataSource.exports:type_name -> providerserverv1.ResolvedDataSource.ExportsEntry
	100, // 101: providerserverv1.ResolvedDataSource.description:type_name -> schema.MappingNode
	100, // 102: providerserverv1.ResolvedDataSourceMetadata.display_name:type_name -> schema.MappingNode
	100, // 103: providerserverv1.ResolvedDataSourceMetadata.annotations:type_name -> schema.MappingNode
	100, // 104: providerserverv1.ResolvedDataSourceMetadata.custom:type_name -> schema.MappingNode
	106, // 105: providerserverv1.ResolvedDataSourceFilter.field:type_name -> schema.ScalarValue
	60,  // 106: providerserverv1.ResolvedDataSourceFilter.search:type_name -> providerserverv1.ResolvedDataSourceFilterSearch
	100, // 107: providerserverv1.ResolvedDataSourceFilterSearch.values:type_name -> schema.MappingNode
	86,  // 108: providerserverv1.DataSourceFilterFields.filter_fields:type_name -> providerserverv1.DataSourceFilterFields.FilterFieldsEntry
	106, // 109: providerserverv1.ResolvedDataSourceFieldExport.alias_for:type_name -> schema.ScalarValue
	100, // 110: providerserverv1.ResolvedDataSourceFieldExport.description:type_name -> schema.MappingNode
	87,  // 111: providerserverv1.DataSourceSpecDefinition.fields:type_name -> providerserverv1.DataSourceSpecDefinition.FieldsEntry
	0,   // 112: providerserverv1.DataSourceSpecSchema.type:type_name -> providerserverv1.DataSourceSpecSchemaType
	65,  // 113: providerserverv1.DataSourceSpecSchema.items:type_name -> providerserverv1.DataSourceSpecSchema
	67,  // 114: providerserverv1.DataSourceTypeResponse.data_source_type_info:type_name -> providerserverv1.DataSourceTypeInfo
	92,  // 115: providerserverv1.DataSourceTypeResponse.error_response:type_name -> sharedtypesv1.ErrorResponse
	80,  // 116: providerserverv1.DataSourceTypeInfo.type:type_name -> providerserverv1.DataSourceType
	1,   // 117: providerserverv1.LinkPriorityResourceInfo.priority_resource:type_name -> providerserverv1.LinkPriorityResource
	93,  // 118: providerserverv1.LinkPriorityResourceInfo.priority_resource_type:type_name -> sharedtypesv1.ResourceType
	70,  // 119: providerserverv1.LinkKindResponse.link_kind_info:type_name -> providerserverv1.LinkKindInfo
	92,  // 120: providerserverv1.LinkKindResponse.error_response:type_name -> sharedtypesv1.ErrorResponse
	2,   // 121: providerserverv1.LinkKindInfo.kind:type_name -> providerserverv1.LinkKind
	4,   // 122: providerserverv1.LinkState.status:type_name -> providerserverv1.LinkStatus
	5,   // 123: providerserverv1.LinkState.precise_status:type_name -> providerserverv1.PreciseLinkStatus
	72,  // 124: providerserverv1.LinkState.intermediary_resource_states:type_name -> providerserverv1.LinkIntermediaryResourceState
	88,  // 125: providerserverv1.LinkState.data:type_name -> providerserverv1.LinkState.DataEntry
	73,  // 126: providerserverv1.LinkState.durations:type_name -> providerserverv1.LinkCompletionDurations
	107, // 127: providerserverv1.LinkIntermediaryResourceState.status:type_name -> sharedtypesv1.ResourceStatus
	108, // 128: providerserverv1.LinkIntermediaryResourceState.precise_status:type_name -> sharedtypesv1.PreciseResourceStatus
	100, // 129: providerserverv1.LinkIntermediaryResourceState.resource_spec_data:type_name -> schema.MappingNode
	74,  // 130: providerserverv1.LinkCompletionDurations.resource_a_update:type_name -> providerserverv1.LinkComponentCompletionDurations
	74,  // 131: providerserverv1.LinkCompletionDurations.resource_b_update:type_name -> providerserverv1.LinkComponentCompletionDurations
	74,  // 132: providerserverv1.LinkCompletionDurations.intermediary_resources:type_name -> providerserverv1.LinkComponentCompletionDurations
	109, // 133: providerserverv1.LinkCompletionDurations.total_duration:type_name -> google.protobuf.DoubleValue
	109, // 134: providerserverv1.LinkComponentCompletionDurations.total_duration:type_name -> google.protobuf.DoubleValue
	82,  // 135: providerserverv1.LinkRequest.link_type:type_name -> providerserverv1.LinkType
	79,  // 136: providerserverv1.LinkRequest.context:type_name -> providerserverv1.LinkContext
	77,  // 137: providerserverv1.LinkAnnotationDefinitionsResponse.annotation_definitions:type_name -> providerserverv1.LinkAnnotationDefinitions
	92,  // 138: providerserverv1.LinkAnnotationDefinitionsResponse.error_response:type_name -> sharedtypesv1.ErrorResponse
	89,  // 139: providerserverv1.LinkAnnotationDefinitions.definitions:type_name -> providerserverv1.LinkAnnotationDefinitions.DefinitionsEntry
	110, // 140: providerserverv1.LinkAnnotationDefinition.type:type_name -> sharedtypesv1.ScalarType
	106, // 141: providerserverv1.LinkAnnotationDefinition.default_value:type_name -> schema.ScalarValue
	106, // 142: providerserverv1.LinkAnnotationDefinition.allowed_values:type_name -> schema.ScalarValue
	106, // 143: providerserverv1.LinkAnnotationDefinition.examples:type_name -> schema.ScalarValue
	90,  // 144: providerserverv1.LinkContext.provider_config_variables:type_name -> providerserverv1.LinkContext.ProviderConfigVariablesEntry
	91,  // 145: providerserverv1.LinkContext.context_variables:type_name -> providerserverv1.LinkContext.ContextVariablesEntry
	53,  // 146: providerserverv1.CustomVariableTypeOptions.OptionsEntry.value:type_name -> providerserverv1.CustomVariableTypeOption
	100, // 147: providerserverv1.FetchDataSourceCompleteResponse.DataEntry.value:type_name -> schema.MappingNode
	63,  // 148: providerserverv1.ResolvedDataSource.ExportsEntry.value:type_name -> providerserverv1.ResolvedDataSourceFieldExport
	62,  // 149: providerserverv1.DataSourceFilterFields.FilterFieldsEntry.value:type_name -> providerserverv1.DataSourceFilterFieldSchema
	65,  // 150: providerserverv1.DataSourceSpecDefinition.FieldsEntry.value:type_name -> providerserverv1.DataSourceSpecSchema
	100, // 151: providerserverv1.LinkState.DataEntry.value:type_name -> schema.MappingNode
	78,  // 152: providerserverv1.LinkAnnotationDefinitions.DefinitionsEntry.value:type_name -> providerserverv1.LinkAnnotationDefinition
	106, // 153: providerserverv1.LinkContext.ProviderConfigVariablesEntry.value:type_name -> schema.ScalarValue
	106, // 154: providerserverv1.LinkContext.ContextVariablesEntry.value:type_name -> schema.ScalarValue
	30,  // 155: providerserverv1.Provider.GetNamespace:input_type -> providerserverv1.ProviderRequest
	30,  // 156: providerserverv1.Provider.GetConfigDefinition:input_type -> providerserverv1.ProviderRequest
	30,  // 157: providerserverv1.Provider.ListResourceTypes:input_type -> providerserverv1.ProviderRequest
	30,  // 158: providerserverv1.Provider.ListLinkTypes:input_type -> providerserverv1.ProviderRequest
	30,  // 159: providerserverv1.Provider.ListDataSourceTypes:input_type -> providerserverv1.ProviderRequest
	30,  // 160: providerserverv1.Provider.ListCustomVariableTypes:input_type -> providerserverv1.ProviderRequest
	30,  // 161: providerserverv1.Provider.ListFunctions:input_type -> providerserverv1.ProviderRequest
	30,  // 162: providerserverv1.Provider.GetRetryPolicy:input_type -> providerserverv1.ProviderRequest
	20,  // 163: providerserverv1.Provider.CustomValidateResource:input_type -> providerserverv1.CustomValidateResourceRequest
	31,  // 164: providerserverv1.Provider.GetResourceSpecDefinition:input_type -> providerserverv1.ResourceRequest
	31,  // 165: providerserverv1.Provider.CanResourceLinkTo:input_type -> providerserverv1.ResourceRequest
	31,  // 166: providerserverv1.Provider.GetResourceStabilisedDeps:input_type -> providerserverv1.ResourceRequest
	31,  // 167: providerserverv1.Provider.IsResourceCommonTerminal:input_type -> providerserverv1.ResourceRequest
	31,  // 168: providerserverv1.Provider.GetResourceType:input_type -> providerserverv1.ResourceRequest
	31,  // 169: providerserverv1.Provider.GetResourceTypeDescription:input_type -> providerserverv1.ResourceRequest
	31,  // 170: providerserverv1.Provider.GetResourceExamples:input_type -> providerserverv1.ResourceRequest
	111, // 171: providerserverv1.Provider.DeployResource:input_type -> sharedtypesv1.DeployResourceRequest
	112, // 172: providerserverv1.Provider.ResourceHasStabilised:input_type -> sharedtypesv1.ResourceHasStabilisedRequest
	28,  // 173: providerserverv1.Provider.GetResourceExternalState:input_type -> providerserverv1.GetResourceExternalStateRequest
	113, // 174: providerserverv1.Provider.DestroyResource:input_type -> sharedtypesv1.DestroyResourceRequest
	34,  // 175: providerserverv1.Provider.StageLinkChanges:input_type -> providerserverv1.StageLinkChangesRequest
	37,  // 176: providerserverv1.Provider.UpdateLinkResourceA:input_type -> providerserverv1.UpdateLinkResourceRequest
	37,  // 177: providerserverv1.Provider.UpdateLinkResourceB:input_type -> providerserverv1.UpdateLinkResourceRequest
	40,  // 178: providerserverv1.Provider.UpdateLinkIntermediaryResources:input_type -> providerserverv1.UpdateLinkIntermediaryResourcesRequest
	75,  // 179: providerserverv1.Provider.GetLinkPriorityResource:input_type -> providerserverv1.LinkRequest
	75,  // 180: providerserverv1.Provider.GetLinkTypeDescription:input_type -> providerserverv1.LinkRequest
	75,  // 181: providerserverv1.Provider.GetLinkAnnotationDefinitions:input_type -> providerserverv1.LinkRequest
	75,  // 182: providerserverv1.Provider.GetLinkKind:input_type -> providerserverv1.LinkRequest
	32,  // 183: providerserverv1.Provider.GetDataSourceType:input_type -> providerserverv1.DataSourceRequest
	32,  // 184: providerserverv1.Provider.GetDataSourceTypeDescription:input_type -> providerserverv1.DataSourceRequest
	32,  // 185: providerserverv1.Provider.GetDataSourceExamples:input_type -> providerserverv1.DataSourceRequest
	44,  // 186: providerserverv1.Provider.CustomValidateDataSource:input_type -> providerserverv1.CustomValidateDataSourceRequest
	32,  // 187: providerserverv1.Provider.GetDataSourceSpecDefinition:input_type -> providerserverv1.DataSourceRequest
	32,  // 188: providerserverv1.Provider.GetDataSourceFilterFields:input_type -> providerserverv1.DataSourceRequest
	49,  // 189: providerserverv1.Provider.FetchDataSource:input_type -> providerserverv1.FetchDataSourceRequest
	33,  // 190: providerserverv1.Provider.GetCustomVariableType:input_type -> providerserverv1.CustomVariableTypeRequest
	33,  // 191: providerserverv1.Provider.GetCustomVariableTypeDescription:input_type -> providerserverv1.CustomVariableTypeRequest
	33,  // 192: providerserverv1.Provider.GetCustomVariableTypeOptions:input_type -> providerserverv1.CustomVariableTypeRequest
	33,  // 193: providerserverv1.Provider.GetCustomVariableTypeExamples:input_type -> providerserverv1.CustomVariableTypeRequest
	114, // 194: providerserverv1.Provider.GetFunctionDefinition:input_type -> sharedtypesv1.FunctionDefinitionRequest
	115, // 195: providerserverv1.Provider.CallFunction:input_type -> sharedtypesv1.FunctionCallRequest
	6,   // 196: providerserverv1.Provider.GetNamespace:output_type -> providerserverv1.NamespaceResponse
	116, // 197: providerserverv1.Provider.GetConfigDefinition:output_type -> sharedtypesv1.ConfigDefinitionResponse
	8,   // 198: providerserverv1.Provider.ListResourceTypes:output_type -> providerserverv1.ResourceTypesResponse
	10,  // 199: providerserverv1.Provider.ListLinkTypes:output_type -> providerserverv1.LinkTypesResponse
	12,  // 200: providerserverv1.Provider.ListDataSourceTypes:output_type -> providerserverv1.DataSourceTypesResponse
	14,  // 201: providerserverv1.Provider.ListCustomVariableTypes:output_type -> providerserverv1.CustomVariableTypesResponse
	16,  // 202: providerserverv1.Provider.ListFunctions:output_type -> providerserverv1.FunctionListResponse
	18,  // 203: providerserverv1.Provider.GetRetryPolicy:output_type -> providerserverv1.RetryPolicyResponse
	21,  // 204: providerserverv1.Provider.CustomValidateResource:output_type -> providerserverv1.CustomValidateResourceResponse
	23,  // 205: providerserverv1.Provider.GetResourceSpecDefinition:output_type -> providerserverv1.ResourceSpecDefinitionResponse
	24,  // 206: providerserverv1.Provider.CanResourceLinkTo:output_type -> providerserverv1.CanResourceLinkToResponse
	25,  // 207: providerserverv1.Provider.GetResourceStabilisedDeps:output_type -> providerserverv1.ResourceStabilisedDepsResponse
	27,  // 208: providerserverv1.Provider.IsResourceCommonTerminal:output_type -> providerserverv1.IsResourceCommonTerminalResponse
	117, // 209: providerserverv1.Provider.GetResourceType:output_type -> sharedtypesv1.ResourceTypeResponse
	118, // 210: providerserverv1.Provider.GetResourceTypeDescription:output_type -> sharedtypesv1.TypeDescriptionResponse
	119, // 211: providerserverv1.Provider.GetResourceExamples:output_type -> sharedtypesv1.ExamplesResponse
	120, // 212: providerserverv1.Provider.DeployResource:output_type -> sharedtypesv1.DeployResourceResponse
	121, // 213: providerserverv1.Provider.ResourceHasStabilised:output_type -> sharedtypesv1.ResourceHasStabilisedResponse
	29,  // 214: providerserverv1.Provider.GetResourceExternalState:output_type -> providerserverv1.GetResourceExternalStateResponse
	122, // 215: providerserverv1.Provider.DestroyResource:output_type -> sharedtypesv1.DestroyResourceResponse
	35,  // 216: providerserverv1.Provider.StageLinkChanges:output_type -> providerserverv1.StageLinkChangesResponse
	38,  // 217: providerserverv1.Provider.UpdateLinkResourceA:output_type -> providerserverv1.UpdateLinkResourceResponse
	38,  // 218: providerserverv1.Provider.UpdateLinkResourceB:output_type -> providerserverv1.UpdateLinkResourceResponse
	41,  // 219: providerserverv1.Provider.UpdateLinkIntermediaryResources:output_type -> providerserverv1.UpdateLinkIntermediaryResourcesResponse
	43,  // 220: providerserverv1.Provider.GetLinkPriorityResource:output_type -> providerserverv1.LinkPriorityResourceResponse
	118, // 221: providerserverv1.Provider.GetLinkTypeDescription:output_type -> sharedtypesv1.TypeDescriptionResponse
	76,  // 222: providerserverv1.Provider.GetLinkAnnotationDefinitions:output_type -> providerserverv1.LinkAnnotationDefinitionsResponse
	69,  // 223: providerserverv1.Provider.GetLinkKind:output_type -> providerserverv1.LinkKindResponse
	66,  // 224: providerserverv1.Provider.GetDataSourceType:output_type -> providerserverv1.DataSourceTypeResponse
	118, // 225: providerserverv1.Provider.GetDataSourceTypeDescription:output_type -> sharedtypesv1.TypeDescriptionResponse
	119, // 226: providerserverv1.Provider.GetDataSourceExamples:output_type -> sharedtypesv1.ExamplesResponse
	45,  // 227: providerserverv1.Provider.CustomValidateDataSource:output_type -> providerserverv1.CustomValidateDataSourceResponse
	47,  // 228: providerserverv1.Provider.GetDataSourceSpecDefinition:output_type -> providerserverv1.DataSourceSpecDefinitionResponse
	48,  // 229: providerserverv1.Provider.GetDataSourceFilterFields:output_type -> providerserverv1.DataSourceFilterFieldsResponse
	50,  // 230: providerserverv1.Provider.FetchDataSource:output_type -> providerserverv1.FetchDataSourceResponse
	54,  // 231: providerserverv1.Provider.GetCustomVariableType:output_type -> providerserverv1.CustomVariableTypeResponse
	118, // 232: providerserverv1.Provider.GetCustomVariableTypeDescription:output_type -> sharedtypesv1.TypeDescriptionResponse
	51,  // 233: providerserverv1.Provider.GetCustomVariableTypeOptions:output_type -> providerserverv1.CustomVariableTypeOptionsResponse
	119, // 234: providerserverv1.Provider.GetCustomVariableTypeExamples:output_type -> sharedtypesv1.ExamplesResponse
	123, // 235: providerserverv1.Provider.GetFunctionDefinition:output_type -> sharedtypesv1.FunctionDefinitionResponse
	124, // 236: providerserverv1.Provider.CallFunction:output_type -> sharedtypesv1.FunctionCallResponse
	196, // [196:237] is the sub-list for method output_type
	155, // [155:196] is the sub-list for method input_type
	155, // [155:155] is the sub-list for extension type_name
	155, // [155:155] is the sub-list for extension extendee
	0,   // [0:155] is the sub-list for field type_name
}

func init() { file_plugin_framework_providerserverv1_provider_proto_init() }
func file_plugin_framework_providerserverv1_provider_proto_init() {
	if File_plugin_framework_providerserverv1_provider_proto != nil {
		return
	}
	file_plugin_framework_providerserverv1_provider_proto_msgTypes[0].OneofWrappers = []any{
		(*NamespaceResponse_Namespace)(nil),
		(*NamespaceResponse_ErrorResponse)(nil),
	}
	file_plugin_framework_providerserverv1_provider_proto_msgTypes[2].OneofWrappers = []any{
		(*ResourceTypesResponse_ResourceTypes)(nil),
		(*ResourceTypesResponse_ErrorResponse)(nil),
	}
	file_plugin_framework_providerserverv1_provider_proto_msgTypes[4].OneofWrappers = []any{
		(*LinkTypesResponse_LinkTypes)(nil),
		(*LinkTypesResponse_ErrorResponse)(nil),
	}
	file_plugin_framework_providerserverv1_provider_proto_msgTypes[6].OneofWrappers = []any{
		(*DataSourceTypesResponse_DataSourceTypes)(nil),
		(*DataSourceTypesResponse_ErrorResponse)(nil),
	}
	file_plugin_framework_providerserverv1_provider_proto_msgTypes[8].OneofWrappers = []any{
		(*CustomVariableTypesResponse_CustomVariableTypes)(nil),
		(*CustomVariableTypesResponse_ErrorResponse)(nil),
	}
	file_plugin_framework_providerserverv1_provider_proto_msgTypes[10].OneofWrappers = []any{
		(*FunctionListResponse_FunctionList)(nil),
		(*FunctionListResponse_ErrorResponse)(nil),
	}
	file_plugin_framework_providerserverv1_provider_proto_msgTypes[12].OneofWrappers = []any{
		(*RetryPolicyResponse_RetryPolicy)(nil),
		(*RetryPolicyResponse_ErrorResponse)(nil),
	}
	file_plugin_framework_providerserverv1_provider_proto_msgTypes[15].OneofWrappers = []any{
		(*CustomValidateResourceResponse_CompleteResponse)(nil),
		(*CustomValidateResourceResponse_ErrorResponse)(nil),
	}
	file_plugin_framework_providerserverv1_provider_proto_msgTypes[17].OneofWrappers = []any{
		(*ResourceSpecDefinitionResponse_SpecDefinition)(nil),
		(*ResourceSpecDefinitionResponse_ErrorResponse)(nil),
	}
	file_plugin_framework_providerserverv1_provider_proto_msgTypes[18].OneofWrappers = []any{
		(*CanResourceLinkToResponse_ResourceTypes)(nil),
		(*CanResourceLinkToResponse_ErrorResponse)(nil),
	}
	file_plugin_framework_providerserverv1_provider_proto_msgTypes[19].OneofWrappers = []any{
		(*ResourceStabilisedDepsResponse_StabilisedDependencies)(nil),
		(*ResourceStabilisedDepsResponse_ErrorResponse)(nil),
	}
	file_plugin_framework_providerserverv1_provider_proto_msgTypes[21].OneofWrappers = []any{
		(*IsResourceCommonTerminalResponse_Data)(nil),
		(*IsResourceCommonTerminalResponse_ErrorResponse)(nil),
	}
	file_plugin_framework_providerserverv1_provider_proto_msgTypes[23].OneofWrappers = []any{
		(*GetResourceExternalStateResponse_ResourceSpecState)(nil),
		(*GetResourceExternalStateResponse_ErrorResponse)(nil),
	}
	file_plugin_framework_providerserverv1_provider_proto_msgTypes[29].OneofWrappers = []any{
		(*StageLinkChangesResponse_CompleteResponse)(nil),
		(*StageLinkChangesResponse_ErrorResponse)(nil),
	}
	file_plugin_framework_providerserverv1_provider_proto_msgTypes[32].OneofWrappers = []any{
		(*UpdateLinkResourceResponse_CompleteResponse)(nil),
		(*UpdateLinkResourceResponse_ErrorResponse)(nil),
	}
	file_plugin_framework_providerserverv1_provider_proto_msgTypes[35].OneofWrappers = []any{
		(*UpdateLinkIntermediaryResourcesResponse_CompleteResponse)(nil),
		(*UpdateLinkIntermediaryResourcesResponse_ErrorResponse)(nil),
	}
	file_plugin_framework_providerserverv1_provider_proto_msgTypes[37].OneofWrappers = []any{
		(*LinkPriorityResourceResponse_PriorityInfo)(nil),
		(*LinkPriorityResourceResponse_ErrorResponse)(nil),
	}
	file_plugin_framework_providerserverv1_provider_proto_msgTypes[39].OneofWrappers = []any{
		(*CustomValidateDataSourceResponse_CompleteResponse)(nil),
		(*CustomValidateDataSourceResponse_ErrorResponse)(nil),
	}
	file_plugin_framework_providerserverv1_provider_proto_msgTypes[41].OneofWrappers = []any{
		(*DataSourceSpecDefinitionResponse_SpecDefinition)(nil),
		(*DataSourceSpecDefinitionResponse_ErrorResponse)(nil),
	}
	file_plugin_framework_providerserverv1_provider_proto_msgTypes[42].OneofWrappers = []any{
		(*DataSourceFilterFieldsResponse_FilterFields)(nil),
		(*DataSourceFilterFieldsResponse_ErrorResponse)(nil),
	}
	file_plugin_framework_providerserverv1_provider_proto_msgTypes[44].OneofWrappers = []any{
		(*FetchDataSourceResponse_CompleteResponse)(nil),
		(*FetchDataSourceResponse_ErrorResponse)(nil),
	}
	file_plugin_framework_providerserverv1_provider_proto_msgTypes[45].OneofWrappers = []any{
		(*CustomVariableTypeOptionsResponse_Options)(nil),
		(*CustomVariableTypeOptionsResponse_ErrorResponse)(nil),
	}
	file_plugin_framework_providerserverv1_provider_proto_msgTypes[48].OneofWrappers = []any{
		(*CustomVariableTypeResponse_CustomVarTypeInfo)(nil),
		(*CustomVariableTypeResponse_ErrorResponse)(nil),
	}
	file_plugin_framework_providerserverv1_provider_proto_msgTypes[60].OneofWrappers = []any{
		(*DataSourceTypeResponse_DataSourceTypeInfo)(nil),
		(*DataSourceTypeResponse_ErrorResponse)(nil),
	}
	file_plugin_framework_providerserverv1_provider_proto_msgTypes[63].OneofWrappers = []any{
		(*LinkKindResponse_LinkKindInfo)(nil),
		(*LinkKindResponse_ErrorResponse)(nil),
	}
	file_plugin_framework_providerserverv1_provider_proto_msgTypes[70].OneofWrappers = []any{
		(*LinkAnnotationDefinitionsResponse_AnnotationDefinitions)(nil),
		(*LinkAnnotationDefinitionsResponse_ErrorResponse)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_plugin_framework_providerserverv1_provider_proto_rawDesc), len(file_plugin_framework_providerserverv1_provider_proto_rawDesc)),
			NumEnums:      6,
			NumMessages:   86,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_plugin_framework_providerserverv1_provider_proto_goTypes,
		DependencyIndexes: file_plugin_framework_providerserverv1_provider_proto_depIdxs,
		EnumInfos:         file_plugin_framework_providerserverv1_provider_proto_enumTypes,
		MessageInfos:      file_plugin_framework_providerserverv1_provider_proto_msgTypes,
	}.Build()
	File_plugin_framework_providerserverv1_provider_proto = out.File
	file_plugin_framework_providerserverv1_provider_proto_goTypes = nil
	file_plugin_framework_providerserverv1_provider_proto_depIdxs = nil
}
