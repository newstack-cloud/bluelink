{
  "id": "two-hundred/test",
  "displayName": "AWS",
  "version": "1.0.0",
  "protocolVersions": ["1.0"],
  "description": "AWS provider for the Deploy Engine including `resources`, `data sources`, `links` and `custom variable types` for interacting with AWs services.",
  "author": "Two Hundred",
  "repository": "https://github.com/two-hundred/celerity-provider-aws",
  "config": {
    "fields": {
      "accessKeyId": {
        "type": "string",
        "label": "Access Key ID",
        "description": "The access key Id to use to authenticate with AWS.",
        "required": true,
        "secret": false,
        "examples": ["AKIAIOSFODNN7EXAMPLE"]
      },
      "secretAccessKey": {
        "type": "string",
        "label": "Secret Access Key",
        "description": "The secret access key to use to authenticate with AWS.",
        "required": true,
        "secret": true
      },
      "someConfigField": {
        "type": "string",
        "label": "Some Config Field",
        "description": "Some config field description.",
        "required": false,
        "default": "Some value",
        "allowedValues": ["Some value", "Another value"],
        "secret": false
      }
    },
    "allowAdditionalFields": true
  },
  "resources": [
    {
      "type": "test/dynamodb/table",
      "label": "AWS DynamoDB Table",
      "summary": "A resource for managing an AWS DynamoDB table.",
      "description": "The resource type used to define a DynamoDB table that is deployed to AWS.",
      "specification": {
        "schema": {
          "type": "object",
          "label": "DynamoDBTableDefinition",
          "description": "The definition of an AWS DynamoDB table.",
          "nullable": false,
          "computed": false,
          "mustRecreate": false,
          "attributes": {
            "arn": {
              "type": "string",
              "label": "",
              "description": "The Amazon Resource Name (ARN) of the DynamoDB table.",
              "nullable": false,
              "computed": true,
              "mustRecreate": false
            },
            "tableName": {
              "type": "string",
              "label": "",
              "description": "The name of the DynamoDB table in the AWS system.",
              "nullable": false,
              "computed": false,
              "mustRecreate": false,
              "examples": ["Orders"]
            }
          },
          "required": ["tableName"]
        },
        "idField": "arn"
      },
      "examples": [
        "```yaml\nresources:\n  - type: test/dynamodb/table\n    name: Orders\n    properties:\n      tableName: Orders\n```",
        "```yaml\nresources:\n  - type: test/dynamodb/table\n    name: Orders\n    properties:\n      tableName: Orders\n      arn: arn:aws:dynamodb:us-west-2:123456789012:table/Orders\n```"
      ],
      "canLinkTo": []
    },
    {
      "type": "test/lambda/function",
      "label": "AWS Lambda Function",
      "summary": "A resource for managing an AWS Lambda function.",
      "description": "The resource type used to define a [Lambda function](https://docs.aws.amazon.com/lambda/latest/api/API_GetFunction.html) that is deployed to AWS.",
      "specification": {
        "schema": {
          "type": "object",
          "label": "LambdaFunctionDefinition",
          "description": "The definition of an AWS Lambda function.",
          "nullable": false,
          "computed": false,
          "mustRecreate": false,
          "attributes": {
            "arn": {
              "type": "string",
              "label": "",
              "description": "The Amazon Resource Name (ARN) of the Lambda function.",
              "nullable": false,
              "computed": true,
              "mustRecreate": false
            },
            "arrayField": {
              "type": "array",
              "label": "",
              "description": "An array field definition to test out rendering.",
              "nullable": false,
              "computed": false,
              "mustRecreate": false,
              "examples": [["item1", "item2"]],
              "listValues": {
                "type": "string",
                "label": "",
                "description": "An array item.",
                "nullable": false,
                "computed": false,
                "mustRecreate": false
              }
            },
            "functionName": {
              "type": "string",
              "label": "",
              "description": "The name of the Lambda function stored in the AWS system.",
              "nullable": false,
              "computed": false,
              "mustRecreate": false,
              "examples": ["ProcessOrders"]
            },
            "mapField": {
              "type": "map",
              "label": "",
              "description": "A map field definition to test out rendering.",
              "nullable": false,
              "computed": false,
              "mustRecreate": false,
              "examples": [
                {
                  "key1": "value1",
                  "key2": "value2"
                }
              ],
              "mapValues": {
                "type": "string",
                "label": "",
                "description": "A map value.",
                "nullable": false,
                "computed": false,
                "mustRecreate": false
              }
            },
            "nestedObject": {
              "type": "object",
              "label": "NestedObjectDefinition",
              "description": "A nested object definition to test out rendering.",
              "nullable": false,
              "computed": false,
              "mustRecreate": false,
              "attributes": {
                "nestedField": {
                  "type": "string",
                  "label": "",
                  "description": "A nested field.",
                  "nullable": false,
                  "computed": false,
                  "mustRecreate": false
                },
                "nestedField2": {
                  "type": "object",
                  "label": "DeeplyNestedObjectDefinition",
                  "description": "A deeply nested object.",
                  "nullable": false,
                  "computed": false,
                  "mustRecreate": false,
                  "attributes": {
                    "deeplyNestedField": {
                      "type": "string",
                      "label": "",
                      "description": "A deeply nested field.",
                      "nullable": false,
                      "computed": false,
                      "mustRecreate": false
                    }
                  },
                  "required": ["deeplyNestedField"]
                }
              },
              "required": ["nestedField"]
            },
            "unionField": {
              "type": "union",
              "label": "",
              "description": "A union field definition to test out rendering.",
              "nullable": false,
              "computed": false,
              "mustRecreate": false,
              "examples": [
                "string",
                123,
                [
                  {
                    "unionNestedField": "value"
                  }
                ]
              ],
              "oneOf": [
                {
                  "type": "string",
                  "label": "",
                  "description": "A string value.",
                  "nullable": false,
                  "computed": false,
                  "mustRecreate": false
                },
                {
                  "type": "integer",
                  "label": "",
                  "description": "An integer value.",
                  "nullable": false,
                  "computed": false,
                  "mustRecreate": false
                },
                {
                  "type": "array",
                  "label": "",
                  "description": "An array value.",
                  "nullable": false,
                  "computed": false,
                  "mustRecreate": false,
                  "listValues": {
                    "type": "object",
                    "label": "UnionNestedDefinition",
                    "description": "A definition nested in a union field.",
                    "nullable": false,
                    "computed": false,
                    "mustRecreate": false,
                    "attributes": {
                      "unionNestedField": {
                        "type": "string",
                        "label": "",
                        "description": "A union nested field.",
                        "nullable": false,
                        "computed": false,
                        "mustRecreate": false
                      }
                    },
                    "required": ["unionNestedField"]
                  }
                }
              ]
            }
          },
          "required": ["functionName"]
        },
        "idField": "arn"
      },
      "examples": [
        "```yaml\nresources:\n  - type: test/lambda/function\n    name: ProcessOrders\n    properties:\n      functionName: ProcessOrders\n```",
        "```yaml\nresources:\n  - type: test/lambda/function\n    name: ProcessOrders\n    properties:\n      functionName: ProcessOrders\n      arn: arn:aws:lambda:us-west-2:123456789012:function:ProcessOrders\n```",
        "Some example with `inline code`."
      ],
      "canLinkTo": [
        "test/dynamodb/table",
        "test2/dynamodb/table",
        "test/s3/bucket",
        "test/sqs/queue"
      ]
    }
  ],
  "links": [
    {
      "type": "test/lambda/function::test2/dynamodb/table",
      "summary": "A link between an AWS Lambda function and an AWS DynamoDB table.",
      "description": "A link between an AWS Lambda function and an AWS DynamoDB table.",
      "annotationDefinitions": {
        "test/lambda/function::aws.lambda.dynamodb.accessTables": {
          "name": "aws.lambda.dynamodb.accessTables",
          "label": "Access Tables",
          "type": "string",
          "description": "A comma-separated list of table names to apply the access type annotation value to.",
          "examples": ["Orders,Customers"],
          "required": false
        },
        "test/lambda/function::aws.lambda.dynamodb.accessType": {
          "name": "aws.dynamodb.lambda.accessType",
          "label": "Lambda Access Type",
          "type": "string",
          "description": "The type of access the Lambda function has to linked DynamoDB tables.",
          "default": "read",
          "allowedValues": ["read", "write"],
          "required": false
        }
      }
    }
  ],
  "dataSources": [
    {
      "type": "test/lambda/function",
      "label": "AWS Lambda Function",
      "summary": "An external data source for an AWS Lambda function.",
      "description": "An external data source that can be used to retrieve information about an AWS Lambda function.",
      "specification": {
        "fields": {
          "arn": {
            "type": "string",
            "description": "The Amazon Resource Name (ARN) of the Lambda function.",
            "nullable": false,
            "filterable": true
          },
          "functionName": {
            "type": "string",
            "description": "The name of the Lambda function stored in the AWS system.",
            "nullable": false,
            "filterable": true
          },
          "layers": {
            "type": "array",
            "description": "The layers attached to the Lambda function.",
            "nullable": true,
            "filterable": false
          }
        }
      },
      "examples": [
        "```yaml\ndataSources:\n  - type: test/lambda/function\n    name: ProcessOrders\n    properties:\n      functionName: ProcessOrders\n```",
        "```yaml\ndataSources:\n  - type: test/lambda/function\n    name: ProcessOrders\n    properties:\n      functionName: ProcessOrders\n      arn: arn:aws:lambda:us-west-2:123456789012:function:ProcessOrders\n```"
      ]
    }
  ],
  "customVarTypes": [
    {
      "type": "test/ec2/instanceType",
      "label": "Amazon EC2 Instance Type",
      "summary": "An Amazon EC2 instance type for a VM.",
      "description": "A custom variable type that represents an Amazon EC2 instance type for a virtual machine.",
      "options": {
        "t2.large": {
          "label": "t2.large",
          "value": "A t2.large instance type."
        },
        "t2.medium": {
          "label": "t2.medium",
          "value": "A t2.medium instance type."
        },
        "t2.micro": {
          "label": "t2.micro",
          "value": "A t2.micro instance type."
        },
        "t2.small": {
          "label": "t2.small",
          "value": "A t2.small instance type."
        }
      },
      "examples": [
        "```yaml\nvariables:\n  - name: instanceType\n    type: test/ec2/instanceType\n    value: t2.micro\n```",
        "```yaml\nvariables:\n  - name: instanceType\n    type: test/ec2/instanceType\n    value: t2.medium\n```"
      ]
    }
  ],
  "functions": [
    {
      "parameters": [
        {
          "paramType": "string",
          "label": "field1",
          "description": "The value of field1.",
          "allowNullValue": false,
          "optional": false,
          "valueTypeDefinition": {
            "type": "string",
            "label": "string"
          }
        },
        {
          "paramType": "string",
          "label": "field2",
          "description": "The value of field2.",
          "allowNullValue": false,
          "optional": false,
          "valueTypeDefinition": {
            "type": "string",
            "label": "string"
          }
        }
      ],
      "return": {
        "returnType": "object",
        "description": "The specific object type.",
        "valueTypeDefinition": {
          "type": "object",
          "label": "SpecificObjectType",
          "attributeValueTypeDefinitions": {
            "field1": {
              "type": "string",
              "description": "The value of field1.",
              "nullable": true
            },
            "field2": {
              "type": "object",
              "label": "NestedObjectType",
              "description": "The value of field2.",
              "attributeValueTypeDefinitions": {
                "nestedField": {
                  "type": "string",
                  "description": "The value of the nested field.",
                  "nullable": false
                }
              },
              "nullable": false
            }
          }
        }
      },
      "name": "create_specific_object_type",
      "summary": "Creates a specific object type.",
      "description": "Creates a specific object type.\n\n**Examples:**\n\n```plaintext\n${create_specific_object_type(\n  \"value1\",\n  \"value2\"\n)}\n```"
    },
    {
      "parameters": [],
      "return": {
        "returnType": "function",
        "description": "A function that takes variadic arguments and returns a list of strings.",
        "valueTypeDefinition": {
          "type": "function",
          "label": "VariadicArgsFunction",
          "functionDefinition": {
            "parameters": [
              {
                "paramType": "list",
                "label": "args",
                "description": "The variadic arguments.",
                "allowNullValue": false,
                "optional": true,
                "valueTypeDefinition": {
                  "type": "string",
                  "label": "string",
                  "description": "A value of string type."
                },
                "singleType": true,
                "named": true
              }
            ],
            "return": {
              "returnType": "list",
              "description": "The result of the function.",
              "elementValueTypeDefinition": {
                "type": "string",
                "label": "string",
                "description": "A value of string type."
              }
            }
          }
        }
      },
      "name": "produce_variadic_func",
      "summary": "Creates a function that takes a variadic number of arguments.",
      "description": "Creates a function that takes a variadic number of arguments.\n\n**Examples:**\n\n```plaintext\n${produce_variadic_func()}\n```"
    },
    {
      "parameters": [
        {
          "paramType": "any",
          "label": "value",
          "description": "The value to stringify.",
          "allowNullValue": false,
          "optional": false,
          "unionValueTypeDefinitions": [
            {
              "type": "string",
              "label": "string",
              "description": "A value of string type."
            },
            {
              "type": "int64",
              "label": "int64",
              "description": "A value of int64 type."
            },
            {
              "type": "float64",
              "label": "float64",
              "description": "A value of float64 type."
            },
            {
              "type": "bool",
              "label": "boolean",
              "description": "A value of boolean type."
            },
            {
              "type": "function",
              "label": "FunctionToStringify",
              "functionDefinition": {
                "parameters": [
                  {
                    "paramType": "string",
                    "label": "input",
                    "description": "The input to the function.",
                    "allowNullValue": false,
                    "optional": false,
                    "valueTypeDefinition": {
                      "type": "string"
                    }
                  }
                ],
                "return": {
                  "returnType": "map",
                  "description": "The output of the function.",
                  "mapValueTypeDefinition": {
                    "type": "string",
                    "label": "string",
                    "description": "A value of string type."
                  }
                }
              }
            }
          ]
        }
      ],
      "return": {
        "returnType": "string",
        "description": "The stringified value.",
        "valueTypeDefinition": {
          "type": "string",
          "label": "string",
          "description": "A value of string type."
        }
      },
      "name": "stringify",
      "summary": "Stringifies a value that can be one of a number of types.",
      "description": "Stringifies a value that can be one of a number of types.\n\n**Examples:**\n\n```plaintext\n${stringify(variables.someVariable)}\n```"
    },
    {
      "parameters": [
        {
          "paramType": "bool",
          "label": "a",
          "description": "The result of boolean expression A, the left-hand side of the AND operation.",
          "allowNullValue": false,
          "optional": false,
          "valueTypeDefinition": {
            "type": "bool"
          }
        },
        {
          "paramType": "bool",
          "label": "b",
          "description": "The result of boolean expression B, the right-hand side of the AND operation.",
          "allowNullValue": false,
          "optional": false,
          "valueTypeDefinition": {
            "type": "bool"
          }
        }
      ],
      "return": {
        "returnType": "bool",
        "description": "The result of the logical AND operation on the two boolean values.",
        "valueTypeDefinition": {
          "type": "bool"
        }
      },
      "name": "and",
      "summary": "A function that acts as a logical AND operator on two boolean values.",
      "description": "A function that acts as a logical AND operator on two boolean values.\n\n**Examples:**\n\n```plaintext\n${and(resources.orderApi.spec.isProd, eq(variables.environment, \"prod\")}\n```"
    },
    {
      "parameters": [
        {
          "paramType": "list",
          "label": "functions",
          "description": "N functions to be composed together.",
          "allowNullValue": false,
          "optional": true,
          "valueTypeDefinition": {
            "type": "function",
            "label": "Function",
            "description": "A function that takes an input value and returns an output value that can be passed to the next function in the composition.",
            "functionDefinition": {
              "parameters": [
                {
                  "paramType": "any",
                  "label": "input",
                  "description": "The input to the function",
                  "allowNullValue": false,
                  "optional": false
                }
              ],
              "return": {
                "returnType": "any",
                "description": "The output of the function."
              }
            }
          },
          "singleType": true
        }
      ],
      "return": {
        "returnType": "function",
        "description": "A function that takes the input value of the right-most function and returns the output value of the left-most function.",
        "valueTypeDefinition": {
          "type": "function",
          "label": "ComposedFunction",
          "functionDefinition": {
            "parameters": [
              {
                "paramType": "any",
                "label": "input",
                "description": "The input of the composed function, this must be of the same type of the input of the right-most function in the composition.",
                "allowNullValue": false,
                "optional": false
              }
            ],
            "return": {
              "returnType": "any",
              "description": "The output of the composed function, this must be the same type of the return value of the left-most function in the composition."
            }
          }
        }
      },
      "name": "compose",
      "summary": "A higher-order function that combines N functions into a single function.",
      "description": "A higher-order function that combines N functions into a single function, where the output of one function is passed in as the input to the previous function. The call order of the functions is from right to left.\n\n**Examples:**\n\n```plaintext\n${map(\n  datasources.network.subnets,\n  compose(to_upper, getattr(\"id\"))\n)}\n```"
    },
    {
      "parameters": [
        {
          "paramType": "list",
          "label": "items",
          "description": "An array of items where all items are of the same type to filter.",
          "allowNullValue": false,
          "optional": false,
          "elementValueTypeDefinition": {
            "type": "any",
            "label": "any",
            "description": "A value of any type, every element in the containing list must be of the same type."
          }
        },
        {
          "paramType": "function",
          "label": "filterFunc",
          "description": "The predicate function to check if each item in the list meets a certain criteria.",
          "allowNullValue": false,
          "optional": false,
          "valueTypeDefinition": {
            "type": "function",
            "functionDefinition": {
              "parameters": [
                {
                  "paramType": "any",
                  "label": "item",
                  "description": "The item to check.",
                  "allowNullValue": false,
                  "optional": false
                },
                {
                  "paramType": "int64",
                  "label": "index",
                  "description": "The index of the item in the list.",
                  "allowNullValue": false,
                  "optional": true,
                  "valueTypeDefinition": {
                    "type": "int64"
                  }
                }
              ],
              "return": {
                "returnType": "bool",
                "description": "Whether or not the item meets the criteria.",
                "valueTypeDefinition": {
                  "type": "bool",
                  "label": "boolean"
                }
              }
            }
          }
        }
      ],
      "return": {
        "returnType": "list",
        "description": "The list of values that remain after applying the filter.",
        "elementValueTypeDefinition": {
          "type": "any",
          "label": "any",
          "description": "A value of any type, every element in the returned list must be of the same type."
        }
      },
      "name": "filter",
      "summary": "Filters a list of values based on a predicate function.",
      "description": "Filters a list of values based on a predicate function.\n\n**Examples:**\n\n```plaintext\n${filter(\n  datasources.network.subnets,\n  has_prefix_g(\"subnet-402948-\")\n)}\n```"
    }
  ]
}
