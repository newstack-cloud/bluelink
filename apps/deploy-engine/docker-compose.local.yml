services:
  bluelink-deploy-engine:
    build:
      context: .
      dockerfile: Dockerfile.local
    networks:
      - bluelink_deploy_engine_network
    depends_on:
      oidc-local-server:
        condition: service_started
      deploy_engine_local_postgres_migrate:
        condition: service_completed_successfully
    container_name: bluelink-deploy-engine
    ports:
      - 8325:8325
    environment:
      BLUELINK_DEPLOY_ENGINE_VERSON: ${BLUELINK_DEPLOY_ENGINE_VERSION}
      BLUELINK_DEPLOY_ENGINE_LOOPBACK_ONLY: ${BLUELINK_DEPLOY_ENGINE_LOOPBACK_ONLY}
      BLUELINK_DEPLOY_ENGINE_ENVIRONMENT: ${BLUELINK_DEPLOY_ENGINE_ENVIRONMENT}
      BLUELINK_DEPLOY_ENGINE_LOG_LEVEL: ${BLUELINK_DEPLOY_ENGINE_LOG_LEVEL}
      BLUELINK_DEPLOY_ENGINE_AUTH_OAUTH2_OIDC_JWT_ISSUER: ${BLUELINK_DEPLOY_ENGINE_AUTH_OAUTH2_OIDC_JWT_ISSUER}
      BLUELINK_DEPLOY_ENGINE_AUTH_OAUTH2_OIDC_JWT_ISSUER_SECURE: ${BLUELINK_DEPLOY_ENGINE_AUTH_OAUTH2_OIDC_JWT_ISSUER_SECURE}
      BLUELINK_DEPLOY_ENGINE_AUTH_OAUTH2_OIDC_JWT_AUDIENCE: ${BLUELINK_DEPLOY_ENGINE_AUTH_OAUTH2_OIDC_JWT_AUDIENCE}
      BLUELINK_DEPLOY_ENGINE_AUTH_OAUTH2_OIDC_JWT_SIGNATURE_ALGORITHM: ${BLUELINK_DEPLOY_ENGINE_AUTH_OAUTH2_OIDC_JWT_SIGNATURE_ALGORITHM}
      BLUELINK_DEPLOY_ENGINE_AUTH_BLUELINK_SIGNATURE_V1_KEY_PAIRS: ${BLUELINK_DEPLOY_ENGINE_AUTH_BLUELINK_SIGNATURE_V1_KEY_PAIRS}
      BLUELINK_DEPLOY_ENGINE_AUTH_BLUELINK_API_KEYS: ${BLUELINK_DEPLOY_ENGINE_AUTH_BLUELINK_API_KEYS}
      BLUELINK_DEPLOY_ENGINE_STATE_STORAGE_ENGINE: ${BLUELINK_DEPLOY_ENGINE_STATE_STORAGE_ENGINE}
      BLUELINK_DEPLOY_ENGINE_STATE_POSTGRES_USER: ${BLUELINK_DEPLOY_ENGINE_STATE_POSTGRES_USER}
      BLUELINK_DEPLOY_ENGINE_STATE_POSTGRES_PASSWORD: ${BLUELINK_DEPLOY_ENGINE_STATE_POSTGRES_PASSWORD}
      BLUELINK_DEPLOY_ENGINE_STATE_POSTGRES_HOST: ${BLUELINK_DEPLOY_ENGINE_STATE_POSTGRES_HOST}
      BLUELINK_DEPLOY_ENGINE_STATE_POSTGRES_PORT: ${BLUELINK_DEPLOY_ENGINE_STATE_POSTGRES_PORT}
      BLUELINK_DEPLOY_ENGINE_STATE_POSTGRES_DATABASE: ${BLUELINK_DEPLOY_ENGINE_STATE_POSTGRES_DATABASE}
    volumes:
      - ./:/app/bluelink_deploy_engine

  oidc-local-server:
    build:
      context: ./tools/oidc-local-server
      dockerfile: Dockerfile
    container_name: oidc-local-server
    networks:
      - bluelink_deploy_engine_network
    ports:
      - "8023:80"
    environment:
      OIDC_CLIENT_ID: "test-client"
      OIDC_CLIENT_SECRET: "test-secret"

  deploy_engine_local_postgres:
    image: postgres:17.3
    container_name: deploy_engine_local_postgres
    networks:
      - bluelink_deploy_engine_network
    restart: always
    shm_size: 128mb
    environment:
      POSTGRES_DB: ${BLUELINK_DEPLOY_ENGINE_STATE_POSTGRES_DATABASE}
      POSTGRES_PASSWORD: ${BLUELINK_DEPLOY_ENGINE_STATE_POSTGRES_PASSWORD}
      POSTGRES_USER: ${BLUELINK_DEPLOY_ENGINE_STATE_POSTGRES_USER}
    ports:
      - 45432:5432
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d ${BLUELINK_DEPLOY_ENGINE_STATE_POSTGRES_DATABASE} -U ${BLUELINK_DEPLOY_ENGINE_STATE_POSTGRES_USER}"]
      interval: 15s
      timeout: 5s
      retries: 5
      start_period: 30s

  deploy_engine_local_postgres_migrate:
    image: migrate/migrate:v4.18.2
    networks:
      - bluelink_deploy_engine_network
    command:
      [
        "-path",
        "/migrations",
        "-database",
        "pgx5://${BLUELINK_DEPLOY_ENGINE_STATE_POSTGRES_USER}:${BLUELINK_DEPLOY_ENGINE_STATE_POSTGRES_PASSWORD}@${BLUELINK_DEPLOY_ENGINE_STATE_POSTGRES_HOST}:5432/${BLUELINK_DEPLOY_ENGINE_STATE_POSTGRES_DATABASE}?sslmode=disable",
        "up",
      ]
    links:
      - deploy_engine_local_postgres
    depends_on:
      deploy_engine_local_postgres:
        condition: service_healthy
    volumes:
      - ./postgres/migrations:/migrations

  adminer:
    image: adminer
    restart: always
    networks:
      - bluelink_deploy_engine_network
    ports:
      - 8080:8080

networks:
  BLUELINK_deploy_engine_network:
    name: bluelink_deploy_engine_network
