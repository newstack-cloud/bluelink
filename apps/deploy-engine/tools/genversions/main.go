package main

import (
	"fmt"
	"log"
	"os"

	"golang.org/x/mod/modfile"
)

const (
	blueprintFrameworkPath = "github.com/two-hundred/celerity/libs/blueprint"
	pluginFrameworkPath    = "github.com/two-hundred/celerity/libs/plugin-framework"
)

func main() {
	fmt.Println("Generating versions.go ...")

	// This is expected to be populated by the build process with the version
	// derived from the git tag for the current workflow or similar.
	deployEngineVersion := os.Getenv("DEPLOY_ENGINE_APPLICATION_VERSION")
	if deployEngineVersion == "" {
		// "dev" is a safe default version to use for local development and testing
		// environments where the version will not be set.
		deployEngineVersion = "dev"
	}

	dependencyVersions, err := parseDependencyVersions()
	if err != nil {
		log.Fatalf("error parsing dependency versions: %s", err)
	}

	versionsCode := fmt.Sprintf(`// Code generated by go generate; DO NOT EDIT.
package core

const (
	// The version of the deploy engine software.
	deployEngineVersion = %q
	// The version of the blueprint framework used by the deploy engine.
	blueprintFrameworkVersion = %q
	// The version of the plugin framework used by the deploy engine.
	pluginFrameworkVersion = %q
)
`,
		deployEngineVersion,
		dependencyVersions.blueprintFrameworkVersion,
		dependencyVersions.pluginFrameworkVersion,
	)

	err = os.WriteFile(("versions.go"), []byte(versionsCode), 0644)
	if err != nil {
		log.Fatal(err)
	}
}

type depVersions struct {
	blueprintFrameworkVersion string
	pluginFrameworkVersion    string
}

func parseDependencyVersions() (depVersions, error) {
	fileBytes, err := os.ReadFile("../go.mod")
	if err != nil {
		return depVersions{}, err
	}

	parsed, err := modfile.Parse("go.mod", fileBytes, nil)
	if err != nil {
		return depVersions{}, err
	}
	blueprintFrameworkVersion := findVersion(parsed, blueprintFrameworkPath)
	pluginFrameworkVersion := findVersion(parsed, pluginFrameworkPath)

	return depVersions{
		blueprintFrameworkVersion: blueprintFrameworkVersion,
		pluginFrameworkVersion:    pluginFrameworkVersion,
	}, nil
}

func findVersion(parsed *modfile.File, path string) string {
	for _, require := range parsed.Require {
		if require.Mod.Path == path {
			return require.Mod.Version
		}
	}
	return ""
}
